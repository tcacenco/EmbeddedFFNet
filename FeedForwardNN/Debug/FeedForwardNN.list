
FeedForwardNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b684  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
  3 .rodata       00000270  0800b80c  0800b80c  0001b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ba7c  0800ba7c  000201e4  2**0
                  CONTENTS
  5 .ARM          00000008  0800ba7c  0800ba7c  0001ba7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800ba84  0800ba84  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800ba84  0800ba84  0001ba84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800ba88  0800ba88  0001ba88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001e4  20000000  0800ba8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001c8c  200001e4  0800bc70  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001e70  0800bc70  00021e70  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8dc  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004248  00000000  00000000  0003aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  0003ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d68  00000000  00000000  0003fc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000252de  00000000  00000000  000409b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001608b  00000000  00000000  00065c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae27  00000000  00000000  0007bd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00146b48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000433c  00000000  00000000  00146b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b7f4 	.word	0x0800b7f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	0800b7f4 	.word	0x0800b7f4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	; 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ldivmod>:
 8000d30:	b97b      	cbnz	r3, 8000d52 <__aeabi_ldivmod+0x22>
 8000d32:	b972      	cbnz	r2, 8000d52 <__aeabi_ldivmod+0x22>
 8000d34:	2900      	cmp	r1, #0
 8000d36:	bfbe      	ittt	lt
 8000d38:	2000      	movlt	r0, #0
 8000d3a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000d3e:	e006      	blt.n	8000d4e <__aeabi_ldivmod+0x1e>
 8000d40:	bf08      	it	eq
 8000d42:	2800      	cmpeq	r0, #0
 8000d44:	bf1c      	itt	ne
 8000d46:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d4a:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4e:	f000 ba23 	b.w	8001198 <__aeabi_idiv0>
 8000d52:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d56:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5a:	2900      	cmp	r1, #0
 8000d5c:	db09      	blt.n	8000d72 <__aeabi_ldivmod+0x42>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db1a      	blt.n	8000d98 <__aeabi_ldivmod+0x68>
 8000d62:	f000 f8b7 	bl	8000ed4 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4770      	bx	lr
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db1b      	blt.n	8000db4 <__aeabi_ldivmod+0x84>
 8000d7c:	f000 f8aa 	bl	8000ed4 <__udivmoddi4>
 8000d80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d88:	b004      	add	sp, #16
 8000d8a:	4240      	negs	r0, r0
 8000d8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d90:	4252      	negs	r2, r2
 8000d92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d96:	4770      	bx	lr
 8000d98:	4252      	negs	r2, r2
 8000d9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d9e:	f000 f899 	bl	8000ed4 <__udivmoddi4>
 8000da2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000daa:	b004      	add	sp, #16
 8000dac:	4240      	negs	r0, r0
 8000dae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db2:	4770      	bx	lr
 8000db4:	4252      	negs	r2, r2
 8000db6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dba:	f000 f88b 	bl	8000ed4 <__udivmoddi4>
 8000dbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dc6:	b004      	add	sp, #16
 8000dc8:	4252      	negs	r2, r2
 8000dca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_uldivmod>:
 8000dd0:	b953      	cbnz	r3, 8000de8 <__aeabi_uldivmod+0x18>
 8000dd2:	b94a      	cbnz	r2, 8000de8 <__aeabi_uldivmod+0x18>
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	bf08      	it	eq
 8000dd8:	2800      	cmpeq	r0, #0
 8000dda:	bf1c      	itt	ne
 8000ddc:	f04f 31ff 	movne.w	r1, #4294967295
 8000de0:	f04f 30ff 	movne.w	r0, #4294967295
 8000de4:	f000 b9d8 	b.w	8001198 <__aeabi_idiv0>
 8000de8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000df0:	f000 f870 	bl	8000ed4 <__udivmoddi4>
 8000df4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dfc:	b004      	add	sp, #16
 8000dfe:	4770      	bx	lr

08000e00 <__aeabi_f2lz>:
 8000e00:	ee07 0a90 	vmov	s15, r0
 8000e04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0c:	d401      	bmi.n	8000e12 <__aeabi_f2lz+0x12>
 8000e0e:	f000 b823 	b.w	8000e58 <__aeabi_f2ulz>
 8000e12:	eef1 7a67 	vneg.f32	s15, s15
 8000e16:	b508      	push	{r3, lr}
 8000e18:	ee17 0a90 	vmov	r0, s15
 8000e1c:	f000 f81c 	bl	8000e58 <__aeabi_f2ulz>
 8000e20:	4240      	negs	r0, r0
 8000e22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e26:	bd08      	pop	{r3, pc}

08000e28 <__aeabi_d2lz>:
 8000e28:	b538      	push	{r3, r4, r5, lr}
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	460d      	mov	r5, r1
 8000e32:	f7ff fdff 	bl	8000a34 <__aeabi_dcmplt>
 8000e36:	b928      	cbnz	r0, 8000e44 <__aeabi_d2lz+0x1c>
 8000e38:	4620      	mov	r0, r4
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e40:	f000 b82a 	b.w	8000e98 <__aeabi_d2ulz>
 8000e44:	4620      	mov	r0, r4
 8000e46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000e4a:	f000 f825 	bl	8000e98 <__aeabi_d2ulz>
 8000e4e:	4240      	negs	r0, r0
 8000e50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e54:	bd38      	pop	{r3, r4, r5, pc}
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2ulz>:
 8000e58:	b5d0      	push	{r4, r6, r7, lr}
 8000e5a:	f7ff fb21 	bl	80004a0 <__aeabi_f2d>
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__aeabi_f2ulz+0x38>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	4606      	mov	r6, r0
 8000e64:	460f      	mov	r7, r1
 8000e66:	f7ff fb73 	bl	8000550 <__aeabi_dmul>
 8000e6a:	f7ff fe33 	bl	8000ad4 <__aeabi_d2uiz>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	f7ff faf4 	bl	800045c <__aeabi_ui2d>
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <__aeabi_f2ulz+0x3c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	f7ff fb6a 	bl	8000550 <__aeabi_dmul>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4630      	mov	r0, r6
 8000e82:	4639      	mov	r1, r7
 8000e84:	f7ff f9ac 	bl	80001e0 <__aeabi_dsub>
 8000e88:	f7ff fe24 	bl	8000ad4 <__aeabi_d2uiz>
 8000e8c:	4621      	mov	r1, r4
 8000e8e:	bdd0      	pop	{r4, r6, r7, pc}
 8000e90:	3df00000 	.word	0x3df00000
 8000e94:	41f00000 	.word	0x41f00000

08000e98 <__aeabi_d2ulz>:
 8000e98:	b5d0      	push	{r4, r6, r7, lr}
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__aeabi_d2ulz+0x34>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	4606      	mov	r6, r0
 8000ea0:	460f      	mov	r7, r1
 8000ea2:	f7ff fb55 	bl	8000550 <__aeabi_dmul>
 8000ea6:	f7ff fe15 	bl	8000ad4 <__aeabi_d2uiz>
 8000eaa:	4604      	mov	r4, r0
 8000eac:	f7ff fad6 	bl	800045c <__aeabi_ui2d>
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <__aeabi_d2ulz+0x38>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f7ff fb4c 	bl	8000550 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4630      	mov	r0, r6
 8000ebe:	4639      	mov	r1, r7
 8000ec0:	f7ff f98e 	bl	80001e0 <__aeabi_dsub>
 8000ec4:	f7ff fe06 	bl	8000ad4 <__aeabi_d2uiz>
 8000ec8:	4621      	mov	r1, r4
 8000eca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ecc:	3df00000 	.word	0x3df00000
 8000ed0:	41f00000 	.word	0x41f00000

08000ed4 <__udivmoddi4>:
 8000ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed8:	9d08      	ldr	r5, [sp, #32]
 8000eda:	4604      	mov	r4, r0
 8000edc:	468c      	mov	ip, r1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8083 	bne.w	8000fea <__udivmoddi4+0x116>
 8000ee4:	428a      	cmp	r2, r1
 8000ee6:	4617      	mov	r7, r2
 8000ee8:	d947      	bls.n	8000f7a <__udivmoddi4+0xa6>
 8000eea:	fab2 f282 	clz	r2, r2
 8000eee:	b142      	cbz	r2, 8000f02 <__udivmoddi4+0x2e>
 8000ef0:	f1c2 0020 	rsb	r0, r2, #32
 8000ef4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	4097      	lsls	r7, r2
 8000efc:	ea40 0c01 	orr.w	ip, r0, r1
 8000f00:	4094      	lsls	r4, r2
 8000f02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f06:	0c23      	lsrs	r3, r4, #16
 8000f08:	fbbc f6f8 	udiv	r6, ip, r8
 8000f0c:	fa1f fe87 	uxth.w	lr, r7
 8000f10:	fb08 c116 	mls	r1, r8, r6, ip
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f10e 	mul.w	r1, r6, lr
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d909      	bls.n	8000f34 <__udivmoddi4+0x60>
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f26:	f080 8119 	bcs.w	800115c <__udivmoddi4+0x288>
 8000f2a:	4299      	cmp	r1, r3
 8000f2c:	f240 8116 	bls.w	800115c <__udivmoddi4+0x288>
 8000f30:	3e02      	subs	r6, #2
 8000f32:	443b      	add	r3, r7
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f48:	45a6      	cmp	lr, r4
 8000f4a:	d909      	bls.n	8000f60 <__udivmoddi4+0x8c>
 8000f4c:	193c      	adds	r4, r7, r4
 8000f4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f52:	f080 8105 	bcs.w	8001160 <__udivmoddi4+0x28c>
 8000f56:	45a6      	cmp	lr, r4
 8000f58:	f240 8102 	bls.w	8001160 <__udivmoddi4+0x28c>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	443c      	add	r4, r7
 8000f60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f64:	eba4 040e 	sub.w	r4, r4, lr
 8000f68:	2600      	movs	r6, #0
 8000f6a:	b11d      	cbz	r5, 8000f74 <__udivmoddi4+0xa0>
 8000f6c:	40d4      	lsrs	r4, r2
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e9c5 4300 	strd	r4, r3, [r5]
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	b902      	cbnz	r2, 8000f7e <__udivmoddi4+0xaa>
 8000f7c:	deff      	udf	#255	; 0xff
 8000f7e:	fab2 f282 	clz	r2, r2
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d150      	bne.n	8001028 <__udivmoddi4+0x154>
 8000f86:	1bcb      	subs	r3, r1, r7
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	fa1f f887 	uxth.w	r8, r7
 8000f90:	2601      	movs	r6, #1
 8000f92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000f96:	0c21      	lsrs	r1, r4, #16
 8000f98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000f9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	d907      	bls.n	8000fb8 <__udivmoddi4+0xe4>
 8000fa8:	1879      	adds	r1, r7, r1
 8000faa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000fae:	d202      	bcs.n	8000fb6 <__udivmoddi4+0xe2>
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	f200 80e9 	bhi.w	8001188 <__udivmoddi4+0x2b4>
 8000fb6:	4684      	mov	ip, r0
 8000fb8:	1ac9      	subs	r1, r1, r3
 8000fba:	b2a3      	uxth	r3, r4
 8000fbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fc4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000fc8:	fb08 f800 	mul.w	r8, r8, r0
 8000fcc:	45a0      	cmp	r8, r4
 8000fce:	d907      	bls.n	8000fe0 <__udivmoddi4+0x10c>
 8000fd0:	193c      	adds	r4, r7, r4
 8000fd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fd6:	d202      	bcs.n	8000fde <__udivmoddi4+0x10a>
 8000fd8:	45a0      	cmp	r8, r4
 8000fda:	f200 80d9 	bhi.w	8001190 <__udivmoddi4+0x2bc>
 8000fde:	4618      	mov	r0, r3
 8000fe0:	eba4 0408 	sub.w	r4, r4, r8
 8000fe4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000fe8:	e7bf      	b.n	8000f6a <__udivmoddi4+0x96>
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0x12e>
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	f000 80b1 	beq.w	8001156 <__udivmoddi4+0x282>
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	e9c5 0100 	strd	r0, r1, [r5]
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001002:	fab3 f683 	clz	r6, r3
 8001006:	2e00      	cmp	r6, #0
 8001008:	d14a      	bne.n	80010a0 <__udivmoddi4+0x1cc>
 800100a:	428b      	cmp	r3, r1
 800100c:	d302      	bcc.n	8001014 <__udivmoddi4+0x140>
 800100e:	4282      	cmp	r2, r0
 8001010:	f200 80b8 	bhi.w	8001184 <__udivmoddi4+0x2b0>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb61 0103 	sbc.w	r1, r1, r3
 800101a:	2001      	movs	r0, #1
 800101c:	468c      	mov	ip, r1
 800101e:	2d00      	cmp	r5, #0
 8001020:	d0a8      	beq.n	8000f74 <__udivmoddi4+0xa0>
 8001022:	e9c5 4c00 	strd	r4, ip, [r5]
 8001026:	e7a5      	b.n	8000f74 <__udivmoddi4+0xa0>
 8001028:	f1c2 0320 	rsb	r3, r2, #32
 800102c:	fa20 f603 	lsr.w	r6, r0, r3
 8001030:	4097      	lsls	r7, r2
 8001032:	fa01 f002 	lsl.w	r0, r1, r2
 8001036:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800103a:	40d9      	lsrs	r1, r3
 800103c:	4330      	orrs	r0, r6
 800103e:	0c03      	lsrs	r3, r0, #16
 8001040:	fbb1 f6fe 	udiv	r6, r1, lr
 8001044:	fa1f f887 	uxth.w	r8, r7
 8001048:	fb0e 1116 	mls	r1, lr, r6, r1
 800104c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001050:	fb06 f108 	mul.w	r1, r6, r8
 8001054:	4299      	cmp	r1, r3
 8001056:	fa04 f402 	lsl.w	r4, r4, r2
 800105a:	d909      	bls.n	8001070 <__udivmoddi4+0x19c>
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	f106 3cff 	add.w	ip, r6, #4294967295
 8001062:	f080 808d 	bcs.w	8001180 <__udivmoddi4+0x2ac>
 8001066:	4299      	cmp	r1, r3
 8001068:	f240 808a 	bls.w	8001180 <__udivmoddi4+0x2ac>
 800106c:	3e02      	subs	r6, #2
 800106e:	443b      	add	r3, r7
 8001070:	1a5b      	subs	r3, r3, r1
 8001072:	b281      	uxth	r1, r0
 8001074:	fbb3 f0fe 	udiv	r0, r3, lr
 8001078:	fb0e 3310 	mls	r3, lr, r0, r3
 800107c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001080:	fb00 f308 	mul.w	r3, r0, r8
 8001084:	428b      	cmp	r3, r1
 8001086:	d907      	bls.n	8001098 <__udivmoddi4+0x1c4>
 8001088:	1879      	adds	r1, r7, r1
 800108a:	f100 3cff 	add.w	ip, r0, #4294967295
 800108e:	d273      	bcs.n	8001178 <__udivmoddi4+0x2a4>
 8001090:	428b      	cmp	r3, r1
 8001092:	d971      	bls.n	8001178 <__udivmoddi4+0x2a4>
 8001094:	3802      	subs	r0, #2
 8001096:	4439      	add	r1, r7
 8001098:	1acb      	subs	r3, r1, r3
 800109a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800109e:	e778      	b.n	8000f92 <__udivmoddi4+0xbe>
 80010a0:	f1c6 0c20 	rsb	ip, r6, #32
 80010a4:	fa03 f406 	lsl.w	r4, r3, r6
 80010a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80010ac:	431c      	orrs	r4, r3
 80010ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80010b2:	fa01 f306 	lsl.w	r3, r1, r6
 80010b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80010ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80010be:	431f      	orrs	r7, r3
 80010c0:	0c3b      	lsrs	r3, r7, #16
 80010c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010c6:	fa1f f884 	uxth.w	r8, r4
 80010ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80010ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80010d2:	fb09 fa08 	mul.w	sl, r9, r8
 80010d6:	458a      	cmp	sl, r1
 80010d8:	fa02 f206 	lsl.w	r2, r2, r6
 80010dc:	fa00 f306 	lsl.w	r3, r0, r6
 80010e0:	d908      	bls.n	80010f4 <__udivmoddi4+0x220>
 80010e2:	1861      	adds	r1, r4, r1
 80010e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80010e8:	d248      	bcs.n	800117c <__udivmoddi4+0x2a8>
 80010ea:	458a      	cmp	sl, r1
 80010ec:	d946      	bls.n	800117c <__udivmoddi4+0x2a8>
 80010ee:	f1a9 0902 	sub.w	r9, r9, #2
 80010f2:	4421      	add	r1, r4
 80010f4:	eba1 010a 	sub.w	r1, r1, sl
 80010f8:	b2bf      	uxth	r7, r7
 80010fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80010fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8001102:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001106:	fb00 f808 	mul.w	r8, r0, r8
 800110a:	45b8      	cmp	r8, r7
 800110c:	d907      	bls.n	800111e <__udivmoddi4+0x24a>
 800110e:	19e7      	adds	r7, r4, r7
 8001110:	f100 31ff 	add.w	r1, r0, #4294967295
 8001114:	d22e      	bcs.n	8001174 <__udivmoddi4+0x2a0>
 8001116:	45b8      	cmp	r8, r7
 8001118:	d92c      	bls.n	8001174 <__udivmoddi4+0x2a0>
 800111a:	3802      	subs	r0, #2
 800111c:	4427      	add	r7, r4
 800111e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001122:	eba7 0708 	sub.w	r7, r7, r8
 8001126:	fba0 8902 	umull	r8, r9, r0, r2
 800112a:	454f      	cmp	r7, r9
 800112c:	46c6      	mov	lr, r8
 800112e:	4649      	mov	r1, r9
 8001130:	d31a      	bcc.n	8001168 <__udivmoddi4+0x294>
 8001132:	d017      	beq.n	8001164 <__udivmoddi4+0x290>
 8001134:	b15d      	cbz	r5, 800114e <__udivmoddi4+0x27a>
 8001136:	ebb3 020e 	subs.w	r2, r3, lr
 800113a:	eb67 0701 	sbc.w	r7, r7, r1
 800113e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001142:	40f2      	lsrs	r2, r6
 8001144:	ea4c 0202 	orr.w	r2, ip, r2
 8001148:	40f7      	lsrs	r7, r6
 800114a:	e9c5 2700 	strd	r2, r7, [r5]
 800114e:	2600      	movs	r6, #0
 8001150:	4631      	mov	r1, r6
 8001152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001156:	462e      	mov	r6, r5
 8001158:	4628      	mov	r0, r5
 800115a:	e70b      	b.n	8000f74 <__udivmoddi4+0xa0>
 800115c:	4606      	mov	r6, r0
 800115e:	e6e9      	b.n	8000f34 <__udivmoddi4+0x60>
 8001160:	4618      	mov	r0, r3
 8001162:	e6fd      	b.n	8000f60 <__udivmoddi4+0x8c>
 8001164:	4543      	cmp	r3, r8
 8001166:	d2e5      	bcs.n	8001134 <__udivmoddi4+0x260>
 8001168:	ebb8 0e02 	subs.w	lr, r8, r2
 800116c:	eb69 0104 	sbc.w	r1, r9, r4
 8001170:	3801      	subs	r0, #1
 8001172:	e7df      	b.n	8001134 <__udivmoddi4+0x260>
 8001174:	4608      	mov	r0, r1
 8001176:	e7d2      	b.n	800111e <__udivmoddi4+0x24a>
 8001178:	4660      	mov	r0, ip
 800117a:	e78d      	b.n	8001098 <__udivmoddi4+0x1c4>
 800117c:	4681      	mov	r9, r0
 800117e:	e7b9      	b.n	80010f4 <__udivmoddi4+0x220>
 8001180:	4666      	mov	r6, ip
 8001182:	e775      	b.n	8001070 <__udivmoddi4+0x19c>
 8001184:	4630      	mov	r0, r6
 8001186:	e74a      	b.n	800101e <__udivmoddi4+0x14a>
 8001188:	f1ac 0c02 	sub.w	ip, ip, #2
 800118c:	4439      	add	r1, r7
 800118e:	e713      	b.n	8000fb8 <__udivmoddi4+0xe4>
 8001190:	3802      	subs	r0, #2
 8001192:	443c      	add	r4, r7
 8001194:	e724      	b.n	8000fe0 <__udivmoddi4+0x10c>
 8001196:	bf00      	nop

08001198 <__aeabi_idiv0>:
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <v_LoadFloatModel>:
#include	"DataTransfer.h"

// TODO: TESTAR TUDO NOVAMENTE

void v_LoadFloatModel(netparam_t* xNetParam, float** WBPtr)
{
 800119c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a0:	b098      	sub	sp, #96	; 0x60
 80011a2:	af12      	add	r7, sp, #72	; 0x48
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
	uint16_t	i;
	uint32_t	values = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
	uint8_t* 	DataPtr;

	DataPtr = (uint8_t*)BASEADDR_FLOATMODEL;
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <v_LoadFloatModel+0xb4>)
 80011ae:	60fb      	str	r3, [r7, #12]

	memcpy(xNetParam, DataPtr, sizeof(*xNetParam));
 80011b0:	2254      	movs	r2, #84	; 0x54
 80011b2:	68f9      	ldr	r1, [r7, #12]
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f00a f871 	bl	800b29c <memcpy>

	v_FloatSetParameters(*xNetParam);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	f04f 0800 	mov.w	r8, #0
 80011c2:	4690      	mov	r8, r2
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	2600      	movs	r6, #0
 80011c8:	4616      	mov	r6, r2
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	2500      	movs	r5, #0
 80011ce:	4615      	mov	r5, r2
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	2400      	movs	r4, #0
 80011d4:	4614      	mov	r4, r2
 80011d6:	4668      	mov	r0, sp
 80011d8:	3310      	adds	r3, #16
 80011da:	2244      	movs	r2, #68	; 0x44
 80011dc:	4619      	mov	r1, r3
 80011de:	f00a f85d 	bl	800b29c <memcpy>
 80011e2:	4640      	mov	r0, r8
 80011e4:	4631      	mov	r1, r6
 80011e6:	462a      	mov	r2, r5
 80011e8:	4623      	mov	r3, r4
 80011ea:	f000 f9fb 	bl	80015e4 <v_FloatSetParameters>
	v_DynamicAlloc_NeuronVar(WBPtr);
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f000 fa9a 	bl	8001728 <v_DynamicAlloc_NeuronVar>

	for (i = 0; i < (xNetParam->Layers - 1); i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	82fb      	strh	r3, [r7, #22]
 80011f8:	e014      	b.n	8001224 <v_LoadFloatModel+0x88>
	{
		values += ((1 + xNetParam->NonLayer[i]) * xNetParam->NonLayer[i + 1]);
 80011fa:	8afb      	ldrh	r3, [r7, #22]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	889b      	ldrh	r3, [r3, #4]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	8afb      	ldrh	r3, [r7, #22]
 8001208:	3301      	adds	r3, #1
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	440b      	add	r3, r1
 8001210:	889b      	ldrh	r3, [r3, #4]
 8001212:	fb03 f302 	mul.w	r3, r3, r2
 8001216:	461a      	mov	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4413      	add	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < (xNetParam->Layers - 1); i++)
 800121e:	8afb      	ldrh	r3, [r7, #22]
 8001220:	3301      	adds	r3, #1
 8001222:	82fb      	strh	r3, [r7, #22]
 8001224:	8afa      	ldrh	r2, [r7, #22]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	885b      	ldrh	r3, [r3, #2]
 800122a:	3b01      	subs	r3, #1
 800122c:	429a      	cmp	r2, r3
 800122e:	dbe4      	blt.n	80011fa <v_LoadFloatModel+0x5e>
	}

	memcpy(*WBPtr, &DataPtr[sizeof(*xNetParam)], (values * sizeof(float)));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	461a      	mov	r2, r3
 8001240:	f00a f82c 	bl	800b29c <memcpy>
}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800124e:	bf00      	nop
 8001250:	080c0000 	.word	0x080c0000

08001254 <v_LoadIntModel>:
//	fwrite(WBPtr, sizeof(float), values, FPtr);
//	fclose(FPtr);
//}

void v_LoadIntModel(netparam_t *xNetParam, distribution_t *xDistribution, quantizedval_t *xQuantizedVal)
{
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b09c      	sub	sp, #112	; 0x70
 8001258:	af14      	add	r7, sp, #80	; 0x50
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	uint16_t	i;
	uint32_t	values = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
	uint8_t*	DataPtr;

	DataPtr = (uint8_t*)BASEADDR_INTMODEL;
 8001264:	4ba7      	ldr	r3, [pc, #668]	; (8001504 <v_LoadIntModel+0x2b0>)
 8001266:	617b      	str	r3, [r7, #20]

	memcpy(xNetParam, DataPtr, sizeof(*xNetParam));
 8001268:	2254      	movs	r2, #84	; 0x54
 800126a:	6979      	ldr	r1, [r7, #20]
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f00a f815 	bl	800b29c <memcpy>

	v_DynamicAlloc_quant(xQuantizedVal, xDistribution, *xNetParam);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	2500      	movs	r5, #0
 8001278:	4615      	mov	r5, r2
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	2400      	movs	r4, #0
 800127e:	4614      	mov	r4, r2
 8001280:	4668      	mov	r0, sp
 8001282:	3308      	adds	r3, #8
 8001284:	224c      	movs	r2, #76	; 0x4c
 8001286:	4619      	mov	r1, r3
 8001288:	f00a f808 	bl	800b29c <memcpy>
 800128c:	462a      	mov	r2, r5
 800128e:	4623      	mov	r3, r4
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fc36 	bl	8001b04 <v_DynamicAlloc_quant>

	for (i = 0; i < (xNetParam->Layers - 1); i++)
 8001298:	2300      	movs	r3, #0
 800129a:	83fb      	strh	r3, [r7, #30]
 800129c:	e014      	b.n	80012c8 <v_LoadIntModel+0x74>
	{
		values += ((1 + xNetParam->NonLayer[i]) * xNetParam->NonLayer[i + 1]);
 800129e:	8bfb      	ldrh	r3, [r7, #30]
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	889b      	ldrh	r3, [r3, #4]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	8bfb      	ldrh	r3, [r7, #30]
 80012ac:	3301      	adds	r3, #1
 80012ae:	68f9      	ldr	r1, [r7, #12]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	440b      	add	r3, r1
 80012b4:	889b      	ldrh	r3, [r3, #4]
 80012b6:	fb03 f302 	mul.w	r3, r3, r2
 80012ba:	461a      	mov	r2, r3
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	4413      	add	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < (xNetParam->Layers - 1); i++)
 80012c2:	8bfb      	ldrh	r3, [r7, #30]
 80012c4:	3301      	adds	r3, #1
 80012c6:	83fb      	strh	r3, [r7, #30]
 80012c8:	8bfa      	ldrh	r2, [r7, #30]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	885b      	ldrh	r3, [r3, #2]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbe4      	blt.n	800129e <v_LoadIntModel+0x4a>
	}

	memcpy(xDistribution->W_min,		&DataPtr[sizeof(*xNetParam)], (sizeof(float) * xNetParam->Layers));
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	885b      	ldrh	r3, [r3, #2]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	461a      	mov	r2, r3
 80012e6:	f009 ffd9 	bl	800b29c <memcpy>
	memcpy(xDistribution->W_max,		&DataPtr[sizeof(*xNetParam)	+ 1*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	6858      	ldr	r0, [r3, #4]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	885b      	ldrh	r3, [r3, #2]
 80012f2:	3315      	adds	r3, #21
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	18d1      	adds	r1, r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	885b      	ldrh	r3, [r3, #2]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	461a      	mov	r2, r3
 8001302:	f009 ffcb 	bl	800b29c <memcpy>
	memcpy(xDistribution->b_min,		&DataPtr[sizeof(*xNetParam)	+ 2*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	6898      	ldr	r0, [r3, #8]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	885b      	ldrh	r3, [r3, #2]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	3354      	adds	r3, #84	; 0x54
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	18d1      	adds	r1, r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	885b      	ldrh	r3, [r3, #2]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	461a      	mov	r2, r3
 800131e:	f009 ffbd 	bl	800b29c <memcpy>
	memcpy(xDistribution->b_max,		&DataPtr[sizeof(*xNetParam)	+ 3*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	68d8      	ldr	r0, [r3, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	885b      	ldrh	r3, [r3, #2]
 800132a:	461a      	mov	r2, r3
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	3354      	adds	r3, #84	; 0x54
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	18d1      	adds	r1, r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	885b      	ldrh	r3, [r3, #2]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	461a      	mov	r2, r3
 8001342:	f009 ffab 	bl	800b29c <memcpy>
	memcpy(xDistribution->func_min,		&DataPtr[sizeof(*xNetParam) + 4*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	6918      	ldr	r0, [r3, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	885b      	ldrh	r3, [r3, #2]
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	3354      	adds	r3, #84	; 0x54
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	18d1      	adds	r1, r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	885b      	ldrh	r3, [r3, #2]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	461a      	mov	r2, r3
 800135e:	f009 ff9d 	bl	800b29c <memcpy>
	memcpy(xDistribution->func_max,		&DataPtr[sizeof(*xNetParam) + 5*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	6958      	ldr	r0, [r3, #20]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	885b      	ldrh	r3, [r3, #2]
 800136a:	461a      	mov	r2, r3
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	3354      	adds	r3, #84	; 0x54
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	18d1      	adds	r1, r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	885b      	ldrh	r3, [r3, #2]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	461a      	mov	r2, r3
 8001382:	f009 ff8b 	bl	800b29c <memcpy>
	memcpy(xQuantizedVal->Sy,			&DataPtr[sizeof(*xNetParam)	+ 6 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	885b      	ldrh	r3, [r3, #2]
 800138e:	461a      	mov	r2, r3
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	3354      	adds	r3, #84	; 0x54
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	18d1      	adds	r1, r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	885b      	ldrh	r3, [r3, #2]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	461a      	mov	r2, r3
 80013a6:	f009 ff79 	bl	800b29c <memcpy>
	memcpy(xQuantizedVal->Sz,			&DataPtr[sizeof(*xNetParam)	+ 7 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6858      	ldr	r0, [r3, #4]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	885b      	ldrh	r3, [r3, #2]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4613      	mov	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	1a9b      	subs	r3, r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	3354      	adds	r3, #84	; 0x54
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	18d1      	adds	r1, r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	885b      	ldrh	r3, [r3, #2]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	461a      	mov	r2, r3
 80013ca:	f009 ff67 	bl	800b29c <memcpy>
	memcpy(xQuantizedVal->Sw,			&DataPtr[sizeof(*xNetParam)	+ 8 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6898      	ldr	r0, [r3, #8]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	885b      	ldrh	r3, [r3, #2]
 80013d6:	015b      	lsls	r3, r3, #5
 80013d8:	3354      	adds	r3, #84	; 0x54
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	18d1      	adds	r1, r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	885b      	ldrh	r3, [r3, #2]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	461a      	mov	r2, r3
 80013e6:	f009 ff59 	bl	800b29c <memcpy>
	memcpy(xQuantizedVal->Sb,			&DataPtr[sizeof(*xNetParam)	+ 9 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68d8      	ldr	r0, [r3, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	885b      	ldrh	r3, [r3, #2]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	3354      	adds	r3, #84	; 0x54
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	18d1      	adds	r1, r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	885b      	ldrh	r3, [r3, #2]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	461a      	mov	r2, r3
 800140a:	f009 ff47 	bl	800b29c <memcpy>
	memcpy(xQuantizedVal->Ssumcomp,		&DataPtr[sizeof(*xNetParam) + 10 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6918      	ldr	r0, [r3, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	885b      	ldrh	r3, [r3, #2]
 8001416:	461a      	mov	r2, r3
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	3354      	adds	r3, #84	; 0x54
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	18d1      	adds	r1, r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	885b      	ldrh	r3, [r3, #2]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	461a      	mov	r2, r3
 800142e:	f009 ff35 	bl	800b29c <memcpy>
	memcpy(xQuantizedVal->Sbiascomp,	&DataPtr[sizeof(*xNetParam) + 11 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6958      	ldr	r0, [r3, #20]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	885b      	ldrh	r3, [r3, #2]
 800143a:	461a      	mov	r2, r3
 800143c:	232c      	movs	r3, #44	; 0x2c
 800143e:	fb03 f302 	mul.w	r3, r3, r2
 8001442:	3354      	adds	r3, #84	; 0x54
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	18d1      	adds	r1, r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	885b      	ldrh	r3, [r3, #2]
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	461a      	mov	r2, r3
 8001450:	f009 ff24 	bl	800b29c <memcpy>
	memcpy(xQuantizedVal->ZWsum,		&DataPtr[sizeof(*xNetParam) + 12 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6998      	ldr	r0, [r3, #24]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	885b      	ldrh	r3, [r3, #2]
 800145c:	461a      	mov	r2, r3
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	3354      	adds	r3, #84	; 0x54
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	18d1      	adds	r1, r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	885b      	ldrh	r3, [r3, #2]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	461a      	mov	r2, r3
 8001474:	f009 ff12 	bl	800b29c <memcpy>
	memcpy(xQuantizedVal->Zy,			&DataPtr[sizeof(*xNetParam) + 13 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69d8      	ldr	r0, [r3, #28]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	885b      	ldrh	r3, [r3, #2]
 8001480:	461a      	mov	r2, r3
 8001482:	2334      	movs	r3, #52	; 0x34
 8001484:	fb03 f302 	mul.w	r3, r3, r2
 8001488:	3354      	adds	r3, #84	; 0x54
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	18d1      	adds	r1, r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	885b      	ldrh	r3, [r3, #2]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	461a      	mov	r2, r3
 8001496:	f009 ff01 	bl	800b29c <memcpy>

	memcpy(((uint8_t*)xQuantizedVal->WBPtr), &DataPtr[sizeof(*xNetParam) + 14 * (sizeof(float) * xNetParam->Layers)], ceil((values * xNetParam->xVarPrecision.precision) / 8.0));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1c      	ldr	r4, [r3, #32]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	885b      	ldrh	r3, [r3, #2]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	3354      	adds	r3, #84	; 0x54
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	18d5      	adds	r5, r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	785b      	ldrb	r3, [r3, #1]
 80014b6:	461a      	mov	r2, r3
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fb03 f302 	mul.w	r3, r3, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ffcc 	bl	800045c <__aeabi_ui2d>
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <v_LoadIntModel+0x2b4>)
 80014ca:	f7ff f96b 	bl	80007a4 <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	ec43 2b17 	vmov	d7, r2, r3
 80014d6:	eeb0 0a47 	vmov.f32	s0, s14
 80014da:	eef0 0a67 	vmov.f32	s1, s15
 80014de:	f00a f8bf 	bl	800b660 <ceil>
 80014e2:	ec53 2b10 	vmov	r2, r3, d0
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff faf3 	bl	8000ad4 <__aeabi_d2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	4629      	mov	r1, r5
 80014f4:	4620      	mov	r0, r4
 80014f6:	f009 fed1 	bl	800b29c <memcpy>
}
 80014fa:	bf00      	nop
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdb0      	pop	{r4, r5, r7, pc}
 8001502:	bf00      	nop
 8001504:	080e0000 	.word	0x080e0000
 8001508:	40200000 	.word	0x40200000

0800150c <v_LoadTestDataNum>:
//
//	fclose(FPtr);
//}

void v_LoadTestDataNum(DataSet_t* xDataSet, netparam_t	xNetParam, uint16_t num)
{
 800150c:	b084      	sub	sp, #16
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	f107 001c 	add.w	r0, r7, #28
 800151a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t* DataPtr;

	DataPtr = (uint8_t*)BASEADDR_DATASET;
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <v_LoadTestDataNum+0xd4>)
 8001520:	60fb      	str	r3, [r7, #12]

	memcpy(&(xDataSet->test_size), &DataPtr[0], sizeof(uint16_t));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3314      	adds	r3, #20
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	8812      	ldrh	r2, [r2, #0]
 800152a:	b292      	uxth	r2, r2
 800152c:	801a      	strh	r2, [r3, #0]

	if (xDataSet->x_test != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <v_LoadTestDataNum+0x34>
	{
		free(xDataSet->x_test);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	4618      	mov	r0, r3
 800153c:	f009 fea6 	bl	800b28c <free>
	}
	if (xDataSet->y_test != NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <v_LoadTestDataNum+0x46>
	{
		free(xDataSet->y_test);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4618      	mov	r0, r3
 800154e:	f009 fe9d 	bl	800b28c <free>
	}

	xDataSet->x_test = malloc(sizeof(float) * 40);
 8001552:	20a0      	movs	r0, #160	; 0xa0
 8001554:	f009 fe92 	bl	800b27c <malloc>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]
	xDataSet->y_test = malloc(sizeof(float));
 8001560:	2004      	movs	r0, #4
 8001562:	f009 fe8b 	bl	800b27c <malloc>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]

	memcpy(xDataSet->x_test, &DataPtr[sizeof(uint16_t)+(num*(xNetParam.NonLayer[0])*sizeof(float))], (sizeof(float) * xNetParam.NonLayer[0]));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68d8      	ldr	r0, [r3, #12]
 8001572:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001576:	8c3a      	ldrh	r2, [r7, #32]
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	8c3a      	ldrh	r2, [r7, #32]
 8001586:	0092      	lsls	r2, r2, #2
 8001588:	4619      	mov	r1, r3
 800158a:	f009 fe87 	bl	800b29c <memcpy>
	memcpy(xDataSet->y_test, &DataPtr[sizeof(uint16_t) + (xDataSet->test_size * sizeof(float) * xNetParam.NonLayer[0]) + (num * (xNetParam.NonLayer[xNetParam.Layers - 1]) * sizeof(float))], (sizeof(float) * xNetParam.NonLayer[xNetParam.Layers - 1]));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6918      	ldr	r0, [r3, #16]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	8a9b      	ldrh	r3, [r3, #20]
 8001596:	8c3a      	ldrh	r2, [r7, #32]
 8001598:	fb02 f203 	mul.w	r2, r2, r3
 800159c:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 80015a0:	8bfb      	ldrh	r3, [r7, #30]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	f107 0c18 	add.w	ip, r7, #24
 80015aa:	4463      	add	r3, ip
 80015ac:	891b      	ldrh	r3, [r3, #8]
 80015ae:	fb03 f301 	mul.w	r3, r3, r1
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	18d1      	adds	r1, r2, r3
 80015bc:	8bfb      	ldrh	r3, [r7, #30]
 80015be:	3b01      	subs	r3, #1
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	f107 0218 	add.w	r2, r7, #24
 80015c6:	4413      	add	r3, r2
 80015c8:	891b      	ldrh	r3, [r3, #8]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	461a      	mov	r2, r3
 80015ce:	f009 fe65 	bl	800b29c <memcpy>
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015dc:	b004      	add	sp, #16
 80015de:	4770      	bx	lr
 80015e0:	08040000 	.word	0x08040000

080015e4 <v_FloatSetParameters>:

//************************************************************************************************
//	SET STRUCTS
//************************************************************************************************
void v_FloatSetParameters(netparam_t	input_xNetParam)
{
 80015e4:	b084      	sub	sp, #16
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	f107 0c08 	add.w	ip, r7, #8
 80015ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	xNetParam = input_xNetParam;
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <v_FloatSetParameters+0x2c>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	2254      	movs	r2, #84	; 0x54
 80015fc:	4619      	mov	r1, r3
 80015fe:	f009 fe4d 	bl	800b29c <memcpy>
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800160a:	b004      	add	sp, #16
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	200004ec 	.word	0x200004ec

08001614 <v_float_SetPtr>:

void v_float_SetPtr(float* input_WBPtr)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	WBPtr = input_WBPtr;
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <v_float_SetPtr+0x1c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	200004e8 	.word	0x200004e8

08001634 <v_DynamicAllocForwardProp>:
//**************************************************/**
//	IN		xNetParam			(NETWORK HYPERPARAMETERS STRUCT)
//	OUT		*ptr				(pointer to void)
//**************************************************
void v_DynamicAllocForwardProp(float** ZPtrPtr, float** FuncPtrPtr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	uint16_t	i;
	uint32_t	neurons = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < xNetParam.Layers; i++)
 8001642:	2300      	movs	r3, #0
 8001644:	81fb      	strh	r3, [r7, #14]
 8001646:	e00b      	b.n	8001660 <v_DynamicAllocForwardProp+0x2c>
	{
		neurons += xNetParam.NonLayer[i];
 8001648:	89fb      	ldrh	r3, [r7, #14]
 800164a:	4a35      	ldr	r2, [pc, #212]	; (8001720 <v_DynamicAllocForwardProp+0xec>)
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	889b      	ldrh	r3, [r3, #4]
 8001652:	461a      	mov	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4413      	add	r3, r2
 8001658:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < xNetParam.Layers; i++)
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	3301      	adds	r3, #1
 800165e:	81fb      	strh	r3, [r7, #14]
 8001660:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <v_DynamicAllocForwardProp+0xec>)
 8001662:	885b      	ldrh	r3, [r3, #2]
 8001664:	89fa      	ldrh	r2, [r7, #14]
 8001666:	429a      	cmp	r2, r3
 8001668:	d3ee      	bcc.n	8001648 <v_DynamicAllocForwardProp+0x14>
	}

	*FuncPtrPtr = malloc(ceil((float)(neurons * xNetParam.xVarPrecision.precision) / 8.0));
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <v_DynamicAllocForwardProp+0xec>)
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	461a      	mov	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	fb03 f302 	mul.w	r3, r3, r2
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167e:	ee17 0a90 	vmov	r0, s15
 8001682:	f7fe ff0d 	bl	80004a0 <__aeabi_f2d>
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <v_DynamicAllocForwardProp+0xf0>)
 800168c:	f7ff f88a 	bl	80007a4 <__aeabi_ddiv>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	ec43 2b17 	vmov	d7, r2, r3
 8001698:	eeb0 0a47 	vmov.f32	s0, s14
 800169c:	eef0 0a67 	vmov.f32	s1, s15
 80016a0:	f009 ffde 	bl	800b660 <ceil>
 80016a4:	ec53 2b10 	vmov	r2, r3, d0
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fa12 	bl	8000ad4 <__aeabi_d2uiz>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f009 fde2 	bl	800b27c <malloc>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	601a      	str	r2, [r3, #0]
	*ZPtrPtr = malloc(ceil((float)(neurons*xNetParam.xVarPrecision.precision) / 8.0));
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <v_DynamicAllocForwardProp+0xec>)
 80016c2:	785b      	ldrb	r3, [r3, #1]
 80016c4:	461a      	mov	r2, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	fb03 f302 	mul.w	r3, r3, r2
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d4:	ee17 0a90 	vmov	r0, s15
 80016d8:	f7fe fee2 	bl	80004a0 <__aeabi_f2d>
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <v_DynamicAllocForwardProp+0xf0>)
 80016e2:	f7ff f85f 	bl	80007a4 <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	ec43 2b17 	vmov	d7, r2, r3
 80016ee:	eeb0 0a47 	vmov.f32	s0, s14
 80016f2:	eef0 0a67 	vmov.f32	s1, s15
 80016f6:	f009 ffb3 	bl	800b660 <ceil>
 80016fa:	ec53 2b10 	vmov	r2, r3, d0
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f7ff f9e7 	bl	8000ad4 <__aeabi_d2uiz>
 8001706:	4603      	mov	r3, r0
 8001708:	4618      	mov	r0, r3
 800170a:	f009 fdb7 	bl	800b27c <malloc>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200004ec 	.word	0x200004ec
 8001724:	40200000 	.word	0x40200000

08001728 <v_DynamicAlloc_NeuronVar>:
//**************************************************/**
//	IN		xNetParam			(NETWORK HYPERPARAMETERS STRUCT)
//	OUT		*ptr				(pointer to void)
//**************************************************
void v_DynamicAlloc_NeuronVar(float** WBPtrPtr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	uint16_t	i;
	uint32_t	values = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
 8001734:	2300      	movs	r3, #0
 8001736:	81fb      	strh	r3, [r7, #14]
 8001738:	e014      	b.n	8001764 <v_DynamicAlloc_NeuronVar+0x3c>
	{
		values += ((1 + xNetParam.NonLayer[i]) * xNetParam.NonLayer[i + 1]);
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	4a24      	ldr	r2, [pc, #144]	; (80017d0 <v_DynamicAlloc_NeuronVar+0xa8>)
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	889b      	ldrh	r3, [r3, #4]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	89fb      	ldrh	r3, [r7, #14]
 8001748:	3301      	adds	r3, #1
 800174a:	4921      	ldr	r1, [pc, #132]	; (80017d0 <v_DynamicAlloc_NeuronVar+0xa8>)
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	440b      	add	r3, r1
 8001750:	889b      	ldrh	r3, [r3, #4]
 8001752:	fb03 f302 	mul.w	r3, r3, r2
 8001756:	461a      	mov	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4413      	add	r3, r2
 800175c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
 800175e:	89fb      	ldrh	r3, [r7, #14]
 8001760:	3301      	adds	r3, #1
 8001762:	81fb      	strh	r3, [r7, #14]
 8001764:	89fa      	ldrh	r2, [r7, #14]
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <v_DynamicAlloc_NeuronVar+0xa8>)
 8001768:	885b      	ldrh	r3, [r3, #2]
 800176a:	3b01      	subs	r3, #1
 800176c:	429a      	cmp	r2, r3
 800176e:	dbe4      	blt.n	800173a <v_DynamicAlloc_NeuronVar+0x12>
	}
	*WBPtrPtr = malloc(ceil((float)(values * xNetParam.xVarPrecision.precision) / 8.0));
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <v_DynamicAlloc_NeuronVar+0xa8>)
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	461a      	mov	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	fb03 f302 	mul.w	r3, r3, r2
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001784:	ee17 0a90 	vmov	r0, s15
 8001788:	f7fe fe8a 	bl	80004a0 <__aeabi_f2d>
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <v_DynamicAlloc_NeuronVar+0xac>)
 8001792:	f7ff f807 	bl	80007a4 <__aeabi_ddiv>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	ec43 2b17 	vmov	d7, r2, r3
 800179e:	eeb0 0a47 	vmov.f32	s0, s14
 80017a2:	eef0 0a67 	vmov.f32	s1, s15
 80017a6:	f009 ff5b 	bl	800b660 <ceil>
 80017aa:	ec53 2b10 	vmov	r2, r3, d0
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f98f 	bl	8000ad4 <__aeabi_d2uiz>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f009 fd5f 	bl	800b27c <malloc>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	601a      	str	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200004ec 	.word	0x200004ec
 80017d4:	40200000 	.word	0x40200000

080017d8 <v_MACForwardProp_FP32>:
	//	IN		res, xNetParam, layer, WBPtr, FuncPtr			(FLOAT POINTER, NETWORK HYPERPARAMETERS STRUCT, layer, FLOAT POINTER, FLOAT POINTER)
	//	OUT		NONE
	//	obs.:	to adapt the function, change float to int....
	//**************************************************
void v_MACForwardProp_FP32(float* res, uint16_t	layer, float* FuncPtr)
{
 80017d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017dc:	b0a0      	sub	sp, #128	; 0x80
 80017de:	af14      	add	r7, sp, #80	; 0x50
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	460b      	mov	r3, r1
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	817b      	strh	r3, [r7, #10]
	float		aux;
	uint32_t	index_w, index_b, rows, cols;

	index_w = u32_GetIndex(xNetParam, layer, 0, false);
 80017e8:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <v_MACForwardProp_FP32+0x11c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80017ee:	2200      	movs	r2, #0
 80017f0:	9212      	str	r2, [sp, #72]	; 0x48
 80017f2:	897a      	ldrh	r2, [r7, #10]
 80017f4:	9211      	str	r2, [sp, #68]	; 0x44
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	f04f 0800 	mov.w	r8, #0
 80017fc:	4690      	mov	r8, r2
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	2600      	movs	r6, #0
 8001802:	4616      	mov	r6, r2
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	2500      	movs	r5, #0
 8001808:	4615      	mov	r5, r2
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	2400      	movs	r4, #0
 800180e:	4614      	mov	r4, r2
 8001810:	4668      	mov	r0, sp
 8001812:	3310      	adds	r3, #16
 8001814:	2244      	movs	r2, #68	; 0x44
 8001816:	4619      	mov	r1, r3
 8001818:	f009 fd40 	bl	800b29c <memcpy>
 800181c:	4640      	mov	r0, r8
 800181e:	4631      	mov	r1, r6
 8001820:	462a      	mov	r2, r5
 8001822:	4623      	mov	r3, r4
 8001824:	f002 fa24 	bl	8003c70 <u32_GetIndex>
 8001828:	6238      	str	r0, [r7, #32]
	index_b = index_w + (xNetParam.NonLayer[layer - 1] * xNetParam.NonLayer[layer]);
 800182a:	897b      	ldrh	r3, [r7, #10]
 800182c:	3b01      	subs	r3, #1
 800182e:	4a31      	ldr	r2, [pc, #196]	; (80018f4 <v_MACForwardProp_FP32+0x11c>)
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	889b      	ldrh	r3, [r3, #4]
 8001836:	4619      	mov	r1, r3
 8001838:	897b      	ldrh	r3, [r7, #10]
 800183a:	4a2e      	ldr	r2, [pc, #184]	; (80018f4 <v_MACForwardProp_FP32+0x11c>)
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	889b      	ldrh	r3, [r3, #4]
 8001842:	fb03 f301 	mul.w	r3, r3, r1
 8001846:	461a      	mov	r2, r3
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	4413      	add	r3, r2
 800184c:	61fb      	str	r3, [r7, #28]
	rows = xNetParam.NonLayer[layer];
 800184e:	897b      	ldrh	r3, [r7, #10]
 8001850:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <v_MACForwardProp_FP32+0x11c>)
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	889b      	ldrh	r3, [r3, #4]
 8001858:	61bb      	str	r3, [r7, #24]
	cols = xNetParam.NonLayer[layer - 1];
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	3b01      	subs	r3, #1
 800185e:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <v_MACForwardProp_FP32+0x11c>)
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	889b      	ldrh	r3, [r3, #4]
 8001866:	617b      	str	r3, [r7, #20]

	for (size_t i = 0; i < rows; i++)
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
 800186c:	e037      	b.n	80018de <v_MACForwardProp_FP32+0x106>
	{
		aux = WBPtr[index_b + i];
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <v_MACForwardProp_FP32+0x120>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	69f9      	ldr	r1, [r7, #28]
 8001874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001876:	440b      	add	r3, r1
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c

		for (size_t j = 0; j < cols; j++)
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
 8001884:	e01e      	b.n	80018c4 <v_MACForwardProp_FP32+0xec>
		{
			aux += WBPtr[index_w + (i * cols) + j] * FuncPtr[j];
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <v_MACForwardProp_FP32+0x120>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	fb01 f103 	mul.w	r1, r1, r3
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	4419      	add	r1, r3
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	440b      	add	r3, r1
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	ed93 7a00 	vldr	s14, [r3]
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80018b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		for (size_t j = 0; j < cols; j++)
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	3301      	adds	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
 80018c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d3dc      	bcc.n	8001886 <v_MACForwardProp_FP32+0xae>
		}
		res[i] = aux;
 80018cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d6:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < rows; i++)
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	3301      	adds	r3, #1
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80018de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d3c3      	bcc.n	800186e <v_MACForwardProp_FP32+0x96>
	}
}
 80018e6:	bf00      	nop
 80018e8:	bf00      	nop
 80018ea:	3730      	adds	r7, #48	; 0x30
 80018ec:	46bd      	mov	sp, r7
 80018ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018f2:	bf00      	nop
 80018f4:	200004ec 	.word	0x200004ec
 80018f8:	200004e8 	.word	0x200004e8

080018fc <v_ReLUActiv_FP32>:
//	IN		ZPtr, xNetParam, layer, FuncPtr
//	OUT		NONE
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_ReLUActiv_FP32(float* ZPtr, uint16_t layer, float* FuncPtr)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	460b      	mov	r3, r1
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	817b      	strh	r3, [r7, #10]
	for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e031      	b.n	8001974 <v_ReLUActiv_FP32+0x78>
	{
		if (ZPtr[i] < 0)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	d519      	bpl.n	800195a <v_ReLUActiv_FP32+0x5e>
		{
			FuncPtr[i] = (xNetParam.LeakyReLU_rate * ZPtr[i]) / UINT16_MAX;
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <v_ReLUActiv_FP32+0x98>)
 8001928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001998 <v_ReLUActiv_FP32+0x9c>
 8001950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001954:	edc3 7a00 	vstr	s15, [r3]
 8001958:	e009      	b.n	800196e <v_ReLUActiv_FP32+0x72>
		}
		else
		{
			FuncPtr[i] = ZPtr[i];
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	441a      	add	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	440b      	add	r3, r1
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	897b      	ldrh	r3, [r7, #10]
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <v_ReLUActiv_FP32+0x98>)
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	889b      	ldrh	r3, [r3, #4]
 800197e:	461a      	mov	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	4293      	cmp	r3, r2
 8001984:	d3c4      	bcc.n	8001910 <v_ReLUActiv_FP32+0x14>
		}
	}
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	200004ec 	.word	0x200004ec
 8001998:	477fff00 	.word	0x477fff00

0800199c <v_LinearActiv_FP32>:

void v_LinearActiv_FP32(float* ZPtr, uint16_t layer, float* FuncPtr)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	460b      	mov	r3, r1
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	817b      	strh	r3, [r7, #10]
	for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e00c      	b.n	80019ca <v_LinearActiv_FP32+0x2e>
	{
		FuncPtr[i] = ZPtr[i];
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	441a      	add	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	440b      	add	r3, r1
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <v_LinearActiv_FP32+0x50>)
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	889b      	ldrh	r3, [r3, #4]
 80019d4:	461a      	mov	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	4293      	cmp	r3, r2
 80019da:	d3e9      	bcc.n	80019b0 <v_LinearActiv_FP32+0x14>
	}
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	200004ec 	.word	0x200004ec

080019f0 <v_ProcessForwardPropNN_FP32>:
//	IN		result, xNetParam, Input, WBPtr			(result, NETWORK HYPERPARAMETERS STRUCT,FLOAT POINTER, FLOAT POINTER)
//	OUT		NONE
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_ProcessForwardPropNN_FP32(float* ZPtr, float* FuncPtr, float* Input)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
	uint16_t	i;
	uint32_t	neurons = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
	uint32_t	aux_index = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

	for (i = 0; i < xNetParam.Layers; i++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	83fb      	strh	r3, [r7, #30]
 8001a08:	e00b      	b.n	8001a22 <v_ProcessForwardPropNN_FP32+0x32>
	{
		neurons += xNetParam.NonLayer[i];
 8001a0a:	8bfb      	ldrh	r3, [r7, #30]
 8001a0c:	4a3c      	ldr	r2, [pc, #240]	; (8001b00 <v_ProcessForwardPropNN_FP32+0x110>)
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	889b      	ldrh	r3, [r3, #4]
 8001a14:	461a      	mov	r2, r3
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4413      	add	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < xNetParam.Layers; i++)
 8001a1c:	8bfb      	ldrh	r3, [r7, #30]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	83fb      	strh	r3, [r7, #30]
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <v_ProcessForwardPropNN_FP32+0x110>)
 8001a24:	885b      	ldrh	r3, [r3, #2]
 8001a26:	8bfa      	ldrh	r2, [r7, #30]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d3ee      	bcc.n	8001a0a <v_ProcessForwardPropNN_FP32+0x1a>
	}
	memcpy(FuncPtr, Input, (xNetParam.NonLayer[0] * FP32_SIZE));
 8001a2c:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <v_ProcessForwardPropNN_FP32+0x110>)
 8001a2e:	889b      	ldrh	r3, [r3, #4]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	461a      	mov	r2, r3
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	68b8      	ldr	r0, [r7, #8]
 8001a38:	f009 fc30 	bl	800b29c <memcpy>

	neurons = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
	for (i = 1; i < (xNetParam.Layers-1); i++)
 8001a40:	2301      	movs	r3, #1
 8001a42:	83fb      	strh	r3, [r7, #30]
 8001a44:	e026      	b.n	8001a94 <v_ProcessForwardPropNN_FP32+0xa4>
	{
		aux_index = neurons;
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	617b      	str	r3, [r7, #20]
		neurons += xNetParam.NonLayer[i - 1];
 8001a4a:	8bfb      	ldrh	r3, [r7, #30]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	4a2c      	ldr	r2, [pc, #176]	; (8001b00 <v_ProcessForwardPropNN_FP32+0x110>)
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	889b      	ldrh	r3, [r3, #4]
 8001a56:	461a      	mov	r2, r3
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
		v_MACForwardProp_FP32(&ZPtr[neurons], i, &FuncPtr[aux_index]);		//	CALCULATE [Z = W*F + b]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	18d0      	adds	r0, r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	441a      	add	r2, r3
 8001a6e:	8bfb      	ldrh	r3, [r7, #30]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff feb1 	bl	80017d8 <v_MACForwardProp_FP32>
		v_ReLUActiv_FP32(&ZPtr[neurons], i, &FuncPtr[neurons]);				//	CALCULATE [F = ACTIV(Z)]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	18d0      	adds	r0, r2, r3
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	441a      	add	r2, r3
 8001a86:	8bfb      	ldrh	r3, [r7, #30]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff ff37 	bl	80018fc <v_ReLUActiv_FP32>
	for (i = 1; i < (xNetParam.Layers-1); i++)
 8001a8e:	8bfb      	ldrh	r3, [r7, #30]
 8001a90:	3301      	adds	r3, #1
 8001a92:	83fb      	strh	r3, [r7, #30]
 8001a94:	8bfa      	ldrh	r2, [r7, #30]
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <v_ProcessForwardPropNN_FP32+0x110>)
 8001a98:	885b      	ldrh	r3, [r3, #2]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	dbd2      	blt.n	8001a46 <v_ProcessForwardPropNN_FP32+0x56>
	}
	aux_index = neurons;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	617b      	str	r3, [r7, #20]
	neurons += xNetParam.NonLayer[xNetParam.Layers - 2];
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <v_ProcessForwardPropNN_FP32+0x110>)
 8001aa6:	885b      	ldrh	r3, [r3, #2]
 8001aa8:	3b02      	subs	r3, #2
 8001aaa:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <v_ProcessForwardPropNN_FP32+0x110>)
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	889b      	ldrh	r3, [r3, #4]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
	v_MACForwardProp_FP32(&ZPtr[neurons], (xNetParam.Layers - 1), &FuncPtr[aux_index]);		//	CALCULATE [Z = W*F + b]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	18d0      	adds	r0, r2, r3
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <v_ProcessForwardPropNN_FP32+0x110>)
 8001ac4:	885b      	ldrh	r3, [r3, #2]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b299      	uxth	r1, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f7ff fe80 	bl	80017d8 <v_MACForwardProp_FP32>
	v_LinearActiv_FP32(&ZPtr[neurons], (xNetParam.Layers - 1), &FuncPtr[neurons]);										//	CALCULATE [F = ACTIV(Z)]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	18d0      	adds	r0, r2, r3
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <v_ProcessForwardPropNN_FP32+0x110>)
 8001ae2:	885b      	ldrh	r3, [r3, #2]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b299      	uxth	r1, r3
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	4413      	add	r3, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	f7ff ff53 	bl	800199c <v_LinearActiv_FP32>
}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200004ec 	.word	0x200004ec

08001b04 <v_DynamicAlloc_quant>:

//************************************************************************************************
//	MEMORY FUNCTIONS
//************************************************************************************************
void v_DynamicAlloc_quant(quantizedval_t* xQuantizedVal, distribution_t* xDistribution, netparam_t	xNetParam)
{
 8001b04:	b082      	sub	sp, #8
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
 8001b10:	f107 0120 	add.w	r1, r7, #32
 8001b14:	e881 000c 	stmia.w	r1, {r2, r3}
	uint16_t	i;
	uint32_t	values = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
	uint16_t	neurons = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	82fb      	strh	r3, [r7, #22]
 8001b24:	e01f      	b.n	8001b66 <v_DynamicAlloc_quant+0x62>
	{
		neurons += xNetParam.NonLayer[i];
 8001b26:	8afb      	ldrh	r3, [r7, #22]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	f107 0220 	add.w	r2, r7, #32
 8001b2e:	4413      	add	r3, r2
 8001b30:	889a      	ldrh	r2, [r3, #4]
 8001b32:	89fb      	ldrh	r3, [r7, #14]
 8001b34:	4413      	add	r3, r2
 8001b36:	81fb      	strh	r3, [r7, #14]
		values += ((1 + xNetParam.NonLayer[i]) * xNetParam.NonLayer[i + 1]);
 8001b38:	8afb      	ldrh	r3, [r7, #22]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	f107 0220 	add.w	r2, r7, #32
 8001b40:	4413      	add	r3, r2
 8001b42:	889b      	ldrh	r3, [r3, #4]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	8afb      	ldrh	r3, [r7, #22]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	f107 0120 	add.w	r1, r7, #32
 8001b50:	440b      	add	r3, r1
 8001b52:	889b      	ldrh	r3, [r3, #4]
 8001b54:	fb03 f302 	mul.w	r3, r3, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
 8001b60:	8afb      	ldrh	r3, [r7, #22]
 8001b62:	3301      	adds	r3, #1
 8001b64:	82fb      	strh	r3, [r7, #22]
 8001b66:	8afa      	ldrh	r2, [r7, #22]
 8001b68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbda      	blt.n	8001b26 <v_DynamicAlloc_quant+0x22>
	}
	neurons += xNetParam.NonLayer[xNetParam.Layers - 1];
 8001b70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b72:	3b01      	subs	r3, #1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	f107 0220 	add.w	r2, r7, #32
 8001b7a:	4413      	add	r3, r2
 8001b7c:	889a      	ldrh	r2, [r3, #4]
 8001b7e:	89fb      	ldrh	r3, [r7, #14]
 8001b80:	4413      	add	r3, r2
 8001b82:	81fb      	strh	r3, [r7, #14]

	xQuantizedVal->WBPtr = (void*)malloc(ceil((float)(values * xNetParam.xVarPrecision.precision) / 8.0));
 8001b84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b88:	461a      	mov	r2, r3
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	fb03 f302 	mul.w	r3, r3, r2
 8001b90:	ee07 3a90 	vmov	s15, r3
 8001b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b98:	ee17 0a90 	vmov	r0, s15
 8001b9c:	f7fe fc80 	bl	80004a0 <__aeabi_f2d>
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4b4f      	ldr	r3, [pc, #316]	; (8001ce4 <v_DynamicAlloc_quant+0x1e0>)
 8001ba6:	f7fe fdfd 	bl	80007a4 <__aeabi_ddiv>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	ec43 2b17 	vmov	d7, r2, r3
 8001bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb6:	eef0 0a67 	vmov.f32	s1, s15
 8001bba:	f009 fd51 	bl	800b660 <ceil>
 8001bbe:	ec53 2b10 	vmov	r2, r3, d0
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7fe ff85 	bl	8000ad4 <__aeabi_d2uiz>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f009 fb55 	bl	800b27c <malloc>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	621a      	str	r2, [r3, #32]

	xQuantizedVal->Zy = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001bda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f009 fb4c 	bl	800b27c <malloc>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	61da      	str	r2, [r3, #28]
	xQuantizedVal->Sy = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001bec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f009 fb43 	bl	800b27c <malloc>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
	xQuantizedVal->Sz = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f009 fb3a 	bl	800b27c <malloc>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	605a      	str	r2, [r3, #4]
	xQuantizedVal->Sw = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001c10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f009 fb31 	bl	800b27c <malloc>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	609a      	str	r2, [r3, #8]
	xQuantizedVal->Sb = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001c22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f009 fb28 	bl	800b27c <malloc>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	60da      	str	r2, [r3, #12]
	xQuantizedVal->Ssumcomp = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001c34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f009 fb1f 	bl	800b27c <malloc>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]
	xQuantizedVal->Sbiascomp = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001c46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f009 fb16 	bl	800b27c <malloc>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	615a      	str	r2, [r3, #20]
	xQuantizedVal->ZWsum = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001c58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f009 fb0d 	bl	800b27c <malloc>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	619a      	str	r2, [r3, #24]
	xDistribution->W_min = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001c6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f009 fb04 	bl	800b27c <malloc>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	601a      	str	r2, [r3, #0]
	xDistribution->W_max = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001c7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f009 fafb 	bl	800b27c <malloc>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
	xDistribution->b_min = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001c8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f009 faf2 	bl	800b27c <malloc>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	609a      	str	r2, [r3, #8]
	xDistribution->b_max = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001ca0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f009 fae9 	bl	800b27c <malloc>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	60da      	str	r2, [r3, #12]
	xDistribution->func_min = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001cb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f009 fae0 	bl	800b27c <malloc>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	611a      	str	r2, [r3, #16]
	xDistribution->func_max = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001cc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f009 fad7 	bl	800b27c <malloc>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	615a      	str	r2, [r3, #20]
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ce0:	b002      	add	sp, #8
 8001ce2:	4770      	bx	lr
 8001ce4:	40200000 	.word	0x40200000

08001ce8 <v_SetQuantNetParameters>:
	free(xDistribution.func_min);
	free(xDistribution.func_max);
}

void v_SetQuantNetParameters(netparam_t	input_xnetparam, quantizedval_t input_xquantizedval, distribution_t input_xDistribution)
{
 8001ce8:	b084      	sub	sp, #16
 8001cea:	b5b0      	push	{r4, r5, r7, lr}
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	f107 0410 	add.w	r4, r7, #16
 8001cf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xNetParam = input_xnetparam;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <v_SetQuantNetParameters+0x54>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	2254      	movs	r2, #84	; 0x54
 8001d00:	4619      	mov	r1, r3
 8001d02:	f009 facb 	bl	800b29c <memcpy>
	xQuantizedVal = input_xquantizedval;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <v_SetQuantNetParameters+0x58>)
 8001d08:	461d      	mov	r5, r3
 8001d0a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	602b      	str	r3, [r5, #0]
	xDistribution = input_xDistribution;
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <v_SetQuantNetParameters+0x5c>)
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d2a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d36:	b004      	add	sp, #16
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000200 	.word	0x20000200
 8001d40:	20000254 	.word	0x20000254
 8001d44:	20000278 	.word	0x20000278

08001d48 <v_DynamicAllocForwardProp_int>:

void v_DynamicAllocForwardProp_int(void** ZPtrPtr, void** FuncPtrPtr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
	uint16_t	i;
	uint32_t	neurons = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	81fb      	strh	r3, [r7, #14]
 8001d5a:	e00c      	b.n	8001d76 <v_DynamicAllocForwardProp_int+0x2e>
	{
		neurons += xNetParam.NonLayer[i];
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	4a3e      	ldr	r2, [pc, #248]	; (8001e58 <v_DynamicAllocForwardProp_int+0x110>)
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	889b      	ldrh	r3, [r3, #4]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
 8001d70:	89fb      	ldrh	r3, [r7, #14]
 8001d72:	3301      	adds	r3, #1
 8001d74:	81fb      	strh	r3, [r7, #14]
 8001d76:	89fa      	ldrh	r2, [r7, #14]
 8001d78:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <v_DynamicAllocForwardProp_int+0x110>)
 8001d7a:	885b      	ldrh	r3, [r3, #2]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbeb      	blt.n	8001d5c <v_DynamicAllocForwardProp_int+0x14>
	}
	neurons += xNetParam.NonLayer[xNetParam.Layers - 1];
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <v_DynamicAllocForwardProp_int+0x110>)
 8001d86:	885b      	ldrh	r3, [r3, #2]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	4a32      	ldr	r2, [pc, #200]	; (8001e58 <v_DynamicAllocForwardProp_int+0x110>)
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	889b      	ldrh	r3, [r3, #4]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60bb      	str	r3, [r7, #8]

	*FuncPtrPtr = malloc(ceil((float)(neurons * xNetParam.xVarPrecision.precision) / 8.0));
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <v_DynamicAllocForwardProp_int+0x110>)
 8001da0:	785b      	ldrb	r3, [r3, #1]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	fb03 f302 	mul.w	r3, r3, r2
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db4:	ee17 0a90 	vmov	r0, s15
 8001db8:	f7fe fb72 	bl	80004a0 <__aeabi_f2d>
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <v_DynamicAllocForwardProp_int+0x114>)
 8001dc2:	f7fe fcef 	bl	80007a4 <__aeabi_ddiv>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	ec43 2b17 	vmov	d7, r2, r3
 8001dce:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd2:	eef0 0a67 	vmov.f32	s1, s15
 8001dd6:	f009 fc43 	bl	800b660 <ceil>
 8001dda:	ec53 2b10 	vmov	r2, r3, d0
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fe77 	bl	8000ad4 <__aeabi_d2uiz>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f009 fa47 	bl	800b27c <malloc>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	601a      	str	r2, [r3, #0]
	*ZPtrPtr = malloc(ceil((float)(neurons * xNetParam.xVarPrecision.precision) / 8.0));
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <v_DynamicAllocForwardProp_int+0x110>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	fb03 f302 	mul.w	r3, r3, r2
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e0c:	ee17 0a90 	vmov	r0, s15
 8001e10:	f7fe fb46 	bl	80004a0 <__aeabi_f2d>
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <v_DynamicAllocForwardProp_int+0x114>)
 8001e1a:	f7fe fcc3 	bl	80007a4 <__aeabi_ddiv>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	ec43 2b17 	vmov	d7, r2, r3
 8001e26:	eeb0 0a47 	vmov.f32	s0, s14
 8001e2a:	eef0 0a67 	vmov.f32	s1, s15
 8001e2e:	f009 fc17 	bl	800b660 <ceil>
 8001e32:	ec53 2b10 	vmov	r2, r3, d0
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe fe4b 	bl	8000ad4 <__aeabi_d2uiz>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f009 fa1b 	bl	800b27c <malloc>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000200 	.word	0x20000200
 8001e5c:	40200000 	.word	0x40200000

08001e60 <v_MacForwardProp_int>:
//	in		zptr, xnetparam, layer, funcptr
//	out		none
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_MacForwardProp_int(void* res, uint8_t	layer, void* Funcptr, void* WBptr)
{
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	ed2d 8b02 	vpush	{d8}
 8001e66:	b0c6      	sub	sp, #280	; 0x118
 8001e68:	af14      	add	r7, sp, #80	; 0x50
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	460b      	mov	r3, r1
 8001e72:	72fb      	strb	r3, [r7, #11]
	uint32_t	index_w, index_b, rows, cols;
	long long int	long_aux = 0;
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	int cont;

	index_w = u32_GetIndex(xNetParam, layer, 0, false);
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4ca5      	ldr	r4, [pc, #660]	; (800211c <v_MacForwardProp_int+0x2bc>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	9213      	str	r2, [sp, #76]	; 0x4c
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	9212      	str	r2, [sp, #72]	; 0x48
 8001e8e:	9311      	str	r3, [sp, #68]	; 0x44
 8001e90:	4668      	mov	r0, sp
 8001e92:	f104 0310 	add.w	r3, r4, #16
 8001e96:	2244      	movs	r2, #68	; 0x44
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f009 f9ff 	bl	800b29c <memcpy>
 8001e9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ea2:	f001 fee5 	bl	8003c70 <u32_GetIndex>
 8001ea6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	index_b = index_w + (xNetParam.NonLayer[layer - 1] * xNetParam.NonLayer[layer]);
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	4a9b      	ldr	r2, [pc, #620]	; (800211c <v_MacForwardProp_int+0x2bc>)
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	889b      	ldrh	r3, [r3, #4]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4619      	mov	r1, r3
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	4a97      	ldr	r2, [pc, #604]	; (800211c <v_MacForwardProp_int+0x2bc>)
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	889b      	ldrh	r3, [r3, #4]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	fb03 f301 	mul.w	r3, r3, r1
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	rows = xNetParam.NonLayer[layer];
 8001ed6:	7afb      	ldrb	r3, [r7, #11]
 8001ed8:	4a90      	ldr	r2, [pc, #576]	; (800211c <v_MacForwardProp_int+0x2bc>)
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	889b      	ldrh	r3, [r3, #4]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	cols = xNetParam.NonLayer[layer - 1];
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	4a8c      	ldr	r2, [pc, #560]	; (800211c <v_MacForwardProp_int+0x2bc>)
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	889b      	ldrh	r3, [r3, #4]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	switch (xNetParam.xVarPrecision.precision)
 8001ef8:	4b88      	ldr	r3, [pc, #544]	; (800211c <v_MacForwardProp_int+0x2bc>)
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3b04      	subs	r3, #4
 8001f00:	2b1c      	cmp	r3, #28
 8001f02:	f200 8526 	bhi.w	8002952 <v_MacForwardProp_int+0xaf2>
 8001f06:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <v_MacForwardProp_int+0xac>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	0800256f 	.word	0x0800256f
 8001f10:	08002953 	.word	0x08002953
 8001f14:	08002953 	.word	0x08002953
 8001f18:	08002953 	.word	0x08002953
 8001f1c:	08002339 	.word	0x08002339
 8001f20:	08002953 	.word	0x08002953
 8001f24:	08002953 	.word	0x08002953
 8001f28:	08002953 	.word	0x08002953
 8001f2c:	08002953 	.word	0x08002953
 8001f30:	08002953 	.word	0x08002953
 8001f34:	08002953 	.word	0x08002953
 8001f38:	08002953 	.word	0x08002953
 8001f3c:	080020eb 	.word	0x080020eb
 8001f40:	08002953 	.word	0x08002953
 8001f44:	08002953 	.word	0x08002953
 8001f48:	08002953 	.word	0x08002953
 8001f4c:	08002953 	.word	0x08002953
 8001f50:	08002953 	.word	0x08002953
 8001f54:	08002953 	.word	0x08002953
 8001f58:	08002953 	.word	0x08002953
 8001f5c:	08002953 	.word	0x08002953
 8001f60:	08002953 	.word	0x08002953
 8001f64:	08002953 	.word	0x08002953
 8001f68:	08002953 	.word	0x08002953
 8001f6c:	08002953 	.word	0x08002953
 8001f70:	08002953 	.word	0x08002953
 8001f74:	08002953 	.word	0x08002953
 8001f78:	08002953 	.word	0x08002953
 8001f7c:	08001f81 	.word	0x08001f81
	{
	case 32:
		for (size_t i = 0; i < rows; i++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001f86:	e0a7      	b.n	80020d8 <v_MacForwardProp_int+0x278>
		{
			long_aux = 0;
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cols; j++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f9a:	e02b      	b.n	8001ff4 <v_MacForwardProp_int+0x194>
			{
				//long_aux += ((long long int)((int32_t*)WBptr)[index_w + (i * cols) + j] * (long long int)((int32_t*)Funcptr)[j]) & 0xffffffff00000000;	//mac
				long_aux = __SMMLA(((int32_t*)WBptr)[index_w + (i * cols) + j], ((int32_t*)Funcptr)[j], long_aux);
 8001f9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fa0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001fa4:	fb02 f203 	mul.w	r2, r2, r3
 8001fa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fac:	441a      	add	r2, r3
 8001fae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	6819      	ldr	r1, [r3, #0]
 8001fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fcc:	67f9      	str	r1, [r7, #124]	; 0x7c
 8001fce:	67ba      	str	r2, [r7, #120]	; 0x78
 8001fd0:	677b      	str	r3, [r7, #116]	; 0x74

__STATIC_FORCEINLINE int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __ASM volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r"  (op1), "r" (op2), "r" (op3) );
 8001fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001fd6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001fd8:	fb53 1302 	smmla	r3, r3, r2, r1
 8001fdc:	673b      	str	r3, [r7, #112]	; 0x70
 return(result);
 8001fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001fe6:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cols; j++)
 8001fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ff4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d3cd      	bcc.n	8001f9c <v_MacForwardProp_int+0x13c>
			}

			//long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (xNetParam.NonLayer[layer] * ((int32_t*)WBptr)[index_b + i]));
			long_aux = (round(xQuantizedVal.Ssumcomp[layer] * (long_aux << 32)) + (((int32_t*)WBptr)[index_b + i]));
 8002000:	4b47      	ldr	r3, [pc, #284]	; (8002120 <v_MacForwardProp_int+0x2c0>)
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	ed93 8a00 	vldr	s16, [r3]
 800200e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	0003      	movs	r3, r0
 800201c:	2200      	movs	r2, #0
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f7fe fe47 	bl	8000cb4 <__aeabi_l2f>
 8002026:	ee07 0a90 	vmov	s15, r0
 800202a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800202e:	ee17 0a90 	vmov	r0, s15
 8002032:	f7fe fa35 	bl	80004a0 <__aeabi_f2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	ec43 2b10 	vmov	d0, r2, r3
 800203e:	f009 fb93 	bl	800b768 <round>
 8002042:	ec55 4b10 	vmov	r4, r5, d0
 8002046:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800204a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fa0f 	bl	800047c <__aeabi_i2d>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4620      	mov	r0, r4
 8002064:	4629      	mov	r1, r5
 8002066:	f7fe f8bd 	bl	80001e4 <__adddf3>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fed9 	bl	8000e28 <__aeabi_d2lz>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

			// OVERFLOW and UNDERFLOW PROTECTION
			if (long_aux >= INT32_MAX)
 800207e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002082:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	4282      	cmp	r2, r0
 800208c:	418b      	sbcs	r3, r1
 800208e:	db06      	blt.n	800209e <v_MacForwardProp_int+0x23e>
			{
				long_aux = INT32_MAX;
 8002090:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 800209c:	e00f      	b.n	80020be <v_MacForwardProp_int+0x25e>
			}
			else if (long_aux <= INT32_MIN)
 800209e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80020a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80020a6:	f04f 31ff 	mov.w	r1, #4294967295
 80020aa:	4290      	cmp	r0, r2
 80020ac:	eb71 0303 	sbcs.w	r3, r1, r3
 80020b0:	db05      	blt.n	80020be <v_MacForwardProp_int+0x25e>
			{
				long_aux = INT32_MIN;
 80020b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			}
			((int32_t*)res)[i] = (int32_t)long_aux;
 80020be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80020cc:	601a      	str	r2, [r3, #0]
		for (size_t i = 0; i < rows; i++)
 80020ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020d2:	3301      	adds	r3, #1
 80020d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80020d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020e0:	429a      	cmp	r2, r3
 80020e2:	f4ff af51 	bcc.w	8001f88 <v_MacForwardProp_int+0x128>
		}
		break;
 80020e6:	f000 bc35 	b.w	8002954 <v_MacForwardProp_int+0xaf4>

	case 16:
		cont = (cols/2 + cols%2);
 80020ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020ee:	085a      	lsrs	r2, r3, #1
 80020f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (size_t i = 0; i < rows; i++)
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002104:	e110      	b.n	8002328 <v_MacForwardProp_int+0x4c8>
		{
			long_aux = 0;
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002118:	e09c      	b.n	8002254 <v_MacForwardProp_int+0x3f4>
 800211a:	bf00      	nop
 800211c:	20000200 	.word	0x20000200
 8002120:	20000254 	.word	0x20000254
			{
				//long_aux += ((int16_t*)WBptr)[index_w + (i * cols) + j] * ((int16_t*)Funcptr)[j];	//mac
				if((j < (cont-1)) | (cols%2 == 0))
 8002124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002128:	3b01      	subs	r3, #1
 800212a:	461a      	mov	r2, r3
 800212c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002130:	4293      	cmp	r3, r2
 8002132:	bf34      	ite	cc
 8002134:	2301      	movcc	r3, #1
 8002136:	2300      	movcs	r3, #0
 8002138:	b2da      	uxtb	r2, r3
 800213a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf0c      	ite	eq
 8002146:	2301      	moveq	r3, #1
 8002148:	2300      	movne	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4313      	orrs	r3, r2
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d04e      	beq.n	80021f2 <v_MacForwardProp_int+0x392>
					long_aux = (int32_t)__SMLAD((((((int16_t*)WBptr)[index_w + (i * cols) + 2*j] << 16) & 0xffff0000) | ((((int16_t*)WBptr)[index_w + (i * cols) + 2*j + 1]) & 0x0000ffff)), (((((int16_t*)Funcptr)[2*j] << 16) & 0xffff0000) | ((((int16_t*)Funcptr)[2*j + 1]) & 0x0000ffff)), long_aux);
 8002154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002158:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800215c:	fb02 f203 	mul.w	r2, r2, r3
 8002160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	441a      	add	r2, r3
 8002168:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800216c:	4413      	add	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	4413      	add	r3, r2
 8002174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002178:	041b      	lsls	r3, r3, #16
 800217a:	4619      	mov	r1, r3
 800217c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002180:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002184:	fb02 f203 	mul.w	r2, r2, r3
 8002188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	441a      	add	r2, r3
 8002190:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002194:	4413      	add	r3, r2
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	4413      	add	r3, r2
 800219e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4319      	orrs	r1, r3
 80021a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	4618      	mov	r0, r3
 80021b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	ea40 0203 	orr.w	r2, r0, r3
 80021ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021d2:	66f9      	str	r1, [r7, #108]	; 0x6c
 80021d4:	66ba      	str	r2, [r7, #104]	; 0x68
 80021d6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80021d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80021dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80021de:	fb23 1302 	smlad	r3, r3, r2, r1
 80021e2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80021e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021e6:	461a      	mov	r2, r3
 80021e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80021ec:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 80021f0:	e02b      	b.n	800224a <v_MacForwardProp_int+0x3ea>
				else
					long_aux = (int32_t)__SMLAD((((int16_t*)WBptr)[index_w + (i * cols) + 2*j] & 0x0000ffff), (((int16_t*)Funcptr)[2*j] & 0x0000ffff), long_aux);
 80021f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80021fa:	fb02 f203 	mul.w	r2, r2, r3
 80021fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	441a      	add	r2, r3
 8002206:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800220a:	4413      	add	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4413      	add	r3, r2
 8002212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002216:	b299      	uxth	r1, r3
 8002218:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002226:	b29a      	uxth	r2, r3
 8002228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800222c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800222e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002230:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002234:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002236:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002238:	fb23 1302 	smlad	r3, r3, r2, r1
 800223c:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 800223e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002240:	461a      	mov	r2, r3
 8002242:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002246:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
 800224a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800224e:	3301      	adds	r3, #1
 8002250:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002258:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800225c:	429a      	cmp	r2, r3
 800225e:	f4ff af61 	bcc.w	8002124 <v_MacForwardProp_int+0x2c4>
			}

			//long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (xNetParam.NonLayer[layer] * ((int16_t*)WBptr)[index_b + i]));
			long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (((int16_t*)WBptr)[index_b + i]));
 8002262:	4bc8      	ldr	r3, [pc, #800]	; (8002584 <v_MacForwardProp_int+0x724>)
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	ed93 8a00 	vldr	s16, [r3]
 8002270:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002274:	f7fe fd1e 	bl	8000cb4 <__aeabi_l2f>
 8002278:	ee07 0a90 	vmov	s15, r0
 800227c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002280:	ee17 0a90 	vmov	r0, s15
 8002284:	f7fe f90c 	bl	80004a0 <__aeabi_f2d>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	ec43 2b10 	vmov	d0, r2, r3
 8002290:	f009 fa6a 	bl	800b768 <round>
 8002294:	ec55 4b10 	vmov	r4, r5, d0
 8002298:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800229c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022a0:	4413      	add	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f8e5 	bl	800047c <__aeabi_i2d>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4620      	mov	r0, r4
 80022b8:	4629      	mov	r1, r5
 80022ba:	f7fd ff93 	bl	80001e4 <__adddf3>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	f7fe fdaf 	bl	8000e28 <__aeabi_d2lz>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

			// OVERFLOW and UNDERFLOW PROTECTION
			if (long_aux >= INT16_MAX)
 80022d2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80022d6:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 80022da:	f04f 0100 	mov.w	r1, #0
 80022de:	4290      	cmp	r0, r2
 80022e0:	eb71 0303 	sbcs.w	r3, r1, r3
 80022e4:	da06      	bge.n	80022f4 <v_MacForwardProp_int+0x494>
			{
				long_aux = INT16_MAX;
 80022e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 80022f2:	e00c      	b.n	800230e <v_MacForwardProp_int+0x4ae>
			}
			else if (long_aux <= INT16_MIN)
 80022f4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80022f8:	48a3      	ldr	r0, [pc, #652]	; (8002588 <v_MacForwardProp_int+0x728>)
 80022fa:	f04f 31ff 	mov.w	r1, #4294967295
 80022fe:	4282      	cmp	r2, r0
 8002300:	418b      	sbcs	r3, r1
 8002302:	da04      	bge.n	800230e <v_MacForwardProp_int+0x4ae>
			{
				long_aux = INT16_MIN;
 8002304:	4aa1      	ldr	r2, [pc, #644]	; (800258c <v_MacForwardProp_int+0x72c>)
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			}
			((int16_t*)res)[i] = (int16_t)long_aux;
 800230e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
 800231c:	801a      	strh	r2, [r3, #0]
		for (size_t i = 0; i < rows; i++)
 800231e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002322:	3301      	adds	r3, #1
 8002324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002328:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800232c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002330:	429a      	cmp	r2, r3
 8002332:	f4ff aee8 	bcc.w	8002106 <v_MacForwardProp_int+0x2a6>
		}
		break;
 8002336:	e30d      	b.n	8002954 <v_MacForwardProp_int+0xaf4>

	case 8:
		cont = (cols/2 + cols%2);
 8002338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800233c:	085a      	lsrs	r2, r3, #1
 800233e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (size_t i = 0; i < rows; i++)
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002352:	e104      	b.n	800255e <v_MacForwardProp_int+0x6fe>
		{
			long_aux = 0;
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002366:	e094      	b.n	8002492 <v_MacForwardProp_int+0x632>
			{
				//long_aux += ((int8_t*)WBptr)[index_w + (i * cols) + j] * ((int8_t*)Funcptr)[j];	//mac
				if((j < (cont-1)) | (cols%2 == 0))
 8002368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800236c:	3b01      	subs	r3, #1
 800236e:	461a      	mov	r2, r3
 8002370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002374:	4293      	cmp	r3, r2
 8002376:	bf34      	ite	cc
 8002378:	2301      	movcc	r3, #1
 800237a:	2300      	movcs	r3, #0
 800237c:	b2da      	uxtb	r2, r3
 800237e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d04c      	beq.n	8002432 <v_MacForwardProp_int+0x5d2>
					long_aux = (int32_t)__SMLAD((((((int8_t*)WBptr)[index_w + (i * cols) + 2*j] << 16) & 0xffff0000) | ((((int8_t*)WBptr)[index_w + (i * cols) + 2*j + 1]) & 0x0000ffff)), (((((int8_t*)Funcptr)[2*j] << 16) & 0xffff0000) | ((((int8_t*)Funcptr)[2*j + 1]) & 0x0000ffff)), long_aux);
 8002398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800239c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80023a0:	fb02 f203 	mul.w	r2, r2, r3
 80023a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	441a      	add	r2, r3
 80023ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023b0:	4413      	add	r3, r2
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	f993 3000 	ldrsb.w	r3, [r3]
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	4619      	mov	r1, r3
 80023be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80023c6:	fb02 f203 	mul.w	r2, r2, r3
 80023ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	441a      	add	r2, r3
 80023d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023d6:	4413      	add	r3, r2
 80023d8:	3301      	adds	r3, #1
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	f993 3000 	ldrsb.w	r3, [r3]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4319      	orrs	r1, r3
 80023e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	f993 3000 	ldrsb.w	r3, [r3]
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	4618      	mov	r0, r3
 80023f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	3301      	adds	r3, #1
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	f993 3000 	ldrsb.w	r3, [r3]
 8002408:	b29b      	uxth	r3, r3
 800240a:	ea40 0203 	orr.w	r2, r0, r3
 800240e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002412:	64f9      	str	r1, [r7, #76]	; 0x4c
 8002414:	64ba      	str	r2, [r7, #72]	; 0x48
 8002416:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800241c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800241e:	fb23 1302 	smlad	r3, r3, r2, r1
 8002422:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8002424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002426:	461a      	mov	r2, r3
 8002428:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800242c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 8002430:	e02a      	b.n	8002488 <v_MacForwardProp_int+0x628>
				else
					long_aux = (int32_t)__SMLAD((((int8_t*)WBptr)[index_w + (i * cols) + 2*j] & 0x0000ffff), (((int8_t*)Funcptr)[2*j] & 0x0000ffff), long_aux);
 8002432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002436:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800243a:	fb02 f203 	mul.w	r2, r2, r3
 800243e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	441a      	add	r2, r3
 8002446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800244a:	4413      	add	r3, r2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	f993 3000 	ldrsb.w	r3, [r3]
 8002454:	b299      	uxth	r1, r3
 8002456:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	f993 3000 	ldrsb.w	r3, [r3]
 8002464:	b29a      	uxth	r2, r3
 8002466:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800246a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800246c:	63ba      	str	r2, [r7, #56]	; 0x38
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002474:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002476:	fb23 1302 	smlad	r3, r3, r2, r1
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	461a      	mov	r2, r3
 8002480:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002484:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
 8002488:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800248c:	3301      	adds	r3, #1
 800248e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800249a:	429a      	cmp	r2, r3
 800249c:	f4ff af64 	bcc.w	8002368 <v_MacForwardProp_int+0x508>
			}

			//long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (xNetParam.NonLayer[layer] * ((int8_t*)WBptr)[index_b + i]));
			long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (((int8_t*)WBptr)[index_b + i]));
 80024a0:	4b38      	ldr	r3, [pc, #224]	; (8002584 <v_MacForwardProp_int+0x724>)
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	7afb      	ldrb	r3, [r7, #11]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	ed93 8a00 	vldr	s16, [r3]
 80024ae:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80024b2:	f7fe fbff 	bl	8000cb4 <__aeabi_l2f>
 80024b6:	ee07 0a90 	vmov	s15, r0
 80024ba:	ee68 7a27 	vmul.f32	s15, s16, s15
 80024be:	ee17 0a90 	vmov	r0, s15
 80024c2:	f7fd ffed 	bl	80004a0 <__aeabi_f2d>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	ec43 2b10 	vmov	d0, r2, r3
 80024ce:	f009 f94b 	bl	800b768 <round>
 80024d2:	ec55 4b10 	vmov	r4, r5, d0
 80024d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80024da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024de:	4413      	add	r3, r2
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	f993 3000 	ldrsb.w	r3, [r3]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd ffc7 	bl	800047c <__aeabi_i2d>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4620      	mov	r0, r4
 80024f4:	4629      	mov	r1, r5
 80024f6:	f7fd fe75 	bl	80001e4 <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f7fe fc91 	bl	8000e28 <__aeabi_d2lz>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

			// OVERFLOW and UNDERFLOW PROTECTION
			if (long_aux >= INT8_MAX)
 800250e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002512:	2a7f      	cmp	r2, #127	; 0x7f
 8002514:	f173 0300 	sbcs.w	r3, r3, #0
 8002518:	db06      	blt.n	8002528 <v_MacForwardProp_int+0x6c8>
			{
				long_aux = INT8_MAX;
 800251a:	f04f 027f 	mov.w	r2, #127	; 0x7f
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 8002526:	e00e      	b.n	8002546 <v_MacForwardProp_int+0x6e6>
			}
			else if (long_aux <= INT8_MIN)
 8002528:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800252c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
 8002530:	f04f 31ff 	mov.w	r1, #4294967295
 8002534:	4282      	cmp	r2, r0
 8002536:	418b      	sbcs	r3, r1
 8002538:	da05      	bge.n	8002546 <v_MacForwardProp_int+0x6e6>
			{
				long_aux = INT8_MIN;
 800253a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			}
			((int8_t*)res)[i] = (int8_t)long_aux;
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800254c:	4413      	add	r3, r2
 800254e:	f997 20c0 	ldrsb.w	r2, [r7, #192]	; 0xc0
 8002552:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < rows; i++)
 8002554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002558:	3301      	adds	r3, #1
 800255a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800255e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002566:	429a      	cmp	r2, r3
 8002568:	f4ff aef4 	bcc.w	8002354 <v_MacForwardProp_int+0x4f4>
		}
		break;
 800256c:	e1f2      	b.n	8002954 <v_MacForwardProp_int+0xaf4>

	case 4:;
		int16_t EvOdd_Lm1 = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		int16_t EvOdd_L = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		for (size_t i = 0; i < (layer - 1); i++)
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002580:	e018      	b.n	80025b4 <v_MacForwardProp_int+0x754>
 8002582:	bf00      	nop
 8002584:	20000254 	.word	0x20000254
 8002588:	ffff8001 	.word	0xffff8001
 800258c:	ffff8000 	.word	0xffff8000
		{
			EvOdd_Lm1 += xNetParam.NonLayer[i];
 8002590:	4a8e      	ldr	r2, [pc, #568]	; (80027cc <v_MacForwardProp_int+0x96c>)
 8002592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	889b      	ldrh	r3, [r3, #4]
 800259c:	b29a      	uxth	r2, r3
 800259e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80025a2:	4413      	add	r3, r2
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		for (size_t i = 0; i < (layer - 1); i++)
 80025aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025ae:	3301      	adds	r3, #1
 80025b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025b4:	7afb      	ldrb	r3, [r7, #11]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	461a      	mov	r2, r3
 80025ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025be:	4293      	cmp	r3, r2
 80025c0:	d3e6      	bcc.n	8002590 <v_MacForwardProp_int+0x730>
		}
		EvOdd_L = (EvOdd_Lm1 + xNetParam.NonLayer[layer - 1]) % 2;
 80025c2:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
 80025c6:	7afb      	ldrb	r3, [r7, #11]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4980      	ldr	r1, [pc, #512]	; (80027cc <v_MacForwardProp_int+0x96c>)
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	440b      	add	r3, r1
 80025d0:	889b      	ldrh	r3, [r3, #4]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	bfb8      	it	lt
 80025de:	425b      	neglt	r3, r3
 80025e0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		EvOdd_Lm1 = EvOdd_Lm1 % 2;
 80025e4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	bfb8      	it	lt
 80025f0:	425b      	neglt	r3, r3
 80025f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

		cont = (cols/2 + cols%2);
 80025f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025fa:	085a      	lsrs	r2, r3, #1
 80025fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (size_t i = 0; i < rows; i++)
 800260a:	2300      	movs	r3, #0
 800260c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002610:	e197      	b.n	8002942 <v_MacForwardProp_int+0xae2>
		{
			long_aux = 0;
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002624:	e104      	b.n	8002830 <v_MacForwardProp_int+0x9d0>
			{
				//long_aux += ((int8_t*)WBptr)[index_w + (i * cols) + j] * ((int8_t*)Funcptr)[j];	//mac
				//long_aux += v_GetByte_4bits(((int8_t*)WBptr)[(index_w + (i * cols) + j) / 2], (index_w + (i * cols) + j) % 2) * v_GetByte_4bits(((int8_t*)Funcptr)[(j + EvOdd_Lm1) / 2], (j + EvOdd_Lm1) % 2);

				if((j < (cont-1)) | (cols%2 == 0))
 8002626:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800262a:	3b01      	subs	r3, #1
 800262c:	461a      	mov	r2, r3
 800262e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002632:	4293      	cmp	r3, r2
 8002634:	bf34      	ite	cc
 8002636:	2301      	movcc	r3, #1
 8002638:	2300      	movcs	r3, #0
 800263a:	b2da      	uxtb	r2, r3
 800263c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80bc 	beq.w	80027d0 <v_MacForwardProp_int+0x970>
					long_aux = (int32_t)__SMLAD((((v_GetByte_4bits(((int8_t*)WBptr)[(index_w + (i * cols) + 2*j) / 2], (index_w + (i * cols) + 2*j) % 2) << 16) & 0xffff0000) | ((v_GetByte_4bits(((int8_t*)WBptr)[(index_w + (i * cols) + 2*j + 1) / 2], (index_w + (i * cols) + 2*j + 1) % 2)) & 0x0000ffff)), (((v_GetByte_4bits(((int8_t*)Funcptr)[(2*j + EvOdd_Lm1) / 2], (2*j + EvOdd_Lm1) % 2) << 16) & 0xffff0000) | ((v_GetByte_4bits(((int8_t*)Funcptr)[(2*j + 1 + EvOdd_Lm1) / 2], (2*j + 1 + EvOdd_Lm1) % 2)) & 0x0000ffff)), long_aux);
 8002658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800265c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002660:	fb02 f203 	mul.w	r2, r2, r3
 8002664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	441a      	add	r2, r3
 800266c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002670:	4413      	add	r3, r2
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	4413      	add	r3, r2
 8002678:	f993 0000 	ldrsb.w	r0, [r3]
 800267c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002680:	b2da      	uxtb	r2, r3
 8002682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002686:	b2db      	uxtb	r3, r3
 8002688:	fb12 f303 	smulbb	r3, r2, r3
 800268c:	b2da      	uxtb	r2, r3
 800268e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002692:	b2db      	uxtb	r3, r3
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4413      	add	r3, r2
 800269a:	b2da      	uxtb	r2, r3
 800269c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	b25b      	sxtb	r3, r3
 80026ae:	4619      	mov	r1, r3
 80026b0:	f001 fb6c 	bl	8003d8c <v_GetByte_4bits>
 80026b4:	4603      	mov	r3, r0
 80026b6:	041b      	lsls	r3, r3, #16
 80026b8:	461c      	mov	r4, r3
 80026ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80026c2:	fb02 f203 	mul.w	r2, r2, r3
 80026c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	441a      	add	r2, r3
 80026ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026d2:	4413      	add	r3, r2
 80026d4:	3301      	adds	r3, #1
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	f993 0000 	ldrsb.w	r0, [r3]
 80026e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	fb12 f303 	smulbb	r3, r2, r3
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4413      	add	r3, r2
 8002708:	b2db      	uxtb	r3, r3
 800270a:	3301      	adds	r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	b25b      	sxtb	r3, r3
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	b25b      	sxtb	r3, r3
 8002716:	4619      	mov	r1, r3
 8002718:	f001 fb38 	bl	8003d8c <v_GetByte_4bits>
 800271c:	4603      	mov	r3, r0
 800271e:	b29b      	uxth	r3, r3
 8002720:	431c      	orrs	r4, r3
 8002722:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002726:	005a      	lsls	r2, r3, #1
 8002728:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800272c:	4413      	add	r3, r2
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	f993 0000 	ldrsb.w	r0, [r3]
 8002738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800273c:	b2db      	uxtb	r3, r3
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	b2da      	uxtb	r2, r3
 8002742:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4413      	add	r3, r2
 800274a:	b2db      	uxtb	r3, r3
 800274c:	b25b      	sxtb	r3, r3
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	b25b      	sxtb	r3, r3
 8002754:	4619      	mov	r1, r3
 8002756:	f001 fb19 	bl	8003d8c <v_GetByte_4bits>
 800275a:	4603      	mov	r3, r0
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	461d      	mov	r5, r3
 8002760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002764:	005a      	lsls	r2, r3, #1
 8002766:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800276a:	4413      	add	r3, r2
 800276c:	3301      	adds	r3, #1
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4413      	add	r3, r2
 8002774:	f993 0000 	ldrsb.w	r0, [r3]
 8002778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800277c:	b2db      	uxtb	r3, r3
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	b2da      	uxtb	r2, r3
 8002782:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4413      	add	r3, r2
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	b25b      	sxtb	r3, r3
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	b25b      	sxtb	r3, r3
 8002798:	4619      	mov	r1, r3
 800279a:	f001 faf7 	bl	8003d8c <v_GetByte_4bits>
 800279e:	4603      	mov	r3, r0
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	ea45 0203 	orr.w	r2, r5, r3
 80027a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027aa:	62fc      	str	r4, [r7, #44]	; 0x2c
 80027ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b6:	fb23 1302 	smlad	r3, r3, r2, r1
 80027ba:	623b      	str	r3, [r7, #32]
  return(result);
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	461a      	mov	r2, r3
 80027c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80027c4:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 80027c8:	e02d      	b.n	8002826 <v_MacForwardProp_int+0x9c6>
 80027ca:	bf00      	nop
 80027cc:	20000200 	.word	0x20000200
				else
					long_aux = (int32_t)__SMLAD((((int8_t*)WBptr)[index_w + (i * cols) + 2*j] & 0x0000ffff), (((int8_t*)Funcptr)[2*j] & 0x0000ffff), long_aux);
 80027d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80027d8:	fb02 f203 	mul.w	r2, r2, r3
 80027dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	441a      	add	r2, r3
 80027e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027e8:	4413      	add	r3, r2
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	f993 3000 	ldrsb.w	r3, [r3]
 80027f2:	b299      	uxth	r1, r3
 80027f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002802:	b29a      	uxth	r2, r3
 8002804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002808:	61f9      	str	r1, [r7, #28]
 800280a:	61ba      	str	r2, [r7, #24]
 800280c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	6979      	ldr	r1, [r7, #20]
 8002814:	fb23 1302 	smlad	r3, r3, r2, r1
 8002818:	613b      	str	r3, [r7, #16]
  return(result);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	461a      	mov	r2, r3
 800281e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002822:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
 8002826:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800282a:	3301      	adds	r3, #1
 800282c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002834:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002838:	429a      	cmp	r2, r3
 800283a:	f4ff aef4 	bcc.w	8002626 <v_MacForwardProp_int+0x7c6>
			}

			//long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (xNetParam.NonLayer[layer] * ((int8_t*)WBptr)[index_b + i]));
			//long_aux = round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (xNetParam.NonLayer[layer] * v_GetByte_4bits(((int8_t*)WBptr)[(index_b + i) / 2], (index_b + i) % 2));
			long_aux = round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (v_GetByte_4bits(((int8_t*)WBptr)[(index_b + i) / 2], (index_b + i) % 2));
 800283e:	4b48      	ldr	r3, [pc, #288]	; (8002960 <v_MacForwardProp_int+0xb00>)
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	7afb      	ldrb	r3, [r7, #11]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	ed93 8a00 	vldr	s16, [r3]
 800284c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002850:	f7fe fa30 	bl	8000cb4 <__aeabi_l2f>
 8002854:	ee07 0a90 	vmov	s15, r0
 8002858:	ee68 7a27 	vmul.f32	s15, s16, s15
 800285c:	ee17 0a90 	vmov	r0, s15
 8002860:	f7fd fe1e 	bl	80004a0 <__aeabi_f2d>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	ec43 2b10 	vmov	d0, r2, r3
 800286c:	f008 ff7c 	bl	800b768 <round>
 8002870:	ec55 4b10 	vmov	r4, r5, d0
 8002874:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800287c:	4413      	add	r3, r2
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	4413      	add	r3, r2
 8002884:	f993 0000 	ldrsb.w	r0, [r3]
 8002888:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800288c:	b2da      	uxtb	r2, r3
 800288e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002892:	b2db      	uxtb	r3, r3
 8002894:	4413      	add	r3, r2
 8002896:	b2db      	uxtb	r3, r3
 8002898:	b25b      	sxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b25b      	sxtb	r3, r3
 80028a0:	4619      	mov	r1, r3
 80028a2:	f001 fa73 	bl	8003d8c <v_GetByte_4bits>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fde7 	bl	800047c <__aeabi_i2d>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4620      	mov	r0, r4
 80028b4:	4629      	mov	r1, r5
 80028b6:	f7fd fc95 	bl	80001e4 <__adddf3>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f7fe fab1 	bl	8000e28 <__aeabi_d2lz>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

			// OVERFLOW and UNDERFLOW PROTECTION
			if (long_aux >= INT4_MAX)
 80028ce:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80028d2:	2a0f      	cmp	r2, #15
 80028d4:	f173 0300 	sbcs.w	r3, r3, #0
 80028d8:	db06      	blt.n	80028e8 <v_MacForwardProp_int+0xa88>
			{
				long_aux = INT4_MAX;
 80028da:	f04f 020f 	mov.w	r2, #15
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 80028e6:	e00e      	b.n	8002906 <v_MacForwardProp_int+0xaa6>
			}
			else if (long_aux <= INT4_MIN)
 80028e8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80028ec:	f06f 000e 	mvn.w	r0, #14
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	4282      	cmp	r2, r0
 80028f6:	418b      	sbcs	r3, r1
 80028f8:	da05      	bge.n	8002906 <v_MacForwardProp_int+0xaa6>
			{
				long_aux = INT4_MIN;
 80028fa:	f06f 020f 	mvn.w	r2, #15
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			}
			//((int8_t*)res)[i] = (int8_t)long_aux;
			v_MountByte_4bits(&((int8_t*)res)[(EvOdd_L + i) / 2], (int8_t)long_aux, (EvOdd_L + i) % 2);
 8002906:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	; 0x82
 800290a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800290e:	4413      	add	r3, r2
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	18d0      	adds	r0, r2, r3
 8002916:	f997 10c0 	ldrsb.w	r1, [r7, #192]	; 0xc0
 800291a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800291e:	b2da      	uxtb	r2, r3
 8002920:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4413      	add	r3, r2
 8002928:	b2db      	uxtb	r3, r3
 800292a:	b25b      	sxtb	r3, r3
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	b25b      	sxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	f001 f9fc 	bl	8003d30 <v_MountByte_4bits>
		for (size_t i = 0; i < rows; i++)
 8002938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800293c:	3301      	adds	r3, #1
 800293e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002942:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294a:	429a      	cmp	r2, r3
 800294c:	f4ff ae61 	bcc.w	8002612 <v_MacForwardProp_int+0x7b2>
		}
		break;
 8002950:	e000      	b.n	8002954 <v_MacForwardProp_int+0xaf4>

	default:
		break;
 8002952:	bf00      	nop
	}
}
 8002954:	bf00      	nop
 8002956:	37c8      	adds	r7, #200	; 0xc8
 8002958:	46bd      	mov	sp, r7
 800295a:	ecbd 8b02 	vpop	{d8}
 800295e:	bdb0      	pop	{r4, r5, r7, pc}
 8002960:	20000254 	.word	0x20000254

08002964 <v_ReLUActiv_int>:
//	in		zptr, xnetparam, layer, funcptr
//	out		none
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_ReLUActiv_int(void* ZPtr, uint16_t layer, void* funcptr)
{
 8002964:	b5b0      	push	{r4, r5, r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	460b      	mov	r3, r1
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	817b      	strh	r3, [r7, #10]
	long long int long_aux;
	switch (xNetParam.xVarPrecision.precision)
 8002972:	4bb6      	ldr	r3, [pc, #728]	; (8002c4c <v_ReLUActiv_int+0x2e8>)
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	3b04      	subs	r3, #4
 800297a:	2b1c      	cmp	r3, #28
 800297c:	f200 82c6 	bhi.w	8002f0c <v_ReLUActiv_int+0x5a8>
 8002980:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <v_ReLUActiv_int+0x24>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	08002d71 	.word	0x08002d71
 800298c:	08002f0d 	.word	0x08002f0d
 8002990:	08002f0d 	.word	0x08002f0d
 8002994:	08002f0d 	.word	0x08002f0d
 8002998:	08002c45 	.word	0x08002c45
 800299c:	08002f0d 	.word	0x08002f0d
 80029a0:	08002f0d 	.word	0x08002f0d
 80029a4:	08002f0d 	.word	0x08002f0d
 80029a8:	08002f0d 	.word	0x08002f0d
 80029ac:	08002f0d 	.word	0x08002f0d
 80029b0:	08002f0d 	.word	0x08002f0d
 80029b4:	08002f0d 	.word	0x08002f0d
 80029b8:	08002b1f 	.word	0x08002b1f
 80029bc:	08002f0d 	.word	0x08002f0d
 80029c0:	08002f0d 	.word	0x08002f0d
 80029c4:	08002f0d 	.word	0x08002f0d
 80029c8:	08002f0d 	.word	0x08002f0d
 80029cc:	08002f0d 	.word	0x08002f0d
 80029d0:	08002f0d 	.word	0x08002f0d
 80029d4:	08002f0d 	.word	0x08002f0d
 80029d8:	08002f0d 	.word	0x08002f0d
 80029dc:	08002f0d 	.word	0x08002f0d
 80029e0:	08002f0d 	.word	0x08002f0d
 80029e4:	08002f0d 	.word	0x08002f0d
 80029e8:	08002f0d 	.word	0x08002f0d
 80029ec:	08002f0d 	.word	0x08002f0d
 80029f0:	08002f0d 	.word	0x08002f0d
 80029f4:	08002f0d 	.word	0x08002f0d
 80029f8:	080029fd 	.word	0x080029fd
	{
	case 32:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002a00:	e081      	b.n	8002b06 <v_ReLUActiv_int+0x1a2>
		{
			if (((int32_t*)ZPtr)[i] < 0)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4413      	add	r3, r2
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da37      	bge.n	8002a80 <v_ReLUActiv_int+0x11c>
			{
				long_aux = (((long long int)xNetParam.LeakyReLU_rate * ((int32_t*)ZPtr)[i]) / UINT16_MAX) + xQuantizedVal.Zy[layer];
 8002a10:	4b8e      	ldr	r3, [pc, #568]	; (8002c4c <v_ReLUActiv_int+0x2e8>)
 8002a12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	b298      	uxth	r0, r3
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a2e:	fb02 f501 	mul.w	r5, r2, r1
 8002a32:	fb00 f403 	mul.w	r4, r0, r3
 8002a36:	442c      	add	r4, r5
 8002a38:	fba0 0102 	umull	r0, r1, r0, r2
 8002a3c:	1863      	adds	r3, r4, r1
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	f7fe f972 	bl	8000d30 <__aeabi_ldivmod>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7fe f92e 	bl	8000cb4 <__aeabi_l2f>
 8002a58:	ee07 0a10 	vmov	s14, r0
 8002a5c:	4b7c      	ldr	r3, [pc, #496]	; (8002c50 <v_ReLUActiv_int+0x2ec>)
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	897b      	ldrh	r3, [r7, #10]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6e:	ee17 0a90 	vmov	r0, s15
 8002a72:	f7fe f9c5 	bl	8000e00 <__aeabi_f2lz>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002a7e:	e019      	b.n	8002ab4 <v_ReLUActiv_int+0x150>
			}
			else
			{
				long_aux = ((int32_t*)ZPtr)[i] + xQuantizedVal.Zy[layer];
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a92:	4b6f      	ldr	r3, [pc, #444]	; (8002c50 <v_ReLUActiv_int+0x2ec>)
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	897b      	ldrh	r3, [r7, #10]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa4:	ee17 0a90 	vmov	r0, s15
 8002aa8:	f7fe f9aa 	bl	8000e00 <__aeabi_f2lz>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if (long_aux >= INT32_MAX)
 8002ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ab8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	4282      	cmp	r2, r0
 8002ac2:	418b      	sbcs	r3, r1
 8002ac4:	db06      	blt.n	8002ad4 <v_ReLUActiv_int+0x170>
			{
				long_aux = INT32_MAX;
 8002ac6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002ad2:	e00f      	b.n	8002af4 <v_ReLUActiv_int+0x190>
			}
			else if (long_aux <= INT32_MIN)
 8002ad4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ad8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	4290      	cmp	r0, r2
 8002ae2:	eb71 0303 	sbcs.w	r3, r1, r3
 8002ae6:	db05      	blt.n	8002af4 <v_ReLUActiv_int+0x190>
			{
				long_aux = INT32_MIN;
 8002ae8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int32_t*)funcptr)[i] = (int32_t)long_aux;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002afe:	601a      	str	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	3301      	adds	r3, #1
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	897b      	ldrh	r3, [r7, #10]
 8002b08:	4a50      	ldr	r2, [pc, #320]	; (8002c4c <v_ReLUActiv_int+0x2e8>)
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	889b      	ldrh	r3, [r3, #4]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	4293      	cmp	r3, r2
 8002b18:	f4ff af73 	bcc.w	8002a02 <v_ReLUActiv_int+0x9e>
		}
		break;
 8002b1c:	e1f7      	b.n	8002f0e <v_ReLUActiv_int+0x5aa>

	case 16:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	e083      	b.n	8002c2c <v_ReLUActiv_int+0x2c8>
		{
			if (((int16_t*)ZPtr)[i] < 0)
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	da38      	bge.n	8002ba6 <v_ReLUActiv_int+0x242>
			{
				long_aux = (((long long int)xNetParam.LeakyReLU_rate * ((int16_t*)ZPtr)[i]) / UINT16_MAX) + xQuantizedVal.Zy[layer];
 8002b34:	4b45      	ldr	r3, [pc, #276]	; (8002c4c <v_ReLUActiv_int+0x2e8>)
 8002b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	b298      	uxth	r0, r3
 8002b3e:	f04f 0100 	mov.w	r1, #0
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4e:	b21a      	sxth	r2, r3
 8002b50:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b54:	fb02 f501 	mul.w	r5, r2, r1
 8002b58:	fb00 f403 	mul.w	r4, r0, r3
 8002b5c:	442c      	add	r4, r5
 8002b5e:	fba0 0102 	umull	r0, r1, r0, r2
 8002b62:	1863      	adds	r3, r4, r1
 8002b64:	4619      	mov	r1, r3
 8002b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	f7fe f8df 	bl	8000d30 <__aeabi_ldivmod>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f7fe f89b 	bl	8000cb4 <__aeabi_l2f>
 8002b7e:	ee07 0a10 	vmov	s14, r0
 8002b82:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <v_ReLUActiv_int+0x2ec>)
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	edd3 7a00 	vldr	s15, [r3]
 8002b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b94:	ee17 0a90 	vmov	r0, s15
 8002b98:	f7fe f932 	bl	8000e00 <__aeabi_f2lz>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002ba4:	e01a      	b.n	8002bdc <v_ReLUActiv_int+0x278>
			}
			else
			{
				long_aux = ((int16_t*)ZPtr)[i] + xQuantizedVal.Zy[layer];
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4413      	add	r3, r2
 8002bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <v_ReLUActiv_int+0x2ec>)
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	897b      	ldrh	r3, [r7, #10]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	edd3 7a00 	vldr	s15, [r3]
 8002bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bcc:	ee17 0a90 	vmov	r0, s15
 8002bd0:	f7fe f916 	bl	8000e00 <__aeabi_f2lz>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if (long_aux >= INT16_MAX)
 8002bdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002be0:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	4290      	cmp	r0, r2
 8002bea:	eb71 0303 	sbcs.w	r3, r1, r3
 8002bee:	da06      	bge.n	8002bfe <v_ReLUActiv_int+0x29a>
			{
				long_aux = INT16_MAX;
 8002bf0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002bfc:	e00c      	b.n	8002c18 <v_ReLUActiv_int+0x2b4>
			}
			else if (long_aux <= INT16_MIN)
 8002bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c02:	4814      	ldr	r0, [pc, #80]	; (8002c54 <v_ReLUActiv_int+0x2f0>)
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295
 8002c08:	4282      	cmp	r2, r0
 8002c0a:	418b      	sbcs	r3, r1
 8002c0c:	da04      	bge.n	8002c18 <v_ReLUActiv_int+0x2b4>
			{
				long_aux = INT16_MIN;
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <v_ReLUActiv_int+0x2f4>)
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295
 8002c14:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int16_t*)funcptr)[i] = (int16_t)long_aux;
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8002c24:	801a      	strh	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	897b      	ldrh	r3, [r7, #10]
 8002c2e:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <v_ReLUActiv_int+0x2e8>)
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	889b      	ldrh	r3, [r3, #4]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	f4ff af71 	bcc.w	8002b24 <v_ReLUActiv_int+0x1c0>
		}
		break;
 8002c42:	e164      	b.n	8002f0e <v_ReLUActiv_int+0x5aa>

	case 8:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	e086      	b.n	8002d58 <v_ReLUActiv_int+0x3f4>
 8002c4a:	bf00      	nop
 8002c4c:	20000200 	.word	0x20000200
 8002c50:	20000254 	.word	0x20000254
 8002c54:	ffff8001 	.word	0xffff8001
 8002c58:	ffff8000 	.word	0xffff8000
		{
			if (((int8_t*)ZPtr)[i] < 0)
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	f993 3000 	ldrsb.w	r3, [r3]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da37      	bge.n	8002cda <v_ReLUActiv_int+0x376>
			{
				long_aux = (((long long int)xNetParam.LeakyReLU_rate * ((int8_t*)ZPtr)[i]) / UINT16_MAX) + xQuantizedVal.Zy[layer];
 8002c6a:	4bab      	ldr	r3, [pc, #684]	; (8002f18 <v_ReLUActiv_int+0x5b4>)
 8002c6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b298      	uxth	r0, r3
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c82:	b25a      	sxtb	r2, r3
 8002c84:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c88:	fb02 f501 	mul.w	r5, r2, r1
 8002c8c:	fb00 f403 	mul.w	r4, r0, r3
 8002c90:	442c      	add	r4, r5
 8002c92:	fba0 0102 	umull	r0, r1, r0, r2
 8002c96:	1863      	adds	r3, r4, r1
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	f7fe f845 	bl	8000d30 <__aeabi_ldivmod>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	f7fe f801 	bl	8000cb4 <__aeabi_l2f>
 8002cb2:	ee07 0a10 	vmov	s14, r0
 8002cb6:	4b99      	ldr	r3, [pc, #612]	; (8002f1c <v_ReLUActiv_int+0x5b8>)
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	897b      	ldrh	r3, [r7, #10]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	edd3 7a00 	vldr	s15, [r3]
 8002cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc8:	ee17 0a90 	vmov	r0, s15
 8002ccc:	f7fe f898 	bl	8000e00 <__aeabi_f2lz>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002cd8:	e019      	b.n	8002d0e <v_ReLUActiv_int+0x3aa>
			}
			else
			{
				long_aux = ((int8_t*)ZPtr)[i] + xQuantizedVal.Zy[layer];
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cec:	4b8b      	ldr	r3, [pc, #556]	; (8002f1c <v_ReLUActiv_int+0x5b8>)
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	897b      	ldrh	r3, [r7, #10]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfe:	ee17 0a90 	vmov	r0, s15
 8002d02:	f7fe f87d 	bl	8000e00 <__aeabi_f2lz>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if (long_aux >= INT8_MAX)
 8002d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d12:	2a7f      	cmp	r2, #127	; 0x7f
 8002d14:	f173 0300 	sbcs.w	r3, r3, #0
 8002d18:	db06      	blt.n	8002d28 <v_ReLUActiv_int+0x3c4>
			{
				long_aux = INT8_MAX;
 8002d1a:	f04f 027f 	mov.w	r2, #127	; 0x7f
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002d26:	e00e      	b.n	8002d46 <v_ReLUActiv_int+0x3e2>
			}
			else if (long_aux <= INT8_MIN)
 8002d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d2c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
 8002d30:	f04f 31ff 	mov.w	r1, #4294967295
 8002d34:	4282      	cmp	r2, r0
 8002d36:	418b      	sbcs	r3, r1
 8002d38:	da05      	bge.n	8002d46 <v_ReLUActiv_int+0x3e2>
			{
				long_aux = INT8_MIN;
 8002d3a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int8_t*)funcptr)[i] = (int8_t)long_aux;
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f997 2028 	ldrsb.w	r2, [r7, #40]	; 0x28
 8002d50:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3301      	adds	r3, #1
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	897b      	ldrh	r3, [r7, #10]
 8002d5a:	4a6f      	ldr	r2, [pc, #444]	; (8002f18 <v_ReLUActiv_int+0x5b4>)
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	889b      	ldrh	r3, [r3, #4]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	f4ff af77 	bcc.w	8002c5c <v_ReLUActiv_int+0x2f8>
		}
		break;
 8002d6e:	e0ce      	b.n	8002f0e <v_ReLUActiv_int+0x5aa>

	case 4:;
		int16_t EvOdd_L = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	837b      	strh	r3, [r7, #26]
		for (size_t i = 0; i < layer; i++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e00c      	b.n	8002d94 <v_ReLUActiv_int+0x430>
		{
			EvOdd_L += xNetParam.NonLayer[i];
 8002d7a:	4a67      	ldr	r2, [pc, #412]	; (8002f18 <v_ReLUActiv_int+0x5b4>)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	889b      	ldrh	r3, [r3, #4]
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	8b7b      	ldrh	r3, [r7, #26]
 8002d88:	4413      	add	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	837b      	strh	r3, [r7, #26]
		for (size_t i = 0; i < layer; i++)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3301      	adds	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	897b      	ldrh	r3, [r7, #10]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d3ee      	bcc.n	8002d7a <v_ReLUActiv_int+0x416>
		}
		EvOdd_L = EvOdd_L % 2;
 8002d9c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	bfb8      	it	lt
 8002da8:	425b      	neglt	r3, r3
 8002daa:	837b      	strh	r3, [r7, #26]

		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	e0a0      	b.n	8002ef4 <v_ReLUActiv_int+0x590>
		{
			long_aux = v_GetByte_4bits(((int8_t*)ZPtr)[(i + EvOdd_L) / 2], (i + EvOdd_L) % 2);
 8002db2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f993 0000 	ldrsb.w	r0, [r3]
 8002dc4:	8b7b      	ldrh	r3, [r7, #26]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	b25b      	sxtb	r3, r3
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	b25b      	sxtb	r3, r3
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f000 ffd7 	bl	8003d8c <v_GetByte_4bits>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b25a      	sxtb	r2, r3
 8002de2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002de6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			if (long_aux < 0)
 8002dea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dee:	2a00      	cmp	r2, #0
 8002df0:	f173 0300 	sbcs.w	r3, r3, #0
 8002df4:	da32      	bge.n	8002e5c <v_ReLUActiv_int+0x4f8>
			{
				long_aux = (((long long int)xNetParam.LeakyReLU_rate * long_aux) / UINT16_MAX) + xQuantizedVal.Zy[layer];
 8002df6:	4b48      	ldr	r3, [pc, #288]	; (8002f18 <v_ReLUActiv_int+0x5b4>)
 8002df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e06:	fb03 f001 	mul.w	r0, r3, r1
 8002e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e0c:	fb02 f101 	mul.w	r1, r2, r1
 8002e10:	1844      	adds	r4, r0, r1
 8002e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e14:	fba1 0102 	umull	r0, r1, r1, r2
 8002e18:	1863      	adds	r3, r4, r1
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	f7fd ff84 	bl	8000d30 <__aeabi_ldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f7fd ff40 	bl	8000cb4 <__aeabi_l2f>
 8002e34:	ee07 0a10 	vmov	s14, r0
 8002e38:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <v_ReLUActiv_int+0x5b8>)
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	897b      	ldrh	r3, [r7, #10]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4a:	ee17 0a90 	vmov	r0, s15
 8002e4e:	f7fd ffd7 	bl	8000e00 <__aeabi_f2lz>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002e5a:	e016      	b.n	8002e8a <v_ReLUActiv_int+0x526>
			}
			else
			{
				long_aux = long_aux + xQuantizedVal.Zy[layer];
 8002e5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e60:	f7fd ff28 	bl	8000cb4 <__aeabi_l2f>
 8002e64:	ee07 0a10 	vmov	s14, r0
 8002e68:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <v_ReLUActiv_int+0x5b8>)
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	897b      	ldrh	r3, [r7, #10]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7a:	ee17 0a90 	vmov	r0, s15
 8002e7e:	f7fd ffbf 	bl	8000e00 <__aeabi_f2lz>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if (long_aux >= INT4_MAX)
 8002e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e8e:	2a0f      	cmp	r2, #15
 8002e90:	f173 0300 	sbcs.w	r3, r3, #0
 8002e94:	db06      	blt.n	8002ea4 <v_ReLUActiv_int+0x540>
			{
				long_aux = INT4_MAX;
 8002e96:	f04f 020f 	mov.w	r2, #15
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002ea2:	e00e      	b.n	8002ec2 <v_ReLUActiv_int+0x55e>
			}
			else if (long_aux <= INT4_MIN)
 8002ea4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ea8:	f06f 000e 	mvn.w	r0, #14
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb0:	4282      	cmp	r2, r0
 8002eb2:	418b      	sbcs	r3, r1
 8002eb4:	da05      	bge.n	8002ec2 <v_ReLUActiv_int+0x55e>
			{
				long_aux = INT4_MIN;
 8002eb6:	f06f 020f 	mvn.w	r2, #15
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			v_MountByte_4bits(&((int8_t*)funcptr)[(i + EvOdd_L) / 2], (int8_t)long_aux, (i + EvOdd_L) % 2);
 8002ec2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4413      	add	r3, r2
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	18d0      	adds	r0, r2, r3
 8002ed0:	f997 1028 	ldrsb.w	r1, [r7, #40]	; 0x28
 8002ed4:	8b7b      	ldrh	r3, [r7, #26]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f000 ff21 	bl	8003d30 <v_MountByte_4bits>
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	897b      	ldrh	r3, [r7, #10]
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <v_ReLUActiv_int+0x5b4>)
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	889b      	ldrh	r3, [r3, #4]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4293      	cmp	r3, r2
 8002f06:	f4ff af54 	bcc.w	8002db2 <v_ReLUActiv_int+0x44e>
			//((int8_t*)funcptr)[i] = (int8_t)long_aux;
		}
		break;
 8002f0a:	e000      	b.n	8002f0e <v_ReLUActiv_int+0x5aa>

	default:
		break;
 8002f0c:	bf00      	nop
	}
}
 8002f0e:	bf00      	nop
 8002f10:	3730      	adds	r7, #48	; 0x30
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bdb0      	pop	{r4, r5, r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000200 	.word	0x20000200
 8002f1c:	20000254 	.word	0x20000254

08002f20 <v_LinearActiv_int>:
//	in		result, xnetparam, input, wbptr			(result, network hyperparameters struct,float pointer, float pointer)
//	out		none
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_LinearActiv_int(void* ZPtr, uint16_t layer, void* FuncPtr)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	; 0x30
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	817b      	strh	r3, [r7, #10]
	long long int long_aux;
	switch (xNetParam.xVarPrecision.precision)
 8002f2e:	4bc7      	ldr	r3, [pc, #796]	; (800324c <v_LinearActiv_int+0x32c>)
 8002f30:	785b      	ldrb	r3, [r3, #1]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3b04      	subs	r3, #4
 8002f36:	2b1c      	cmp	r3, #28
 8002f38:	f200 81c3 	bhi.w	80032c2 <v_LinearActiv_int+0x3a2>
 8002f3c:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <v_LinearActiv_int+0x24>)
 8002f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f42:	bf00      	nop
 8002f44:	08003197 	.word	0x08003197
 8002f48:	080032c3 	.word	0x080032c3
 8002f4c:	080032c3 	.word	0x080032c3
 8002f50:	080032c3 	.word	0x080032c3
 8002f54:	080030fd 	.word	0x080030fd
 8002f58:	080032c3 	.word	0x080032c3
 8002f5c:	080032c3 	.word	0x080032c3
 8002f60:	080032c3 	.word	0x080032c3
 8002f64:	080032c3 	.word	0x080032c3
 8002f68:	080032c3 	.word	0x080032c3
 8002f6c:	080032c3 	.word	0x080032c3
 8002f70:	080032c3 	.word	0x080032c3
 8002f74:	0800305b 	.word	0x0800305b
 8002f78:	080032c3 	.word	0x080032c3
 8002f7c:	080032c3 	.word	0x080032c3
 8002f80:	080032c3 	.word	0x080032c3
 8002f84:	080032c3 	.word	0x080032c3
 8002f88:	080032c3 	.word	0x080032c3
 8002f8c:	080032c3 	.word	0x080032c3
 8002f90:	080032c3 	.word	0x080032c3
 8002f94:	080032c3 	.word	0x080032c3
 8002f98:	080032c3 	.word	0x080032c3
 8002f9c:	080032c3 	.word	0x080032c3
 8002fa0:	080032c3 	.word	0x080032c3
 8002fa4:	080032c3 	.word	0x080032c3
 8002fa8:	080032c3 	.word	0x080032c3
 8002fac:	080032c3 	.word	0x080032c3
 8002fb0:	080032c3 	.word	0x080032c3
 8002fb4:	08002fb9 	.word	0x08002fb9
	{
	case 32:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	e042      	b.n	8003044 <v_LinearActiv_int+0x124>
		{
			long_aux = (((int32_t*)ZPtr)[i] + xQuantizedVal.Zy[layer]);
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fd0:	4b9f      	ldr	r3, [pc, #636]	; (8003250 <v_LinearActiv_int+0x330>)
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	897b      	ldrh	r3, [r7, #10]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	edd3 7a00 	vldr	s15, [r3]
 8002fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe2:	ee17 0a90 	vmov	r0, s15
 8002fe6:	f7fd ff0b 	bl	8000e00 <__aeabi_f2lz>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			if (long_aux >= INT32_MAX)
 8002ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ff6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	4282      	cmp	r2, r0
 8003000:	418b      	sbcs	r3, r1
 8003002:	db06      	blt.n	8003012 <v_LinearActiv_int+0xf2>
			{
				long_aux = INT32_MAX;
 8003004:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003010:	e00f      	b.n	8003032 <v_LinearActiv_int+0x112>
			}
			else if (long_aux <= INT32_MIN)
 8003012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003016:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800301a:	f04f 31ff 	mov.w	r1, #4294967295
 800301e:	4290      	cmp	r0, r2
 8003020:	eb71 0303 	sbcs.w	r3, r1, r3
 8003024:	db05      	blt.n	8003032 <v_LinearActiv_int+0x112>
			{
				long_aux = INT32_MIN;
 8003026:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800302a:	f04f 33ff 	mov.w	r3, #4294967295
 800302e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int32_t*)FuncPtr)[i] = long_aux;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800303c:	601a      	str	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	3301      	adds	r3, #1
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
 8003044:	897b      	ldrh	r3, [r7, #10]
 8003046:	4a81      	ldr	r2, [pc, #516]	; (800324c <v_LinearActiv_int+0x32c>)
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	889b      	ldrh	r3, [r3, #4]
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	4293      	cmp	r3, r2
 8003056:	d3b2      	bcc.n	8002fbe <v_LinearActiv_int+0x9e>
		}
		break;
 8003058:	e134      	b.n	80032c4 <v_LinearActiv_int+0x3a4>

	case 16:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	e042      	b.n	80030e6 <v_LinearActiv_int+0x1c6>
		{
			long_aux = (((int16_t*)ZPtr)[i] + xQuantizedVal.Zy[layer]);
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800306c:	ee07 3a90 	vmov	s15, r3
 8003070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003074:	4b76      	ldr	r3, [pc, #472]	; (8003250 <v_LinearActiv_int+0x330>)
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	897b      	ldrh	r3, [r7, #10]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003086:	ee17 0a90 	vmov	r0, s15
 800308a:	f7fd feb9 	bl	8000e00 <__aeabi_f2lz>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			if (long_aux >= INT16_MAX)
 8003096:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800309a:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	4290      	cmp	r0, r2
 80030a4:	eb71 0303 	sbcs.w	r3, r1, r3
 80030a8:	da06      	bge.n	80030b8 <v_LinearActiv_int+0x198>
			{
				long_aux = INT16_MAX;
 80030aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80030b6:	e00c      	b.n	80030d2 <v_LinearActiv_int+0x1b2>
			}
			else if (long_aux <= INT16_MIN)
 80030b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030bc:	4865      	ldr	r0, [pc, #404]	; (8003254 <v_LinearActiv_int+0x334>)
 80030be:	f04f 31ff 	mov.w	r1, #4294967295
 80030c2:	4282      	cmp	r2, r0
 80030c4:	418b      	sbcs	r3, r1
 80030c6:	da04      	bge.n	80030d2 <v_LinearActiv_int+0x1b2>
			{
				long_aux = INT16_MIN;
 80030c8:	4a63      	ldr	r2, [pc, #396]	; (8003258 <v_LinearActiv_int+0x338>)
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int16_t*)FuncPtr)[i] = long_aux;
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80030de:	801a      	strh	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	3301      	adds	r3, #1
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <v_LinearActiv_int+0x32c>)
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	889b      	ldrh	r3, [r3, #4]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d3b2      	bcc.n	8003060 <v_LinearActiv_int+0x140>
		}
		break;
 80030fa:	e0e3      	b.n	80032c4 <v_LinearActiv_int+0x3a4>

	case 8:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	e03e      	b.n	8003180 <v_LinearActiv_int+0x260>
		{
			long_aux = (((int8_t*)ZPtr)[i] + xQuantizedVal.Zy[layer]);
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	f993 3000 	ldrsb.w	r3, [r3]
 800310c:	ee07 3a90 	vmov	s15, r3
 8003110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003114:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <v_LinearActiv_int+0x330>)
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	897b      	ldrh	r3, [r7, #10]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003126:	ee17 0a90 	vmov	r0, s15
 800312a:	f7fd fe69 	bl	8000e00 <__aeabi_f2lz>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			if (long_aux >= INT8_MAX)
 8003136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800313a:	2a7f      	cmp	r2, #127	; 0x7f
 800313c:	f173 0300 	sbcs.w	r3, r3, #0
 8003140:	db06      	blt.n	8003150 <v_LinearActiv_int+0x230>
			{
				long_aux = INT8_MAX;
 8003142:	f04f 027f 	mov.w	r2, #127	; 0x7f
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800314e:	e00e      	b.n	800316e <v_LinearActiv_int+0x24e>
			}
			else if (long_aux <= INT8_MIN)
 8003150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003154:	f06f 007e 	mvn.w	r0, #126	; 0x7e
 8003158:	f04f 31ff 	mov.w	r1, #4294967295
 800315c:	4282      	cmp	r2, r0
 800315e:	418b      	sbcs	r3, r1
 8003160:	da05      	bge.n	800316e <v_LinearActiv_int+0x24e>
			{
				long_aux = INT8_MIN;
 8003162:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int8_t*)FuncPtr)[i] = long_aux;
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	4413      	add	r3, r2
 8003174:	f997 2028 	ldrsb.w	r2, [r7, #40]	; 0x28
 8003178:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3301      	adds	r3, #1
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	897b      	ldrh	r3, [r7, #10]
 8003182:	4a32      	ldr	r2, [pc, #200]	; (800324c <v_LinearActiv_int+0x32c>)
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	889b      	ldrh	r3, [r3, #4]
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4293      	cmp	r3, r2
 8003192:	d3b6      	bcc.n	8003102 <v_LinearActiv_int+0x1e2>
		}
		break;
 8003194:	e096      	b.n	80032c4 <v_LinearActiv_int+0x3a4>

	case 4:;
		int16_t EvOdd_L = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	837b      	strh	r3, [r7, #26]
		for (size_t i = 0; i < layer; i++)
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e00c      	b.n	80031ba <v_LinearActiv_int+0x29a>
		{
			EvOdd_L += xNetParam.NonLayer[i];
 80031a0:	4a2a      	ldr	r2, [pc, #168]	; (800324c <v_LinearActiv_int+0x32c>)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	889b      	ldrh	r3, [r3, #4]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	8b7b      	ldrh	r3, [r7, #26]
 80031ae:	4413      	add	r3, r2
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	837b      	strh	r3, [r7, #26]
		for (size_t i = 0; i < layer; i++)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	3301      	adds	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	897b      	ldrh	r3, [r7, #10]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d3ee      	bcc.n	80031a0 <v_LinearActiv_int+0x280>
		}
		EvOdd_L = EvOdd_L % 2;
 80031c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	bfb8      	it	lt
 80031ce:	425b      	neglt	r3, r3
 80031d0:	837b      	strh	r3, [r7, #26]

		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	e069      	b.n	80032ac <v_LinearActiv_int+0x38c>
		{
			long_aux = v_GetByte_4bits(((int8_t*)ZPtr)[(i + EvOdd_L) / 2], (i + EvOdd_L) % 2) + xQuantizedVal.Zy[layer];
 80031d8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4413      	add	r3, r2
 80031e6:	f993 0000 	ldrsb.w	r0, [r3]
 80031ea:	8b7b      	ldrh	r3, [r7, #26]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	4619      	mov	r1, r3
 8003200:	f000 fdc4 	bl	8003d8c <v_GetByte_4bits>
 8003204:	4603      	mov	r3, r0
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <v_LinearActiv_int+0x330>)
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	897b      	ldrh	r3, [r7, #10]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003220:	ee17 0a90 	vmov	r0, s15
 8003224:	f7fd fdec 	bl	8000e00 <__aeabi_f2lz>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			if (long_aux >= INT4_MAX)
 8003230:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003234:	2a0f      	cmp	r2, #15
 8003236:	f173 0300 	sbcs.w	r3, r3, #0
 800323a:	db0f      	blt.n	800325c <v_LinearActiv_int+0x33c>
			{
				long_aux = INT4_MAX;
 800323c:	f04f 020f 	mov.w	r2, #15
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003248:	e017      	b.n	800327a <v_LinearActiv_int+0x35a>
 800324a:	bf00      	nop
 800324c:	20000200 	.word	0x20000200
 8003250:	20000254 	.word	0x20000254
 8003254:	ffff8001 	.word	0xffff8001
 8003258:	ffff8000 	.word	0xffff8000
			}
			else if (long_aux <= INT4_MIN)
 800325c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003260:	f06f 000e 	mvn.w	r0, #14
 8003264:	f04f 31ff 	mov.w	r1, #4294967295
 8003268:	4282      	cmp	r2, r0
 800326a:	418b      	sbcs	r3, r1
 800326c:	da05      	bge.n	800327a <v_LinearActiv_int+0x35a>
			{
				long_aux = INT4_MIN;
 800326e:	f06f 020f 	mvn.w	r2, #15
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			v_MountByte_4bits(&((int8_t*)FuncPtr)[(i + EvOdd_L) / 2], (int8_t)long_aux, (i + EvOdd_L) % 2);
 800327a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	18d0      	adds	r0, r2, r3
 8003288:	f997 1028 	ldrsb.w	r1, [r7, #40]	; 0x28
 800328c:	8b7b      	ldrh	r3, [r7, #26]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	4413      	add	r3, r2
 8003296:	b2db      	uxtb	r3, r3
 8003298:	b25b      	sxtb	r3, r3
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	f000 fd45 	bl	8003d30 <v_MountByte_4bits>
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	3301      	adds	r3, #1
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	897b      	ldrh	r3, [r7, #10]
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <v_LinearActiv_int+0x3ac>)
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	889b      	ldrh	r3, [r3, #4]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4293      	cmp	r3, r2
 80032be:	d38b      	bcc.n	80031d8 <v_LinearActiv_int+0x2b8>
		}
		break;
 80032c0:	e000      	b.n	80032c4 <v_LinearActiv_int+0x3a4>

	default:
		break;
 80032c2:	bf00      	nop
	}
}
 80032c4:	bf00      	nop
 80032c6:	3730      	adds	r7, #48	; 0x30
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000200 	.word	0x20000200

080032d0 <v_QuantizeIntputs_int>:
//	in		result, xnetparam, input, wbptr			(result, network hyperparameters struct,float pointer, float pointer)
//	out		none
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_QuantizeIntputs_int(void* quant_input, float* input)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	switch (xNetParam.xVarPrecision.precision)
 80032da:	4bc2      	ldr	r3, [pc, #776]	; (80035e4 <v_QuantizeIntputs_int+0x314>)
 80032dc:	785b      	ldrb	r3, [r3, #1]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	3b04      	subs	r3, #4
 80032e2:	2b1c      	cmp	r3, #28
 80032e4:	f200 82dc 	bhi.w	80038a0 <v_QuantizeIntputs_int+0x5d0>
 80032e8:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <v_QuantizeIntputs_int+0x20>)
 80032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ee:	bf00      	nop
 80032f0:	08003725 	.word	0x08003725
 80032f4:	080038a1 	.word	0x080038a1
 80032f8:	080038a1 	.word	0x080038a1
 80032fc:	080038a1 	.word	0x080038a1
 8003300:	080035df 	.word	0x080035df
 8003304:	080038a1 	.word	0x080038a1
 8003308:	080038a1 	.word	0x080038a1
 800330c:	080038a1 	.word	0x080038a1
 8003310:	080038a1 	.word	0x080038a1
 8003314:	080038a1 	.word	0x080038a1
 8003318:	080038a1 	.word	0x080038a1
 800331c:	080038a1 	.word	0x080038a1
 8003320:	0800349f 	.word	0x0800349f
 8003324:	080038a1 	.word	0x080038a1
 8003328:	080038a1 	.word	0x080038a1
 800332c:	080038a1 	.word	0x080038a1
 8003330:	080038a1 	.word	0x080038a1
 8003334:	080038a1 	.word	0x080038a1
 8003338:	080038a1 	.word	0x080038a1
 800333c:	080038a1 	.word	0x080038a1
 8003340:	080038a1 	.word	0x080038a1
 8003344:	080038a1 	.word	0x080038a1
 8003348:	080038a1 	.word	0x080038a1
 800334c:	080038a1 	.word	0x080038a1
 8003350:	080038a1 	.word	0x080038a1
 8003354:	080038a1 	.word	0x080038a1
 8003358:	080038a1 	.word	0x080038a1
 800335c:	080038a1 	.word	0x080038a1
 8003360:	08003365 	.word	0x08003365
	{
	case 32:
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e090      	b.n	800348c <v_QuantizeIntputs_int+0x1bc>
		{
			// Saturation Protection
			if (input[i] >= xDistribution.func_max[0])
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	4413      	add	r3, r2
 8003372:	ed93 7a00 	vldr	s14, [r3]
 8003376:	4b9c      	ldr	r3, [pc, #624]	; (80035e8 <v_QuantizeIntputs_int+0x318>)
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	edd3 7a00 	vldr	s15, [r3]
 800337e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003386:	db24      	blt.n	80033d2 <v_QuantizeIntputs_int+0x102>
			{
				((int32_t*)quant_input)[i] = (int32_t)round((xDistribution.func_max[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
 8003388:	4b97      	ldr	r3, [pc, #604]	; (80035e8 <v_QuantizeIntputs_int+0x318>)
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	edd3 6a00 	vldr	s13, [r3]
 8003390:	4b96      	ldr	r3, [pc, #600]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339c:	4b93      	ldr	r3, [pc, #588]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	edd3 7a00 	vldr	s15, [r3]
 80033a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a8:	ee17 0a90 	vmov	r0, s15
 80033ac:	f7fd f878 	bl	80004a0 <__aeabi_f2d>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	ec43 2b10 	vmov	d0, r2, r3
 80033b8:	f008 f9d6 	bl	800b768 <round>
 80033bc:	ec51 0b10 	vmov	r0, r1, d0
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	18d4      	adds	r4, r2, r3
 80033c8:	f7fd fb5c 	bl	8000a84 <__aeabi_d2iz>
 80033cc:	4603      	mov	r3, r0
 80033ce:	6023      	str	r3, [r4, #0]
 80033d0:	e059      	b.n	8003486 <v_QuantizeIntputs_int+0x1b6>
			}
			else if (input[i] <= xDistribution.func_min[0])
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	ed93 7a00 	vldr	s14, [r3]
 80033de:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <v_QuantizeIntputs_int+0x318>)
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	d824      	bhi.n	800343a <v_QuantizeIntputs_int+0x16a>
			{
				((int32_t*)quant_input)[i] = (int32_t)round((xDistribution.func_min[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
 80033f0:	4b7d      	ldr	r3, [pc, #500]	; (80035e8 <v_QuantizeIntputs_int+0x318>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	edd3 6a00 	vldr	s13, [r3]
 80033f8:	4b7c      	ldr	r3, [pc, #496]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003404:	4b79      	ldr	r3, [pc, #484]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	edd3 7a00 	vldr	s15, [r3]
 800340c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003410:	ee17 0a90 	vmov	r0, s15
 8003414:	f7fd f844 	bl	80004a0 <__aeabi_f2d>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	ec43 2b10 	vmov	d0, r2, r3
 8003420:	f008 f9a2 	bl	800b768 <round>
 8003424:	ec51 0b10 	vmov	r0, r1, d0
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	18d4      	adds	r4, r2, r3
 8003430:	f7fd fb28 	bl	8000a84 <__aeabi_d2iz>
 8003434:	4603      	mov	r3, r0
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	e025      	b.n	8003486 <v_QuantizeIntputs_int+0x1b6>
			}
			else
			{
				((int32_t*)quant_input)[i] = (int32_t)round((input[i] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	4413      	add	r3, r2
 8003442:	edd3 6a00 	vldr	s13, [r3]
 8003446:	4b69      	ldr	r3, [pc, #420]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	edd3 7a00 	vldr	s15, [r3]
 800344e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003452:	4b66      	ldr	r3, [pc, #408]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	edd3 7a00 	vldr	s15, [r3]
 800345a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345e:	ee17 0a90 	vmov	r0, s15
 8003462:	f7fd f81d 	bl	80004a0 <__aeabi_f2d>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	ec43 2b10 	vmov	d0, r2, r3
 800346e:	f008 f97b 	bl	800b768 <round>
 8003472:	ec51 0b10 	vmov	r0, r1, d0
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	18d4      	adds	r4, r2, r3
 800347e:	f7fd fb01 	bl	8000a84 <__aeabi_d2iz>
 8003482:	4603      	mov	r3, r0
 8003484:	6023      	str	r3, [r4, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	4b55      	ldr	r3, [pc, #340]	; (80035e4 <v_QuantizeIntputs_int+0x314>)
 800348e:	889b      	ldrh	r3, [r3, #4]
 8003490:	b29b      	uxth	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4293      	cmp	r3, r2
 8003498:	f4ff af67 	bcc.w	800336a <v_QuantizeIntputs_int+0x9a>
			}
		}
		break;
 800349c:	e201      	b.n	80038a2 <v_QuantizeIntputs_int+0x5d2>

	case 16:
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	e093      	b.n	80035cc <v_QuantizeIntputs_int+0x2fc>
		{

			// Saturation Protection
			if (input[i] >= xDistribution.func_max[0])
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	4413      	add	r3, r2
 80034ac:	ed93 7a00 	vldr	s14, [r3]
 80034b0:	4b4d      	ldr	r3, [pc, #308]	; (80035e8 <v_QuantizeIntputs_int+0x318>)
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	db25      	blt.n	800350e <v_QuantizeIntputs_int+0x23e>
			{
				((int16_t*)quant_input)[i] = (int16_t)round((xDistribution.func_max[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
 80034c2:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <v_QuantizeIntputs_int+0x318>)
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	edd3 6a00 	vldr	s13, [r3]
 80034ca:	4b48      	ldr	r3, [pc, #288]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	edd3 7a00 	vldr	s15, [r3]
 80034d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d6:	4b45      	ldr	r3, [pc, #276]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	edd3 7a00 	vldr	s15, [r3]
 80034de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e2:	ee17 0a90 	vmov	r0, s15
 80034e6:	f7fc ffdb 	bl	80004a0 <__aeabi_f2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	ec43 2b10 	vmov	d0, r2, r3
 80034f2:	f008 f939 	bl	800b768 <round>
 80034f6:	ec51 0b10 	vmov	r0, r1, d0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	18d4      	adds	r4, r2, r3
 8003502:	f7fd fabf 	bl	8000a84 <__aeabi_d2iz>
 8003506:	4603      	mov	r3, r0
 8003508:	b21b      	sxth	r3, r3
 800350a:	8023      	strh	r3, [r4, #0]
 800350c:	e05b      	b.n	80035c6 <v_QuantizeIntputs_int+0x2f6>
			}
			else if (input[i] <= xDistribution.func_min[0])
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	4413      	add	r3, r2
 8003516:	ed93 7a00 	vldr	s14, [r3]
 800351a:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <v_QuantizeIntputs_int+0x318>)
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	edd3 7a00 	vldr	s15, [r3]
 8003522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352a:	d825      	bhi.n	8003578 <v_QuantizeIntputs_int+0x2a8>
			{
				((int16_t*)quant_input)[i] = (int16_t)round((xDistribution.func_min[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
 800352c:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <v_QuantizeIntputs_int+0x318>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	edd3 6a00 	vldr	s13, [r3]
 8003534:	4b2d      	ldr	r3, [pc, #180]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	edd3 7a00 	vldr	s15, [r3]
 800353c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003540:	4b2a      	ldr	r3, [pc, #168]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800354c:	ee17 0a90 	vmov	r0, s15
 8003550:	f7fc ffa6 	bl	80004a0 <__aeabi_f2d>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	ec43 2b10 	vmov	d0, r2, r3
 800355c:	f008 f904 	bl	800b768 <round>
 8003560:	ec51 0b10 	vmov	r0, r1, d0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	18d4      	adds	r4, r2, r3
 800356c:	f7fd fa8a 	bl	8000a84 <__aeabi_d2iz>
 8003570:	4603      	mov	r3, r0
 8003572:	b21b      	sxth	r3, r3
 8003574:	8023      	strh	r3, [r4, #0]
 8003576:	e026      	b.n	80035c6 <v_QuantizeIntputs_int+0x2f6>
			}
			else
			{
				((int16_t*)quant_input)[i] = (int16_t)round((input[i] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	4413      	add	r3, r2
 8003580:	edd3 6a00 	vldr	s13, [r3]
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <v_QuantizeIntputs_int+0x31c>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	edd3 7a00 	vldr	s15, [r3]
 8003598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359c:	ee17 0a90 	vmov	r0, s15
 80035a0:	f7fc ff7e 	bl	80004a0 <__aeabi_f2d>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	ec43 2b10 	vmov	d0, r2, r3
 80035ac:	f008 f8dc 	bl	800b768 <round>
 80035b0:	ec51 0b10 	vmov	r0, r1, d0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	18d4      	adds	r4, r2, r3
 80035bc:	f7fd fa62 	bl	8000a84 <__aeabi_d2iz>
 80035c0:	4603      	mov	r3, r0
 80035c2:	b21b      	sxth	r3, r3
 80035c4:	8023      	strh	r3, [r4, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	3301      	adds	r3, #1
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <v_QuantizeIntputs_int+0x314>)
 80035ce:	889b      	ldrh	r3, [r3, #4]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4293      	cmp	r3, r2
 80035d8:	f4ff af64 	bcc.w	80034a4 <v_QuantizeIntputs_int+0x1d4>
			}
		}
		break;
 80035dc:	e161      	b.n	80038a2 <v_QuantizeIntputs_int+0x5d2>

	case 8:
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	e096      	b.n	8003712 <v_QuantizeIntputs_int+0x442>
 80035e4:	20000200 	.word	0x20000200
 80035e8:	20000278 	.word	0x20000278
 80035ec:	20000254 	.word	0x20000254
		{

			// Saturation Protection
			if (input[i] >= xDistribution.func_max[0])
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	ed93 7a00 	vldr	s14, [r3]
 80035fc:	4bab      	ldr	r3, [pc, #684]	; (80038ac <v_QuantizeIntputs_int+0x5dc>)
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360c:	db24      	blt.n	8003658 <v_QuantizeIntputs_int+0x388>
			{
				((int8_t*)quant_input)[i] = (int8_t)round((xDistribution.func_max[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
 800360e:	4ba7      	ldr	r3, [pc, #668]	; (80038ac <v_QuantizeIntputs_int+0x5dc>)
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	edd3 6a00 	vldr	s13, [r3]
 8003616:	4ba6      	ldr	r3, [pc, #664]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	edd3 7a00 	vldr	s15, [r3]
 800361e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003622:	4ba3      	ldr	r3, [pc, #652]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	edd3 7a00 	vldr	s15, [r3]
 800362a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362e:	ee17 0a90 	vmov	r0, s15
 8003632:	f7fc ff35 	bl	80004a0 <__aeabi_f2d>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	ec43 2b10 	vmov	d0, r2, r3
 800363e:	f008 f893 	bl	800b768 <round>
 8003642:	ec51 0b10 	vmov	r0, r1, d0
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	18d4      	adds	r4, r2, r3
 800364c:	f7fd fa1a 	bl	8000a84 <__aeabi_d2iz>
 8003650:	4603      	mov	r3, r0
 8003652:	b25b      	sxtb	r3, r3
 8003654:	7023      	strb	r3, [r4, #0]
 8003656:	e059      	b.n	800370c <v_QuantizeIntputs_int+0x43c>
			}
			else if (input[i] <= xDistribution.func_min[0])
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	4413      	add	r3, r2
 8003660:	ed93 7a00 	vldr	s14, [r3]
 8003664:	4b91      	ldr	r3, [pc, #580]	; (80038ac <v_QuantizeIntputs_int+0x5dc>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	edd3 7a00 	vldr	s15, [r3]
 800366c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	d824      	bhi.n	80036c0 <v_QuantizeIntputs_int+0x3f0>
			{
				((int8_t*)quant_input)[i] = (int8_t)round((xDistribution.func_min[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
 8003676:	4b8d      	ldr	r3, [pc, #564]	; (80038ac <v_QuantizeIntputs_int+0x5dc>)
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	edd3 6a00 	vldr	s13, [r3]
 800367e:	4b8c      	ldr	r3, [pc, #560]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800368a:	4b89      	ldr	r3, [pc, #548]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003696:	ee17 0a90 	vmov	r0, s15
 800369a:	f7fc ff01 	bl	80004a0 <__aeabi_f2d>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	ec43 2b10 	vmov	d0, r2, r3
 80036a6:	f008 f85f 	bl	800b768 <round>
 80036aa:	ec51 0b10 	vmov	r0, r1, d0
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	18d4      	adds	r4, r2, r3
 80036b4:	f7fd f9e6 	bl	8000a84 <__aeabi_d2iz>
 80036b8:	4603      	mov	r3, r0
 80036ba:	b25b      	sxtb	r3, r3
 80036bc:	7023      	strb	r3, [r4, #0]
 80036be:	e025      	b.n	800370c <v_QuantizeIntputs_int+0x43c>
			}
			else
			{
				((int8_t*)quant_input)[i] = (int8_t)round((input[i] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	4413      	add	r3, r2
 80036c8:	edd3 6a00 	vldr	s13, [r3]
 80036cc:	4b78      	ldr	r3, [pc, #480]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	edd3 7a00 	vldr	s15, [r3]
 80036d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036d8:	4b75      	ldr	r3, [pc, #468]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	edd3 7a00 	vldr	s15, [r3]
 80036e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e4:	ee17 0a90 	vmov	r0, s15
 80036e8:	f7fc feda 	bl	80004a0 <__aeabi_f2d>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	ec43 2b10 	vmov	d0, r2, r3
 80036f4:	f008 f838 	bl	800b768 <round>
 80036f8:	ec51 0b10 	vmov	r0, r1, d0
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	18d4      	adds	r4, r2, r3
 8003702:	f7fd f9bf 	bl	8000a84 <__aeabi_d2iz>
 8003706:	4603      	mov	r3, r0
 8003708:	b25b      	sxtb	r3, r3
 800370a:	7023      	strb	r3, [r4, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3301      	adds	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4b68      	ldr	r3, [pc, #416]	; (80038b4 <v_QuantizeIntputs_int+0x5e4>)
 8003714:	889b      	ldrh	r3, [r3, #4]
 8003716:	b29b      	uxth	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4293      	cmp	r3, r2
 800371e:	f4ff af67 	bcc.w	80035f0 <v_QuantizeIntputs_int+0x320>
			}
		}
		break;
 8003722:	e0be      	b.n	80038a2 <v_QuantizeIntputs_int+0x5d2>

	case 4:
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	e0b1      	b.n	800388e <v_QuantizeIntputs_int+0x5be>
		{
			// Saturation Protection
			if (input[i] >= xDistribution.func_max[0])
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	4413      	add	r3, r2
 8003732:	ed93 7a00 	vldr	s14, [r3]
 8003736:	4b5d      	ldr	r3, [pc, #372]	; (80038ac <v_QuantizeIntputs_int+0x5dc>)
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003746:	db2f      	blt.n	80037a8 <v_QuantizeIntputs_int+0x4d8>
			{
				v_MountByte_4bits(&((int8_t*)quant_input)[i / 2], (int8_t)round((xDistribution.func_max[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]), i % 2);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	18d4      	adds	r4, r2, r3
 8003750:	4b56      	ldr	r3, [pc, #344]	; (80038ac <v_QuantizeIntputs_int+0x5dc>)
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	edd3 6a00 	vldr	s13, [r3]
 8003758:	4b55      	ldr	r3, [pc, #340]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	edd3 7a00 	vldr	s15, [r3]
 8003760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003764:	4b52      	ldr	r3, [pc, #328]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	edd3 7a00 	vldr	s15, [r3]
 800376c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003770:	ee17 0a90 	vmov	r0, s15
 8003774:	f7fc fe94 	bl	80004a0 <__aeabi_f2d>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	ec43 2b10 	vmov	d0, r2, r3
 8003780:	f007 fff2 	bl	800b768 <round>
 8003784:	ec53 2b10 	vmov	r2, r3, d0
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	f7fd f97a 	bl	8000a84 <__aeabi_d2iz>
 8003790:	4603      	mov	r3, r0
 8003792:	b259      	sxtb	r1, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	b25b      	sxtb	r3, r3
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	b25b      	sxtb	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	4620      	mov	r0, r4
 80037a2:	f000 fac5 	bl	8003d30 <v_MountByte_4bits>
 80037a6:	e06f      	b.n	8003888 <v_QuantizeIntputs_int+0x5b8>
			}
			else if (input[i] <= xDistribution.func_min[0])
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	4413      	add	r3, r2
 80037b0:	ed93 7a00 	vldr	s14, [r3]
 80037b4:	4b3d      	ldr	r3, [pc, #244]	; (80038ac <v_QuantizeIntputs_int+0x5dc>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	edd3 7a00 	vldr	s15, [r3]
 80037bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c4:	d82f      	bhi.n	8003826 <v_QuantizeIntputs_int+0x556>
			{
				v_MountByte_4bits(&((int8_t*)quant_input)[i / 2], (int8_t)round((xDistribution.func_min[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]), i % 2);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	18d4      	adds	r4, r2, r3
 80037ce:	4b37      	ldr	r3, [pc, #220]	; (80038ac <v_QuantizeIntputs_int+0x5dc>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	edd3 6a00 	vldr	s13, [r3]
 80037d6:	4b36      	ldr	r3, [pc, #216]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	edd3 7a00 	vldr	s15, [r3]
 80037de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e2:	4b33      	ldr	r3, [pc, #204]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ee:	ee17 0a90 	vmov	r0, s15
 80037f2:	f7fc fe55 	bl	80004a0 <__aeabi_f2d>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	ec43 2b10 	vmov	d0, r2, r3
 80037fe:	f007 ffb3 	bl	800b768 <round>
 8003802:	ec53 2b10 	vmov	r2, r3, d0
 8003806:	4610      	mov	r0, r2
 8003808:	4619      	mov	r1, r3
 800380a:	f7fd f93b 	bl	8000a84 <__aeabi_d2iz>
 800380e:	4603      	mov	r3, r0
 8003810:	b259      	sxtb	r1, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	b25b      	sxtb	r3, r3
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	b25b      	sxtb	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	4620      	mov	r0, r4
 8003820:	f000 fa86 	bl	8003d30 <v_MountByte_4bits>
 8003824:	e030      	b.n	8003888 <v_QuantizeIntputs_int+0x5b8>
			}
			else
			{
				v_MountByte_4bits(&((int8_t*)quant_input)[i / 2], (int8_t)round((input[i] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]), i % 2);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	18d4      	adds	r4, r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	4413      	add	r3, r2
 8003836:	edd3 6a00 	vldr	s13, [r3]
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	edd3 7a00 	vldr	s15, [r3]
 8003842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003846:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <v_QuantizeIntputs_int+0x5e0>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003852:	ee17 0a90 	vmov	r0, s15
 8003856:	f7fc fe23 	bl	80004a0 <__aeabi_f2d>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	ec43 2b10 	vmov	d0, r2, r3
 8003862:	f007 ff81 	bl	800b768 <round>
 8003866:	ec53 2b10 	vmov	r2, r3, d0
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	f7fd f909 	bl	8000a84 <__aeabi_d2iz>
 8003872:	4603      	mov	r3, r0
 8003874:	b259      	sxtb	r1, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	b25b      	sxtb	r3, r3
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	b25b      	sxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	4620      	mov	r0, r4
 8003884:	f000 fa54 	bl	8003d30 <v_MountByte_4bits>
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	3301      	adds	r3, #1
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <v_QuantizeIntputs_int+0x5e4>)
 8003890:	889b      	ldrh	r3, [r3, #4]
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4293      	cmp	r3, r2
 800389a:	f4ff af46 	bcc.w	800372a <v_QuantizeIntputs_int+0x45a>
			}
		}
		break;
 800389e:	e000      	b.n	80038a2 <v_QuantizeIntputs_int+0x5d2>

	default:
		break;
 80038a0:	bf00      	nop
	}
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd90      	pop	{r4, r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000278 	.word	0x20000278
 80038b0:	20000254 	.word	0x20000254
 80038b4:	20000200 	.word	0x20000200

080038b8 <v_ProcessForwardPropNN_int>:
//	in		result, xnetparam, input, wbptr			(result, network hyperparameters struct,float pointer, float pointer)
//	out		none
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_ProcessForwardPropNN_int(void* ZPtr, void* FuncPtr, void* input)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
	uint16_t	i;
	uint32_t	neurons = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61bb      	str	r3, [r7, #24]
	uint32_t	aux_index = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

	switch (xNetParam.xVarPrecision.precision)
 80038cc:	4b87      	ldr	r3, [pc, #540]	; (8003aec <v_ProcessForwardPropNN_int+0x234>)
 80038ce:	785b      	ldrb	r3, [r3, #1]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	3b04      	subs	r3, #4
 80038d4:	2b1c      	cmp	r3, #28
 80038d6:	f200 81c2 	bhi.w	8003c5e <v_ProcessForwardPropNN_int+0x3a6>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <v_ProcessForwardPropNN_int+0x28>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003b9b 	.word	0x08003b9b
 80038e4:	08003c5f 	.word	0x08003c5f
 80038e8:	08003c5f 	.word	0x08003c5f
 80038ec:	08003c5f 	.word	0x08003c5f
 80038f0:	08003add 	.word	0x08003add
 80038f4:	08003c5f 	.word	0x08003c5f
 80038f8:	08003c5f 	.word	0x08003c5f
 80038fc:	08003c5f 	.word	0x08003c5f
 8003900:	08003c5f 	.word	0x08003c5f
 8003904:	08003c5f 	.word	0x08003c5f
 8003908:	08003c5f 	.word	0x08003c5f
 800390c:	08003c5f 	.word	0x08003c5f
 8003910:	08003a19 	.word	0x08003a19
 8003914:	08003c5f 	.word	0x08003c5f
 8003918:	08003c5f 	.word	0x08003c5f
 800391c:	08003c5f 	.word	0x08003c5f
 8003920:	08003c5f 	.word	0x08003c5f
 8003924:	08003c5f 	.word	0x08003c5f
 8003928:	08003c5f 	.word	0x08003c5f
 800392c:	08003c5f 	.word	0x08003c5f
 8003930:	08003c5f 	.word	0x08003c5f
 8003934:	08003c5f 	.word	0x08003c5f
 8003938:	08003c5f 	.word	0x08003c5f
 800393c:	08003c5f 	.word	0x08003c5f
 8003940:	08003c5f 	.word	0x08003c5f
 8003944:	08003c5f 	.word	0x08003c5f
 8003948:	08003c5f 	.word	0x08003c5f
 800394c:	08003c5f 	.word	0x08003c5f
 8003950:	08003955 	.word	0x08003955
	{
	case 32:
		v_QuantizeIntputs_int(&((int32_t*)FuncPtr)[0], (float*)input);
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	68b8      	ldr	r0, [r7, #8]
 8003958:	f7ff fcba 	bl	80032d0 <v_QuantizeIntputs_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
 800395c:	2301      	movs	r3, #1
 800395e:	83fb      	strh	r3, [r7, #30]
 8003960:	e029      	b.n	80039b6 <v_ProcessForwardPropNN_int+0xfe>
		{
			aux_index = neurons;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	617b      	str	r3, [r7, #20]
			neurons += xNetParam.NonLayer[i - 1];
 8003966:	8bfb      	ldrh	r3, [r7, #30]
 8003968:	3b01      	subs	r3, #1
 800396a:	4a60      	ldr	r2, [pc, #384]	; (8003aec <v_ProcessForwardPropNN_int+0x234>)
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	889b      	ldrh	r3, [r3, #4]
 8003972:	b29b      	uxth	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	4413      	add	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
			v_MacForwardProp_int(&((int32_t*)ZPtr)[neurons], i, &((int32_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);		//	calculate [z = w*f + b]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	18d0      	adds	r0, r2, r3
 8003984:	8bfb      	ldrh	r3, [r7, #30]
 8003986:	b2d9      	uxtb	r1, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	441a      	add	r2, r3
 8003990:	4b57      	ldr	r3, [pc, #348]	; (8003af0 <v_ProcessForwardPropNN_int+0x238>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f7fe fa64 	bl	8001e60 <v_MacForwardProp_int>
			v_ReLUActiv_int(&((int32_t*)ZPtr)[neurons], i, &((int32_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	18d0      	adds	r0, r2, r3
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	441a      	add	r2, r3
 80039a8:	8bfb      	ldrh	r3, [r7, #30]
 80039aa:	4619      	mov	r1, r3
 80039ac:	f7fe ffda 	bl	8002964 <v_ReLUActiv_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
 80039b0:	8bfb      	ldrh	r3, [r7, #30]
 80039b2:	3301      	adds	r3, #1
 80039b4:	83fb      	strh	r3, [r7, #30]
 80039b6:	8bfa      	ldrh	r2, [r7, #30]
 80039b8:	4b4c      	ldr	r3, [pc, #304]	; (8003aec <v_ProcessForwardPropNN_int+0x234>)
 80039ba:	885b      	ldrh	r3, [r3, #2]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	429a      	cmp	r2, r3
 80039c2:	dbce      	blt.n	8003962 <v_ProcessForwardPropNN_int+0xaa>
		}
		aux_index = neurons;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	617b      	str	r3, [r7, #20]
		neurons += xNetParam.NonLayer[xNetParam.Layers - 2];
 80039c8:	4b48      	ldr	r3, [pc, #288]	; (8003aec <v_ProcessForwardPropNN_int+0x234>)
 80039ca:	885b      	ldrh	r3, [r3, #2]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b02      	subs	r3, #2
 80039d0:	4a46      	ldr	r2, [pc, #280]	; (8003aec <v_ProcessForwardPropNN_int+0x234>)
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	889b      	ldrh	r3, [r3, #4]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	4413      	add	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
		v_MacForwardProp_int(&((int32_t*)ZPtr)[neurons], i, &((int32_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);			//	calculate [z = w*f + b]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	18d0      	adds	r0, r2, r3
 80039ea:	8bfb      	ldrh	r3, [r7, #30]
 80039ec:	b2d9      	uxtb	r1, r3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	441a      	add	r2, r3
 80039f6:	4b3e      	ldr	r3, [pc, #248]	; (8003af0 <v_ProcessForwardPropNN_int+0x238>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f7fe fa31 	bl	8001e60 <v_MacForwardProp_int>
		v_LinearActiv_int(&((int32_t*)ZPtr)[neurons], i, &((int32_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	18d0      	adds	r0, r2, r3
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	441a      	add	r2, r3
 8003a0e:	8bfb      	ldrh	r3, [r7, #30]
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7ff fa85 	bl	8002f20 <v_LinearActiv_int>
		break;
 8003a16:	e123      	b.n	8003c60 <v_ProcessForwardPropNN_int+0x3a8>

	case 16:
		v_QuantizeIntputs_int(&((int16_t*)FuncPtr)[0], (float*)input);
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	68b8      	ldr	r0, [r7, #8]
 8003a1c:	f7ff fc58 	bl	80032d0 <v_QuantizeIntputs_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
 8003a20:	2301      	movs	r3, #1
 8003a22:	83fb      	strh	r3, [r7, #30]
 8003a24:	e029      	b.n	8003a7a <v_ProcessForwardPropNN_int+0x1c2>
		{
			aux_index = neurons;
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	617b      	str	r3, [r7, #20]
			neurons += xNetParam.NonLayer[i - 1];
 8003a2a:	8bfb      	ldrh	r3, [r7, #30]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	4a2f      	ldr	r2, [pc, #188]	; (8003aec <v_ProcessForwardPropNN_int+0x234>)
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4413      	add	r3, r2
 8003a34:	889b      	ldrh	r3, [r3, #4]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
			v_MacForwardProp_int(&((int16_t*)ZPtr)[neurons], i, &((int16_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);		//	calculate [z = w*f + b]
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	18d0      	adds	r0, r2, r3
 8003a48:	8bfb      	ldrh	r3, [r7, #30]
 8003a4a:	b2d9      	uxtb	r1, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	441a      	add	r2, r3
 8003a54:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <v_ProcessForwardPropNN_int+0x238>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f7fe fa02 	bl	8001e60 <v_MacForwardProp_int>
			v_ReLUActiv_int(&((int16_t*)ZPtr)[neurons], i, &((int16_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	18d0      	adds	r0, r2, r3
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	441a      	add	r2, r3
 8003a6c:	8bfb      	ldrh	r3, [r7, #30]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7fe ff78 	bl	8002964 <v_ReLUActiv_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
 8003a74:	8bfb      	ldrh	r3, [r7, #30]
 8003a76:	3301      	adds	r3, #1
 8003a78:	83fb      	strh	r3, [r7, #30]
 8003a7a:	8bfa      	ldrh	r2, [r7, #30]
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <v_ProcessForwardPropNN_int+0x234>)
 8003a7e:	885b      	ldrh	r3, [r3, #2]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	429a      	cmp	r2, r3
 8003a86:	dbce      	blt.n	8003a26 <v_ProcessForwardPropNN_int+0x16e>
		}
		aux_index = neurons;
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	617b      	str	r3, [r7, #20]
		neurons += xNetParam.NonLayer[xNetParam.Layers - 2];
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <v_ProcessForwardPropNN_int+0x234>)
 8003a8e:	885b      	ldrh	r3, [r3, #2]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b02      	subs	r3, #2
 8003a94:	4a15      	ldr	r2, [pc, #84]	; (8003aec <v_ProcessForwardPropNN_int+0x234>)
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	889b      	ldrh	r3, [r3, #4]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
		v_MacForwardProp_int(&((int16_t*)ZPtr)[neurons], i, &((int16_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);			//	calculate [z = w*f + b]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	18d0      	adds	r0, r2, r3
 8003aae:	8bfb      	ldrh	r3, [r7, #30]
 8003ab0:	b2d9      	uxtb	r1, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	441a      	add	r2, r3
 8003aba:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <v_ProcessForwardPropNN_int+0x238>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f7fe f9cf 	bl	8001e60 <v_MacForwardProp_int>
		v_LinearActiv_int(&((int16_t*)ZPtr)[neurons], i, &((int16_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	18d0      	adds	r0, r2, r3
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	441a      	add	r2, r3
 8003ad2:	8bfb      	ldrh	r3, [r7, #30]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7ff fa23 	bl	8002f20 <v_LinearActiv_int>
		break;
 8003ada:	e0c1      	b.n	8003c60 <v_ProcessForwardPropNN_int+0x3a8>

	case 8:
		v_QuantizeIntputs_int(&((int8_t*)FuncPtr)[0], (float*)input);
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	68b8      	ldr	r0, [r7, #8]
 8003ae0:	f7ff fbf6 	bl	80032d0 <v_QuantizeIntputs_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	83fb      	strh	r3, [r7, #30]
 8003ae8:	e02a      	b.n	8003b40 <v_ProcessForwardPropNN_int+0x288>
 8003aea:	bf00      	nop
 8003aec:	20000200 	.word	0x20000200
 8003af0:	20000254 	.word	0x20000254
		{
			aux_index = neurons;
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	617b      	str	r3, [r7, #20]
			neurons += xNetParam.NonLayer[i - 1];
 8003af8:	8bfb      	ldrh	r3, [r7, #30]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	4a5a      	ldr	r2, [pc, #360]	; (8003c68 <v_ProcessForwardPropNN_int+0x3b0>)
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	889b      	ldrh	r3, [r3, #4]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	461a      	mov	r2, r3
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
			v_MacForwardProp_int(&((int8_t*)ZPtr)[neurons], i, &((int8_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);		//	calculate [z = w*f + b]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	18d0      	adds	r0, r2, r3
 8003b14:	8bfb      	ldrh	r3, [r7, #30]
 8003b16:	b2d9      	uxtb	r1, r3
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	441a      	add	r2, r3
 8003b1e:	4b53      	ldr	r3, [pc, #332]	; (8003c6c <v_ProcessForwardPropNN_int+0x3b4>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f7fe f99d 	bl	8001e60 <v_MacForwardProp_int>
			v_ReLUActiv_int(&((int8_t*)ZPtr)[neurons], i, &((int8_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	18d0      	adds	r0, r2, r3
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	441a      	add	r2, r3
 8003b32:	8bfb      	ldrh	r3, [r7, #30]
 8003b34:	4619      	mov	r1, r3
 8003b36:	f7fe ff15 	bl	8002964 <v_ReLUActiv_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
 8003b3a:	8bfb      	ldrh	r3, [r7, #30]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	83fb      	strh	r3, [r7, #30]
 8003b40:	8bfa      	ldrh	r2, [r7, #30]
 8003b42:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <v_ProcessForwardPropNN_int+0x3b0>)
 8003b44:	885b      	ldrh	r3, [r3, #2]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	dbd2      	blt.n	8003af4 <v_ProcessForwardPropNN_int+0x23c>
		}
		aux_index = neurons;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	617b      	str	r3, [r7, #20]
		neurons += xNetParam.NonLayer[xNetParam.Layers - 2];
 8003b52:	4b45      	ldr	r3, [pc, #276]	; (8003c68 <v_ProcessForwardPropNN_int+0x3b0>)
 8003b54:	885b      	ldrh	r3, [r3, #2]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b02      	subs	r3, #2
 8003b5a:	4a43      	ldr	r2, [pc, #268]	; (8003c68 <v_ProcessForwardPropNN_int+0x3b0>)
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	4413      	add	r3, r2
 8003b60:	889b      	ldrh	r3, [r3, #4]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	4413      	add	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
		v_MacForwardProp_int(&((int8_t*)ZPtr)[neurons], i, &((int8_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);			//	calculate [z = w*f + b]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	18d0      	adds	r0, r2, r3
 8003b72:	8bfb      	ldrh	r3, [r7, #30]
 8003b74:	b2d9      	uxtb	r1, r3
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	441a      	add	r2, r3
 8003b7c:	4b3b      	ldr	r3, [pc, #236]	; (8003c6c <v_ProcessForwardPropNN_int+0x3b4>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f7fe f96e 	bl	8001e60 <v_MacForwardProp_int>
		v_LinearActiv_int(&((int8_t*)ZPtr)[neurons], i, &((int8_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	18d0      	adds	r0, r2, r3
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	441a      	add	r2, r3
 8003b90:	8bfb      	ldrh	r3, [r7, #30]
 8003b92:	4619      	mov	r1, r3
 8003b94:	f7ff f9c4 	bl	8002f20 <v_LinearActiv_int>

		break;
 8003b98:	e062      	b.n	8003c60 <v_ProcessForwardPropNN_int+0x3a8>

	case 4:
		v_QuantizeIntputs_int(&((int8_t*)FuncPtr)[0], (float*)input);
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	68b8      	ldr	r0, [r7, #8]
 8003b9e:	f7ff fb97 	bl	80032d0 <v_QuantizeIntputs_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	83fb      	strh	r3, [r7, #30]
 8003ba6:	e029      	b.n	8003bfc <v_ProcessForwardPropNN_int+0x344>
		{
			aux_index = neurons;
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	617b      	str	r3, [r7, #20]
			neurons += xNetParam.NonLayer[i - 1];
 8003bac:	8bfb      	ldrh	r3, [r7, #30]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	4a2d      	ldr	r2, [pc, #180]	; (8003c68 <v_ProcessForwardPropNN_int+0x3b0>)
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	889b      	ldrh	r3, [r3, #4]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
			v_MacForwardProp_int(&((int8_t*)ZPtr)[neurons / 2], i, &((int8_t*)FuncPtr)[aux_index / 2], xQuantizedVal.WBPtr);		//	calculate [z = w*f + b]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	18d0      	adds	r0, r2, r3
 8003bca:	8bfb      	ldrh	r3, [r7, #30]
 8003bcc:	b2d9      	uxtb	r1, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	441a      	add	r2, r3
 8003bd6:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <v_ProcessForwardPropNN_int+0x3b4>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f7fe f941 	bl	8001e60 <v_MacForwardProp_int>
			v_ReLUActiv_int(&((int8_t*)ZPtr)[neurons / 2], i, &((int8_t*)FuncPtr)[neurons / 2]);									//	calculate [f = activ(z)]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	18d0      	adds	r0, r2, r3
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	441a      	add	r2, r3
 8003bee:	8bfb      	ldrh	r3, [r7, #30]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f7fe feb7 	bl	8002964 <v_ReLUActiv_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
 8003bf6:	8bfb      	ldrh	r3, [r7, #30]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	83fb      	strh	r3, [r7, #30]
 8003bfc:	8bfa      	ldrh	r2, [r7, #30]
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <v_ProcessForwardPropNN_int+0x3b0>)
 8003c00:	885b      	ldrh	r3, [r3, #2]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	429a      	cmp	r2, r3
 8003c08:	dbce      	blt.n	8003ba8 <v_ProcessForwardPropNN_int+0x2f0>
		}
		aux_index = neurons;
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	617b      	str	r3, [r7, #20]
		neurons += xNetParam.NonLayer[xNetParam.Layers - 2];
 8003c0e:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <v_ProcessForwardPropNN_int+0x3b0>)
 8003c10:	885b      	ldrh	r3, [r3, #2]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b02      	subs	r3, #2
 8003c16:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <v_ProcessForwardPropNN_int+0x3b0>)
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	889b      	ldrh	r3, [r3, #4]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	4413      	add	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
		v_MacForwardProp_int(&((int8_t*)ZPtr)[neurons / 2], i, &((int8_t*)FuncPtr)[aux_index / 2], xQuantizedVal.WBPtr);			//	calculate [z = w*f + b]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	18d0      	adds	r0, r2, r3
 8003c30:	8bfb      	ldrh	r3, [r7, #30]
 8003c32:	b2d9      	uxtb	r1, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	441a      	add	r2, r3
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <v_ProcessForwardPropNN_int+0x3b4>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f7fe f90e 	bl	8001e60 <v_MacForwardProp_int>
		v_LinearActiv_int(&((int8_t*)ZPtr)[neurons / 2], i, &((int8_t*)FuncPtr)[neurons / 2]);									//	calculate [f = activ(z)]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	18d0      	adds	r0, r2, r3
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	441a      	add	r2, r3
 8003c54:	8bfb      	ldrh	r3, [r7, #30]
 8003c56:	4619      	mov	r1, r3
 8003c58:	f7ff f962 	bl	8002f20 <v_LinearActiv_int>

		break;
 8003c5c:	e000      	b.n	8003c60 <v_ProcessForwardPropNN_int+0x3a8>

	default:
		break;
 8003c5e:	bf00      	nop
	}
}
 8003c60:	bf00      	nop
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000200 	.word	0x20000200
 8003c6c:	20000254 	.word	0x20000254

08003c70 <u32_GetIndex>:
//	@param[in]		uint8_t		layer			-> (Layer)
//	@param[in]		bool		weightbias		-> (bool to determine whether weights or bias will be chosen: weight = false; bias = true;)
//	@param[out]		uint32_t	index			-> (Index)
//**************************************************
uint32_t u32_GetIndex(netparam_t	xNetParam, uint16_t	layer, uint16_t row, bool	weightbias)	//weight	=	false; bias	=	true;
{
 8003c70:	b084      	sub	sp, #16
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	f107 0c10 	add.w	ip, r7, #16
 8003c7c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	index = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	607b      	str	r3, [r7, #4]

	for (size_t i = 1; i < layer; i++)
 8003c84:	2301      	movs	r3, #1
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	e016      	b.n	8003cb8 <u32_GetIndex+0x48>
	{
		index += (1 + xNetParam.NonLayer[i - 1]) * xNetParam.NonLayer[i];
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	f107 0210 	add.w	r2, r7, #16
 8003c94:	4413      	add	r3, r2
 8003c96:	889b      	ldrh	r3, [r3, #4]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	f107 0110 	add.w	r1, r7, #16
 8003ca2:	440b      	add	r3, r1
 8003ca4:	889b      	ldrh	r3, [r3, #4]
 8003ca6:	fb03 f302 	mul.w	r3, r3, r2
 8003caa:	461a      	mov	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4413      	add	r3, r2
 8003cb0:	607b      	str	r3, [r7, #4]
	for (size_t i = 1; i < layer; i++)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d3e3      	bcc.n	8003c8a <u32_GetIndex+0x1a>
	}
	if (weightbias == true)
 8003cc2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d019      	beq.n	8003cfe <u32_GetIndex+0x8e>
	{
		index += row + (1 + xNetParam.NonLayer[layer - 1]) * xNetParam.NonLayer[layer];
 8003cca:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8003cce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	f107 0110 	add.w	r1, r7, #16
 8003cda:	440b      	add	r3, r1
 8003cdc:	889b      	ldrh	r3, [r3, #4]
 8003cde:	1c59      	adds	r1, r3, #1
 8003ce0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	f107 0010 	add.w	r0, r7, #16
 8003cea:	4403      	add	r3, r0
 8003cec:	889b      	ldrh	r3, [r3, #4]
 8003cee:	fb03 f301 	mul.w	r3, r3, r1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	e010      	b.n	8003d20 <u32_GetIndex+0xb0>
	}
	else
	{
		index += row * (1 + xNetParam.NonLayer[layer - 1]);
 8003cfe:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8003d02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d06:	3b01      	subs	r3, #1
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	f107 0110 	add.w	r1, r7, #16
 8003d0e:	440b      	add	r3, r1
 8003d10:	889b      	ldrh	r3, [r3, #4]
 8003d12:	3301      	adds	r3, #1
 8003d14:	fb03 f302 	mul.w	r3, r3, r2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	607b      	str	r3, [r7, #4]
	}
	return index;
 8003d20:	687b      	ldr	r3, [r7, #4]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	b004      	add	sp, #16
 8003d2e:	4770      	bx	lr

08003d30 <v_MountByte_4bits>:

void v_MountByte_4bits(int8_t* OldVar_8bits, int8_t NewVar_4bits, int8_t LowHigh)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	70bb      	strb	r3, [r7, #2]
	if (LowHigh == 0)
 8003d40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10e      	bne.n	8003d66 <v_MountByte_4bits+0x36>
	{
		*OldVar_8bits = (*OldVar_8bits & (0xf0)) | (NewVar_4bits & (0x0f));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f993 3000 	ldrsb.w	r3, [r3]
 8003d4e:	f023 030f 	bic.w	r3, r3, #15
 8003d52:	b25a      	sxtb	r2, r3
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	b25a      	sxtb	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*OldVar_8bits = ((NewVar_4bits & (0x0f)) << 4) | (*OldVar_8bits & (0x0f));
	}
}
 8003d64:	e00c      	b.n	8003d80 <v_MountByte_4bits+0x50>
		*OldVar_8bits = ((NewVar_4bits & (0x0f)) << 4) | (*OldVar_8bits & (0x0f));
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	b25a      	sxtb	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f993 3000 	ldrsb.w	r3, [r3]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	b25b      	sxtb	r3, r3
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	b25a      	sxtb	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	701a      	strb	r2, [r3, #0]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <v_GetByte_4bits>:

int8_t v_GetByte_4bits(int8_t Var_8bits, int8_t LowHigh)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	460a      	mov	r2, r1
 8003d96:	71fb      	strb	r3, [r7, #7]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	71bb      	strb	r3, [r7, #6]
	if (LowHigh == 0)
 8003d9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10f      	bne.n	8003dc4 <v_GetByte_4bits+0x38>
	{
		// 2nd Complement Adjustment for 4bit to 8bit transposition
		if ((Var_8bits & (1 << 3)))
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <v_GetByte_4bits+0x2e>
		{
			return ((0xf0) | (Var_8bits & (0x0f)));
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	f063 030f 	orn	r3, r3, #15
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	e017      	b.n	8003dea <v_GetByte_4bits+0x5e>
		}
		else
		{
			return (Var_8bits & (0x0f));
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	b25b      	sxtb	r3, r3
 8003dc2:	e012      	b.n	8003dea <v_GetByte_4bits+0x5e>
		}
	}
	else
	{
		// 2nd Complement Adjustment for 4bit to 8bit transposition
		if ((Var_8bits & (1 << 7)))
 8003dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	da07      	bge.n	8003ddc <v_GetByte_4bits+0x50>
		{
			return ((0xf0) | ((Var_8bits & (0xf0)) >> 4));
 8003dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd0:	111b      	asrs	r3, r3, #4
 8003dd2:	b25b      	sxtb	r3, r3
 8003dd4:	f063 030f 	orn	r3, r3, #15
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	e006      	b.n	8003dea <v_GetByte_4bits+0x5e>
		}
		else
		{
			return ((Var_8bits & (0xf0)) >> 4);
 8003ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de0:	111b      	asrs	r3, r3, #4
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	b25b      	sxtb	r3, r3
		}
	}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003df8:	b5b0      	push	{r4, r5, r7, lr}
 8003dfa:	b0d6      	sub	sp, #344	; 0x158
 8003dfc:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003dfe:	f000 fc95 	bl	800472c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e02:	f000 fabb 	bl	800437c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e06:	f000 fb63 	bl	80044d0 <MX_GPIO_Init>
  MX_RTC_Init();
 8003e0a:	f000 fb3b 	bl	8004484 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8003e0e:	f006 fa1d 	bl	800a24c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
  int i;
  int j;
  uint32_t time_old = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint32_t process_time = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

  netparam_t xNetParam;

  DataSet_t xDataSet = {.x_test = NULL, .y_test = NULL};
 8003e1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	609a      	str	r2, [r3, #8]
 8003e2a:	60da      	str	r2, [r3, #12]
 8003e2c:	611a      	str	r2, [r3, #16]
 8003e2e:	615a      	str	r2, [r3, #20]
  float* WBPtr = NULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	653b      	str	r3, [r7, #80]	; 0x50

  distribution_t xDistribution;
  quantizedval_t xQuantizedVal;


  float* f_ZPtr = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
  float* f_FuncPtr = NULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]

  void* int_FuncPtr = NULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]
  void* int_ZPtr = NULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(b_Get_flagrun() == true)
 8003e44:	f006 fa32 	bl	800a2ac <b_Get_flagrun>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8294 	beq.w	8004378 <main+0x580>
	  {
		  v_Clear_flagrun();
 8003e50:	f006 fa38 	bl	800a2c4 <v_Clear_flagrun>

		  test_index = ui_Get_testindex();
 8003e54:	f006 fa42 	bl	800a2dc <ui_Get_testindex>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		  test_size = ui_Get_testsize();
 8003e5e:	f006 fa49 	bl	800a2f4 <ui_Get_testsize>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
		  flag_model = ui_Get_flagmodel();
 8003e68:	f006 fa50 	bl	800a30c <ui_Get_flagmodel>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3


		  switch(flag_model)
 8003e72:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	2b0f      	cmp	r3, #15
 8003e7a:	d8e3      	bhi.n	8003e44 <main+0x4c>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <main+0x8c>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003ec5 	.word	0x08003ec5
 8003e88:	08003f91 	.word	0x08003f91
 8003e8c:	08003e45 	.word	0x08003e45
 8003e90:	0800408b 	.word	0x0800408b
 8003e94:	08003e45 	.word	0x08003e45
 8003e98:	08003e45 	.word	0x08003e45
 8003e9c:	08003e45 	.word	0x08003e45
 8003ea0:	08004185 	.word	0x08004185
 8003ea4:	08003e45 	.word	0x08003e45
 8003ea8:	08003e45 	.word	0x08003e45
 8003eac:	08003e45 	.word	0x08003e45
 8003eb0:	08003e45 	.word	0x08003e45
 8003eb4:	08003e45 	.word	0x08003e45
 8003eb8:	08003e45 	.word	0x08003e45
 8003ebc:	08003e45 	.word	0x08003e45
 8003ec0:	0800427f 	.word	0x0800427f
		  {
		  case FLAGMODEL_FLOAT:
			  v_LoadFloatModel(&xNetParam, &WBPtr);
 8003ec4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003ec8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fd f964 	bl	800119c <v_LoadFloatModel>
			  v_FloatSetParameters(xNetParam);
 8003ed4:	4668      	mov	r0, sp
 8003ed6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003eda:	2244      	movs	r2, #68	; 0x44
 8003edc:	4619      	mov	r1, r3
 8003ede:	f007 f9dd 	bl	800b29c <memcpy>
 8003ee2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ee8:	f7fd fb7c 	bl	80015e4 <v_FloatSetParameters>
			  v_float_SetPtr(WBPtr);
 8003eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fb90 	bl	8001614 <v_float_SetPtr>
			  v_DynamicAllocForwardProp(&f_ZPtr, &f_FuncPtr);
 8003ef4:	f107 020c 	add.w	r2, r7, #12
 8003ef8:	f107 0310 	add.w	r3, r7, #16
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fd fb98 	bl	8001634 <v_DynamicAllocForwardProp>
			  time_old = HAL_GetTick();
 8003f04:	f000 fc78 	bl	80047f8 <HAL_GetTick>
 8003f08:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			  for(j = 0; j<10; j++)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f12:	e030      	b.n	8003f76 <main+0x17e>
			  {
				  for(i = 0; i < test_size; i++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003f1a:	e021      	b.n	8003f60 <main+0x168>
				  {
					  v_LoadTestDataNum(&xDataSet, xNetParam, (test_index+i));
 8003f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8003f26:	4413      	add	r3, r2
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003f2e:	9312      	str	r3, [sp, #72]	; 0x48
 8003f30:	4668      	mov	r0, sp
 8003f32:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f36:	2248      	movs	r2, #72	; 0x48
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f007 f9af 	bl	800b29c <memcpy>
 8003f3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f44:	4620      	mov	r0, r4
 8003f46:	f7fd fae1 	bl	800150c <v_LoadTestDataNum>
					  v_ProcessForwardPropNN_FP32(f_ZPtr, f_FuncPtr, xDataSet.x_test);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	68f9      	ldr	r1, [r7, #12]
 8003f4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fd fd4d 	bl	80019f0 <v_ProcessForwardPropNN_FP32>
				  for(i = 0; i < test_size; i++)
 8003f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003f60:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8003f64:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	dbd7      	blt.n	8003f1c <main+0x124>
			  for(j = 0; j<10; j++)
 8003f6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f70:	3301      	adds	r3, #1
 8003f72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f7a:	2b09      	cmp	r3, #9
 8003f7c:	ddca      	ble.n	8003f14 <main+0x11c>
				  }
			  }
			  process_time = HAL_GetTick() - time_old;
 8003f7e:	f000 fc3b 	bl	80047f8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			  break;
 8003f8e:	e1f4      	b.n	800437a <main+0x582>
		  case FLAGMODEL_INT4:
			  v_DynamicAllocForwardProp_int(&int_ZPtr, &int_FuncPtr);
 8003f90:	f107 0208 	add.w	r2, r7, #8
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fd fed5 	bl	8001d48 <v_DynamicAllocForwardProp_int>
			  v_LoadIntModel(&xNetParam, &xDistribution, &xQuantizedVal);
 8003f9e:	f107 0214 	add.w	r2, r7, #20
 8003fa2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003fa6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd f952 	bl	8001254 <v_LoadIntModel>
			  xNetParam.xVarPrecision.precision = 4;
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
			  v_SetQuantNetParameters(xNetParam, xQuantizedVal, xDistribution);
 8003fb6:	ad1a      	add	r5, sp, #104	; 0x68
 8003fb8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fc8:	ad11      	add	r5, sp, #68	; 0x44
 8003fca:	f107 0414 	add.w	r4, r7, #20
 8003fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	602b      	str	r3, [r5, #0]
 8003fda:	4668      	mov	r0, sp
 8003fdc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003fe0:	2244      	movs	r2, #68	; 0x44
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f007 f95a 	bl	800b29c <memcpy>
 8003fe8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fee:	f7fd fe7b 	bl	8001ce8 <v_SetQuantNetParameters>
			  time_old = HAL_GetTick();
 8003ff2:	f000 fc01 	bl	80047f8 <HAL_GetTick>
 8003ff6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			  for(j = 0; j<100; j++)
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004000:	e036      	b.n	8004070 <main+0x278>
			  {
				  for(i = 0; i < test_size; i++)
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004008:	e027      	b.n	800405a <main+0x262>
				  {
					  v_LoadTestDataNum(&xDataSet, xNetParam, (test_index+i));
 800400a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800400e:	b29a      	uxth	r2, r3
 8004010:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8004014:	4413      	add	r3, r2
 8004016:	b29b      	uxth	r3, r3
 8004018:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800401c:	9312      	str	r3, [sp, #72]	; 0x48
 800401e:	4668      	mov	r0, sp
 8004020:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004024:	2248      	movs	r2, #72	; 0x48
 8004026:	4619      	mov	r1, r3
 8004028:	f007 f938 	bl	800b29c <memcpy>
 800402c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004032:	4620      	mov	r0, r4
 8004034:	f7fd fa6a 	bl	800150c <v_LoadTestDataNum>
					  v_QuantizeIntputs_int(&((int8_t*)int_FuncPtr)[0], (float*)xDataSet.x_test);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff f946 	bl	80032d0 <v_QuantizeIntputs_int>
					  v_ProcessForwardPropNN_int(int_ZPtr, int_FuncPtr, xDataSet.x_test);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fc34 	bl	80038b8 <v_ProcessForwardPropNN_int>
				  for(i = 0; i < test_size; i++)
 8004050:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004054:	3301      	adds	r3, #1
 8004056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800405a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800405e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004062:	429a      	cmp	r2, r3
 8004064:	dbd1      	blt.n	800400a <main+0x212>
			  for(j = 0; j<100; j++)
 8004066:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800406a:	3301      	adds	r3, #1
 800406c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004070:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004074:	2b63      	cmp	r3, #99	; 0x63
 8004076:	ddc4      	ble.n	8004002 <main+0x20a>
				  }
			  }
			  process_time = HAL_GetTick() - time_old;
 8004078:	f000 fbbe 	bl	80047f8 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			  break;
 8004088:	e177      	b.n	800437a <main+0x582>
		  case FLAGMODEL_INT8:
			  v_DynamicAllocForwardProp_int(&int_ZPtr, &int_FuncPtr);
 800408a:	f107 0208 	add.w	r2, r7, #8
 800408e:	1d3b      	adds	r3, r7, #4
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd fe58 	bl	8001d48 <v_DynamicAllocForwardProp_int>
			  v_LoadIntModel(&xNetParam, &xDistribution, &xQuantizedVal);
 8004098:	f107 0214 	add.w	r2, r7, #20
 800409c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80040a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fd f8d5 	bl	8001254 <v_LoadIntModel>
			  xNetParam.xVarPrecision.precision = 8;
 80040aa:	2308      	movs	r3, #8
 80040ac:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
			  v_SetQuantNetParameters(xNetParam, xQuantizedVal, xDistribution);
 80040b0:	ad1a      	add	r5, sp, #104	; 0x68
 80040b2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80040b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040be:	e885 0003 	stmia.w	r5, {r0, r1}
 80040c2:	ad11      	add	r5, sp, #68	; 0x44
 80040c4:	f107 0414 	add.w	r4, r7, #20
 80040c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	602b      	str	r3, [r5, #0]
 80040d4:	4668      	mov	r0, sp
 80040d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040da:	2244      	movs	r2, #68	; 0x44
 80040dc:	4619      	mov	r1, r3
 80040de:	f007 f8dd 	bl	800b29c <memcpy>
 80040e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80040e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040e8:	f7fd fdfe 	bl	8001ce8 <v_SetQuantNetParameters>
			  time_old = HAL_GetTick();
 80040ec:	f000 fb84 	bl	80047f8 <HAL_GetTick>
 80040f0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			  for(j = 0; j<100; j++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040fa:	e036      	b.n	800416a <main+0x372>
			  {
				  for(i = 0; i < test_size; i++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004102:	e027      	b.n	8004154 <main+0x35c>
				  {
					  v_LoadTestDataNum(&xDataSet, xNetParam, (test_index+i));
 8004104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004108:	b29a      	uxth	r2, r3
 800410a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800410e:	4413      	add	r3, r2
 8004110:	b29b      	uxth	r3, r3
 8004112:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004116:	9312      	str	r3, [sp, #72]	; 0x48
 8004118:	4668      	mov	r0, sp
 800411a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800411e:	2248      	movs	r2, #72	; 0x48
 8004120:	4619      	mov	r1, r3
 8004122:	f007 f8bb 	bl	800b29c <memcpy>
 8004126:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800412a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412c:	4620      	mov	r0, r4
 800412e:	f7fd f9ed 	bl	800150c <v_LoadTestDataNum>
					  v_QuantizeIntputs_int(&((int8_t*)int_FuncPtr)[0], (float*)xDataSet.x_test);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff f8c9 	bl	80032d0 <v_QuantizeIntputs_int>
					  v_ProcessForwardPropNN_int(int_ZPtr, int_FuncPtr, xDataSet.x_test);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff fbb7 	bl	80038b8 <v_ProcessForwardPropNN_int>
				  for(i = 0; i < test_size; i++)
 800414a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800414e:	3301      	adds	r3, #1
 8004150:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004154:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8004158:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800415c:	429a      	cmp	r2, r3
 800415e:	dbd1      	blt.n	8004104 <main+0x30c>
			  for(j = 0; j<100; j++)
 8004160:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004164:	3301      	adds	r3, #1
 8004166:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800416a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800416e:	2b63      	cmp	r3, #99	; 0x63
 8004170:	ddc4      	ble.n	80040fc <main+0x304>
				  }
			  }
			  process_time = HAL_GetTick() - time_old;
 8004172:	f000 fb41 	bl	80047f8 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			  break;
 8004182:	e0fa      	b.n	800437a <main+0x582>
		  case FLAGMODEL_INT16:
			  v_DynamicAllocForwardProp_int(&int_ZPtr, &int_FuncPtr);
 8004184:	f107 0208 	add.w	r2, r7, #8
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7fd fddb 	bl	8001d48 <v_DynamicAllocForwardProp_int>
			  v_LoadIntModel(&xNetParam, &xDistribution, &xQuantizedVal);
 8004192:	f107 0214 	add.w	r2, r7, #20
 8004196:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800419a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fd f858 	bl	8001254 <v_LoadIntModel>
			  xNetParam.xVarPrecision.precision = 16;
 80041a4:	2310      	movs	r3, #16
 80041a6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
			  v_SetQuantNetParameters(xNetParam, xQuantizedVal, xDistribution);
 80041aa:	ad1a      	add	r5, sp, #104	; 0x68
 80041ac:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80041b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80041bc:	ad11      	add	r5, sp, #68	; 0x44
 80041be:	f107 0414 	add.w	r4, r7, #20
 80041c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	602b      	str	r3, [r5, #0]
 80041ce:	4668      	mov	r0, sp
 80041d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80041d4:	2244      	movs	r2, #68	; 0x44
 80041d6:	4619      	mov	r1, r3
 80041d8:	f007 f860 	bl	800b29c <memcpy>
 80041dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80041e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041e2:	f7fd fd81 	bl	8001ce8 <v_SetQuantNetParameters>
			  time_old = HAL_GetTick();
 80041e6:	f000 fb07 	bl	80047f8 <HAL_GetTick>
 80041ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			  for(j = 0; j<100; j++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f4:	e036      	b.n	8004264 <main+0x46c>
			  {
				  for(i = 0; i < test_size; i++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80041fc:	e027      	b.n	800424e <main+0x456>
				  {
					  v_LoadTestDataNum(&xDataSet, xNetParam, (test_index+i));
 80041fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004202:	b29a      	uxth	r2, r3
 8004204:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8004208:	4413      	add	r3, r2
 800420a:	b29b      	uxth	r3, r3
 800420c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004210:	9312      	str	r3, [sp, #72]	; 0x48
 8004212:	4668      	mov	r0, sp
 8004214:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004218:	2248      	movs	r2, #72	; 0x48
 800421a:	4619      	mov	r1, r3
 800421c:	f007 f83e 	bl	800b29c <memcpy>
 8004220:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004226:	4620      	mov	r0, r4
 8004228:	f7fd f970 	bl	800150c <v_LoadTestDataNum>
					  v_QuantizeIntputs_int(&((int16_t*)int_FuncPtr)[0], (float*)xDataSet.x_test);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004230:	4611      	mov	r1, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff f84c 	bl	80032d0 <v_QuantizeIntputs_int>
					  v_ProcessForwardPropNN_int(int_ZPtr, int_FuncPtr, xDataSet.x_test);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fb3a 	bl	80038b8 <v_ProcessForwardPropNN_int>
				  for(i = 0; i < test_size; i++)
 8004244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004248:	3301      	adds	r3, #1
 800424a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800424e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8004252:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004256:	429a      	cmp	r2, r3
 8004258:	dbd1      	blt.n	80041fe <main+0x406>
			  for(j = 0; j<100; j++)
 800425a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800425e:	3301      	adds	r3, #1
 8004260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004264:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004268:	2b63      	cmp	r3, #99	; 0x63
 800426a:	ddc4      	ble.n	80041f6 <main+0x3fe>
				  }
			  }
			  process_time = HAL_GetTick() - time_old;
 800426c:	f000 fac4 	bl	80047f8 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			  break;
 800427c:	e07d      	b.n	800437a <main+0x582>
		  case FLAGMODEL_INT32:
			v_DynamicAllocForwardProp_int(&int_ZPtr, &int_FuncPtr);
 800427e:	f107 0208 	add.w	r2, r7, #8
 8004282:	1d3b      	adds	r3, r7, #4
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f7fd fd5e 	bl	8001d48 <v_DynamicAllocForwardProp_int>
			v_LoadIntModel(&xNetParam, &xDistribution, &xQuantizedVal);
 800428c:	f107 0214 	add.w	r2, r7, #20
 8004290:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004294:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004298:	4618      	mov	r0, r3
 800429a:	f7fc ffdb 	bl	8001254 <v_LoadIntModel>
			xNetParam.xVarPrecision.precision = 32;
 800429e:	2320      	movs	r3, #32
 80042a0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
			v_SetQuantNetParameters(xNetParam, xQuantizedVal, xDistribution);
 80042a4:	ad1a      	add	r5, sp, #104	; 0x68
 80042a6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80042aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80042b6:	ad11      	add	r5, sp, #68	; 0x44
 80042b8:	f107 0414 	add.w	r4, r7, #20
 80042bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	4668      	mov	r0, sp
 80042ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042ce:	2244      	movs	r2, #68	; 0x44
 80042d0:	4619      	mov	r1, r3
 80042d2:	f006 ffe3 	bl	800b29c <memcpy>
 80042d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80042da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042dc:	f7fd fd04 	bl	8001ce8 <v_SetQuantNetParameters>
			time_old = HAL_GetTick();
 80042e0:	f000 fa8a 	bl	80047f8 <HAL_GetTick>
 80042e4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			for(j = 0; j<10; j++)
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042ee:	e036      	b.n	800435e <main+0x566>
			{
				  for(i = 0; i < test_size; i++)
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80042f6:	e027      	b.n	8004348 <main+0x550>
				  {
					  v_LoadTestDataNum(&xDataSet, xNetParam, (test_index+i));
 80042f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8004302:	4413      	add	r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800430a:	9312      	str	r3, [sp, #72]	; 0x48
 800430c:	4668      	mov	r0, sp
 800430e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004312:	2248      	movs	r2, #72	; 0x48
 8004314:	4619      	mov	r1, r3
 8004316:	f006 ffc1 	bl	800b29c <memcpy>
 800431a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800431e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004320:	4620      	mov	r0, r4
 8004322:	f7fd f8f3 	bl	800150c <v_LoadTestDataNum>
					  v_QuantizeIntputs_int(&((int32_t*)int_FuncPtr)[0], (float*)xDataSet.x_test);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe ffcf 	bl	80032d0 <v_QuantizeIntputs_int>
					  v_ProcessForwardPropNN_int(int_ZPtr, int_FuncPtr, xDataSet.x_test);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fabd 	bl	80038b8 <v_ProcessForwardPropNN_int>
				  for(i = 0; i < test_size; i++)
 800433e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004342:	3301      	adds	r3, #1
 8004344:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004348:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800434c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004350:	429a      	cmp	r2, r3
 8004352:	dbd1      	blt.n	80042f8 <main+0x500>
			for(j = 0; j<10; j++)
 8004354:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004358:	3301      	adds	r3, #1
 800435a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800435e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004362:	2b09      	cmp	r3, #9
 8004364:	ddc4      	ble.n	80042f0 <main+0x4f8>
				  }
			}
			process_time = HAL_GetTick() - time_old;
 8004366:	f000 fa47 	bl	80047f8 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			break;
 8004376:	e000      	b.n	800437a <main+0x582>
		  }


	  }
 8004378:	bf00      	nop
	  if(b_Get_flagrun() == true)
 800437a:	e563      	b.n	8003e44 <main+0x4c>

0800437c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b098      	sub	sp, #96	; 0x60
 8004380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004382:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004386:	2230      	movs	r2, #48	; 0x30
 8004388:	2100      	movs	r1, #0
 800438a:	4618      	mov	r0, r3
 800438c:	f006 ff94 	bl	800b2b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004390:	f107 031c 	add.w	r3, r7, #28
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	609a      	str	r2, [r3, #8]
 800439c:	60da      	str	r2, [r3, #12]
 800439e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043a0:	f107 030c 	add.w	r3, r7, #12
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	4b32      	ldr	r3, [pc, #200]	; (800447c <SystemClock_Config+0x100>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	4a31      	ldr	r2, [pc, #196]	; (800447c <SystemClock_Config+0x100>)
 80043b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043bc:	6413      	str	r3, [r2, #64]	; 0x40
 80043be:	4b2f      	ldr	r3, [pc, #188]	; (800447c <SystemClock_Config+0x100>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043ca:	2300      	movs	r3, #0
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	4b2c      	ldr	r3, [pc, #176]	; (8004480 <SystemClock_Config+0x104>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2b      	ldr	r2, [pc, #172]	; (8004480 <SystemClock_Config+0x104>)
 80043d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b29      	ldr	r3, [pc, #164]	; (8004480 <SystemClock_Config+0x104>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80043e6:	2309      	movs	r3, #9
 80043e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80043f0:	2301      	movs	r3, #1
 80043f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043f4:	2302      	movs	r3, #2
 80043f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80043fe:	2304      	movs	r3, #4
 8004400:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004402:	23a8      	movs	r3, #168	; 0xa8
 8004404:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004406:	2302      	movs	r3, #2
 8004408:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800440a:	2307      	movs	r3, #7
 800440c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800440e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004412:	4618      	mov	r0, r3
 8004414:	f002 f92a 	bl	800666c <HAL_RCC_OscConfig>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800441e:	f000 f87f 	bl	8004520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004422:	230f      	movs	r3, #15
 8004424:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004426:	2302      	movs	r3, #2
 8004428:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800442e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004432:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800443a:	f107 031c 	add.w	r3, r7, #28
 800443e:	2105      	movs	r1, #5
 8004440:	4618      	mov	r0, r3
 8004442:	f002 fb8b 	bl	8006b5c <HAL_RCC_ClockConfig>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800444c:	f000 f868 	bl	8004520 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004450:	2302      	movs	r3, #2
 8004452:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004458:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	4618      	mov	r0, r3
 8004460:	f002 fd78 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800446a:	f000 f859 	bl	8004520 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800446e:	f002 fc5b 	bl	8006d28 <HAL_RCC_EnableCSS>
}
 8004472:	bf00      	nop
 8004474:	3760      	adds	r7, #96	; 0x60
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800
 8004480:	40007000 	.word	0x40007000

08004484 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <MX_RTC_Init+0x44>)
 800448a:	4a10      	ldr	r2, [pc, #64]	; (80044cc <MX_RTC_Init+0x48>)
 800448c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800448e:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <MX_RTC_Init+0x44>)
 8004490:	2200      	movs	r2, #0
 8004492:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <MX_RTC_Init+0x44>)
 8004496:	227f      	movs	r2, #127	; 0x7f
 8004498:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <MX_RTC_Init+0x44>)
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <MX_RTC_Init+0x44>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80044a6:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <MX_RTC_Init+0x44>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <MX_RTC_Init+0x44>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80044b2:	4805      	ldr	r0, [pc, #20]	; (80044c8 <MX_RTC_Init+0x44>)
 80044b4:	f002 fe30 	bl	8007118 <HAL_RTC_Init>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80044be:	f000 f82f 	bl	8004520 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000544 	.word	0x20000544
 80044cc:	40002800 	.word	0x40002800

080044d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <MX_GPIO_Init+0x4c>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	4a0f      	ldr	r2, [pc, #60]	; (800451c <MX_GPIO_Init+0x4c>)
 80044e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e4:	6313      	str	r3, [r2, #48]	; 0x30
 80044e6:	4b0d      	ldr	r3, [pc, #52]	; (800451c <MX_GPIO_Init+0x4c>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <MX_GPIO_Init+0x4c>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	4a08      	ldr	r2, [pc, #32]	; (800451c <MX_GPIO_Init+0x4c>)
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	6313      	str	r3, [r2, #48]	; 0x30
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <MX_GPIO_Init+0x4c>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	683b      	ldr	r3, [r7, #0]

}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800

08004520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <HAL_MspInit+0x4c>)
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	4a0f      	ldr	r2, [pc, #60]	; (800457c <HAL_MspInit+0x4c>)
 8004540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004544:	6453      	str	r3, [r2, #68]	; 0x44
 8004546:	4b0d      	ldr	r3, [pc, #52]	; (800457c <HAL_MspInit+0x4c>)
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_MspInit+0x4c>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	4a08      	ldr	r2, [pc, #32]	; (800457c <HAL_MspInit+0x4c>)
 800455c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004560:	6413      	str	r3, [r2, #64]	; 0x40
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_MspInit+0x4c>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800

08004580 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a05      	ldr	r2, [pc, #20]	; (80045a4 <HAL_RTC_MspInit+0x24>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d102      	bne.n	8004598 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_RTC_MspInit+0x28>)
 8004594:	2201      	movs	r2, #1
 8004596:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40002800 	.word	0x40002800
 80045a8:	42470e3c 	.word	0x42470e3c

080045ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80045b0:	f002 fcb4 	bl	8006f1c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80045b4:	bf00      	nop
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045bc:	e7fe      	b.n	80045bc <HardFault_Handler+0x4>

080045be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045be:	b480      	push	{r7}
 80045c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045c2:	e7fe      	b.n	80045c2 <MemManage_Handler+0x4>

080045c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045c8:	e7fe      	b.n	80045c8 <BusFault_Handler+0x4>

080045ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045ce:	e7fe      	b.n	80045ce <UsageFault_Handler+0x4>

080045d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045de:	b480      	push	{r7}
 80045e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045e2:	bf00      	nop
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045fe:	f000 f8e7 	bl	80047d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800460c:	4802      	ldr	r0, [pc, #8]	; (8004618 <OTG_FS_IRQHandler+0x10>)
 800460e:	f000 fff9 	bl	8005604 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20001a58 	.word	0x20001a58

0800461c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004624:	4a14      	ldr	r2, [pc, #80]	; (8004678 <_sbrk+0x5c>)
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <_sbrk+0x60>)
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004630:	4b13      	ldr	r3, [pc, #76]	; (8004680 <_sbrk+0x64>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004638:	4b11      	ldr	r3, [pc, #68]	; (8004680 <_sbrk+0x64>)
 800463a:	4a12      	ldr	r2, [pc, #72]	; (8004684 <_sbrk+0x68>)
 800463c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800463e:	4b10      	ldr	r3, [pc, #64]	; (8004680 <_sbrk+0x64>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4413      	add	r3, r2
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	429a      	cmp	r2, r3
 800464a:	d207      	bcs.n	800465c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800464c:	f006 fdd2 	bl	800b1f4 <__errno>
 8004650:	4603      	mov	r3, r0
 8004652:	220c      	movs	r2, #12
 8004654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295
 800465a:	e009      	b.n	8004670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800465c:	4b08      	ldr	r3, [pc, #32]	; (8004680 <_sbrk+0x64>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <_sbrk+0x64>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4413      	add	r3, r2
 800466a:	4a05      	ldr	r2, [pc, #20]	; (8004680 <_sbrk+0x64>)
 800466c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800466e:	68fb      	ldr	r3, [r7, #12]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20020000 	.word	0x20020000
 800467c:	00000400 	.word	0x00000400
 8004680:	20000290 	.word	0x20000290
 8004684:	20001e70 	.word	0x20001e70

08004688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800468c:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <SystemInit+0x28>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <SystemInit+0x28>)
 8004694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <SystemInit+0x28>)
 800469e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046a2:	609a      	str	r2, [r3, #8]
#endif
}
 80046a4:	bf00      	nop
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80046b4:	f8df d04c 	ldr.w	sp, [pc, #76]	; 8004704 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM and CCMRAM */
  movs  r1, #0
 80046b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80046ba:	e003      	b.n	80046c4 <LoopCopyDataInit>

080046bc <CopyDataInit>:
CopyDataInit:
  ldr  r3, =_sidata
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 80046be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80046c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80046c2:	3104      	adds	r1, #4

080046c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80046c4:	4811      	ldr	r0, [pc, #68]	; (800470c <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 80046c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80046ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80046cc:	d3f6      	bcc.n	80046bc <CopyDataInit>
  movs r1, #0
 80046ce:	2100      	movs	r1, #0
  b LoopCopyDataInit1
 80046d0:	e003      	b.n	80046da <LoopCopyDataInit1>

080046d2 <CopyDataInit1>:
CopyDataInit1:
  ldr r3, =_siccmram
 80046d2:	4b10      	ldr	r3, [pc, #64]	; (8004714 <LoopFillZerobss+0x26>)
  ldr r3, [r3, r1]
 80046d4:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80046d6:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80046d8:	3104      	adds	r1, #4

080046da <LoopCopyDataInit1>:
LoopCopyDataInit1:
  ldr r0, =_sccmram
 80046da:	480f      	ldr	r0, [pc, #60]	; (8004718 <LoopFillZerobss+0x2a>)
  ldr r3, =_eccmram
 80046dc:	4b0f      	ldr	r3, [pc, #60]	; (800471c <LoopFillZerobss+0x2e>)
  adds r2, r0, r1
 80046de:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80046e0:	429a      	cmp	r2, r3
  bcc CopyDataInit1
 80046e2:	d3f6      	bcc.n	80046d2 <CopyDataInit1>
  ldr  r2, =_sbss
 80046e4:	4a0e      	ldr	r2, [pc, #56]	; (8004720 <LoopFillZerobss+0x32>)
  b  LoopFillZerobss
 80046e6:	e002      	b.n	80046ee <LoopFillZerobss>

080046e8 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80046e8:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80046ea:	f842 3b04 	str.w	r3, [r2], #4

080046ee <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80046ee:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <LoopFillZerobss+0x36>)
  cmp  r2, r3
 80046f0:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80046f2:	d3f9      	bcc.n	80046e8 <FillZerobss>



/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80046f4:	f7ff ffc8 	bl	8004688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046f8:	f006 fd82 	bl	800b200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046fc:	f7ff fb7c 	bl	8003df8 <main>
  bx  lr    
 8004700:	4770      	bx	lr
 8004702:	0000      	.short	0x0000
  ldr   sp, =_estack     /* set stack pointer */
 8004704:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004708:	0800ba8c 	.word	0x0800ba8c
  ldr  r0, =_sdata
 800470c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004710:	200001e4 	.word	0x200001e4
  ldr r3, =_siccmram
 8004714:	0800b80c 	.word	0x0800b80c
  ldr r0, =_sccmram
 8004718:	10000000 	.word	0x10000000
  ldr r3, =_eccmram
 800471c:	10000000 	.word	0x10000000
  ldr  r2, =_sbss
 8004720:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8004724:	20001e70 	.word	0x20001e70

08004728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004728:	e7fe      	b.n	8004728 <ADC_IRQHandler>
	...

0800472c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <HAL_Init+0x40>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a0d      	ldr	r2, [pc, #52]	; (800476c <HAL_Init+0x40>)
 8004736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800473a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_Init+0x40>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0a      	ldr	r2, [pc, #40]	; (800476c <HAL_Init+0x40>)
 8004742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004748:	4b08      	ldr	r3, [pc, #32]	; (800476c <HAL_Init+0x40>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a07      	ldr	r2, [pc, #28]	; (800476c <HAL_Init+0x40>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004754:	2003      	movs	r0, #3
 8004756:	f000 f94f 	bl	80049f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800475a:	2000      	movs	r0, #0
 800475c:	f000 f808 	bl	8004770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004760:	f7ff fee6 	bl	8004530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40023c00 	.word	0x40023c00

08004770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004778:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <HAL_InitTick+0x54>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <HAL_InitTick+0x58>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	4619      	mov	r1, r3
 8004782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004786:	fbb3 f3f1 	udiv	r3, r3, r1
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f967 	bl	8004a62 <HAL_SYSTICK_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e00e      	b.n	80047bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b0f      	cmp	r3, #15
 80047a2:	d80a      	bhi.n	80047ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047a4:	2200      	movs	r2, #0
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	f000 f92f 	bl	8004a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047b0:	4a06      	ldr	r2, [pc, #24]	; (80047cc <HAL_InitTick+0x5c>)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000000 	.word	0x20000000
 80047c8:	20000008 	.word	0x20000008
 80047cc:	20000004 	.word	0x20000004

080047d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <HAL_IncTick+0x20>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_IncTick+0x24>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4413      	add	r3, r2
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <HAL_IncTick+0x24>)
 80047e2:	6013      	str	r3, [r2, #0]
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000008 	.word	0x20000008
 80047f4:	20000564 	.word	0x20000564

080047f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return uwTick;
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_GetTick+0x14>)
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20000564 	.word	0x20000564

08004810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004818:	f7ff ffee 	bl	80047f8 <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d005      	beq.n	8004836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800482a:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <HAL_Delay+0x44>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004836:	bf00      	nop
 8004838:	f7ff ffde 	bl	80047f8 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	429a      	cmp	r2, r3
 8004846:	d8f7      	bhi.n	8004838 <HAL_Delay+0x28>
  {
  }
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000008 	.word	0x20000008

08004858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <__NVIC_SetPriorityGrouping+0x44>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004874:	4013      	ands	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800488a:	4a04      	ldr	r2, [pc, #16]	; (800489c <__NVIC_SetPriorityGrouping+0x44>)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	60d3      	str	r3, [r2, #12]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048a4:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <__NVIC_GetPriorityGrouping+0x18>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	0a1b      	lsrs	r3, r3, #8
 80048aa:	f003 0307 	and.w	r3, r3, #7
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	db0b      	blt.n	80048e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	f003 021f 	and.w	r2, r3, #31
 80048d4:	4907      	ldr	r1, [pc, #28]	; (80048f4 <__NVIC_EnableIRQ+0x38>)
 80048d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2001      	movs	r0, #1
 80048de:	fa00 f202 	lsl.w	r2, r0, r2
 80048e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	e000e100 	.word	0xe000e100

080048f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004908:	2b00      	cmp	r3, #0
 800490a:	db0a      	blt.n	8004922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	490c      	ldr	r1, [pc, #48]	; (8004944 <__NVIC_SetPriority+0x4c>)
 8004912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004916:	0112      	lsls	r2, r2, #4
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	440b      	add	r3, r1
 800491c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004920:	e00a      	b.n	8004938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4908      	ldr	r1, [pc, #32]	; (8004948 <__NVIC_SetPriority+0x50>)
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	3b04      	subs	r3, #4
 8004930:	0112      	lsls	r2, r2, #4
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	440b      	add	r3, r1
 8004936:	761a      	strb	r2, [r3, #24]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	e000e100 	.word	0xe000e100
 8004948:	e000ed00 	.word	0xe000ed00

0800494c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800494c:	b480      	push	{r7}
 800494e:	b089      	sub	sp, #36	; 0x24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f1c3 0307 	rsb	r3, r3, #7
 8004966:	2b04      	cmp	r3, #4
 8004968:	bf28      	it	cs
 800496a:	2304      	movcs	r3, #4
 800496c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	3304      	adds	r3, #4
 8004972:	2b06      	cmp	r3, #6
 8004974:	d902      	bls.n	800497c <NVIC_EncodePriority+0x30>
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	3b03      	subs	r3, #3
 800497a:	e000      	b.n	800497e <NVIC_EncodePriority+0x32>
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004980:	f04f 32ff 	mov.w	r2, #4294967295
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	43da      	mvns	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	401a      	ands	r2, r3
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004994:	f04f 31ff 	mov.w	r1, #4294967295
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	43d9      	mvns	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a4:	4313      	orrs	r3, r2
         );
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3724      	adds	r7, #36	; 0x24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3b01      	subs	r3, #1
 80049c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049c4:	d301      	bcc.n	80049ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049c6:	2301      	movs	r3, #1
 80049c8:	e00f      	b.n	80049ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ca:	4a0a      	ldr	r2, [pc, #40]	; (80049f4 <SysTick_Config+0x40>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049d2:	210f      	movs	r1, #15
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	f7ff ff8e 	bl	80048f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <SysTick_Config+0x40>)
 80049de:	2200      	movs	r2, #0
 80049e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049e2:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <SysTick_Config+0x40>)
 80049e4:	2207      	movs	r2, #7
 80049e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	e000e010 	.word	0xe000e010

080049f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ff29 	bl	8004858 <__NVIC_SetPriorityGrouping>
}
 8004a06:	bf00      	nop
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	4603      	mov	r3, r0
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a20:	f7ff ff3e 	bl	80048a0 <__NVIC_GetPriorityGrouping>
 8004a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	6978      	ldr	r0, [r7, #20]
 8004a2c:	f7ff ff8e 	bl	800494c <NVIC_EncodePriority>
 8004a30:	4602      	mov	r2, r0
 8004a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a36:	4611      	mov	r1, r2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff ff5d 	bl	80048f8 <__NVIC_SetPriority>
}
 8004a3e:	bf00      	nop
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff ff31 	bl	80048bc <__NVIC_EnableIRQ>
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff ffa2 	bl	80049b4 <SysTick_Config>
 8004a70:	4603      	mov	r3, r0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a8e:	4b23      	ldr	r3, [pc, #140]	; (8004b1c <HAL_FLASH_Program+0xa0>)
 8004a90:	7e1b      	ldrb	r3, [r3, #24]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_FLASH_Program+0x1e>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e03b      	b.n	8004b12 <HAL_FLASH_Program+0x96>
 8004a9a:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <HAL_FLASH_Program+0xa0>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004aa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004aa4:	f000 f870 	bl	8004b88 <FLASH_WaitForLastOperation>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d12b      	bne.n	8004b0a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d105      	bne.n	8004ac4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004ab8:	783b      	ldrb	r3, [r7, #0]
 8004aba:	4619      	mov	r1, r3
 8004abc:	68b8      	ldr	r0, [r7, #8]
 8004abe:	f000 f91b 	bl	8004cf8 <FLASH_Program_Byte>
 8004ac2:	e016      	b.n	8004af2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d105      	bne.n	8004ad6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004aca:	883b      	ldrh	r3, [r7, #0]
 8004acc:	4619      	mov	r1, r3
 8004ace:	68b8      	ldr	r0, [r7, #8]
 8004ad0:	f000 f8ee 	bl	8004cb0 <FLASH_Program_HalfWord>
 8004ad4:	e00d      	b.n	8004af2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d105      	bne.n	8004ae8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	68b8      	ldr	r0, [r7, #8]
 8004ae2:	f000 f8c3 	bl	8004c6c <FLASH_Program_Word>
 8004ae6:	e004      	b.n	8004af2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aec:	68b8      	ldr	r0, [r7, #8]
 8004aee:	f000 f88b 	bl	8004c08 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004af2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004af6:	f000 f847 	bl	8004b88 <FLASH_WaitForLastOperation>
 8004afa:	4603      	mov	r3, r0
 8004afc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004afe:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <HAL_FLASH_Program+0xa4>)
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	4a07      	ldr	r2, [pc, #28]	; (8004b20 <HAL_FLASH_Program+0xa4>)
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <HAL_FLASH_Program+0xa0>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000568 	.word	0x20000568
 8004b20:	40023c00 	.word	0x40023c00

08004b24 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_FLASH_Unlock+0x38>)
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	da0b      	bge.n	8004b4e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_FLASH_Unlock+0x38>)
 8004b38:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <HAL_FLASH_Unlock+0x3c>)
 8004b3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <HAL_FLASH_Unlock+0x38>)
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <HAL_FLASH_Unlock+0x40>)
 8004b40:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_FLASH_Unlock+0x38>)
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da01      	bge.n	8004b4e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	40023c00 	.word	0x40023c00
 8004b60:	45670123 	.word	0x45670123
 8004b64:	cdef89ab 	.word	0xcdef89ab

08004b68 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_FLASH_Lock+0x1c>)
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	4a04      	ldr	r2, [pc, #16]	; (8004b84 <HAL_FLASH_Lock+0x1c>)
 8004b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b76:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40023c00 	.word	0x40023c00

08004b88 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b94:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <FLASH_WaitForLastOperation+0x78>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004b9a:	f7ff fe2d 	bl	80047f8 <HAL_GetTick>
 8004b9e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004ba0:	e010      	b.n	8004bc4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d00c      	beq.n	8004bc4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <FLASH_WaitForLastOperation+0x38>
 8004bb0:	f7ff fe22 	bl	80047f8 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d201      	bcs.n	8004bc4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e019      	b.n	8004bf8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <FLASH_WaitForLastOperation+0x7c>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e8      	bne.n	8004ba2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <FLASH_WaitForLastOperation+0x7c>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004bdc:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <FLASH_WaitForLastOperation+0x7c>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <FLASH_WaitForLastOperation+0x7c>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004bee:	f000 f8a5 	bl	8004d3c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
  
}  
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000568 	.word	0x20000568
 8004c04:	40023c00 	.word	0x40023c00

08004c08 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c14:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <FLASH_Program_DoubleWord+0x60>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <FLASH_Program_DoubleWord+0x60>)
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004c20:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <FLASH_Program_DoubleWord+0x60>)
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	4a10      	ldr	r2, [pc, #64]	; (8004c68 <FLASH_Program_DoubleWord+0x60>)
 8004c26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <FLASH_Program_DoubleWord+0x60>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4a0d      	ldr	r2, [pc, #52]	; (8004c68 <FLASH_Program_DoubleWord+0x60>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004c3e:	f3bf 8f6f 	isb	sy
}
 8004c42:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	000a      	movs	r2, r1
 8004c52:	2300      	movs	r3, #0
 8004c54:	68f9      	ldr	r1, [r7, #12]
 8004c56:	3104      	adds	r1, #4
 8004c58:	4613      	mov	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40023c00 	.word	0x40023c00

08004c6c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c76:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <FLASH_Program_Word+0x40>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	4a0c      	ldr	r2, [pc, #48]	; (8004cac <FLASH_Program_Word+0x40>)
 8004c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004c82:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <FLASH_Program_Word+0x40>)
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <FLASH_Program_Word+0x40>)
 8004c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c8e:	4b07      	ldr	r3, [pc, #28]	; (8004cac <FLASH_Program_Word+0x40>)
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	4a06      	ldr	r2, [pc, #24]	; (8004cac <FLASH_Program_Word+0x40>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40023c00 	.word	0x40023c00

08004cb0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <FLASH_Program_HalfWord+0x44>)
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	; (8004cf4 <FLASH_Program_HalfWord+0x44>)
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <FLASH_Program_HalfWord+0x44>)
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <FLASH_Program_HalfWord+0x44>)
 8004cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004cd4:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <FLASH_Program_HalfWord+0x44>)
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	4a06      	ldr	r2, [pc, #24]	; (8004cf4 <FLASH_Program_HalfWord+0x44>)
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	887a      	ldrh	r2, [r7, #2]
 8004ce4:	801a      	strh	r2, [r3, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40023c00 	.word	0x40023c00

08004cf8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <FLASH_Program_Byte+0x40>)
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	4a0b      	ldr	r2, [pc, #44]	; (8004d38 <FLASH_Program_Byte+0x40>)
 8004d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <FLASH_Program_Byte+0x40>)
 8004d12:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <FLASH_Program_Byte+0x40>)
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <FLASH_Program_Byte+0x40>)
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	4a06      	ldr	r2, [pc, #24]	; (8004d38 <FLASH_Program_Byte+0x40>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	701a      	strb	r2, [r3, #0]
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40023c00 	.word	0x40023c00

08004d3c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004d40:	4b27      	ldr	r3, [pc, #156]	; (8004de0 <FLASH_SetErrorCode+0xa4>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004d4c:	4b25      	ldr	r3, [pc, #148]	; (8004de4 <FLASH_SetErrorCode+0xa8>)
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f043 0310 	orr.w	r3, r3, #16
 8004d54:	4a23      	ldr	r2, [pc, #140]	; (8004de4 <FLASH_SetErrorCode+0xa8>)
 8004d56:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004d58:	4b21      	ldr	r3, [pc, #132]	; (8004de0 <FLASH_SetErrorCode+0xa4>)
 8004d5a:	2210      	movs	r2, #16
 8004d5c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004d5e:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <FLASH_SetErrorCode+0xa4>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004d6a:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <FLASH_SetErrorCode+0xa8>)
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f043 0308 	orr.w	r3, r3, #8
 8004d72:	4a1c      	ldr	r2, [pc, #112]	; (8004de4 <FLASH_SetErrorCode+0xa8>)
 8004d74:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004d76:	4b1a      	ldr	r3, [pc, #104]	; (8004de0 <FLASH_SetErrorCode+0xa4>)
 8004d78:	2220      	movs	r2, #32
 8004d7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004d7c:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <FLASH_SetErrorCode+0xa4>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004d88:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <FLASH_SetErrorCode+0xa8>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f043 0304 	orr.w	r3, r3, #4
 8004d90:	4a14      	ldr	r2, [pc, #80]	; (8004de4 <FLASH_SetErrorCode+0xa8>)
 8004d92:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004d94:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <FLASH_SetErrorCode+0xa4>)
 8004d96:	2240      	movs	r2, #64	; 0x40
 8004d98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004d9a:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <FLASH_SetErrorCode+0xa4>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <FLASH_SetErrorCode+0xa8>)
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f043 0302 	orr.w	r3, r3, #2
 8004dae:	4a0d      	ldr	r2, [pc, #52]	; (8004de4 <FLASH_SetErrorCode+0xa8>)
 8004db0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <FLASH_SetErrorCode+0xa4>)
 8004db4:	2280      	movs	r2, #128	; 0x80
 8004db6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <FLASH_SetErrorCode+0xa4>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004dc4:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <FLASH_SetErrorCode+0xa8>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f043 0320 	orr.w	r3, r3, #32
 8004dcc:	4a05      	ldr	r2, [pc, #20]	; (8004de4 <FLASH_SetErrorCode+0xa8>)
 8004dce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004dd0:	4b03      	ldr	r3, [pc, #12]	; (8004de0 <FLASH_SetErrorCode+0xa4>)
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	60da      	str	r2, [r3, #12]
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40023c00 	.word	0x40023c00
 8004de4:	20000568 	.word	0x20000568

08004de8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004dfa:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <HAL_FLASHEx_Erase+0xd8>)
 8004dfc:	7e1b      	ldrb	r3, [r3, #24]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_FLASHEx_Erase+0x1e>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e058      	b.n	8004eb8 <HAL_FLASHEx_Erase+0xd0>
 8004e06:	4b2e      	ldr	r3, [pc, #184]	; (8004ec0 <HAL_FLASHEx_Erase+0xd8>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e10:	f7ff feba 	bl	8004b88 <FLASH_WaitForLastOperation>
 8004e14:	4603      	mov	r3, r0
 8004e16:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d148      	bne.n	8004eb0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d115      	bne.n	8004e5a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f000 f844 	bl	8004ec8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e44:	f7ff fea0 	bl	8004b88 <FLASH_WaitForLastOperation>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <HAL_FLASHEx_Erase+0xdc>)
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <HAL_FLASHEx_Erase+0xdc>)
 8004e52:	f023 0304 	bic.w	r3, r3, #4
 8004e56:	6113      	str	r3, [r2, #16]
 8004e58:	e028      	b.n	8004eac <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	e01c      	b.n	8004e9c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	4619      	mov	r1, r3
 8004e6a:	68b8      	ldr	r0, [r7, #8]
 8004e6c:	f000 f850 	bl	8004f10 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e74:	f7ff fe88 	bl	8004b88 <FLASH_WaitForLastOperation>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004e7c:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <HAL_FLASHEx_Erase+0xdc>)
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <HAL_FLASHEx_Erase+0xdc>)
 8004e82:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004e86:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	601a      	str	r2, [r3, #0]
          break;
 8004e94:	e00a      	b.n	8004eac <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d3da      	bcc.n	8004e62 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8004eac:	f000 f878 	bl	8004fa0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <HAL_FLASHEx_Erase+0xd8>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	761a      	strb	r2, [r3, #24]

  return status;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000568 	.word	0x20000568
 8004ec4:	40023c00 	.word	0x40023c00

08004ec8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	6039      	str	r1, [r7, #0]
 8004ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ed4:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <FLASH_MassErase+0x44>)
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	4a0c      	ldr	r2, [pc, #48]	; (8004f0c <FLASH_MassErase+0x44>)
 8004eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ede:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <FLASH_MassErase+0x44>)
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <FLASH_MassErase+0x44>)
 8004ee6:	f043 0304 	orr.w	r3, r3, #4
 8004eea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <FLASH_MassErase+0x44>)
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <FLASH_MassErase+0x44>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6113      	str	r3, [r2, #16]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40023c00 	.word	0x40023c00

08004f10 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	e010      	b.n	8004f4e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d103      	bne.n	8004f3a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e009      	b.n	8004f4e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d103      	bne.n	8004f48 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e002      	b.n	8004f4e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004f48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f4c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <FLASH_Erase_Sector+0x8c>)
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <FLASH_Erase_Sector+0x8c>)
 8004f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <FLASH_Erase_Sector+0x8c>)
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	490f      	ldr	r1, [pc, #60]	; (8004f9c <FLASH_Erase_Sector+0x8c>)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <FLASH_Erase_Sector+0x8c>)
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	4a0c      	ldr	r2, [pc, #48]	; (8004f9c <FLASH_Erase_Sector+0x8c>)
 8004f6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004f70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <FLASH_Erase_Sector+0x8c>)
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	4a07      	ldr	r2, [pc, #28]	; (8004f9c <FLASH_Erase_Sector+0x8c>)
 8004f7e:	f043 0302 	orr.w	r3, r3, #2
 8004f82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <FLASH_Erase_Sector+0x8c>)
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <FLASH_Erase_Sector+0x8c>)
 8004f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8e:	6113      	str	r3, [r2, #16]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40023c00 	.word	0x40023c00

08004fa0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8004fa4:	4b20      	ldr	r3, [pc, #128]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d017      	beq.n	8004fe0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004fb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a19      	ldr	r2, [pc, #100]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004fc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4b17      	ldr	r3, [pc, #92]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a16      	ldr	r2, [pc, #88]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004fce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fd2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fd4:	4b14      	ldr	r3, [pc, #80]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a13      	ldr	r2, [pc, #76]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fde:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004fe0:	4b11      	ldr	r3, [pc, #68]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d017      	beq.n	800501c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0d      	ldr	r2, [pc, #52]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <FLASH_FlushCaches+0x88>)
 8004ffe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b08      	ldr	r3, [pc, #32]	; (8005028 <FLASH_FlushCaches+0x88>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a07      	ldr	r2, [pc, #28]	; (8005028 <FLASH_FlushCaches+0x88>)
 800500a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800500e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <FLASH_FlushCaches+0x88>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a04      	ldr	r2, [pc, #16]	; (8005028 <FLASH_FlushCaches+0x88>)
 8005016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800501a:	6013      	str	r3, [r2, #0]
  }
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40023c00 	.word	0x40023c00

0800502c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800502c:	b480      	push	{r7}
 800502e:	b089      	sub	sp, #36	; 0x24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	e16b      	b.n	8005320 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005048:	2201      	movs	r2, #1
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4013      	ands	r3, r2
 800505a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	429a      	cmp	r2, r3
 8005062:	f040 815a 	bne.w	800531a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b01      	cmp	r3, #1
 8005070:	d005      	beq.n	800507e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800507a:	2b02      	cmp	r3, #2
 800507c:	d130      	bne.n	80050e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	2203      	movs	r2, #3
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43db      	mvns	r3, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4013      	ands	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050b4:	2201      	movs	r2, #1
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4013      	ands	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 0201 	and.w	r2, r3, #1
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d017      	beq.n	800511c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	2203      	movs	r2, #3
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d123      	bne.n	8005170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	08da      	lsrs	r2, r3, #3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3208      	adds	r2, #8
 8005130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	220f      	movs	r2, #15
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	43db      	mvns	r3, r3
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	4013      	ands	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4313      	orrs	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	08da      	lsrs	r2, r3, #3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3208      	adds	r2, #8
 800516a:	69b9      	ldr	r1, [r7, #24]
 800516c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	2203      	movs	r2, #3
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f003 0203 	and.w	r2, r3, #3
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80b4 	beq.w	800531a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	4b60      	ldr	r3, [pc, #384]	; (8005338 <HAL_GPIO_Init+0x30c>)
 80051b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ba:	4a5f      	ldr	r2, [pc, #380]	; (8005338 <HAL_GPIO_Init+0x30c>)
 80051bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051c0:	6453      	str	r3, [r2, #68]	; 0x44
 80051c2:	4b5d      	ldr	r3, [pc, #372]	; (8005338 <HAL_GPIO_Init+0x30c>)
 80051c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051ce:	4a5b      	ldr	r2, [pc, #364]	; (800533c <HAL_GPIO_Init+0x310>)
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	089b      	lsrs	r3, r3, #2
 80051d4:	3302      	adds	r3, #2
 80051d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	220f      	movs	r2, #15
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4013      	ands	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a52      	ldr	r2, [pc, #328]	; (8005340 <HAL_GPIO_Init+0x314>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d02b      	beq.n	8005252 <HAL_GPIO_Init+0x226>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a51      	ldr	r2, [pc, #324]	; (8005344 <HAL_GPIO_Init+0x318>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d025      	beq.n	800524e <HAL_GPIO_Init+0x222>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a50      	ldr	r2, [pc, #320]	; (8005348 <HAL_GPIO_Init+0x31c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01f      	beq.n	800524a <HAL_GPIO_Init+0x21e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a4f      	ldr	r2, [pc, #316]	; (800534c <HAL_GPIO_Init+0x320>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d019      	beq.n	8005246 <HAL_GPIO_Init+0x21a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a4e      	ldr	r2, [pc, #312]	; (8005350 <HAL_GPIO_Init+0x324>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <HAL_GPIO_Init+0x216>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a4d      	ldr	r2, [pc, #308]	; (8005354 <HAL_GPIO_Init+0x328>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00d      	beq.n	800523e <HAL_GPIO_Init+0x212>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a4c      	ldr	r2, [pc, #304]	; (8005358 <HAL_GPIO_Init+0x32c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <HAL_GPIO_Init+0x20e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a4b      	ldr	r2, [pc, #300]	; (800535c <HAL_GPIO_Init+0x330>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <HAL_GPIO_Init+0x20a>
 8005232:	2307      	movs	r3, #7
 8005234:	e00e      	b.n	8005254 <HAL_GPIO_Init+0x228>
 8005236:	2308      	movs	r3, #8
 8005238:	e00c      	b.n	8005254 <HAL_GPIO_Init+0x228>
 800523a:	2306      	movs	r3, #6
 800523c:	e00a      	b.n	8005254 <HAL_GPIO_Init+0x228>
 800523e:	2305      	movs	r3, #5
 8005240:	e008      	b.n	8005254 <HAL_GPIO_Init+0x228>
 8005242:	2304      	movs	r3, #4
 8005244:	e006      	b.n	8005254 <HAL_GPIO_Init+0x228>
 8005246:	2303      	movs	r3, #3
 8005248:	e004      	b.n	8005254 <HAL_GPIO_Init+0x228>
 800524a:	2302      	movs	r3, #2
 800524c:	e002      	b.n	8005254 <HAL_GPIO_Init+0x228>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <HAL_GPIO_Init+0x228>
 8005252:	2300      	movs	r3, #0
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	f002 0203 	and.w	r2, r2, #3
 800525a:	0092      	lsls	r2, r2, #2
 800525c:	4093      	lsls	r3, r2
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4313      	orrs	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005264:	4935      	ldr	r1, [pc, #212]	; (800533c <HAL_GPIO_Init+0x310>)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	089b      	lsrs	r3, r3, #2
 800526a:	3302      	adds	r3, #2
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005272:	4b3b      	ldr	r3, [pc, #236]	; (8005360 <HAL_GPIO_Init+0x334>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	43db      	mvns	r3, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4013      	ands	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005296:	4a32      	ldr	r2, [pc, #200]	; (8005360 <HAL_GPIO_Init+0x334>)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800529c:	4b30      	ldr	r3, [pc, #192]	; (8005360 <HAL_GPIO_Init+0x334>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052c0:	4a27      	ldr	r2, [pc, #156]	; (8005360 <HAL_GPIO_Init+0x334>)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052c6:	4b26      	ldr	r3, [pc, #152]	; (8005360 <HAL_GPIO_Init+0x334>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	43db      	mvns	r3, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4013      	ands	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052ea:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <HAL_GPIO_Init+0x334>)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052f0:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <HAL_GPIO_Init+0x334>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005314:	4a12      	ldr	r2, [pc, #72]	; (8005360 <HAL_GPIO_Init+0x334>)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	3301      	adds	r3, #1
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	2b0f      	cmp	r3, #15
 8005324:	f67f ae90 	bls.w	8005048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	3724      	adds	r7, #36	; 0x24
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800
 800533c:	40013800 	.word	0x40013800
 8005340:	40020000 	.word	0x40020000
 8005344:	40020400 	.word	0x40020400
 8005348:	40020800 	.word	0x40020800
 800534c:	40020c00 	.word	0x40020c00
 8005350:	40021000 	.word	0x40021000
 8005354:	40021400 	.word	0x40021400
 8005358:	40021800 	.word	0x40021800
 800535c:	40021c00 	.word	0x40021c00
 8005360:	40013c00 	.word	0x40013c00

08005364 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005366:	b08f      	sub	sp, #60	; 0x3c
 8005368:	af0a      	add	r7, sp, #40	; 0x28
 800536a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e10f      	b.n	8005596 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d106      	bne.n	8005396 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f005 fc17 	bl	800abc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2203      	movs	r2, #3
 800539a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f002 f8a8 	bl	800750a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	687e      	ldr	r6, [r7, #4]
 80053c2:	466d      	mov	r5, sp
 80053c4:	f106 0410 	add.w	r4, r6, #16
 80053c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80053d8:	1d33      	adds	r3, r6, #4
 80053da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053dc:	6838      	ldr	r0, [r7, #0]
 80053de:	f001 ff80 	bl	80072e2 <USB_CoreInit>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0d0      	b.n	8005596 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2100      	movs	r1, #0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f002 f896 	bl	800752c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005400:	2300      	movs	r3, #0
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e04a      	b.n	800549c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005406:	7bfa      	ldrb	r2, [r7, #15]
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	333d      	adds	r3, #61	; 0x3d
 8005416:	2201      	movs	r2, #1
 8005418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800541a:	7bfa      	ldrb	r2, [r7, #15]
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	440b      	add	r3, r1
 8005428:	333c      	adds	r3, #60	; 0x3c
 800542a:	7bfa      	ldrb	r2, [r7, #15]
 800542c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800542e:	7bfa      	ldrb	r2, [r7, #15]
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	b298      	uxth	r0, r3
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	3342      	adds	r3, #66	; 0x42
 8005442:	4602      	mov	r2, r0
 8005444:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005446:	7bfa      	ldrb	r2, [r7, #15]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	333f      	adds	r3, #63	; 0x3f
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800545a:	7bfa      	ldrb	r2, [r7, #15]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	3344      	adds	r3, #68	; 0x44
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800546e:	7bfa      	ldrb	r2, [r7, #15]
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	3348      	adds	r3, #72	; 0x48
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005482:	7bfa      	ldrb	r2, [r7, #15]
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	3350      	adds	r3, #80	; 0x50
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	3301      	adds	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
 800549c:	7bfa      	ldrb	r2, [r7, #15]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d3af      	bcc.n	8005406 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
 80054aa:	e044      	b.n	8005536 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054ac:	7bfa      	ldrb	r2, [r7, #15]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80054c2:	7bfa      	ldrb	r2, [r7, #15]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80054d4:	7bfa      	ldrb	r2, [r7, #15]
 80054d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054d8:	7bfa      	ldrb	r2, [r7, #15]
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	4613      	mov	r3, r2
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054ee:	7bfa      	ldrb	r2, [r7, #15]
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005504:	7bfa      	ldrb	r2, [r7, #15]
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	4613      	mov	r3, r2
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	1a9b      	subs	r3, r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800551a:	7bfa      	ldrb	r2, [r7, #15]
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	3301      	adds	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
 8005536:	7bfa      	ldrb	r2, [r7, #15]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d3b5      	bcc.n	80054ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	687e      	ldr	r6, [r7, #4]
 8005548:	466d      	mov	r5, sp
 800554a:	f106 0410 	add.w	r4, r6, #16
 800554e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005556:	e894 0003 	ldmia.w	r4, {r0, r1}
 800555a:	e885 0003 	stmia.w	r5, {r0, r1}
 800555e:	1d33      	adds	r3, r6, #4
 8005560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005562:	6838      	ldr	r0, [r7, #0]
 8005564:	f002 f80c 	bl	8007580 <USB_DevInit>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2202      	movs	r2, #2
 8005572:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e00d      	b.n	8005596 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f003 f854 	bl	800863c <USB_DevDisconnect>

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800559e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_PCD_Start+0x1c>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e020      	b.n	80055fc <HAL_PCD_Start+0x5e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d109      	bne.n	80055de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d005      	beq.n	80055de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f001 ff80 	bl	80074e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f003 f804 	bl	80085fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005604:	b590      	push	{r4, r7, lr}
 8005606:	b08d      	sub	sp, #52	; 0x34
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f003 f8c2 	bl	80087a4 <USB_GetMode>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 839d 	bne.w	8005d62 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f003 f826 	bl	800867e <USB_ReadInterrupts>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 8393 	beq.w	8005d60 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f003 f81d 	bl	800867e <USB_ReadInterrupts>
 8005644:	4603      	mov	r3, r0
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b02      	cmp	r3, #2
 800564c:	d107      	bne.n	800565e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695a      	ldr	r2, [r3, #20]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f002 0202 	and.w	r2, r2, #2
 800565c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f003 f80b 	bl	800867e <USB_ReadInterrupts>
 8005668:	4603      	mov	r3, r0
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b10      	cmp	r3, #16
 8005670:	d161      	bne.n	8005736 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0210 	bic.w	r2, r2, #16
 8005680:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f003 020f 	and.w	r2, r3, #15
 800568e:	4613      	mov	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	3304      	adds	r3, #4
 80056a0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	0c5b      	lsrs	r3, r3, #17
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d124      	bne.n	80056f8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d035      	beq.n	8005726 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	6a38      	ldr	r0, [r7, #32]
 80056ce:	f002 fe71 	bl	80083b4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056de:	441a      	add	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	699a      	ldr	r2, [r3, #24]
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	091b      	lsrs	r3, r3, #4
 80056ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056f0:	441a      	add	r2, r3
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	619a      	str	r2, [r3, #24]
 80056f6:	e016      	b.n	8005726 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	0c5b      	lsrs	r3, r3, #17
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	2b06      	cmp	r3, #6
 8005702:	d110      	bne.n	8005726 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800570a:	2208      	movs	r2, #8
 800570c:	4619      	mov	r1, r3
 800570e:	6a38      	ldr	r0, [r7, #32]
 8005710:	f002 fe50 	bl	80083b4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	091b      	lsrs	r3, r3, #4
 800571c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005720:	441a      	add	r2, r3
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0210 	orr.w	r2, r2, #16
 8005734:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f002 ff9f 	bl	800867e <USB_ReadInterrupts>
 8005740:	4603      	mov	r3, r0
 8005742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005746:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800574a:	d16e      	bne.n	800582a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f002 ffa5 	bl	80086a4 <USB_ReadDevAllOutEpInterrupt>
 800575a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800575c:	e062      	b.n	8005824 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d057      	beq.n	8005818 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f002 ffca 	bl	800870c <USB_ReadDevOutEPInterrupt>
 8005778:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00c      	beq.n	800579e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	461a      	mov	r2, r3
 8005792:	2301      	movs	r3, #1
 8005794:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fdb1 	bl	8006300 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	461a      	mov	r2, r3
 80057b6:	2308      	movs	r3, #8
 80057b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80057ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 feab 	bl	8006518 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d008      	beq.n	80057de <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	2310      	movs	r3, #16
 80057dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	461a      	mov	r2, r3
 80057f6:	2320      	movs	r3, #32
 80057f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005810:	461a      	mov	r2, r3
 8005812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005816:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	3301      	adds	r3, #1
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	085b      	lsrs	r3, r3, #1
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	2b00      	cmp	r3, #0
 8005828:	d199      	bne.n	800575e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f002 ff25 	bl	800867e <USB_ReadInterrupts>
 8005834:	4603      	mov	r3, r0
 8005836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800583a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800583e:	f040 80c0 	bne.w	80059c2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f002 ff46 	bl	80086d8 <USB_ReadDevAllInEpInterrupt>
 800584c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005852:	e0b2      	b.n	80059ba <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80a7 	beq.w	80059ae <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	4611      	mov	r1, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f002 ff6c 	bl	8008748 <USB_ReadDevInEPInterrupt>
 8005870:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d057      	beq.n	800592c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	2201      	movs	r2, #1
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	43db      	mvns	r3, r3
 8005896:	69f9      	ldr	r1, [r7, #28]
 8005898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800589c:	4013      	ands	r3, r2
 800589e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ac:	461a      	mov	r2, r3
 80058ae:	2301      	movs	r3, #1
 80058b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d132      	bne.n	8005920 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058be:	4613      	mov	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	3348      	adds	r3, #72	; 0x48
 80058ca:	6819      	ldr	r1, [r3, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d0:	4613      	mov	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4403      	add	r3, r0
 80058da:	3344      	adds	r3, #68	; 0x44
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4419      	add	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e4:	4613      	mov	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4403      	add	r3, r0
 80058ee:	3348      	adds	r3, #72	; 0x48
 80058f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d113      	bne.n	8005920 <HAL_PCD_IRQHandler+0x31c>
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fc:	4613      	mov	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	3350      	adds	r3, #80	; 0x50
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d108      	bne.n	8005920 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005918:	461a      	mov	r2, r3
 800591a:	2101      	movs	r1, #1
 800591c:	f002 ff74 	bl	8008808 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	b2db      	uxtb	r3, r3
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f005 f9cd 	bl	800acc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	461a      	mov	r2, r3
 8005944:	2308      	movs	r3, #8
 8005946:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	d008      	beq.n	8005964 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	461a      	mov	r2, r3
 8005960:	2310      	movs	r3, #16
 8005962:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d008      	beq.n	8005980 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	461a      	mov	r2, r3
 800597c:	2340      	movs	r3, #64	; 0x40
 800597e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	461a      	mov	r2, r3
 8005998:	2302      	movs	r3, #2
 800599a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80059a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fc1b 	bl	80061e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	3301      	adds	r3, #1
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f47f af49 	bne.w	8005854 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f002 fe59 	bl	800867e <USB_ReadInterrupts>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d6:	d122      	bne.n	8005a1e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d108      	bne.n	8005a08 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80059fe:	2100      	movs	r1, #0
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fe27 	bl	8006654 <HAL_PCDEx_LPM_Callback>
 8005a06:	e002      	b.n	8005a0e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f005 f9d3 	bl	800adb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695a      	ldr	r2, [r3, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f002 fe2b 	bl	800867e <USB_ReadInterrupts>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a32:	d112      	bne.n	8005a5a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d102      	bne.n	8005a4a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f005 f98f 	bl	800ad68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695a      	ldr	r2, [r3, #20]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005a58:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f002 fe0d 	bl	800867e <USB_ReadInterrupts>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6e:	f040 80c7 	bne.w	8005c00 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2110      	movs	r1, #16
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f001 fedb 	bl	8007848 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a92:	2300      	movs	r3, #0
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a96:	e056      	b.n	8005b46 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005aaa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005aca:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005aea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	461a      	mov	r2, r3
 8005afa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005afe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b30:	0151      	lsls	r1, r2, #5
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	440a      	add	r2, r1
 8005b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b3e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	3301      	adds	r3, #1
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d3a3      	bcc.n	8005a98 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b5e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005b62:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d016      	beq.n	8005b9a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b7c:	f043 030b 	orr.w	r3, r3, #11
 8005b80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b92:	f043 030b 	orr.w	r3, r3, #11
 8005b96:	6453      	str	r3, [r2, #68]	; 0x44
 8005b98:	e015      	b.n	8005bc6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005bb0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc0:	f043 030b 	orr.w	r3, r3, #11
 8005bc4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005bd8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005bea:	461a      	mov	r2, r3
 8005bec:	f002 fe0c 	bl	8008808 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f002 fd3a 	bl	800867e <USB_ReadInterrupts>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c14:	d124      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f002 fdd0 	bl	80087c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f001 fe70 	bl	800790a <USB_GetDevSpeed>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681c      	ldr	r4, [r3, #0]
 8005c36:	f001 f965 	bl	8006f04 <HAL_RCC_GetHCLKFreq>
 8005c3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	4620      	mov	r0, r4
 8005c46:	f001 fbad 	bl	80073a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f005 f863 	bl	800ad16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f002 fd0a 	bl	800867e <USB_ReadInterrupts>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d10a      	bne.n	8005c8a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f005 f840 	bl	800acfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f002 0208 	and.w	r2, r2, #8
 8005c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f002 fcf5 	bl	800867e <USB_ReadInterrupts>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d10f      	bne.n	8005cc0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f005 f8a2 	bl	800adf4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f002 fcda 	bl	800867e <USB_ReadInterrupts>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f005 f875 	bl	800add0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f002 fcbf 	bl	800867e <USB_ReadInterrupts>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0a:	d10a      	bne.n	8005d22 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f005 f883 	bl	800ae18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f002 fca9 	bl	800867e <USB_ReadInterrupts>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d115      	bne.n	8005d62 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f005 f873 	bl	800ae34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6859      	ldr	r1, [r3, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
 8005d5e:	e000      	b.n	8005d62 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005d60:	bf00      	nop
    }
  }
}
 8005d62:	3734      	adds	r7, #52	; 0x34
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd90      	pop	{r4, r7, pc}

08005d68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_PCD_SetAddress+0x1a>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e013      	b.n	8005daa <HAL_PCD_SetAddress+0x42>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	78fa      	ldrb	r2, [r7, #3]
 8005d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	78fa      	ldrb	r2, [r7, #3]
 8005d98:	4611      	mov	r1, r2
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f002 fc07 	bl	80085ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	4608      	mov	r0, r1
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	70fb      	strb	r3, [r7, #3]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	803b      	strh	r3, [r7, #0]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da0f      	bge.n	8005df8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	f003 020f 	and.w	r2, r3, #15
 8005dde:	4613      	mov	r3, r2
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	3338      	adds	r3, #56	; 0x38
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4413      	add	r3, r2
 8005dec:	3304      	adds	r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	705a      	strb	r2, [r3, #1]
 8005df6:	e00f      	b.n	8005e18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	f003 020f 	and.w	r2, r3, #15
 8005dfe:	4613      	mov	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	1a9b      	subs	r3, r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3304      	adds	r3, #4
 8005e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e24:	883a      	ldrh	r2, [r7, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	78ba      	ldrb	r2, [r7, #2]
 8005e2e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e42:	78bb      	ldrb	r3, [r7, #2]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d102      	bne.n	8005e4e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_PCD_EP_Open+0xaa>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e00e      	b.n	8005e7a <HAL_PCD_EP_Open+0xc8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68f9      	ldr	r1, [r7, #12]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 fd72 	bl	8007954 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005e78:	7afb      	ldrb	r3, [r7, #11]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	da0f      	bge.n	8005eb6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	f003 020f 	and.w	r2, r3, #15
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	3338      	adds	r3, #56	; 0x38
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3304      	adds	r3, #4
 8005eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	705a      	strb	r2, [r3, #1]
 8005eb4:	e00f      	b.n	8005ed6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	f003 020f 	and.w	r2, r3, #15
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	4413      	add	r3, r2
 8005ecc:	3304      	adds	r3, #4
 8005ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <HAL_PCD_EP_Close+0x6e>
 8005eec:	2302      	movs	r3, #2
 8005eee:	e00e      	b.n	8005f0e <HAL_PCD_EP_Close+0x8c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68f9      	ldr	r1, [r7, #12]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 fdb0 	bl	8007a64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b086      	sub	sp, #24
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	460b      	mov	r3, r1
 8005f24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f26:	7afb      	ldrb	r3, [r7, #11]
 8005f28:	f003 020f 	and.w	r2, r3, #15
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2200      	movs	r2, #0
 8005f56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f58:	7afb      	ldrb	r3, [r7, #11]
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d102      	bne.n	8005f72 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f72:	7afb      	ldrb	r3, [r7, #11]
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	461a      	mov	r2, r3
 8005f88:	6979      	ldr	r1, [r7, #20]
 8005f8a:	f002 f88b 	bl	80080a4 <USB_EP0StartXfer>
 8005f8e:	e008      	b.n	8005fa2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6979      	ldr	r1, [r7, #20]
 8005f9e:	f001 fe3d 	bl	8007c1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	f003 020f 	and.w	r2, r3, #15
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005fce:	681b      	ldr	r3, [r3, #0]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	607a      	str	r2, [r7, #4]
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fec:	7afb      	ldrb	r3, [r7, #11]
 8005fee:	f003 020f 	and.w	r2, r3, #15
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	3338      	adds	r3, #56	; 0x38
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	3304      	adds	r3, #4
 8006002:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2200      	movs	r2, #0
 8006014:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2201      	movs	r2, #1
 800601a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800601c:	7afb      	ldrb	r3, [r7, #11]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	b2da      	uxtb	r2, r3
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d102      	bne.n	8006036 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006036:	7afb      	ldrb	r3, [r7, #11]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	2b00      	cmp	r3, #0
 800603e:	d109      	bne.n	8006054 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	461a      	mov	r2, r3
 800604c:	6979      	ldr	r1, [r7, #20]
 800604e:	f002 f829 	bl	80080a4 <USB_EP0StartXfer>
 8006052:	e008      	b.n	8006066 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6818      	ldr	r0, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	6979      	ldr	r1, [r7, #20]
 8006062:	f001 fddb 	bl	8007c1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	f003 020f 	and.w	r2, r3, #15
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	429a      	cmp	r2, r3
 8006088:	d901      	bls.n	800608e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e050      	b.n	8006130 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800608e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006092:	2b00      	cmp	r3, #0
 8006094:	da0f      	bge.n	80060b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	f003 020f 	and.w	r2, r3, #15
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	3338      	adds	r3, #56	; 0x38
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	3304      	adds	r3, #4
 80060ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	705a      	strb	r2, [r3, #1]
 80060b4:	e00d      	b.n	80060d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	4613      	mov	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	4413      	add	r3, r2
 80060c8:	3304      	adds	r3, #4
 80060ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_PCD_EP_SetStall+0x82>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e01e      	b.n	8006130 <HAL_PCD_EP_SetStall+0xc0>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68f9      	ldr	r1, [r7, #12]
 8006100:	4618      	mov	r0, r3
 8006102:	f002 f980 	bl	8008406 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	b2d9      	uxtb	r1, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006120:	461a      	mov	r2, r3
 8006122:	f002 fb71 	bl	8008808 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	f003 020f 	and.w	r2, r3, #15
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	429a      	cmp	r2, r3
 8006150:	d901      	bls.n	8006156 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e042      	b.n	80061dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800615a:	2b00      	cmp	r3, #0
 800615c:	da0f      	bge.n	800617e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	f003 020f 	and.w	r2, r3, #15
 8006164:	4613      	mov	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	1a9b      	subs	r3, r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	3338      	adds	r3, #56	; 0x38
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	4413      	add	r3, r2
 8006172:	3304      	adds	r3, #4
 8006174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	705a      	strb	r2, [r3, #1]
 800617c:	e00f      	b.n	800619e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	f003 020f 	and.w	r2, r3, #15
 8006184:	4613      	mov	r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	4413      	add	r3, r2
 8006194:	3304      	adds	r3, #4
 8006196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_PCD_EP_ClrStall+0x86>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e00e      	b.n	80061dc <HAL_PCD_EP_ClrStall+0xa4>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68f9      	ldr	r1, [r7, #12]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f002 f988 	bl	80084e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	; 0x28
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	4613      	mov	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	3338      	adds	r3, #56	; 0x38
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	4413      	add	r3, r2
 8006208:	3304      	adds	r3, #4
 800620a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	699a      	ldr	r2, [r3, #24]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	429a      	cmp	r2, r3
 8006216:	d901      	bls.n	800621c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e06c      	b.n	80062f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	695a      	ldr	r2, [r3, #20]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	429a      	cmp	r2, r3
 8006230:	d902      	bls.n	8006238 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3303      	adds	r3, #3
 800623c:	089b      	lsrs	r3, r3, #2
 800623e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006240:	e02b      	b.n	800629a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	695a      	ldr	r2, [r3, #20]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	429a      	cmp	r2, r3
 8006256:	d902      	bls.n	800625e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	3303      	adds	r3, #3
 8006262:	089b      	lsrs	r3, r3, #2
 8006264:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68d9      	ldr	r1, [r3, #12]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	b2da      	uxtb	r2, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006276:	b2db      	uxtb	r3, r3
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	4603      	mov	r3, r0
 800627c:	6978      	ldr	r0, [r7, #20]
 800627e:	f002 f864 	bl	800834a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	441a      	add	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	441a      	add	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d809      	bhi.n	80062c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d203      	bcs.n	80062c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1be      	bne.n	8006242 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d811      	bhi.n	80062f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	2201      	movs	r2, #1
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	43db      	mvns	r3, r3
 80062ea:	6939      	ldr	r1, [r7, #16]
 80062ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062f0:	4013      	ands	r3, r2
 80062f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3720      	adds	r7, #32
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	333c      	adds	r3, #60	; 0x3c
 8006318:	3304      	adds	r3, #4
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b01      	cmp	r3, #1
 8006334:	f040 80a0 	bne.w	8006478 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d015      	beq.n	800636e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a72      	ldr	r2, [pc, #456]	; (8006510 <PCD_EP_OutXfrComplete_int+0x210>)
 8006346:	4293      	cmp	r3, r2
 8006348:	f240 80dd 	bls.w	8006506 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 80d7 	beq.w	8006506 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006364:	461a      	mov	r2, r3
 8006366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636a:	6093      	str	r3, [r2, #8]
 800636c:	e0cb      	b.n	8006506 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006384:	461a      	mov	r2, r3
 8006386:	2320      	movs	r3, #32
 8006388:	6093      	str	r3, [r2, #8]
 800638a:	e0bc      	b.n	8006506 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 80b7 	bne.w	8006506 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4a5d      	ldr	r2, [pc, #372]	; (8006510 <PCD_EP_OutXfrComplete_int+0x210>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d90f      	bls.n	80063c0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b6:	461a      	mov	r2, r3
 80063b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063bc:	6093      	str	r3, [r2, #8]
 80063be:	e0a2      	b.n	8006506 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	1a9b      	subs	r3, r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80063d2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	0159      	lsls	r1, r3, #5
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	440b      	add	r3, r1
 80063dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80063e6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	4613      	mov	r3, r2
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4403      	add	r3, r0
 80063f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80063fa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	4613      	mov	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800640e:	6819      	ldr	r1, [r3, #0]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	4613      	mov	r3, r2
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4403      	add	r3, r0
 800641e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4419      	add	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	4613      	mov	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	1a9b      	subs	r3, r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4403      	add	r3, r0
 8006434:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006438:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d114      	bne.n	800646a <PCD_EP_OutXfrComplete_int+0x16a>
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	4613      	mov	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	1a9b      	subs	r3, r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d108      	bne.n	800646a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006462:	461a      	mov	r2, r3
 8006464:	2101      	movs	r1, #1
 8006466:	f002 f9cf 	bl	8008808 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	b2db      	uxtb	r3, r3
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f004 fc0d 	bl	800ac90 <HAL_PCD_DataOutStageCallback>
 8006476:	e046      	b.n	8006506 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4a26      	ldr	r2, [pc, #152]	; (8006514 <PCD_EP_OutXfrComplete_int+0x214>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d124      	bne.n	80064ca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006496:	461a      	mov	r2, r3
 8006498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649c:	6093      	str	r3, [r2, #8]
 800649e:	e032      	b.n	8006506 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d008      	beq.n	80064bc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	461a      	mov	r2, r3
 80064b8:	2320      	movs	r3, #32
 80064ba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f004 fbe4 	bl	800ac90 <HAL_PCD_DataOutStageCallback>
 80064c8:	e01d      	b.n	8006506 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d114      	bne.n	80064fa <PCD_EP_OutXfrComplete_int+0x1fa>
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	1a9b      	subs	r3, r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d108      	bne.n	80064fa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80064f2:	461a      	mov	r2, r3
 80064f4:	2100      	movs	r1, #0
 80064f6:	f002 f987 	bl	8008808 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f004 fbc5 	bl	800ac90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	4f54300a 	.word	0x4f54300a
 8006514:	4f54310a 	.word	0x4f54310a

08006518 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	333c      	adds	r3, #60	; 0x3c
 8006530:	3304      	adds	r3, #4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d90e      	bls.n	800656c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006554:	2b00      	cmp	r3, #0
 8006556:	d009      	beq.n	800656c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	461a      	mov	r2, r3
 8006566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f004 fb7d 	bl	800ac6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a0a      	ldr	r2, [pc, #40]	; (80065a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d90c      	bls.n	8006594 <PCD_EP_OutSetupPacket_int+0x7c>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d108      	bne.n	8006594 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800658c:	461a      	mov	r2, r3
 800658e:	2101      	movs	r1, #1
 8006590:	f002 f93a 	bl	8008808 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	4f54300a 	.word	0x4f54300a

080065a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
 80065b0:	4613      	mov	r3, r2
 80065b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d107      	bne.n	80065d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065c2:	883b      	ldrh	r3, [r7, #0]
 80065c4:	0419      	lsls	r1, r3, #16
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	629a      	str	r2, [r3, #40]	; 0x28
 80065d0:	e028      	b.n	8006624 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	4413      	add	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
 80065e4:	e00d      	b.n	8006602 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	3340      	adds	r3, #64	; 0x40
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	0c1b      	lsrs	r3, r3, #16
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4413      	add	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	3301      	adds	r3, #1
 8006600:	73fb      	strb	r3, [r7, #15]
 8006602:	7bfa      	ldrb	r2, [r7, #15]
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	3b01      	subs	r3, #1
 8006608:	429a      	cmp	r2, r3
 800660a:	d3ec      	bcc.n	80065e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800660c:	883b      	ldrh	r3, [r7, #0]
 800660e:	0418      	lsls	r0, r3, #16
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	3b01      	subs	r3, #1
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	4302      	orrs	r2, r0
 800661c:	3340      	adds	r3, #64	; 0x40
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	460b      	mov	r3, r1
 800663c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	887a      	ldrh	r2, [r7, #2]
 8006644:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e264      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d075      	beq.n	8006776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800668a:	4ba3      	ldr	r3, [pc, #652]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 030c 	and.w	r3, r3, #12
 8006692:	2b04      	cmp	r3, #4
 8006694:	d00c      	beq.n	80066b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006696:	4ba0      	ldr	r3, [pc, #640]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d112      	bne.n	80066c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066a2:	4b9d      	ldr	r3, [pc, #628]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ae:	d10b      	bne.n	80066c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b0:	4b99      	ldr	r3, [pc, #612]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d05b      	beq.n	8006774 <HAL_RCC_OscConfig+0x108>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d157      	bne.n	8006774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e23f      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d0:	d106      	bne.n	80066e0 <HAL_RCC_OscConfig+0x74>
 80066d2:	4b91      	ldr	r3, [pc, #580]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a90      	ldr	r2, [pc, #576]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e01d      	b.n	800671c <HAL_RCC_OscConfig+0xb0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066e8:	d10c      	bne.n	8006704 <HAL_RCC_OscConfig+0x98>
 80066ea:	4b8b      	ldr	r3, [pc, #556]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a8a      	ldr	r2, [pc, #552]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4b88      	ldr	r3, [pc, #544]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a87      	ldr	r2, [pc, #540]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e00b      	b.n	800671c <HAL_RCC_OscConfig+0xb0>
 8006704:	4b84      	ldr	r3, [pc, #528]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a83      	ldr	r2, [pc, #524]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 800670a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	4b81      	ldr	r3, [pc, #516]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a80      	ldr	r2, [pc, #512]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800671a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d013      	beq.n	800674c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006724:	f7fe f868 	bl	80047f8 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800672c:	f7fe f864 	bl	80047f8 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b64      	cmp	r3, #100	; 0x64
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e204      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673e:	4b76      	ldr	r3, [pc, #472]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0xc0>
 800674a:	e014      	b.n	8006776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674c:	f7fe f854 	bl	80047f8 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006754:	f7fe f850 	bl	80047f8 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	; 0x64
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e1f0      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006766:	4b6c      	ldr	r3, [pc, #432]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0xe8>
 8006772:	e000      	b.n	8006776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d063      	beq.n	800684a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006782:	4b65      	ldr	r3, [pc, #404]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 030c 	and.w	r3, r3, #12
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678e:	4b62      	ldr	r3, [pc, #392]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006796:	2b08      	cmp	r3, #8
 8006798:	d11c      	bne.n	80067d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800679a:	4b5f      	ldr	r3, [pc, #380]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d116      	bne.n	80067d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a6:	4b5c      	ldr	r3, [pc, #368]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <HAL_RCC_OscConfig+0x152>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d001      	beq.n	80067be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e1c4      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067be:	4b56      	ldr	r3, [pc, #344]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4952      	ldr	r1, [pc, #328]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067d2:	e03a      	b.n	800684a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d020      	beq.n	800681e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067dc:	4b4f      	ldr	r3, [pc, #316]	; (800691c <HAL_RCC_OscConfig+0x2b0>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e2:	f7fe f809 	bl	80047f8 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067ea:	f7fe f805 	bl	80047f8 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e1a5      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fc:	4b46      	ldr	r3, [pc, #280]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006808:	4b43      	ldr	r3, [pc, #268]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	4940      	ldr	r1, [pc, #256]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006818:	4313      	orrs	r3, r2
 800681a:	600b      	str	r3, [r1, #0]
 800681c:	e015      	b.n	800684a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800681e:	4b3f      	ldr	r3, [pc, #252]	; (800691c <HAL_RCC_OscConfig+0x2b0>)
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fd ffe8 	bl	80047f8 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800682c:	f7fd ffe4 	bl	80047f8 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e184      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683e:	4b36      	ldr	r3, [pc, #216]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d030      	beq.n	80068b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800685e:	4b30      	ldr	r3, [pc, #192]	; (8006920 <HAL_RCC_OscConfig+0x2b4>)
 8006860:	2201      	movs	r2, #1
 8006862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006864:	f7fd ffc8 	bl	80047f8 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800686c:	f7fd ffc4 	bl	80047f8 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e164      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687e:	4b26      	ldr	r3, [pc, #152]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x200>
 800688a:	e015      	b.n	80068b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800688c:	4b24      	ldr	r3, [pc, #144]	; (8006920 <HAL_RCC_OscConfig+0x2b4>)
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006892:	f7fd ffb1 	bl	80047f8 <HAL_GetTick>
 8006896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006898:	e008      	b.n	80068ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800689a:	f7fd ffad 	bl	80047f8 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d901      	bls.n	80068ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e14d      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068ac:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80068ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1f0      	bne.n	800689a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80a0 	beq.w	8006a06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068c6:	2300      	movs	r3, #0
 80068c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ca:	4b13      	ldr	r3, [pc, #76]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10f      	bne.n	80068f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068d6:	2300      	movs	r3, #0
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	4b0f      	ldr	r3, [pc, #60]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	4a0e      	ldr	r2, [pc, #56]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80068e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e4:	6413      	str	r3, [r2, #64]	; 0x40
 80068e6:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ee:	60bb      	str	r3, [r7, #8]
 80068f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068f2:	2301      	movs	r3, #1
 80068f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <HAL_RCC_OscConfig+0x2b8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d121      	bne.n	8006946 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006902:	4b08      	ldr	r3, [pc, #32]	; (8006924 <HAL_RCC_OscConfig+0x2b8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a07      	ldr	r2, [pc, #28]	; (8006924 <HAL_RCC_OscConfig+0x2b8>)
 8006908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800690e:	f7fd ff73 	bl	80047f8 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006914:	e011      	b.n	800693a <HAL_RCC_OscConfig+0x2ce>
 8006916:	bf00      	nop
 8006918:	40023800 	.word	0x40023800
 800691c:	42470000 	.word	0x42470000
 8006920:	42470e80 	.word	0x42470e80
 8006924:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006928:	f7fd ff66 	bl	80047f8 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e106      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800693a:	4b85      	ldr	r3, [pc, #532]	; (8006b50 <HAL_RCC_OscConfig+0x4e4>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d106      	bne.n	800695c <HAL_RCC_OscConfig+0x2f0>
 800694e:	4b81      	ldr	r3, [pc, #516]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	4a80      	ldr	r2, [pc, #512]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	6713      	str	r3, [r2, #112]	; 0x70
 800695a:	e01c      	b.n	8006996 <HAL_RCC_OscConfig+0x32a>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b05      	cmp	r3, #5
 8006962:	d10c      	bne.n	800697e <HAL_RCC_OscConfig+0x312>
 8006964:	4b7b      	ldr	r3, [pc, #492]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006968:	4a7a      	ldr	r2, [pc, #488]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 800696a:	f043 0304 	orr.w	r3, r3, #4
 800696e:	6713      	str	r3, [r2, #112]	; 0x70
 8006970:	4b78      	ldr	r3, [pc, #480]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	4a77      	ldr	r2, [pc, #476]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	6713      	str	r3, [r2, #112]	; 0x70
 800697c:	e00b      	b.n	8006996 <HAL_RCC_OscConfig+0x32a>
 800697e:	4b75      	ldr	r3, [pc, #468]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006982:	4a74      	ldr	r2, [pc, #464]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006984:	f023 0301 	bic.w	r3, r3, #1
 8006988:	6713      	str	r3, [r2, #112]	; 0x70
 800698a:	4b72      	ldr	r3, [pc, #456]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a71      	ldr	r2, [pc, #452]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006990:	f023 0304 	bic.w	r3, r3, #4
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d015      	beq.n	80069ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699e:	f7fd ff2b 	bl	80047f8 <HAL_GetTick>
 80069a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a4:	e00a      	b.n	80069bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069a6:	f7fd ff27 	bl	80047f8 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e0c5      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069bc:	4b65      	ldr	r3, [pc, #404]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 80069be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0ee      	beq.n	80069a6 <HAL_RCC_OscConfig+0x33a>
 80069c8:	e014      	b.n	80069f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069ca:	f7fd ff15 	bl	80047f8 <HAL_GetTick>
 80069ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069d0:	e00a      	b.n	80069e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069d2:	f7fd ff11 	bl	80047f8 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e0af      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e8:	4b5a      	ldr	r3, [pc, #360]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1ee      	bne.n	80069d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d105      	bne.n	8006a06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069fa:	4b56      	ldr	r3, [pc, #344]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	4a55      	ldr	r2, [pc, #340]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 809b 	beq.w	8006b46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a10:	4b50      	ldr	r3, [pc, #320]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f003 030c 	and.w	r3, r3, #12
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d05c      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d141      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a24:	4b4c      	ldr	r3, [pc, #304]	; (8006b58 <HAL_RCC_OscConfig+0x4ec>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2a:	f7fd fee5 	bl	80047f8 <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a32:	f7fd fee1 	bl	80047f8 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e081      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a44:	4b43      	ldr	r3, [pc, #268]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f0      	bne.n	8006a32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	019b      	lsls	r3, r3, #6
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	061b      	lsls	r3, r3, #24
 8006a74:	4937      	ldr	r1, [pc, #220]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a7a:	4b37      	ldr	r3, [pc, #220]	; (8006b58 <HAL_RCC_OscConfig+0x4ec>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a80:	f7fd feba 	bl	80047f8 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fd feb6 	bl	80047f8 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e056      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9a:	4b2e      	ldr	r3, [pc, #184]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0x41c>
 8006aa6:	e04e      	b.n	8006b46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa8:	4b2b      	ldr	r3, [pc, #172]	; (8006b58 <HAL_RCC_OscConfig+0x4ec>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aae:	f7fd fea3 	bl	80047f8 <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ab6:	f7fd fe9f 	bl	80047f8 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e03f      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac8:	4b22      	ldr	r3, [pc, #136]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f0      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x44a>
 8006ad4:	e037      	b.n	8006b46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e032      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ae2:	4b1c      	ldr	r3, [pc, #112]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d028      	beq.n	8006b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d121      	bne.n	8006b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d11a      	bne.n	8006b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b12:	4013      	ands	r3, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d111      	bne.n	8006b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d107      	bne.n	8006b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d001      	beq.n	8006b46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	40007000 	.word	0x40007000
 8006b54:	40023800 	.word	0x40023800
 8006b58:	42470060 	.word	0x42470060

08006b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0cc      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b70:	4b68      	ldr	r3, [pc, #416]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d90c      	bls.n	8006b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b7e:	4b65      	ldr	r3, [pc, #404]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b86:	4b63      	ldr	r3, [pc, #396]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d001      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0b8      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d020      	beq.n	8006be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bb0:	4b59      	ldr	r3, [pc, #356]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	4a58      	ldr	r2, [pc, #352]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bc8:	4b53      	ldr	r3, [pc, #332]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	4a52      	ldr	r2, [pc, #328]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd4:	4b50      	ldr	r3, [pc, #320]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	494d      	ldr	r1, [pc, #308]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d044      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d107      	bne.n	8006c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfa:	4b47      	ldr	r3, [pc, #284]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d119      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e07f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d003      	beq.n	8006c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d107      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1a:	4b3f      	ldr	r3, [pc, #252]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e06f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2a:	4b3b      	ldr	r3, [pc, #236]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e067      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c3a:	4b37      	ldr	r3, [pc, #220]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f023 0203 	bic.w	r2, r3, #3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4934      	ldr	r1, [pc, #208]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c4c:	f7fd fdd4 	bl	80047f8 <HAL_GetTick>
 8006c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c52:	e00a      	b.n	8006c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c54:	f7fd fdd0 	bl	80047f8 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e04f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6a:	4b2b      	ldr	r3, [pc, #172]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 020c 	and.w	r2, r3, #12
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d1eb      	bne.n	8006c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c7c:	4b25      	ldr	r3, [pc, #148]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d20c      	bcs.n	8006ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8a:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c92:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d001      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e032      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d008      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	4916      	ldr	r1, [pc, #88]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cce:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	490e      	ldr	r1, [pc, #56]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ce2:	f000 f82d 	bl	8006d40 <HAL_RCC_GetSysClockFreq>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	091b      	lsrs	r3, r3, #4
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	490a      	ldr	r1, [pc, #40]	; (8006d1c <HAL_RCC_ClockConfig+0x1c0>)
 8006cf4:	5ccb      	ldrb	r3, [r1, r3]
 8006cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfa:	4a09      	ldr	r2, [pc, #36]	; (8006d20 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cfe:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <HAL_RCC_ClockConfig+0x1c8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fd fd34 	bl	8004770 <HAL_InitTick>

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40023c00 	.word	0x40023c00
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	0800b944 	.word	0x0800b944
 8006d20:	20000000 	.word	0x20000000
 8006d24:	20000004 	.word	0x20000004

08006d28 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006d2c:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <HAL_RCC_EnableCSS+0x14>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	601a      	str	r2, [r3, #0]
}
 8006d32:	bf00      	nop
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	4247004c 	.word	0x4247004c

08006d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	607b      	str	r3, [r7, #4]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	2300      	movs	r3, #0
 8006d52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d58:	4b67      	ldr	r3, [pc, #412]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 030c 	and.w	r3, r3, #12
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d00d      	beq.n	8006d80 <HAL_RCC_GetSysClockFreq+0x40>
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	f200 80bd 	bhi.w	8006ee4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <HAL_RCC_GetSysClockFreq+0x34>
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d003      	beq.n	8006d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d72:	e0b7      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d74:	4b61      	ldr	r3, [pc, #388]	; (8006efc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006d76:	60bb      	str	r3, [r7, #8]
       break;
 8006d78:	e0b7      	b.n	8006eea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d7a:	4b61      	ldr	r3, [pc, #388]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006d7c:	60bb      	str	r3, [r7, #8]
      break;
 8006d7e:	e0b4      	b.n	8006eea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d80:	4b5d      	ldr	r3, [pc, #372]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d8a:	4b5b      	ldr	r3, [pc, #364]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d04d      	beq.n	8006e32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d96:	4b58      	ldr	r3, [pc, #352]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	099b      	lsrs	r3, r3, #6
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f04f 0300 	mov.w	r3, #0
 8006da2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006da6:	f04f 0100 	mov.w	r1, #0
 8006daa:	ea02 0800 	and.w	r8, r2, r0
 8006dae:	ea03 0901 	and.w	r9, r3, r1
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	f04f 0300 	mov.w	r3, #0
 8006dbe:	014b      	lsls	r3, r1, #5
 8006dc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006dc4:	0142      	lsls	r2, r0, #5
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	ebb0 0008 	subs.w	r0, r0, r8
 8006dce:	eb61 0109 	sbc.w	r1, r1, r9
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	018b      	lsls	r3, r1, #6
 8006ddc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006de0:	0182      	lsls	r2, r0, #6
 8006de2:	1a12      	subs	r2, r2, r0
 8006de4:	eb63 0301 	sbc.w	r3, r3, r1
 8006de8:	f04f 0000 	mov.w	r0, #0
 8006dec:	f04f 0100 	mov.w	r1, #0
 8006df0:	00d9      	lsls	r1, r3, #3
 8006df2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006df6:	00d0      	lsls	r0, r2, #3
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	eb12 0208 	adds.w	r2, r2, r8
 8006e00:	eb43 0309 	adc.w	r3, r3, r9
 8006e04:	f04f 0000 	mov.w	r0, #0
 8006e08:	f04f 0100 	mov.w	r1, #0
 8006e0c:	0259      	lsls	r1, r3, #9
 8006e0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006e12:	0250      	lsls	r0, r2, #9
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	f7f9 ffd4 	bl	8000dd0 <__aeabi_uldivmod>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	e04a      	b.n	8006ec8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e32:	4b31      	ldr	r3, [pc, #196]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e42:	f04f 0100 	mov.w	r1, #0
 8006e46:	ea02 0400 	and.w	r4, r2, r0
 8006e4a:	ea03 0501 	and.w	r5, r3, r1
 8006e4e:	4620      	mov	r0, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	014b      	lsls	r3, r1, #5
 8006e5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e60:	0142      	lsls	r2, r0, #5
 8006e62:	4610      	mov	r0, r2
 8006e64:	4619      	mov	r1, r3
 8006e66:	1b00      	subs	r0, r0, r4
 8006e68:	eb61 0105 	sbc.w	r1, r1, r5
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	018b      	lsls	r3, r1, #6
 8006e76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e7a:	0182      	lsls	r2, r0, #6
 8006e7c:	1a12      	subs	r2, r2, r0
 8006e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f04f 0100 	mov.w	r1, #0
 8006e8a:	00d9      	lsls	r1, r3, #3
 8006e8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e90:	00d0      	lsls	r0, r2, #3
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	1912      	adds	r2, r2, r4
 8006e98:	eb45 0303 	adc.w	r3, r5, r3
 8006e9c:	f04f 0000 	mov.w	r0, #0
 8006ea0:	f04f 0100 	mov.w	r1, #0
 8006ea4:	0299      	lsls	r1, r3, #10
 8006ea6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006eaa:	0290      	lsls	r0, r2, #10
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	f7f9 ff88 	bl	8000dd0 <__aeabi_uldivmod>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	0c1b      	lsrs	r3, r3, #16
 8006ece:	f003 0303 	and.w	r3, r3, #3
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee0:	60bb      	str	r3, [r7, #8]
      break;
 8006ee2:	e002      	b.n	8006eea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ee4:	4b05      	ldr	r3, [pc, #20]	; (8006efc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ee6:	60bb      	str	r3, [r7, #8]
      break;
 8006ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eea:	68bb      	ldr	r3, [r7, #8]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ef6:	bf00      	nop
 8006ef8:	40023800 	.word	0x40023800
 8006efc:	00f42400 	.word	0x00f42400
 8006f00:	007a1200 	.word	0x007a1200

08006f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f08:	4b03      	ldr	r3, [pc, #12]	; (8006f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000000 	.word	0x20000000

08006f1c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006f20:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <HAL_RCC_NMI_IRQHandler+0x20>)
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f28:	2b80      	cmp	r3, #128	; 0x80
 8006f2a:	d104      	bne.n	8006f36 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006f2c:	f000 f80a 	bl	8006f44 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006f30:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006f32:	2280      	movs	r2, #128	; 0x80
 8006f34:	701a      	strb	r2, [r3, #0]
  }
}
 8006f36:	bf00      	nop
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	4002380e 	.word	0x4002380e

08006f44 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d105      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d035      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f7c:	4b62      	ldr	r3, [pc, #392]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f82:	f7fd fc39 	bl	80047f8 <HAL_GetTick>
 8006f86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f88:	e008      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f8a:	f7fd fc35 	bl	80047f8 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e0b0      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f9c:	4b5b      	ldr	r3, [pc, #364]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1f0      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	019a      	lsls	r2, r3, #6
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	071b      	lsls	r3, r3, #28
 8006fb4:	4955      	ldr	r1, [pc, #340]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fbc:	4b52      	ldr	r3, [pc, #328]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fc2:	f7fd fc19 	bl	80047f8 <HAL_GetTick>
 8006fc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fca:	f7fd fc15 	bl	80047f8 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e090      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fdc:	4b4b      	ldr	r3, [pc, #300]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0f0      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8083 	beq.w	80070fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	4b44      	ldr	r3, [pc, #272]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	4a43      	ldr	r2, [pc, #268]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007004:	6413      	str	r3, [r2, #64]	; 0x40
 8007006:	4b41      	ldr	r3, [pc, #260]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007012:	4b3f      	ldr	r3, [pc, #252]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a3e      	ldr	r2, [pc, #248]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800701c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800701e:	f7fd fbeb 	bl	80047f8 <HAL_GetTick>
 8007022:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007024:	e008      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007026:	f7fd fbe7 	bl	80047f8 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d901      	bls.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e062      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007038:	4b35      	ldr	r3, [pc, #212]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0f0      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007044:	4b31      	ldr	r3, [pc, #196]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d02f      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	429a      	cmp	r2, r3
 8007060:	d028      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007062:	4b2a      	ldr	r3, [pc, #168]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800706a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800706c:	4b29      	ldr	r3, [pc, #164]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007072:	4b28      	ldr	r3, [pc, #160]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007078:	4a24      	ldr	r2, [pc, #144]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800707e:	4b23      	ldr	r3, [pc, #140]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b01      	cmp	r3, #1
 8007088:	d114      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800708a:	f7fd fbb5 	bl	80047f8 <HAL_GetTick>
 800708e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007090:	e00a      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007092:	f7fd fbb1 	bl	80047f8 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e02a      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a8:	4b18      	ldr	r3, [pc, #96]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0ee      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070c0:	d10d      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d6:	490d      	ldr	r1, [pc, #52]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	608b      	str	r3, [r1, #8]
 80070dc:	e005      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	4a0a      	ldr	r2, [pc, #40]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070e8:	6093      	str	r3, [r2, #8]
 80070ea:	4b08      	ldr	r3, [pc, #32]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f6:	4905      	ldr	r1, [pc, #20]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	42470068 	.word	0x42470068
 800710c:	40023800 	.word	0x40023800
 8007110:	40007000 	.word	0x40007000
 8007114:	42470e40 	.word	0x42470e40

08007118 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e083      	b.n	8007232 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7f5b      	ldrb	r3, [r3, #29]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7fd fa20 	bl	8004580 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	22ca      	movs	r2, #202	; 0xca
 800714c:	625a      	str	r2, [r3, #36]	; 0x24
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2253      	movs	r2, #83	; 0x53
 8007154:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f897 	bl	800728a <RTC_EnterInitMode>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d008      	beq.n	8007174 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	22ff      	movs	r2, #255	; 0xff
 8007168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2204      	movs	r2, #4
 800716e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e05e      	b.n	8007232 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	6812      	ldr	r2, [r2, #0]
 800717e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007186:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6899      	ldr	r1, [r3, #8]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	68d2      	ldr	r2, [r2, #12]
 80071ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6919      	ldr	r1, [r3, #16]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	041a      	lsls	r2, r3, #16
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10e      	bne.n	8007200 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f829 	bl	800723a <HAL_RTC_WaitForSynchro>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d008      	beq.n	8007200 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	22ff      	movs	r2, #255	; 0xff
 80071f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2204      	movs	r2, #4
 80071fa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e018      	b.n	8007232 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800720e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	22ff      	movs	r2, #255	; 0xff
 8007228:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007230:	2300      	movs	r3, #0
  }
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007254:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007256:	f7fd facf 	bl	80047f8 <HAL_GetTick>
 800725a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800725c:	e009      	b.n	8007272 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800725e:	f7fd facb 	bl	80047f8 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800726c:	d901      	bls.n	8007272 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e007      	b.n	8007282 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0320 	and.w	r3, r3, #32
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0ee      	beq.n	800725e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d119      	bne.n	80072d8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f04f 32ff 	mov.w	r2, #4294967295
 80072ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072ae:	f7fd faa3 	bl	80047f8 <HAL_GetTick>
 80072b2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80072b4:	e009      	b.n	80072ca <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80072b6:	f7fd fa9f 	bl	80047f8 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072c4:	d901      	bls.n	80072ca <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e007      	b.n	80072da <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0ee      	beq.n	80072b6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072e2:	b084      	sub	sp, #16
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	f107 001c 	add.w	r0, r7, #28
 80072f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d122      	bne.n	8007340 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800730e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007324:	2b01      	cmp	r3, #1
 8007326:	d105      	bne.n	8007334 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f001 fac5 	bl	80088c4 <USB_CoreReset>
 800733a:	4603      	mov	r3, r0
 800733c:	73fb      	strb	r3, [r7, #15]
 800733e:	e01a      	b.n	8007376 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 fab9 	bl	80088c4 <USB_CoreReset>
 8007352:	4603      	mov	r3, r0
 8007354:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	639a      	str	r2, [r3, #56]	; 0x38
 8007368:	e005      	b.n	8007376 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007378:	2b01      	cmp	r3, #1
 800737a:	d10b      	bne.n	8007394 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f043 0206 	orr.w	r2, r3, #6
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f043 0220 	orr.w	r2, r3, #32
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073a0:	b004      	add	sp, #16
 80073a2:	4770      	bx	lr

080073a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d165      	bne.n	8007484 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4a41      	ldr	r2, [pc, #260]	; (80074c0 <USB_SetTurnaroundTime+0x11c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d906      	bls.n	80073ce <USB_SetTurnaroundTime+0x2a>
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4a40      	ldr	r2, [pc, #256]	; (80074c4 <USB_SetTurnaroundTime+0x120>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d202      	bcs.n	80073ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80073c8:	230f      	movs	r3, #15
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	e062      	b.n	8007494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	4a3c      	ldr	r2, [pc, #240]	; (80074c4 <USB_SetTurnaroundTime+0x120>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d306      	bcc.n	80073e4 <USB_SetTurnaroundTime+0x40>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	4a3b      	ldr	r2, [pc, #236]	; (80074c8 <USB_SetTurnaroundTime+0x124>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d202      	bcs.n	80073e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80073de:	230e      	movs	r3, #14
 80073e0:	617b      	str	r3, [r7, #20]
 80073e2:	e057      	b.n	8007494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	4a38      	ldr	r2, [pc, #224]	; (80074c8 <USB_SetTurnaroundTime+0x124>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d306      	bcc.n	80073fa <USB_SetTurnaroundTime+0x56>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4a37      	ldr	r2, [pc, #220]	; (80074cc <USB_SetTurnaroundTime+0x128>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d202      	bcs.n	80073fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80073f4:	230d      	movs	r3, #13
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	e04c      	b.n	8007494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	4a33      	ldr	r2, [pc, #204]	; (80074cc <USB_SetTurnaroundTime+0x128>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d306      	bcc.n	8007410 <USB_SetTurnaroundTime+0x6c>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	4a32      	ldr	r2, [pc, #200]	; (80074d0 <USB_SetTurnaroundTime+0x12c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d802      	bhi.n	8007410 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800740a:	230c      	movs	r3, #12
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	e041      	b.n	8007494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	4a2f      	ldr	r2, [pc, #188]	; (80074d0 <USB_SetTurnaroundTime+0x12c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d906      	bls.n	8007426 <USB_SetTurnaroundTime+0x82>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4a2e      	ldr	r2, [pc, #184]	; (80074d4 <USB_SetTurnaroundTime+0x130>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d802      	bhi.n	8007426 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007420:	230b      	movs	r3, #11
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	e036      	b.n	8007494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4a2a      	ldr	r2, [pc, #168]	; (80074d4 <USB_SetTurnaroundTime+0x130>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d906      	bls.n	800743c <USB_SetTurnaroundTime+0x98>
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	4a29      	ldr	r2, [pc, #164]	; (80074d8 <USB_SetTurnaroundTime+0x134>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d802      	bhi.n	800743c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007436:	230a      	movs	r3, #10
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	e02b      	b.n	8007494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4a26      	ldr	r2, [pc, #152]	; (80074d8 <USB_SetTurnaroundTime+0x134>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d906      	bls.n	8007452 <USB_SetTurnaroundTime+0xae>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4a25      	ldr	r2, [pc, #148]	; (80074dc <USB_SetTurnaroundTime+0x138>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d202      	bcs.n	8007452 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800744c:	2309      	movs	r3, #9
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	e020      	b.n	8007494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	4a21      	ldr	r2, [pc, #132]	; (80074dc <USB_SetTurnaroundTime+0x138>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d306      	bcc.n	8007468 <USB_SetTurnaroundTime+0xc4>
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	4a20      	ldr	r2, [pc, #128]	; (80074e0 <USB_SetTurnaroundTime+0x13c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d802      	bhi.n	8007468 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007462:	2308      	movs	r3, #8
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	e015      	b.n	8007494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4a1d      	ldr	r2, [pc, #116]	; (80074e0 <USB_SetTurnaroundTime+0x13c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d906      	bls.n	800747e <USB_SetTurnaroundTime+0xda>
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	4a1c      	ldr	r2, [pc, #112]	; (80074e4 <USB_SetTurnaroundTime+0x140>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d202      	bcs.n	800747e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007478:	2307      	movs	r3, #7
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	e00a      	b.n	8007494 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800747e:	2306      	movs	r3, #6
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	e007      	b.n	8007494 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d102      	bne.n	8007490 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800748a:	2309      	movs	r3, #9
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	e001      	b.n	8007494 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007490:	2309      	movs	r3, #9
 8007492:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	029b      	lsls	r3, r3, #10
 80074a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80074ac:	431a      	orrs	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	371c      	adds	r7, #28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	00d8acbf 	.word	0x00d8acbf
 80074c4:	00e4e1c0 	.word	0x00e4e1c0
 80074c8:	00f42400 	.word	0x00f42400
 80074cc:	01067380 	.word	0x01067380
 80074d0:	011a499f 	.word	0x011a499f
 80074d4:	01312cff 	.word	0x01312cff
 80074d8:	014ca43f 	.word	0x014ca43f
 80074dc:	016e3600 	.word	0x016e3600
 80074e0:	01a6ab1f 	.word	0x01a6ab1f
 80074e4:	01e84800 	.word	0x01e84800

080074e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f043 0201 	orr.w	r2, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f023 0201 	bic.w	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d106      	bne.n	8007558 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60da      	str	r2, [r3, #12]
 8007556:	e00b      	b.n	8007570 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007558:	78fb      	ldrb	r3, [r7, #3]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	60da      	str	r2, [r3, #12]
 800756a:	e001      	b.n	8007570 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e003      	b.n	8007578 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007570:	2032      	movs	r0, #50	; 0x32
 8007572:	f7fd f94d 	bl	8004810 <HAL_Delay>

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007580:	b084      	sub	sp, #16
 8007582:	b580      	push	{r7, lr}
 8007584:	b086      	sub	sp, #24
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800758e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800759a:	2300      	movs	r3, #0
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	e009      	b.n	80075b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	3340      	adds	r3, #64	; 0x40
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	2200      	movs	r2, #0
 80075ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	3301      	adds	r3, #1
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2b0e      	cmp	r3, #14
 80075b8:	d9f2      	bls.n	80075a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80075ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d11c      	bne.n	80075fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075ce:	f043 0302 	orr.w	r3, r3, #2
 80075d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	639a      	str	r2, [r3, #56]	; 0x38
 80075f8:	e00b      	b.n	8007612 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007618:	461a      	mov	r2, r3
 800761a:	2300      	movs	r3, #0
 800761c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007624:	4619      	mov	r1, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762c:	461a      	mov	r2, r3
 800762e:	680b      	ldr	r3, [r1, #0]
 8007630:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	2b01      	cmp	r3, #1
 8007636:	d10c      	bne.n	8007652 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d104      	bne.n	8007648 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800763e:	2100      	movs	r1, #0
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f949 	bl	80078d8 <USB_SetDevSpeed>
 8007646:	e008      	b.n	800765a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007648:	2101      	movs	r1, #1
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f944 	bl	80078d8 <USB_SetDevSpeed>
 8007650:	e003      	b.n	800765a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007652:	2103      	movs	r1, #3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f93f 	bl	80078d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800765a:	2110      	movs	r1, #16
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f8f3 	bl	8007848 <USB_FlushTxFifo>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f911 	bl	8007894 <USB_FlushRxFifo>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007682:	461a      	mov	r2, r3
 8007684:	2300      	movs	r3, #0
 8007686:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768e:	461a      	mov	r2, r3
 8007690:	2300      	movs	r3, #0
 8007692:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769a:	461a      	mov	r2, r3
 800769c:	2300      	movs	r3, #0
 800769e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a0:	2300      	movs	r3, #0
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	e043      	b.n	800772e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076bc:	d118      	bne.n	80076f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10a      	bne.n	80076da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d0:	461a      	mov	r2, r3
 80076d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	e013      	b.n	8007702 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e6:	461a      	mov	r2, r3
 80076e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	e008      	b.n	8007702 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fc:	461a      	mov	r2, r3
 80076fe:	2300      	movs	r3, #0
 8007700:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770e:	461a      	mov	r2, r3
 8007710:	2300      	movs	r3, #0
 8007712:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007720:	461a      	mov	r2, r3
 8007722:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007726:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	3301      	adds	r3, #1
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	429a      	cmp	r2, r3
 8007734:	d3b7      	bcc.n	80076a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	e043      	b.n	80077c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800774e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007752:	d118      	bne.n	8007786 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007766:	461a      	mov	r2, r3
 8007768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	e013      	b.n	8007798 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777c:	461a      	mov	r2, r3
 800777e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	e008      	b.n	8007798 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007792:	461a      	mov	r2, r3
 8007794:	2300      	movs	r3, #0
 8007796:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a4:	461a      	mov	r2, r3
 80077a6:	2300      	movs	r3, #0
 80077a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b6:	461a      	mov	r2, r3
 80077b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	3301      	adds	r3, #1
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d3b7      	bcc.n	800773c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80077ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d105      	bne.n	8007800 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	f043 0210 	orr.w	r2, r3, #16
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	699a      	ldr	r2, [r3, #24]
 8007804:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <USB_DevInit+0x2c4>)
 8007806:	4313      	orrs	r3, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800780c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d005      	beq.n	800781e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	f043 0208 	orr.w	r2, r3, #8
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800781e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007820:	2b01      	cmp	r3, #1
 8007822:	d107      	bne.n	8007834 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800782c:	f043 0304 	orr.w	r3, r3, #4
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007840:	b004      	add	sp, #16
 8007842:	4770      	bx	lr
 8007844:	803c3800 	.word	0x803c3800

08007848 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	019b      	lsls	r3, r3, #6
 800785a:	f043 0220 	orr.w	r2, r3, #32
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3301      	adds	r3, #1
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4a09      	ldr	r2, [pc, #36]	; (8007890 <USB_FlushTxFifo+0x48>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d901      	bls.n	8007874 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e006      	b.n	8007882 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f003 0320 	and.w	r3, r3, #32
 800787c:	2b20      	cmp	r3, #32
 800787e:	d0f0      	beq.n	8007862 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	00030d40 	.word	0x00030d40

08007894 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2210      	movs	r2, #16
 80078a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3301      	adds	r3, #1
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4a09      	ldr	r2, [pc, #36]	; (80078d4 <USB_FlushRxFifo+0x40>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d901      	bls.n	80078b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e006      	b.n	80078c6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f003 0310 	and.w	r3, r3, #16
 80078c0:	2b10      	cmp	r3, #16
 80078c2:	d0f0      	beq.n	80078a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	00030d40 	.word	0x00030d40

080078d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	68f9      	ldr	r1, [r7, #12]
 80078f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078f8:	4313      	orrs	r3, r2
 80078fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800790a:	b480      	push	{r7}
 800790c:	b087      	sub	sp, #28
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 0306 	and.w	r3, r3, #6
 8007922:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d102      	bne.n	8007930 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800792a:	2300      	movs	r3, #0
 800792c:	75fb      	strb	r3, [r7, #23]
 800792e:	e00a      	b.n	8007946 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d002      	beq.n	800793c <USB_GetDevSpeed+0x32>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b06      	cmp	r3, #6
 800793a:	d102      	bne.n	8007942 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800793c:	2302      	movs	r3, #2
 800793e:	75fb      	strb	r3, [r7, #23]
 8007940:	e001      	b.n	8007946 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007942:	230f      	movs	r3, #15
 8007944:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007946:	7dfb      	ldrb	r3, [r7, #23]
}
 8007948:	4618      	mov	r0, r3
 800794a:	371c      	adds	r7, #28
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d13a      	bne.n	80079e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007976:	69da      	ldr	r2, [r3, #28]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	f003 030f 	and.w	r3, r3, #15
 8007980:	2101      	movs	r1, #1
 8007982:	fa01 f303 	lsl.w	r3, r1, r3
 8007986:	b29b      	uxth	r3, r3
 8007988:	68f9      	ldr	r1, [r7, #12]
 800798a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800798e:	4313      	orrs	r3, r2
 8007990:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d155      	bne.n	8007a54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	78db      	ldrb	r3, [r3, #3]
 80079c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	059b      	lsls	r3, r3, #22
 80079ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079cc:	4313      	orrs	r3, r2
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	0151      	lsls	r1, r2, #5
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	440a      	add	r2, r1
 80079d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	e036      	b.n	8007a54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ec:	69da      	ldr	r2, [r3, #28]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	f003 030f 	and.w	r3, r3, #15
 80079f6:	2101      	movs	r1, #1
 80079f8:	fa01 f303 	lsl.w	r3, r1, r3
 80079fc:	041b      	lsls	r3, r3, #16
 80079fe:	68f9      	ldr	r1, [r7, #12]
 8007a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a04:	4313      	orrs	r3, r2
 8007a06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d11a      	bne.n	8007a54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	78db      	ldrb	r3, [r3, #3]
 8007a38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
	...

08007a64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	785b      	ldrb	r3, [r3, #1]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d161      	bne.n	8007b44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a96:	d11f      	bne.n	8007ad8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	0151      	lsls	r1, r2, #5
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	440a      	add	r2, r1
 8007aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ab6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	0151      	lsls	r1, r2, #5
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	440a      	add	r2, r1
 8007ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ad6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 030f 	and.w	r3, r3, #15
 8007ae8:	2101      	movs	r1, #1
 8007aea:	fa01 f303 	lsl.w	r3, r1, r3
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	43db      	mvns	r3, r3
 8007af2:	68f9      	ldr	r1, [r7, #12]
 8007af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007af8:	4013      	ands	r3, r2
 8007afa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	f003 030f 	and.w	r3, r3, #15
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	43db      	mvns	r3, r3
 8007b16:	68f9      	ldr	r1, [r7, #12]
 8007b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	0159      	lsls	r1, r3, #5
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	440b      	add	r3, r1
 8007b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4b35      	ldr	r3, [pc, #212]	; (8007c14 <USB_DeactivateEndpoint+0x1b0>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	600b      	str	r3, [r1, #0]
 8007b42:	e060      	b.n	8007c06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b5a:	d11f      	bne.n	8007b9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	f003 030f 	and.w	r3, r3, #15
 8007bac:	2101      	movs	r1, #1
 8007bae:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb2:	041b      	lsls	r3, r3, #16
 8007bb4:	43db      	mvns	r3, r3
 8007bb6:	68f9      	ldr	r1, [r7, #12]
 8007bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd6:	041b      	lsls	r3, r3, #16
 8007bd8:	43db      	mvns	r3, r3
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007be0:	4013      	ands	r3, r2
 8007be2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	0159      	lsls	r1, r3, #5
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	440b      	add	r3, r1
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <USB_DeactivateEndpoint+0x1b4>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	ec337800 	.word	0xec337800
 8007c18:	eff37800 	.word	0xeff37800

08007c1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08a      	sub	sp, #40	; 0x28
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4613      	mov	r3, r2
 8007c28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	f040 815c 	bne.w	8007ef6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d132      	bne.n	8007cac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	69fa      	ldr	r2, [r7, #28]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	0151      	lsls	r1, r2, #5
 8007c9c:	69fa      	ldr	r2, [r7, #28]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca4:	0cdb      	lsrs	r3, r3, #19
 8007ca6:	04db      	lsls	r3, r3, #19
 8007ca8:	6113      	str	r3, [r2, #16]
 8007caa:	e074      	b.n	8007d96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc6:	0cdb      	lsrs	r3, r3, #19
 8007cc8:	04db      	lsls	r3, r3, #19
 8007cca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	0151      	lsls	r1, r2, #5
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	440a      	add	r2, r1
 8007ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	6959      	ldr	r1, [r3, #20]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	440b      	add	r3, r1
 8007d08:	1e59      	subs	r1, r3, #1
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d12:	04d9      	lsls	r1, r3, #19
 8007d14:	4b9d      	ldr	r3, [pc, #628]	; (8007f8c <USB_EPStartXfer+0x370>)
 8007d16:	400b      	ands	r3, r1
 8007d18:	69b9      	ldr	r1, [r7, #24]
 8007d1a:	0148      	lsls	r0, r1, #5
 8007d1c:	69f9      	ldr	r1, [r7, #28]
 8007d1e:	4401      	add	r1, r0
 8007d20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d24:	4313      	orrs	r3, r2
 8007d26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d34:	691a      	ldr	r2, [r3, #16]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d3e:	69b9      	ldr	r1, [r7, #24]
 8007d40:	0148      	lsls	r0, r1, #5
 8007d42:	69f9      	ldr	r1, [r7, #28]
 8007d44:	4401      	add	r1, r0
 8007d46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	78db      	ldrb	r3, [r3, #3]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d11f      	bne.n	8007d96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	0151      	lsls	r1, r2, #5
 8007d68:	69fa      	ldr	r2, [r7, #28]
 8007d6a:	440a      	add	r2, r1
 8007d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007d74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	0151      	lsls	r1, r2, #5
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	440a      	add	r2, r1
 8007d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d14b      	bne.n	8007e34 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d009      	beq.n	8007db8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db0:	461a      	mov	r2, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	78db      	ldrb	r3, [r3, #3]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d128      	bne.n	8007e12 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d110      	bne.n	8007df2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	0151      	lsls	r1, r2, #5
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	440a      	add	r2, r1
 8007de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	e00f      	b.n	8007e12 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	0151      	lsls	r1, r2, #5
 8007e04:	69fa      	ldr	r2, [r7, #28]
 8007e06:	440a      	add	r2, r1
 8007e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e10:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	0151      	lsls	r1, r2, #5
 8007e24:	69fa      	ldr	r2, [r7, #28]
 8007e26:	440a      	add	r2, r1
 8007e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e30:	6013      	str	r3, [r2, #0]
 8007e32:	e12f      	b.n	8008094 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	0151      	lsls	r1, r2, #5
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	440a      	add	r2, r1
 8007e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e52:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	78db      	ldrb	r3, [r3, #3]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d015      	beq.n	8007e88 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 8117 	beq.w	8008094 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	f003 030f 	and.w	r3, r3, #15
 8007e76:	2101      	movs	r1, #1
 8007e78:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7c:	69f9      	ldr	r1, [r7, #28]
 8007e7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e82:	4313      	orrs	r3, r2
 8007e84:	634b      	str	r3, [r1, #52]	; 0x34
 8007e86:	e105      	b.n	8008094 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d110      	bne.n	8007eba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	e00f      	b.n	8007eda <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	69fa      	ldr	r2, [r7, #28]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ed8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	68d9      	ldr	r1, [r3, #12]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	781a      	ldrb	r2, [r3, #0]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	b298      	uxth	r0, r3
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	4603      	mov	r3, r0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 fa2b 	bl	800834a <USB_WritePacket>
 8007ef4:	e0ce      	b.n	8008094 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	0151      	lsls	r1, r2, #5
 8007f08:	69fa      	ldr	r2, [r7, #28]
 8007f0a:	440a      	add	r2, r1
 8007f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f10:	0cdb      	lsrs	r3, r3, #19
 8007f12:	04db      	lsls	r3, r3, #19
 8007f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	69fa      	ldr	r2, [r7, #28]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d126      	bne.n	8007f90 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f58:	69b9      	ldr	r1, [r7, #24]
 8007f5a:	0148      	lsls	r0, r1, #5
 8007f5c:	69f9      	ldr	r1, [r7, #28]
 8007f5e:	4401      	add	r1, r0
 8007f60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f64:	4313      	orrs	r3, r2
 8007f66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	0151      	lsls	r1, r2, #5
 8007f7a:	69fa      	ldr	r2, [r7, #28]
 8007f7c:	440a      	add	r2, r1
 8007f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f86:	6113      	str	r3, [r2, #16]
 8007f88:	e036      	b.n	8007ff8 <USB_EPStartXfer+0x3dc>
 8007f8a:	bf00      	nop
 8007f8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	695a      	ldr	r2, [r3, #20]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	4413      	add	r3, r2
 8007f9a:	1e5a      	subs	r2, r3, #1
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb2:	691a      	ldr	r2, [r3, #16]
 8007fb4:	8afb      	ldrh	r3, [r7, #22]
 8007fb6:	04d9      	lsls	r1, r3, #19
 8007fb8:	4b39      	ldr	r3, [pc, #228]	; (80080a0 <USB_EPStartXfer+0x484>)
 8007fba:	400b      	ands	r3, r1
 8007fbc:	69b9      	ldr	r1, [r7, #24]
 8007fbe:	0148      	lsls	r0, r1, #5
 8007fc0:	69f9      	ldr	r1, [r7, #28]
 8007fc2:	4401      	add	r1, r0
 8007fc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd8:	691a      	ldr	r2, [r3, #16]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	8af9      	ldrh	r1, [r7, #22]
 8007fe0:	fb01 f303 	mul.w	r3, r1, r3
 8007fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fe8:	69b9      	ldr	r1, [r7, #24]
 8007fea:	0148      	lsls	r0, r1, #5
 8007fec:	69f9      	ldr	r1, [r7, #28]
 8007fee:	4401      	add	r1, r0
 8007ff0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ff8:	79fb      	ldrb	r3, [r7, #7]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d10d      	bne.n	800801a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d009      	beq.n	800801a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	68d9      	ldr	r1, [r3, #12]
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008016:	460a      	mov	r2, r1
 8008018:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	78db      	ldrb	r3, [r3, #3]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d128      	bne.n	8008074 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802e:	2b00      	cmp	r3, #0
 8008030:	d110      	bne.n	8008054 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	69fa      	ldr	r2, [r7, #28]
 8008046:	440a      	add	r2, r1
 8008048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800804c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	e00f      	b.n	8008074 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	0151      	lsls	r1, r2, #5
 8008066:	69fa      	ldr	r2, [r7, #28]
 8008068:	440a      	add	r2, r1
 800806a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800806e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008072:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	0151      	lsls	r1, r2, #5
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	440a      	add	r2, r1
 800808a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800808e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008092:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3720      	adds	r7, #32
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	1ff80000 	.word	0x1ff80000

080080a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	4613      	mov	r3, r2
 80080b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	785b      	ldrb	r3, [r3, #1]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	f040 80cd 	bne.w	8008260 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d132      	bne.n	8008134 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	0151      	lsls	r1, r2, #5
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	440a      	add	r2, r1
 80080e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	0151      	lsls	r1, r2, #5
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	440a      	add	r2, r1
 8008108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800810c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008110:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	0151      	lsls	r1, r2, #5
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	440a      	add	r2, r1
 8008128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800812c:	0cdb      	lsrs	r3, r3, #19
 800812e:	04db      	lsls	r3, r3, #19
 8008130:	6113      	str	r3, [r2, #16]
 8008132:	e04e      	b.n	80081d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	4413      	add	r3, r2
 800813c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	0151      	lsls	r1, r2, #5
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	440a      	add	r2, r1
 800814a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800814e:	0cdb      	lsrs	r3, r3, #19
 8008150:	04db      	lsls	r3, r3, #19
 8008152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	4413      	add	r3, r2
 800815c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	0151      	lsls	r1, r2, #5
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	440a      	add	r2, r1
 800816a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800816e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008172:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008176:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	695a      	ldr	r2, [r3, #20]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	429a      	cmp	r2, r3
 8008182:	d903      	bls.n	800818c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	0151      	lsls	r1, r2, #5
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	440a      	add	r2, r1
 80081a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b8:	691a      	ldr	r2, [r3, #16]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081c2:	6939      	ldr	r1, [r7, #16]
 80081c4:	0148      	lsls	r0, r1, #5
 80081c6:	6979      	ldr	r1, [r7, #20]
 80081c8:	4401      	add	r1, r0
 80081ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081ce:	4313      	orrs	r3, r2
 80081d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d11e      	bne.n	8008216 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d009      	beq.n	80081f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ec:	461a      	mov	r2, r3
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	0151      	lsls	r1, r2, #5
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	440a      	add	r2, r1
 800820a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800820e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	e092      	b.n	800833c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	0151      	lsls	r1, r2, #5
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	440a      	add	r2, r1
 800822c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008230:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008234:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d07e      	beq.n	800833c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f003 030f 	and.w	r3, r3, #15
 800824e:	2101      	movs	r1, #1
 8008250:	fa01 f303 	lsl.w	r3, r1, r3
 8008254:	6979      	ldr	r1, [r7, #20]
 8008256:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800825a:	4313      	orrs	r3, r2
 800825c:	634b      	str	r3, [r1, #52]	; 0x34
 800825e:	e06d      	b.n	800833c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	0151      	lsls	r1, r2, #5
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	440a      	add	r2, r1
 8008276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800827a:	0cdb      	lsrs	r3, r3, #19
 800827c:	04db      	lsls	r3, r3, #19
 800827e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	4413      	add	r3, r2
 8008288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	0151      	lsls	r1, r2, #5
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	440a      	add	r2, r1
 8008296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800829a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800829e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	0151      	lsls	r1, r2, #5
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	440a      	add	r2, r1
 80082ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e0:	691a      	ldr	r2, [r3, #16]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082ea:	6939      	ldr	r1, [r7, #16]
 80082ec:	0148      	lsls	r0, r1, #5
 80082ee:	6979      	ldr	r1, [r7, #20]
 80082f0:	4401      	add	r1, r0
 80082f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082f6:	4313      	orrs	r3, r2
 80082f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d10d      	bne.n	800831c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d009      	beq.n	800831c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	68d9      	ldr	r1, [r3, #12]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008318:	460a      	mov	r2, r1
 800831a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	0151      	lsls	r1, r2, #5
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	440a      	add	r2, r1
 8008332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008336:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800833a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800834a:	b480      	push	{r7}
 800834c:	b089      	sub	sp, #36	; 0x24
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	4611      	mov	r1, r2
 8008356:	461a      	mov	r2, r3
 8008358:	460b      	mov	r3, r1
 800835a:	71fb      	strb	r3, [r7, #7]
 800835c:	4613      	mov	r3, r2
 800835e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008368:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800836c:	2b00      	cmp	r3, #0
 800836e:	d11a      	bne.n	80083a6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008370:	88bb      	ldrh	r3, [r7, #4]
 8008372:	3303      	adds	r3, #3
 8008374:	089b      	lsrs	r3, r3, #2
 8008376:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008378:	2300      	movs	r3, #0
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	e00f      	b.n	800839e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	031a      	lsls	r2, r3, #12
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	4413      	add	r3, r2
 8008386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800838a:	461a      	mov	r2, r3
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	3304      	adds	r3, #4
 8008396:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	3301      	adds	r3, #1
 800839c:	61bb      	str	r3, [r7, #24]
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d3eb      	bcc.n	800837e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3724      	adds	r7, #36	; 0x24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b089      	sub	sp, #36	; 0x24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	4613      	mov	r3, r2
 80083c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80083ca:	88fb      	ldrh	r3, [r7, #6]
 80083cc:	3303      	adds	r3, #3
 80083ce:	089b      	lsrs	r3, r3, #2
 80083d0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80083d2:	2300      	movs	r3, #0
 80083d4:	61bb      	str	r3, [r7, #24]
 80083d6:	e00b      	b.n	80083f0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	3304      	adds	r3, #4
 80083e8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	3301      	adds	r3, #1
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d3ef      	bcc.n	80083d8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80083f8:	69fb      	ldr	r3, [r7, #28]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3724      	adds	r7, #36	; 0x24
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d12c      	bne.n	800847c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	db12      	blt.n	800845a <USB_EPSetStall+0x54>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00f      	beq.n	800845a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	440a      	add	r2, r1
 8008450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008454:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008458:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	440a      	add	r2, r1
 8008470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008474:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	e02b      	b.n	80084d4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	db12      	blt.n	80084b4 <USB_EPSetStall+0xae>
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00f      	beq.n	80084b4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	0151      	lsls	r1, r2, #5
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	440a      	add	r2, r1
 80084aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084b2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	0151      	lsls	r1, r2, #5
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	440a      	add	r2, r1
 80084ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b085      	sub	sp, #20
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d128      	bne.n	8008550 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	0151      	lsls	r1, r2, #5
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	440a      	add	r2, r1
 8008514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008518:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800851c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	78db      	ldrb	r3, [r3, #3]
 8008522:	2b03      	cmp	r3, #3
 8008524:	d003      	beq.n	800852e <USB_EPClearStall+0x4c>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	78db      	ldrb	r3, [r3, #3]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d138      	bne.n	80085a0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	440a      	add	r2, r1
 8008544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800854c:	6013      	str	r3, [r2, #0]
 800854e:	e027      	b.n	80085a0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	440a      	add	r2, r1
 8008566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800856a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800856e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	78db      	ldrb	r3, [r3, #3]
 8008574:	2b03      	cmp	r3, #3
 8008576:	d003      	beq.n	8008580 <USB_EPClearStall+0x9e>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	78db      	ldrb	r3, [r3, #3]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d10f      	bne.n	80085a0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800859a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800859e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b085      	sub	sp, #20
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	460b      	mov	r3, r1
 80085b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	78fb      	ldrb	r3, [r7, #3]
 80085dc:	011b      	lsls	r3, r3, #4
 80085de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80085e2:	68f9      	ldr	r1, [r7, #12]
 80085e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085e8:	4313      	orrs	r3, r2
 80085ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b085      	sub	sp, #20
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008614:	f023 0303 	bic.w	r3, r3, #3
 8008618:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008628:	f023 0302 	bic.w	r3, r3, #2
 800862c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008656:	f023 0303 	bic.w	r3, r3, #3
 800865a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800866a:	f043 0302 	orr.w	r3, r3, #2
 800866e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800867e:	b480      	push	{r7}
 8008680:	b085      	sub	sp, #20
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4013      	ands	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008696:	68fb      	ldr	r3, [r7, #12]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	4013      	ands	r3, r2
 80086c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	0c1b      	lsrs	r3, r3, #16
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	4013      	ands	r3, r2
 80086fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	b29b      	uxth	r3, r3
}
 8008700:	4618      	mov	r0, r3
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	4013      	ands	r3, r2
 8008738:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800873a:	68bb      	ldr	r3, [r7, #8]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800876c:	78fb      	ldrb	r3, [r7, #3]
 800876e:	f003 030f 	and.w	r3, r3, #15
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
 8008778:	01db      	lsls	r3, r3, #7
 800877a:	b2db      	uxtb	r3, r3
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	4313      	orrs	r3, r2
 8008780:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4013      	ands	r3, r2
 8008794:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008796:	68bb      	ldr	r3, [r7, #8]
}
 8008798:	4618      	mov	r0, r3
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	f003 0301 	and.w	r3, r3, #1
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80087de:	f023 0307 	bic.w	r3, r3, #7
 80087e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	460b      	mov	r3, r1
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	333c      	adds	r3, #60	; 0x3c
 800881e:	3304      	adds	r3, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	4a26      	ldr	r2, [pc, #152]	; (80088c0 <USB_EP0_OutStart+0xb8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d90a      	bls.n	8008842 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800883c:	d101      	bne.n	8008842 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	e037      	b.n	80088b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008848:	461a      	mov	r2, r3
 800884a:	2300      	movs	r3, #0
 800884c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800885c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008870:	f043 0318 	orr.w	r3, r3, #24
 8008874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008884:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008888:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800888a:	7afb      	ldrb	r3, [r7, #11]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d10f      	bne.n	80088b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008896:	461a      	mov	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80088ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	4f54300a 	.word	0x4f54300a

080088c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3301      	adds	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	4a13      	ldr	r2, [pc, #76]	; (8008928 <USB_CoreReset+0x64>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d901      	bls.n	80088e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e01b      	b.n	800891a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	daf2      	bge.n	80088d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f043 0201 	orr.w	r2, r3, #1
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3301      	adds	r3, #1
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4a09      	ldr	r2, [pc, #36]	; (8008928 <USB_CoreReset+0x64>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d901      	bls.n	800890c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e006      	b.n	800891a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b01      	cmp	r3, #1
 8008916:	d0f0      	beq.n	80088fa <USB_CoreReset+0x36>

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	00030d40 	.word	0x00030d40

0800892c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008938:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800893c:	f002 fc12 	bl	800b164 <USBD_static_malloc>
 8008940:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d105      	bne.n	8008954 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008950:	2302      	movs	r3, #2
 8008952:	e066      	b.n	8008a22 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7c1b      	ldrb	r3, [r3, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d119      	bne.n	8008998 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008968:	2202      	movs	r2, #2
 800896a:	2181      	movs	r1, #129	; 0x81
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f002 fad6 	bl	800af1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800897c:	2202      	movs	r2, #2
 800897e:	2101      	movs	r1, #1
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f002 facc 	bl	800af1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2210      	movs	r2, #16
 8008992:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008996:	e016      	b.n	80089c6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008998:	2340      	movs	r3, #64	; 0x40
 800899a:	2202      	movs	r2, #2
 800899c:	2181      	movs	r1, #129	; 0x81
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f002 fabd 	bl	800af1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089aa:	2340      	movs	r3, #64	; 0x40
 80089ac:	2202      	movs	r2, #2
 80089ae:	2101      	movs	r1, #1
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f002 fab4 	bl	800af1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2210      	movs	r2, #16
 80089c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089c6:	2308      	movs	r3, #8
 80089c8:	2203      	movs	r2, #3
 80089ca:	2182      	movs	r1, #130	; 0x82
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f002 faa6 	bl	800af1e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7c1b      	ldrb	r3, [r3, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d109      	bne.n	8008a10 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a06:	2101      	movs	r1, #1
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f002 fb77 	bl	800b0fc <USBD_LL_PrepareReceive>
 8008a0e:	e007      	b.n	8008a20 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a16:	2340      	movs	r3, #64	; 0x40
 8008a18:	2101      	movs	r1, #1
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f002 fb6e 	bl	800b0fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	460b      	mov	r3, r1
 8008a34:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008a36:	2181      	movs	r1, #129	; 0x81
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f002 fa96 	bl	800af6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a44:	2101      	movs	r1, #1
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f002 fa8f 	bl	800af6a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a54:	2182      	movs	r1, #130	; 0x82
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f002 fa87 	bl	800af6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00e      	beq.n	8008a94 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a86:	4618      	mov	r0, r3
 8008a88:	f002 fb7a 	bl	800b180 <USBD_static_free>
    pdev->pClassData = NULL;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ab0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e0af      	b.n	8008c28 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d03f      	beq.n	8008b54 <USBD_CDC_Setup+0xb4>
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	f040 809f 	bne.w	8008c18 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	88db      	ldrh	r3, [r3, #6]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d02e      	beq.n	8008b40 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	b25b      	sxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	da16      	bge.n	8008b1a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008af8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	88d2      	ldrh	r2, [r2, #6]
 8008afe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	88db      	ldrh	r3, [r3, #6]
 8008b04:	2b07      	cmp	r3, #7
 8008b06:	bf28      	it	cs
 8008b08:	2307      	movcs	r3, #7
 8008b0a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	89fa      	ldrh	r2, [r7, #14]
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fb19 	bl	800a14a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008b18:	e085      	b.n	8008c26 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	785a      	ldrb	r2, [r3, #1]
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	88db      	ldrh	r3, [r3, #6]
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008b30:	6939      	ldr	r1, [r7, #16]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	88db      	ldrh	r3, [r3, #6]
 8008b36:	461a      	mov	r2, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 fb32 	bl	800a1a2 <USBD_CtlPrepareRx>
      break;
 8008b3e:	e072      	b.n	8008c26 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	7850      	ldrb	r0, [r2, #1]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	4798      	blx	r3
      break;
 8008b52:	e068      	b.n	8008c26 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b0b      	cmp	r3, #11
 8008b5a:	d852      	bhi.n	8008c02 <USBD_CDC_Setup+0x162>
 8008b5c:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <USBD_CDC_Setup+0xc4>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008b95 	.word	0x08008b95
 8008b68:	08008c11 	.word	0x08008c11
 8008b6c:	08008c03 	.word	0x08008c03
 8008b70:	08008c03 	.word	0x08008c03
 8008b74:	08008c03 	.word	0x08008c03
 8008b78:	08008c03 	.word	0x08008c03
 8008b7c:	08008c03 	.word	0x08008c03
 8008b80:	08008c03 	.word	0x08008c03
 8008b84:	08008c03 	.word	0x08008c03
 8008b88:	08008c03 	.word	0x08008c03
 8008b8c:	08008bbf 	.word	0x08008bbf
 8008b90:	08008be9 	.word	0x08008be9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d107      	bne.n	8008bb0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ba0:	f107 030a 	add.w	r3, r7, #10
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 face 	bl	800a14a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bae:	e032      	b.n	8008c16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 fa58 	bl	800a068 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	75fb      	strb	r3, [r7, #23]
          break;
 8008bbc:	e02b      	b.n	8008c16 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d107      	bne.n	8008bda <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bca:	f107 030d 	add.w	r3, r7, #13
 8008bce:	2201      	movs	r2, #1
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 fab9 	bl	800a14a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bd8:	e01d      	b.n	8008c16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 fa43 	bl	800a068 <USBD_CtlError>
            ret = USBD_FAIL;
 8008be2:	2303      	movs	r3, #3
 8008be4:	75fb      	strb	r3, [r7, #23]
          break;
 8008be6:	e016      	b.n	8008c16 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d00f      	beq.n	8008c14 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 fa36 	bl	800a068 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c00:	e008      	b.n	8008c14 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 fa2f 	bl	800a068 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c0e:	e002      	b.n	8008c16 <USBD_CDC_Setup+0x176>
          break;
 8008c10:	bf00      	nop
 8008c12:	e008      	b.n	8008c26 <USBD_CDC_Setup+0x186>
          break;
 8008c14:	bf00      	nop
      }
      break;
 8008c16:	e006      	b.n	8008c26 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 fa24 	bl	800a068 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c20:	2303      	movs	r3, #3
 8008c22:	75fb      	strb	r3, [r7, #23]
      break;
 8008c24:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e04f      	b.n	8008cf2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	6879      	ldr	r1, [r7, #4]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	440b      	add	r3, r1
 8008c68:	3318      	adds	r3, #24
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d029      	beq.n	8008cc4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008c70:	78fa      	ldrb	r2, [r7, #3]
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	4613      	mov	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	3318      	adds	r3, #24
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	78f9      	ldrb	r1, [r7, #3]
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	460b      	mov	r3, r1
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	1a5b      	subs	r3, r3, r1
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4403      	add	r3, r0
 8008c90:	3344      	adds	r3, #68	; 0x44
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c98:	fb03 f301 	mul.w	r3, r3, r1
 8008c9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d110      	bne.n	8008cc4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008ca2:	78fa      	ldrb	r2, [r7, #3]
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	440b      	add	r3, r1
 8008cb0:	3318      	adds	r3, #24
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008cb6:	78f9      	ldrb	r1, [r7, #3]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	2200      	movs	r2, #0
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f002 f9fc 	bl	800b0ba <USBD_LL_Transmit>
 8008cc2:	e015      	b.n	8008cf0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00b      	beq.n	8008cf0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e015      	b.n	8008d48 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f002 fa0c 	bl	800b13e <USBD_LL_GetRxDataSize>
 8008d26:	4602      	mov	r2, r0
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d42:	4611      	mov	r1, r2
 8008d44:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e01b      	b.n	8008da2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d015      	beq.n	8008da0 <USBD_CDC_EP0_RxReady+0x50>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d7a:	2bff      	cmp	r3, #255	; 0xff
 8008d7c:	d010      	beq.n	8008da0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008d8c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d94:	b292      	uxth	r2, r2
 8008d96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	22ff      	movs	r2, #255	; 0xff
 8008d9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
	...

08008dac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2243      	movs	r2, #67	; 0x43
 8008db8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008dba:	4b03      	ldr	r3, [pc, #12]	; (8008dc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	20000094 	.word	0x20000094

08008dcc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2243      	movs	r2, #67	; 0x43
 8008dd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008dda:	4b03      	ldr	r3, [pc, #12]	; (8008de8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	20000050 	.word	0x20000050

08008dec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2243      	movs	r2, #67	; 0x43
 8008df8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008dfa:	4b03      	ldr	r3, [pc, #12]	; (8008e08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	200000d8 	.word	0x200000d8

08008e0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	220a      	movs	r2, #10
 8008e18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e1a:	4b03      	ldr	r3, [pc, #12]	; (8008e28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	2000000c 	.word	0x2000000c

08008e2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e004      	b.n	8008e4a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b087      	sub	sp, #28
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	60f8      	str	r0, [r7, #12]
 8008e5e:	60b9      	str	r1, [r7, #8]
 8008e60:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e68:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e008      	b.n	8008e86 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b085      	sub	sp, #20
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ea2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e004      	b.n	8008eb8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ed2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e01a      	b.n	8008f1c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d114      	bne.n	8008f1a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008f0e:	2181      	movs	r1, #129	; 0x81
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f002 f8d2 	bl	800b0ba <USBD_LL_Transmit>

    ret = USBD_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e016      	b.n	8008f70 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7c1b      	ldrb	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d109      	bne.n	8008f5e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f54:	2101      	movs	r1, #1
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f002 f8d0 	bl	800b0fc <USBD_LL_PrepareReceive>
 8008f5c:	e007      	b.n	8008f6e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f64:	2340      	movs	r3, #64	; 0x40
 8008f66:	2101      	movs	r1, #1
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f002 f8c7 	bl	800b0fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	4613      	mov	r3, r2
 8008f84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e01f      	b.n	8008fd0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	79fa      	ldrb	r2, [r7, #7]
 8008fc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f001 ff43 	bl	800ae50 <USBD_LL_Init>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e016      	b.n	800901e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900c:	f107 020e 	add.w	r2, r7, #14
 8009010:	4610      	mov	r0, r2
 8009012:	4798      	blx	r3
 8009014:	4602      	mov	r2, r0
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 ff5a 	bl	800aee8 <USBD_LL_Start>
 8009034:	4603      	mov	r3, r0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009060:	2303      	movs	r3, #3
 8009062:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800906a:	2b00      	cmp	r3, #0
 800906c:	d009      	beq.n	8009082 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	78fa      	ldrb	r2, [r7, #3]
 8009078:	4611      	mov	r1, r2
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
 800907e:	4603      	mov	r3, r0
 8009080:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009082:	7bfb      	ldrb	r3, [r7, #15]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d007      	beq.n	80090b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	78fa      	ldrb	r2, [r7, #3]
 80090ac:	4611      	mov	r1, r2
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	4798      	blx	r3
  }

  return USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 ff90 	bl	8009ff4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80090e2:	461a      	mov	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090f0:	f003 031f 	and.w	r3, r3, #31
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d01a      	beq.n	800912e <USBD_LL_SetupStage+0x72>
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d822      	bhi.n	8009142 <USBD_LL_SetupStage+0x86>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <USBD_LL_SetupStage+0x4a>
 8009100:	2b01      	cmp	r3, #1
 8009102:	d00a      	beq.n	800911a <USBD_LL_SetupStage+0x5e>
 8009104:	e01d      	b.n	8009142 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fa62 	bl	80095d8 <USBD_StdDevReq>
 8009114:	4603      	mov	r3, r0
 8009116:	73fb      	strb	r3, [r7, #15]
      break;
 8009118:	e020      	b.n	800915c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fac6 	bl	80096b4 <USBD_StdItfReq>
 8009128:	4603      	mov	r3, r0
 800912a:	73fb      	strb	r3, [r7, #15]
      break;
 800912c:	e016      	b.n	800915c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fb05 	bl	8009746 <USBD_StdEPReq>
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]
      break;
 8009140:	e00c      	b.n	800915c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009148:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800914c:	b2db      	uxtb	r3, r3
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f001 ff29 	bl	800afa8 <USBD_LL_StallEP>
 8009156:	4603      	mov	r3, r0
 8009158:	73fb      	strb	r3, [r7, #15]
      break;
 800915a:	bf00      	nop
  }

  return ret;
 800915c:	7bfb      	ldrb	r3, [r7, #15]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b086      	sub	sp, #24
 800916a:	af00      	add	r7, sp, #0
 800916c:	60f8      	str	r0, [r7, #12]
 800916e:	460b      	mov	r3, r1
 8009170:	607a      	str	r2, [r7, #4]
 8009172:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009174:	7afb      	ldrb	r3, [r7, #11]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d138      	bne.n	80091ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009180:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009188:	2b03      	cmp	r3, #3
 800918a:	d14a      	bne.n	8009222 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	429a      	cmp	r2, r3
 8009196:	d913      	bls.n	80091c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	1ad2      	subs	r2, r2, r3
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	4293      	cmp	r3, r2
 80091b0:	bf28      	it	cs
 80091b2:	4613      	movcs	r3, r2
 80091b4:	461a      	mov	r2, r3
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f001 f80f 	bl	800a1dc <USBD_CtlContinueRx>
 80091be:	e030      	b.n	8009222 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d10b      	bne.n	80091e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d005      	beq.n	80091e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f001 f80a 	bl	800a1fe <USBD_CtlSendStatus>
 80091ea:	e01a      	b.n	8009222 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b03      	cmp	r3, #3
 80091f6:	d114      	bne.n	8009222 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00e      	beq.n	8009222 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	7afa      	ldrb	r2, [r7, #11]
 800920e:	4611      	mov	r1, r2
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	4798      	blx	r3
 8009214:	4603      	mov	r3, r0
 8009216:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	e000      	b.n	8009224 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	460b      	mov	r3, r1
 8009236:	607a      	str	r2, [r7, #4]
 8009238:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800923a:	7afb      	ldrb	r3, [r7, #11]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d16b      	bne.n	8009318 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3314      	adds	r3, #20
 8009244:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800924c:	2b02      	cmp	r3, #2
 800924e:	d156      	bne.n	80092fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	429a      	cmp	r2, r3
 800925a:	d914      	bls.n	8009286 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	1ad2      	subs	r2, r2, r3
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	461a      	mov	r2, r3
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 ff84 	bl	800a180 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009278:	2300      	movs	r3, #0
 800927a:	2200      	movs	r2, #0
 800927c:	2100      	movs	r1, #0
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f001 ff3c 	bl	800b0fc <USBD_LL_PrepareReceive>
 8009284:	e03b      	b.n	80092fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	429a      	cmp	r2, r3
 8009290:	d11c      	bne.n	80092cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800929a:	429a      	cmp	r2, r3
 800929c:	d316      	bcc.n	80092cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d20f      	bcs.n	80092cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80092ac:	2200      	movs	r2, #0
 80092ae:	2100      	movs	r1, #0
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 ff65 	bl	800a180 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092be:	2300      	movs	r3, #0
 80092c0:	2200      	movs	r2, #0
 80092c2:	2100      	movs	r1, #0
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f001 ff19 	bl	800b0fc <USBD_LL_PrepareReceive>
 80092ca:	e018      	b.n	80092fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d10b      	bne.n	80092f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092f0:	2180      	movs	r1, #128	; 0x80
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f001 fe58 	bl	800afa8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 ff93 	bl	800a224 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009304:	2b01      	cmp	r3, #1
 8009306:	d122      	bne.n	800934e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff fe98 	bl	800903e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009316:	e01a      	b.n	800934e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b03      	cmp	r3, #3
 8009322:	d114      	bne.n	800934e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00e      	beq.n	800934e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	7afa      	ldrb	r2, [r7, #11]
 800933a:	4611      	mov	r1, r2
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	4798      	blx	r3
 8009340:	4603      	mov	r3, r0
 8009342:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009344:	7dfb      	ldrb	r3, [r7, #23]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800934a:	7dfb      	ldrb	r3, [r7, #23]
 800934c:	e000      	b.n	8009350 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3718      	adds	r7, #24
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009388:	2303      	movs	r3, #3
 800938a:	e02f      	b.n	80093ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00f      	beq.n	80093b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d009      	beq.n	80093b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	6852      	ldr	r2, [r2, #4]
 80093ae:	b2d2      	uxtb	r2, r2
 80093b0:	4611      	mov	r1, r2
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093b6:	2340      	movs	r3, #64	; 0x40
 80093b8:	2200      	movs	r2, #0
 80093ba:	2100      	movs	r1, #0
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 fdae 	bl	800af1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2240      	movs	r2, #64	; 0x40
 80093ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093d2:	2340      	movs	r3, #64	; 0x40
 80093d4:	2200      	movs	r2, #0
 80093d6:	2180      	movs	r1, #128	; 0x80
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 fda0 	bl	800af1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2201      	movs	r2, #1
 80093e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2240      	movs	r2, #64	; 0x40
 80093e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009422:	b2da      	uxtb	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2204      	movs	r2, #4
 800942e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b04      	cmp	r3, #4
 8009452:	d106      	bne.n	8009462 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800945a:	b2da      	uxtb	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009482:	2303      	movs	r3, #3
 8009484:	e012      	b.n	80094ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b03      	cmp	r3, #3
 8009490:	d10b      	bne.n	80094aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d005      	beq.n	80094aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e014      	b.n	80094f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d10d      	bne.n	80094f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	78fa      	ldrb	r2, [r7, #3]
 80094f0:	4611      	mov	r1, r2
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009516:	2303      	movs	r3, #3
 8009518:	e014      	b.n	8009544 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b03      	cmp	r3, #3
 8009524:	d10d      	bne.n	8009542 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	2b00      	cmp	r3, #0
 8009530:	d007      	beq.n	8009542 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	78fa      	ldrb	r2, [r7, #3]
 800953c:	4611      	mov	r1, r2
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b082      	sub	sp, #8
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009578:	2b00      	cmp	r3, #0
 800957a:	d009      	beq.n	8009590 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	6852      	ldr	r2, [r2, #4]
 8009588:	b2d2      	uxtb	r2, r2
 800958a:	4611      	mov	r1, r2
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	4798      	blx	r3
  }

  return USBD_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800959a:	b480      	push	{r7}
 800959c:	b087      	sub	sp, #28
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	3301      	adds	r3, #1
 80095b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80095b8:	8a3b      	ldrh	r3, [r7, #16]
 80095ba:	021b      	lsls	r3, r3, #8
 80095bc:	b21a      	sxth	r2, r3
 80095be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	b21b      	sxth	r3, r3
 80095c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80095c8:	89fb      	ldrh	r3, [r7, #14]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	371c      	adds	r7, #28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
	...

080095d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095ee:	2b40      	cmp	r3, #64	; 0x40
 80095f0:	d005      	beq.n	80095fe <USBD_StdDevReq+0x26>
 80095f2:	2b40      	cmp	r3, #64	; 0x40
 80095f4:	d853      	bhi.n	800969e <USBD_StdDevReq+0xc6>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00b      	beq.n	8009612 <USBD_StdDevReq+0x3a>
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d14f      	bne.n	800969e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	4798      	blx	r3
 800960c:	4603      	mov	r3, r0
 800960e:	73fb      	strb	r3, [r7, #15]
      break;
 8009610:	e04a      	b.n	80096a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	785b      	ldrb	r3, [r3, #1]
 8009616:	2b09      	cmp	r3, #9
 8009618:	d83b      	bhi.n	8009692 <USBD_StdDevReq+0xba>
 800961a:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <USBD_StdDevReq+0x48>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	08009675 	.word	0x08009675
 8009624:	08009689 	.word	0x08009689
 8009628:	08009693 	.word	0x08009693
 800962c:	0800967f 	.word	0x0800967f
 8009630:	08009693 	.word	0x08009693
 8009634:	08009653 	.word	0x08009653
 8009638:	08009649 	.word	0x08009649
 800963c:	08009693 	.word	0x08009693
 8009640:	0800966b 	.word	0x0800966b
 8009644:	0800965d 	.word	0x0800965d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f9de 	bl	8009a0c <USBD_GetDescriptor>
          break;
 8009650:	e024      	b.n	800969c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fb43 	bl	8009ce0 <USBD_SetAddress>
          break;
 800965a:	e01f      	b.n	800969c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fb82 	bl	8009d68 <USBD_SetConfig>
 8009664:	4603      	mov	r3, r0
 8009666:	73fb      	strb	r3, [r7, #15]
          break;
 8009668:	e018      	b.n	800969c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fc21 	bl	8009eb4 <USBD_GetConfig>
          break;
 8009672:	e013      	b.n	800969c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fc52 	bl	8009f20 <USBD_GetStatus>
          break;
 800967c:	e00e      	b.n	800969c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fc81 	bl	8009f88 <USBD_SetFeature>
          break;
 8009686:	e009      	b.n	800969c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fc90 	bl	8009fb0 <USBD_ClrFeature>
          break;
 8009690:	e004      	b.n	800969c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fce7 	bl	800a068 <USBD_CtlError>
          break;
 800969a:	bf00      	nop
      }
      break;
 800969c:	e004      	b.n	80096a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fce1 	bl	800a068 <USBD_CtlError>
      break;
 80096a6:	bf00      	nop
  }

  return ret;
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop

080096b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096ca:	2b40      	cmp	r3, #64	; 0x40
 80096cc:	d005      	beq.n	80096da <USBD_StdItfReq+0x26>
 80096ce:	2b40      	cmp	r3, #64	; 0x40
 80096d0:	d82f      	bhi.n	8009732 <USBD_StdItfReq+0x7e>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <USBD_StdItfReq+0x26>
 80096d6:	2b20      	cmp	r3, #32
 80096d8:	d12b      	bne.n	8009732 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d81d      	bhi.n	8009724 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	889b      	ldrh	r3, [r3, #4]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d813      	bhi.n	800971a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	4798      	blx	r3
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	88db      	ldrh	r3, [r3, #6]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d110      	bne.n	800972e <USBD_StdItfReq+0x7a>
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10d      	bne.n	800972e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fd73 	bl	800a1fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009718:	e009      	b.n	800972e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fca3 	bl	800a068 <USBD_CtlError>
          break;
 8009722:	e004      	b.n	800972e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fc9e 	bl	800a068 <USBD_CtlError>
          break;
 800972c:	e000      	b.n	8009730 <USBD_StdItfReq+0x7c>
          break;
 800972e:	bf00      	nop
      }
      break;
 8009730:	e004      	b.n	800973c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fc97 	bl	800a068 <USBD_CtlError>
      break;
 800973a:	bf00      	nop
  }

  return ret;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	889b      	ldrh	r3, [r3, #4]
 8009758:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009762:	2b40      	cmp	r3, #64	; 0x40
 8009764:	d007      	beq.n	8009776 <USBD_StdEPReq+0x30>
 8009766:	2b40      	cmp	r3, #64	; 0x40
 8009768:	f200 8145 	bhi.w	80099f6 <USBD_StdEPReq+0x2b0>
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00c      	beq.n	800978a <USBD_StdEPReq+0x44>
 8009770:	2b20      	cmp	r3, #32
 8009772:	f040 8140 	bne.w	80099f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	4798      	blx	r3
 8009784:	4603      	mov	r3, r0
 8009786:	73fb      	strb	r3, [r7, #15]
      break;
 8009788:	e13a      	b.n	8009a00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	785b      	ldrb	r3, [r3, #1]
 800978e:	2b03      	cmp	r3, #3
 8009790:	d007      	beq.n	80097a2 <USBD_StdEPReq+0x5c>
 8009792:	2b03      	cmp	r3, #3
 8009794:	f300 8129 	bgt.w	80099ea <USBD_StdEPReq+0x2a4>
 8009798:	2b00      	cmp	r3, #0
 800979a:	d07f      	beq.n	800989c <USBD_StdEPReq+0x156>
 800979c:	2b01      	cmp	r3, #1
 800979e:	d03c      	beq.n	800981a <USBD_StdEPReq+0xd4>
 80097a0:	e123      	b.n	80099ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d002      	beq.n	80097b4 <USBD_StdEPReq+0x6e>
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	d016      	beq.n	80097e0 <USBD_StdEPReq+0x9a>
 80097b2:	e02c      	b.n	800980e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00d      	beq.n	80097d6 <USBD_StdEPReq+0x90>
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	2b80      	cmp	r3, #128	; 0x80
 80097be:	d00a      	beq.n	80097d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f001 fbef 	bl	800afa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80097ca:	2180      	movs	r1, #128	; 0x80
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f001 fbeb 	bl	800afa8 <USBD_LL_StallEP>
 80097d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097d4:	e020      	b.n	8009818 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fc45 	bl	800a068 <USBD_CtlError>
              break;
 80097de:	e01b      	b.n	8009818 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	885b      	ldrh	r3, [r3, #2]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10e      	bne.n	8009806 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00b      	beq.n	8009806 <USBD_StdEPReq+0xc0>
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
 80097f0:	2b80      	cmp	r3, #128	; 0x80
 80097f2:	d008      	beq.n	8009806 <USBD_StdEPReq+0xc0>
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	88db      	ldrh	r3, [r3, #6]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f001 fbd1 	bl	800afa8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 fcf9 	bl	800a1fe <USBD_CtlSendStatus>

              break;
 800980c:	e004      	b.n	8009818 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fc29 	bl	800a068 <USBD_CtlError>
              break;
 8009816:	bf00      	nop
          }
          break;
 8009818:	e0ec      	b.n	80099f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b02      	cmp	r3, #2
 8009824:	d002      	beq.n	800982c <USBD_StdEPReq+0xe6>
 8009826:	2b03      	cmp	r3, #3
 8009828:	d016      	beq.n	8009858 <USBD_StdEPReq+0x112>
 800982a:	e030      	b.n	800988e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00d      	beq.n	800984e <USBD_StdEPReq+0x108>
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	2b80      	cmp	r3, #128	; 0x80
 8009836:	d00a      	beq.n	800984e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f001 fbb3 	bl	800afa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009842:	2180      	movs	r1, #128	; 0x80
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f001 fbaf 	bl	800afa8 <USBD_LL_StallEP>
 800984a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800984c:	e025      	b.n	800989a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fc09 	bl	800a068 <USBD_CtlError>
              break;
 8009856:	e020      	b.n	800989a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	885b      	ldrh	r3, [r3, #2]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d11b      	bne.n	8009898 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009866:	2b00      	cmp	r3, #0
 8009868:	d004      	beq.n	8009874 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800986a:	7bbb      	ldrb	r3, [r7, #14]
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 fbb9 	bl	800afe6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fcc2 	bl	800a1fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	4798      	blx	r3
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800988c:	e004      	b.n	8009898 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fbe9 	bl	800a068 <USBD_CtlError>
              break;
 8009896:	e000      	b.n	800989a <USBD_StdEPReq+0x154>
              break;
 8009898:	bf00      	nop
          }
          break;
 800989a:	e0ab      	b.n	80099f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d002      	beq.n	80098ae <USBD_StdEPReq+0x168>
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d032      	beq.n	8009912 <USBD_StdEPReq+0x1cc>
 80098ac:	e097      	b.n	80099de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d007      	beq.n	80098c4 <USBD_StdEPReq+0x17e>
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	2b80      	cmp	r3, #128	; 0x80
 80098b8:	d004      	beq.n	80098c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fbd3 	bl	800a068 <USBD_CtlError>
                break;
 80098c2:	e091      	b.n	80099e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	da0b      	bge.n	80098e4 <USBD_StdEPReq+0x19e>
 80098cc:	7bbb      	ldrb	r3, [r7, #14]
 80098ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	3310      	adds	r3, #16
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	4413      	add	r3, r2
 80098e0:	3304      	adds	r3, #4
 80098e2:	e00b      	b.n	80098fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	4413      	add	r3, r2
 80098fa:	3304      	adds	r3, #4
 80098fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	2200      	movs	r2, #0
 8009902:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	2202      	movs	r2, #2
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fc1d 	bl	800a14a <USBD_CtlSendData>
              break;
 8009910:	e06a      	b.n	80099e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009916:	2b00      	cmp	r3, #0
 8009918:	da11      	bge.n	800993e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	f003 020f 	and.w	r2, r3, #15
 8009920:	6879      	ldr	r1, [r7, #4]
 8009922:	4613      	mov	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	440b      	add	r3, r1
 800992c:	3324      	adds	r3, #36	; 0x24
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d117      	bne.n	8009964 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fb96 	bl	800a068 <USBD_CtlError>
                  break;
 800993c:	e054      	b.n	80099e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	f003 020f 	and.w	r2, r3, #15
 8009944:	6879      	ldr	r1, [r7, #4]
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d104      	bne.n	8009964 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fb83 	bl	800a068 <USBD_CtlError>
                  break;
 8009962:	e041      	b.n	80099e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009968:	2b00      	cmp	r3, #0
 800996a:	da0b      	bge.n	8009984 <USBD_StdEPReq+0x23e>
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	3310      	adds	r3, #16
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	4413      	add	r3, r2
 8009980:	3304      	adds	r3, #4
 8009982:	e00b      	b.n	800999c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800998a:	4613      	mov	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	4413      	add	r3, r2
 800999a:	3304      	adds	r3, #4
 800999c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <USBD_StdEPReq+0x264>
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
 80099a6:	2b80      	cmp	r3, #128	; 0x80
 80099a8:	d103      	bne.n	80099b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	2200      	movs	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	e00e      	b.n	80099d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
 80099b4:	4619      	mov	r1, r3
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 fb34 	bl	800b024 <USBD_LL_IsStallEP>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2201      	movs	r2, #1
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	e002      	b.n	80099d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2200      	movs	r2, #0
 80099ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2202      	movs	r2, #2
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fbb7 	bl	800a14a <USBD_CtlSendData>
              break;
 80099dc:	e004      	b.n	80099e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fb41 	bl	800a068 <USBD_CtlError>
              break;
 80099e6:	bf00      	nop
          }
          break;
 80099e8:	e004      	b.n	80099f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fb3b 	bl	800a068 <USBD_CtlError>
          break;
 80099f2:	bf00      	nop
      }
      break;
 80099f4:	e004      	b.n	8009a00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fb35 	bl	800a068 <USBD_CtlError>
      break;
 80099fe:	bf00      	nop
  }

  return ret;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a16:	2300      	movs	r3, #0
 8009a18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	885b      	ldrh	r3, [r3, #2]
 8009a26:	0a1b      	lsrs	r3, r3, #8
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	2b06      	cmp	r3, #6
 8009a2e:	f200 8128 	bhi.w	8009c82 <USBD_GetDescriptor+0x276>
 8009a32:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <USBD_GetDescriptor+0x2c>)
 8009a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a38:	08009a55 	.word	0x08009a55
 8009a3c:	08009a6d 	.word	0x08009a6d
 8009a40:	08009aad 	.word	0x08009aad
 8009a44:	08009c83 	.word	0x08009c83
 8009a48:	08009c83 	.word	0x08009c83
 8009a4c:	08009c23 	.word	0x08009c23
 8009a50:	08009c4f 	.word	0x08009c4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	7c12      	ldrb	r2, [r2, #16]
 8009a60:	f107 0108 	add.w	r1, r7, #8
 8009a64:	4610      	mov	r0, r2
 8009a66:	4798      	blx	r3
 8009a68:	60f8      	str	r0, [r7, #12]
      break;
 8009a6a:	e112      	b.n	8009c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	7c1b      	ldrb	r3, [r3, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10d      	bne.n	8009a90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7c:	f107 0208 	add.w	r2, r7, #8
 8009a80:	4610      	mov	r0, r2
 8009a82:	4798      	blx	r3
 8009a84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a8e:	e100      	b.n	8009c92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	f107 0208 	add.w	r2, r7, #8
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	4798      	blx	r3
 8009aa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	701a      	strb	r2, [r3, #0]
      break;
 8009aaa:	e0f2      	b.n	8009c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	885b      	ldrh	r3, [r3, #2]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b05      	cmp	r3, #5
 8009ab4:	f200 80ac 	bhi.w	8009c10 <USBD_GetDescriptor+0x204>
 8009ab8:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <USBD_GetDescriptor+0xb4>)
 8009aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abe:	bf00      	nop
 8009ac0:	08009ad9 	.word	0x08009ad9
 8009ac4:	08009b0d 	.word	0x08009b0d
 8009ac8:	08009b41 	.word	0x08009b41
 8009acc:	08009b75 	.word	0x08009b75
 8009ad0:	08009ba9 	.word	0x08009ba9
 8009ad4:	08009bdd 	.word	0x08009bdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00b      	beq.n	8009afc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7c12      	ldrb	r2, [r2, #16]
 8009af0:	f107 0108 	add.w	r1, r7, #8
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009afa:	e091      	b.n	8009c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fab2 	bl	800a068 <USBD_CtlError>
            err++;
 8009b04:	7afb      	ldrb	r3, [r7, #11]
 8009b06:	3301      	adds	r3, #1
 8009b08:	72fb      	strb	r3, [r7, #11]
          break;
 8009b0a:	e089      	b.n	8009c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	7c12      	ldrb	r2, [r2, #16]
 8009b24:	f107 0108 	add.w	r1, r7, #8
 8009b28:	4610      	mov	r0, r2
 8009b2a:	4798      	blx	r3
 8009b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b2e:	e077      	b.n	8009c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fa98 	bl	800a068 <USBD_CtlError>
            err++;
 8009b38:	7afb      	ldrb	r3, [r7, #11]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b3e:	e06f      	b.n	8009c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	7c12      	ldrb	r2, [r2, #16]
 8009b58:	f107 0108 	add.w	r1, r7, #8
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	4798      	blx	r3
 8009b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b62:	e05d      	b.n	8009c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fa7e 	bl	800a068 <USBD_CtlError>
            err++;
 8009b6c:	7afb      	ldrb	r3, [r7, #11]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	72fb      	strb	r3, [r7, #11]
          break;
 8009b72:	e055      	b.n	8009c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	7c12      	ldrb	r2, [r2, #16]
 8009b8c:	f107 0108 	add.w	r1, r7, #8
 8009b90:	4610      	mov	r0, r2
 8009b92:	4798      	blx	r3
 8009b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b96:	e043      	b.n	8009c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fa64 	bl	800a068 <USBD_CtlError>
            err++;
 8009ba0:	7afb      	ldrb	r3, [r7, #11]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ba6:	e03b      	b.n	8009c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	7c12      	ldrb	r2, [r2, #16]
 8009bc0:	f107 0108 	add.w	r1, r7, #8
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
 8009bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bca:	e029      	b.n	8009c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa4a 	bl	800a068 <USBD_CtlError>
            err++;
 8009bd4:	7afb      	ldrb	r3, [r7, #11]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bda:	e021      	b.n	8009c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00b      	beq.n	8009c00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	7c12      	ldrb	r2, [r2, #16]
 8009bf4:	f107 0108 	add.w	r1, r7, #8
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
 8009bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bfe:	e00f      	b.n	8009c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa30 	bl	800a068 <USBD_CtlError>
            err++;
 8009c08:	7afb      	ldrb	r3, [r7, #11]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c0e:	e007      	b.n	8009c20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fa28 	bl	800a068 <USBD_CtlError>
          err++;
 8009c18:	7afb      	ldrb	r3, [r7, #11]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009c1e:	bf00      	nop
      }
      break;
 8009c20:	e037      	b.n	8009c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	7c1b      	ldrb	r3, [r3, #16]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d109      	bne.n	8009c3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c32:	f107 0208 	add.w	r2, r7, #8
 8009c36:	4610      	mov	r0, r2
 8009c38:	4798      	blx	r3
 8009c3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c3c:	e029      	b.n	8009c92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fa11 	bl	800a068 <USBD_CtlError>
        err++;
 8009c46:	7afb      	ldrb	r3, [r7, #11]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c4c:	e021      	b.n	8009c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	7c1b      	ldrb	r3, [r3, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10d      	bne.n	8009c72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5e:	f107 0208 	add.w	r2, r7, #8
 8009c62:	4610      	mov	r0, r2
 8009c64:	4798      	blx	r3
 8009c66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	2207      	movs	r2, #7
 8009c6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c70:	e00f      	b.n	8009c92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f9f7 	bl	800a068 <USBD_CtlError>
        err++;
 8009c7a:	7afb      	ldrb	r3, [r7, #11]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c80:	e007      	b.n	8009c92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f9ef 	bl	800a068 <USBD_CtlError>
      err++;
 8009c8a:	7afb      	ldrb	r3, [r7, #11]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c90:	bf00      	nop
  }

  if (err != 0U)
 8009c92:	7afb      	ldrb	r3, [r7, #11]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11e      	bne.n	8009cd6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	88db      	ldrh	r3, [r3, #6]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d016      	beq.n	8009cce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009ca0:	893b      	ldrh	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00e      	beq.n	8009cc4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	88da      	ldrh	r2, [r3, #6]
 8009caa:	893b      	ldrh	r3, [r7, #8]
 8009cac:	4293      	cmp	r3, r2
 8009cae:	bf28      	it	cs
 8009cb0:	4613      	movcs	r3, r2
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cb6:	893b      	ldrh	r3, [r7, #8]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	68f9      	ldr	r1, [r7, #12]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fa44 	bl	800a14a <USBD_CtlSendData>
 8009cc2:	e009      	b.n	8009cd8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f9ce 	bl	800a068 <USBD_CtlError>
 8009ccc:	e004      	b.n	8009cd8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fa95 	bl	800a1fe <USBD_CtlSendStatus>
 8009cd4:	e000      	b.n	8009cd8 <USBD_GetDescriptor+0x2cc>
    return;
 8009cd6:	bf00      	nop
  }
}
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop

08009ce0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	889b      	ldrh	r3, [r3, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d131      	bne.n	8009d56 <USBD_SetAddress+0x76>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	88db      	ldrh	r3, [r3, #6]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d12d      	bne.n	8009d56 <USBD_SetAddress+0x76>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	885b      	ldrh	r3, [r3, #2]
 8009cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8009d00:	d829      	bhi.n	8009d56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	885b      	ldrh	r3, [r3, #2]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d104      	bne.n	8009d24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f9a3 	bl	800a068 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d22:	e01d      	b.n	8009d60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	7bfa      	ldrb	r2, [r7, #15]
 8009d28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f001 f9a3 	bl	800b07c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fa61 	bl	800a1fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d004      	beq.n	8009d4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2202      	movs	r2, #2
 8009d46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d4a:	e009      	b.n	8009d60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d54:	e004      	b.n	8009d60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d56:	6839      	ldr	r1, [r7, #0]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f985 	bl	800a068 <USBD_CtlError>
  }
}
 8009d5e:	bf00      	nop
 8009d60:	bf00      	nop
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	885b      	ldrh	r3, [r3, #2]
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	4b4c      	ldr	r3, [pc, #304]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009d7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d80:	4b4b      	ldr	r3, [pc, #300]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d905      	bls.n	8009d94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f96c 	bl	800a068 <USBD_CtlError>
    return USBD_FAIL;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e088      	b.n	8009ea6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d002      	beq.n	8009da6 <USBD_SetConfig+0x3e>
 8009da0:	2b03      	cmp	r3, #3
 8009da2:	d025      	beq.n	8009df0 <USBD_SetConfig+0x88>
 8009da4:	e071      	b.n	8009e8a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009da6:	4b42      	ldr	r3, [pc, #264]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d01c      	beq.n	8009de8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009dae:	4b40      	ldr	r3, [pc, #256]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009db8:	4b3d      	ldr	r3, [pc, #244]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff f948 	bl	8009054 <USBD_SetClassConfig>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d004      	beq.n	8009dd8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f949 	bl	800a068 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009dd6:	e065      	b.n	8009ea4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fa10 	bl	800a1fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2203      	movs	r2, #3
 8009de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009de6:	e05d      	b.n	8009ea4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fa08 	bl	800a1fe <USBD_CtlSendStatus>
      break;
 8009dee:	e059      	b.n	8009ea4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009df0:	4b2f      	ldr	r3, [pc, #188]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d112      	bne.n	8009e1e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009e00:	4b2b      	ldr	r3, [pc, #172]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e0a:	4b29      	ldr	r3, [pc, #164]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7ff f93b 	bl	800908c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f9f1 	bl	800a1fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e1c:	e042      	b.n	8009ea4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009e1e:	4b24      	ldr	r3, [pc, #144]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d02a      	beq.n	8009e82 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff f929 	bl	800908c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e3a:	4b1d      	ldr	r3, [pc, #116]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e44:	4b1a      	ldr	r3, [pc, #104]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff f902 	bl	8009054 <USBD_SetClassConfig>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00f      	beq.n	8009e7a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f903 	bl	800a068 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff f90e 	bl	800908c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2202      	movs	r2, #2
 8009e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e78:	e014      	b.n	8009ea4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f9bf 	bl	800a1fe <USBD_CtlSendStatus>
      break;
 8009e80:	e010      	b.n	8009ea4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f9bb 	bl	800a1fe <USBD_CtlSendStatus>
      break;
 8009e88:	e00c      	b.n	8009ea4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 f8eb 	bl	800a068 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e92:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <USBD_SetConfig+0x148>)
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff f8f7 	bl	800908c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea2:	bf00      	nop
  }

  return ret;
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000294 	.word	0x20000294

08009eb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	88db      	ldrh	r3, [r3, #6]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d004      	beq.n	8009ed0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f8cd 	bl	800a068 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ece:	e023      	b.n	8009f18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	dc02      	bgt.n	8009ee2 <USBD_GetConfig+0x2e>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dc03      	bgt.n	8009ee8 <USBD_GetConfig+0x34>
 8009ee0:	e015      	b.n	8009f0e <USBD_GetConfig+0x5a>
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d00b      	beq.n	8009efe <USBD_GetConfig+0x4a>
 8009ee6:	e012      	b.n	8009f0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f927 	bl	800a14a <USBD_CtlSendData>
        break;
 8009efc:	e00c      	b.n	8009f18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	3304      	adds	r3, #4
 8009f02:	2201      	movs	r2, #1
 8009f04:	4619      	mov	r1, r3
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f91f 	bl	800a14a <USBD_CtlSendData>
        break;
 8009f0c:	e004      	b.n	8009f18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f8a9 	bl	800a068 <USBD_CtlError>
        break;
 8009f16:	bf00      	nop
}
 8009f18:	bf00      	nop
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	3b01      	subs	r3, #1
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d81e      	bhi.n	8009f76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	88db      	ldrh	r3, [r3, #6]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d004      	beq.n	8009f4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f890 	bl	800a068 <USBD_CtlError>
        break;
 8009f48:	e01a      	b.n	8009f80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d005      	beq.n	8009f66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	f043 0202 	orr.w	r2, r3, #2
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	330c      	adds	r3, #12
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8eb 	bl	800a14a <USBD_CtlSendData>
      break;
 8009f74:	e004      	b.n	8009f80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f875 	bl	800a068 <USBD_CtlError>
      break;
 8009f7e:	bf00      	nop
  }
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	885b      	ldrh	r3, [r3, #2]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d106      	bne.n	8009fa8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f92b 	bl	800a1fe <USBD_CtlSendStatus>
  }
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d80b      	bhi.n	8009fe0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	885b      	ldrh	r3, [r3, #2]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d10c      	bne.n	8009fea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f910 	bl	800a1fe <USBD_CtlSendStatus>
      }
      break;
 8009fde:	e004      	b.n	8009fea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009fe0:	6839      	ldr	r1, [r7, #0]
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f840 	bl	800a068 <USBD_CtlError>
      break;
 8009fe8:	e000      	b.n	8009fec <USBD_ClrFeature+0x3c>
      break;
 8009fea:	bf00      	nop
  }
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	781a      	ldrb	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3301      	adds	r3, #1
 800a00e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	781a      	ldrb	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3301      	adds	r3, #1
 800a01c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7ff fabb 	bl	800959a <SWAPBYTE>
 800a024:	4603      	mov	r3, r0
 800a026:	461a      	mov	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3301      	adds	r3, #1
 800a030:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3301      	adds	r3, #1
 800a036:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f7ff faae 	bl	800959a <SWAPBYTE>
 800a03e:	4603      	mov	r3, r0
 800a040:	461a      	mov	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3301      	adds	r3, #1
 800a04a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3301      	adds	r3, #1
 800a050:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f7ff faa1 	bl	800959a <SWAPBYTE>
 800a058:	4603      	mov	r3, r0
 800a05a:	461a      	mov	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	80da      	strh	r2, [r3, #6]
}
 800a060:	bf00      	nop
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a072:	2180      	movs	r1, #128	; 0x80
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 ff97 	bl	800afa8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a07a:	2100      	movs	r1, #0
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 ff93 	bl	800afa8 <USBD_LL_StallEP>
}
 800a082:	bf00      	nop
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b086      	sub	sp, #24
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a096:	2300      	movs	r3, #0
 800a098:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d036      	beq.n	800a10e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a0a4:	6938      	ldr	r0, [r7, #16]
 800a0a6:	f000 f836 	bl	800a116 <USBD_GetLen>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	4413      	add	r3, r2
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	7812      	ldrb	r2, [r2, #0]
 800a0c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	2203      	movs	r2, #3
 800a0d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a0da:	e013      	b.n	800a104 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	7812      	ldrb	r2, [r2, #0]
 800a0e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	613b      	str	r3, [r7, #16]
    idx++;
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	701a      	strb	r2, [r3, #0]
    idx++;
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
 800a100:	3301      	adds	r3, #1
 800a102:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e7      	bne.n	800a0dc <USBD_GetString+0x52>
 800a10c:	e000      	b.n	800a110 <USBD_GetString+0x86>
    return;
 800a10e:	bf00      	nop
  }
}
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a116:	b480      	push	{r7}
 800a118:	b085      	sub	sp, #20
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a11e:	2300      	movs	r3, #0
 800a120:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a126:	e005      	b.n	800a134 <USBD_GetLen+0x1e>
  {
    len++;
 800a128:	7bfb      	ldrb	r3, [r7, #15]
 800a12a:	3301      	adds	r3, #1
 800a12c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	3301      	adds	r3, #1
 800a132:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1f5      	bne.n	800a128 <USBD_GetLen+0x12>
  }

  return len;
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	60f8      	str	r0, [r7, #12]
 800a152:	60b9      	str	r1, [r7, #8]
 800a154:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2202      	movs	r2, #2
 800a15a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	2100      	movs	r1, #0
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f000 ffa2 	bl	800b0ba <USBD_LL_Transmit>

  return USBD_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	2100      	movs	r1, #0
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f000 ff91 	bl	800b0ba <USBD_LL_Transmit>

  return USBD_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	60b9      	str	r1, [r7, #8]
 800a1ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 ff95 	bl	800b0fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 ff84 	bl	800b0fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b082      	sub	sp, #8
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2204      	movs	r2, #4
 800a20a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a20e:	2300      	movs	r3, #0
 800a210:	2200      	movs	r2, #0
 800a212:	2100      	movs	r1, #0
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 ff50 	bl	800b0ba <USBD_LL_Transmit>

  return USBD_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2205      	movs	r2, #5
 800a230:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a234:	2300      	movs	r3, #0
 800a236:	2200      	movs	r2, #0
 800a238:	2100      	movs	r1, #0
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 ff5e 	bl	800b0fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
	...

0800a24c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a250:	2200      	movs	r2, #0
 800a252:	4912      	ldr	r1, [pc, #72]	; (800a29c <MX_USB_DEVICE_Init+0x50>)
 800a254:	4812      	ldr	r0, [pc, #72]	; (800a2a0 <MX_USB_DEVICE_Init+0x54>)
 800a256:	f7fe fe8f 	bl	8008f78 <USBD_Init>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a260:	f7fa f95e 	bl	8004520 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a264:	490f      	ldr	r1, [pc, #60]	; (800a2a4 <MX_USB_DEVICE_Init+0x58>)
 800a266:	480e      	ldr	r0, [pc, #56]	; (800a2a0 <MX_USB_DEVICE_Init+0x54>)
 800a268:	f7fe feb6 	bl	8008fd8 <USBD_RegisterClass>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a272:	f7fa f955 	bl	8004520 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a276:	490c      	ldr	r1, [pc, #48]	; (800a2a8 <MX_USB_DEVICE_Init+0x5c>)
 800a278:	4809      	ldr	r0, [pc, #36]	; (800a2a0 <MX_USB_DEVICE_Init+0x54>)
 800a27a:	f7fe fdd7 	bl	8008e2c <USBD_CDC_RegisterInterface>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a284:	f7fa f94c 	bl	8004520 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a288:	4805      	ldr	r0, [pc, #20]	; (800a2a0 <MX_USB_DEVICE_Init+0x54>)
 800a28a:	f7fe fecc 	bl	8009026 <USBD_Start>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a294:	f7fa f944 	bl	8004520 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a298:	bf00      	nop
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	20000130 	.word	0x20000130
 800a2a0:	20000588 	.word	0x20000588
 800a2a4:	20000018 	.word	0x20000018
 800a2a8:	2000011c 	.word	0x2000011c

0800a2ac <b_Get_flagrun>:
  * @{
  */

/* USER CODE BEGIN PRIVATE_MACRO */
bool b_Get_flagrun()
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	af00      	add	r7, sp, #0
	return xUSBDownloadVar.flag_run;
 800a2b0:	4b03      	ldr	r3, [pc, #12]	; (800a2c0 <b_Get_flagrun+0x14>)
 800a2b2:	7c5b      	ldrb	r3, [r3, #17]
 800a2b4:	b2db      	uxtb	r3, r3
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	20000298 	.word	0x20000298

0800a2c4 <v_Clear_flagrun>:

void v_Clear_flagrun()
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	af00      	add	r7, sp, #0
	xUSBDownloadVar.flag_run = false;
 800a2c8:	4b03      	ldr	r3, [pc, #12]	; (800a2d8 <v_Clear_flagrun+0x14>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	745a      	strb	r2, [r3, #17]
}
 800a2ce:	bf00      	nop
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	20000298 	.word	0x20000298

0800a2dc <ui_Get_testindex>:

uint16_t ui_Get_testindex()
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
	return xUSBDownloadVar.test_index;
 800a2e0:	4b03      	ldr	r3, [pc, #12]	; (800a2f0 <ui_Get_testindex+0x14>)
 800a2e2:	8a5b      	ldrh	r3, [r3, #18]
 800a2e4:	b29b      	uxth	r3, r3
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	20000298 	.word	0x20000298

0800a2f4 <ui_Get_testsize>:

uint16_t ui_Get_testsize()
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	af00      	add	r7, sp, #0
	return xUSBDownloadVar.test_size;
 800a2f8:	4b03      	ldr	r3, [pc, #12]	; (800a308 <ui_Get_testsize+0x14>)
 800a2fa:	8a9b      	ldrh	r3, [r3, #20]
 800a2fc:	b29b      	uxth	r3, r3
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	20000298 	.word	0x20000298

0800a30c <ui_Get_flagmodel>:

uint8_t ui_Get_flagmodel()
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0
	return xUSBDownloadVar.flag_model;
 800a310:	4b03      	ldr	r3, [pc, #12]	; (800a320 <ui_Get_flagmodel+0x14>)
 800a312:	7c1b      	ldrb	r3, [r3, #16]
 800a314:	b2db      	uxtb	r3, r3
}
 800a316:	4618      	mov	r0, r3
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	20000298 	.word	0x20000298

0800a324 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a328:	2200      	movs	r2, #0
 800a32a:	4905      	ldr	r1, [pc, #20]	; (800a340 <CDC_Init_FS+0x1c>)
 800a32c:	4805      	ldr	r0, [pc, #20]	; (800a344 <CDC_Init_FS+0x20>)
 800a32e:	f7fe fd92 	bl	8008e56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a332:	4905      	ldr	r1, [pc, #20]	; (800a348 <CDC_Init_FS+0x24>)
 800a334:	4803      	ldr	r0, [pc, #12]	; (800a344 <CDC_Init_FS+0x20>)
 800a336:	f7fe fdac 	bl	8008e92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a33a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	20001058 	.word	0x20001058
 800a344:	20000588 	.word	0x20000588
 800a348:	20000858 	.word	0x20000858

0800a34c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a350:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a352:	4618      	mov	r0, r3
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	6039      	str	r1, [r7, #0]
 800a366:	71fb      	strb	r3, [r7, #7]
 800a368:	4613      	mov	r3, r2
 800a36a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a36c:	79fb      	ldrb	r3, [r7, #7]
 800a36e:	2b23      	cmp	r3, #35	; 0x23
 800a370:	d84a      	bhi.n	800a408 <CDC_Control_FS+0xac>
 800a372:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <CDC_Control_FS+0x1c>)
 800a374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a378:	0800a409 	.word	0x0800a409
 800a37c:	0800a409 	.word	0x0800a409
 800a380:	0800a409 	.word	0x0800a409
 800a384:	0800a409 	.word	0x0800a409
 800a388:	0800a409 	.word	0x0800a409
 800a38c:	0800a409 	.word	0x0800a409
 800a390:	0800a409 	.word	0x0800a409
 800a394:	0800a409 	.word	0x0800a409
 800a398:	0800a409 	.word	0x0800a409
 800a39c:	0800a409 	.word	0x0800a409
 800a3a0:	0800a409 	.word	0x0800a409
 800a3a4:	0800a409 	.word	0x0800a409
 800a3a8:	0800a409 	.word	0x0800a409
 800a3ac:	0800a409 	.word	0x0800a409
 800a3b0:	0800a409 	.word	0x0800a409
 800a3b4:	0800a409 	.word	0x0800a409
 800a3b8:	0800a409 	.word	0x0800a409
 800a3bc:	0800a409 	.word	0x0800a409
 800a3c0:	0800a409 	.word	0x0800a409
 800a3c4:	0800a409 	.word	0x0800a409
 800a3c8:	0800a409 	.word	0x0800a409
 800a3cc:	0800a409 	.word	0x0800a409
 800a3d0:	0800a409 	.word	0x0800a409
 800a3d4:	0800a409 	.word	0x0800a409
 800a3d8:	0800a409 	.word	0x0800a409
 800a3dc:	0800a409 	.word	0x0800a409
 800a3e0:	0800a409 	.word	0x0800a409
 800a3e4:	0800a409 	.word	0x0800a409
 800a3e8:	0800a409 	.word	0x0800a409
 800a3ec:	0800a409 	.word	0x0800a409
 800a3f0:	0800a409 	.word	0x0800a409
 800a3f4:	0800a409 	.word	0x0800a409
 800a3f8:	0800a409 	.word	0x0800a409
 800a3fc:	0800a409 	.word	0x0800a409
 800a400:	0800a409 	.word	0x0800a409
 800a404:	0800a409 	.word	0x0800a409
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a408:	bf00      	nop
  }

  return (USBD_OK);
 800a40a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a418:	b5b0      	push	{r4, r5, r7, lr}
 800a41a:	b09e      	sub	sp, #120	; 0x78
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
	uint8_t	Aux_Buffer[16];
	uint8_t dig_count;
	uint16_t num;
	static	uint16_t	PacketCount = 0;
	static uint32_t		Flash_BaseAddr;
	int i = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	673b      	str	r3, [r7, #112]	; 0x70
	static uint32_t		flash_cont = 0;

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	48c3      	ldr	r0, [pc, #780]	; (800a738 <CDC_Receive_FS+0x320>)
 800a42a:	f7fe fd32 	bl	8008e92 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a42e:	48c2      	ldr	r0, [pc, #776]	; (800a738 <CDC_Receive_FS+0x320>)
 800a430:	f7fe fd78 	bl	8008f24 <USBD_CDC_ReceivePacket>

	if(xUSBDownloadVar.RxMode == true)
 800a434:	4bc1      	ldr	r3, [pc, #772]	; (800a73c <CDC_Receive_FS+0x324>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d06a      	beq.n	800a514 <CDC_Receive_FS+0xfc>
	{
		USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	48bd      	ldr	r0, [pc, #756]	; (800a738 <CDC_Receive_FS+0x320>)
 800a442:	f7fe fd26 	bl	8008e92 <USBD_CDC_SetRxBuffer>
		USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a446:	48bc      	ldr	r0, [pc, #752]	; (800a738 <CDC_Receive_FS+0x320>)
 800a448:	f7fe fd6c 	bl	8008f24 <USBD_CDC_ReceivePacket>
		for(i = 0; i<(*Len); i++)
 800a44c:	2300      	movs	r3, #0
 800a44e:	673b      	str	r3, [r7, #112]	; 0x70
 800a450:	e019      	b.n	800a486 <CDC_Receive_FS+0x6e>
		{
			HAL_FLASH_Unlock();
 800a452:	f7fa fb67 	bl	8004b24 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (flash_cont + i), Buf[i]);
 800a456:	4bba      	ldr	r3, [pc, #744]	; (800a740 <CDC_Receive_FS+0x328>)
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a45c:	18d1      	adds	r1, r2, r3
 800a45e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	4413      	add	r3, r2
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	b2da      	uxtb	r2, r3
 800a468:	f04f 0300 	mov.w	r3, #0
 800a46c:	2000      	movs	r0, #0
 800a46e:	f7fa fb05 	bl	8004a7c <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 800a472:	f7fa fb79 	bl	8004b68 <HAL_FLASH_Lock>
			Buf[i]=0;
 800a476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	4413      	add	r3, r2
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]
		for(i = 0; i<(*Len); i++)
 800a480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a482:	3301      	adds	r3, #1
 800a484:	673b      	str	r3, [r7, #112]	; 0x70
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d8e0      	bhi.n	800a452 <CDC_Receive_FS+0x3a>
		}
		flash_cont += *Len;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	4baa      	ldr	r3, [pc, #680]	; (800a740 <CDC_Receive_FS+0x328>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4413      	add	r3, r2
 800a49a:	4aa9      	ldr	r2, [pc, #676]	; (800a740 <CDC_Receive_FS+0x328>)
 800a49c:	6013      	str	r3, [r2, #0]

		PacketCount++;
 800a49e:	4ba9      	ldr	r3, [pc, #676]	; (800a744 <CDC_Receive_FS+0x32c>)
 800a4a0:	881b      	ldrh	r3, [r3, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	4ba7      	ldr	r3, [pc, #668]	; (800a744 <CDC_Receive_FS+0x32c>)
 800a4a8:	801a      	strh	r2, [r3, #0]
		//if(PacketCount >= ((xUSBDownloadVar.Size+(PACKET_SIZE-1))/PACKET_SIZE))
		if((flash_cont - Flash_BaseAddr) >= xUSBDownloadVar.Size)
 800a4aa:	4ba5      	ldr	r3, [pc, #660]	; (800a740 <CDC_Receive_FS+0x328>)
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	4ba6      	ldr	r3, [pc, #664]	; (800a748 <CDC_Receive_FS+0x330>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	1ad2      	subs	r2, r2, r3
 800a4b4:	4ba1      	ldr	r3, [pc, #644]	; (800a73c <CDC_Receive_FS+0x324>)
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	f0c0 820e 	bcc.w	800a8da <CDC_Receive_FS+0x4c2>
		{
			xUSBDownloadVar.RxMode	=	false;
 800a4be:	4b9f      	ldr	r3, [pc, #636]	; (800a73c <CDC_Receive_FS+0x324>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	701a      	strb	r2, [r3, #0]
			strncpy((char*)Tx_Buffer, "File Received.\0", 15);
 800a4c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4c8:	4aa0      	ldr	r2, [pc, #640]	; (800a74c <CDC_Receive_FS+0x334>)
 800a4ca:	461c      	mov	r4, r3
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a4d0:	c407      	stmia	r4!, {r0, r1, r2}
 800a4d2:	8023      	strh	r3, [r4, #0]
 800a4d4:	3402      	adds	r4, #2
 800a4d6:	0c1b      	lsrs	r3, r3, #16
 800a4d8:	7023      	strb	r3, [r4, #0]
			CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 800a4da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7f5 fe72 	bl	80001c8 <strlen>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fa20 	bl	800a934 <CDC_Transmit_FS>
			switch(xUSBDownloadVar.DataType)
 800a4f4:	4b91      	ldr	r3, [pc, #580]	; (800a73c <CDC_Receive_FS+0x324>)
 800a4f6:	7a1b      	ldrb	r3, [r3, #8]
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	f000 81ef 	beq.w	800a8de <CDC_Receive_FS+0x4c6>
 800a500:	2b02      	cmp	r3, #2
 800a502:	f300 81ee 	bgt.w	800a8e2 <CDC_Receive_FS+0x4ca>
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 81ed 	beq.w	800a8e6 <CDC_Receive_FS+0x4ce>
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	f000 81ec 	beq.w	800a8ea <CDC_Receive_FS+0x4d2>
			case DATATYPE_FLOATMODEL:
				break;
			case DATATYPE_INTMODEL:
				break;
			default:
				break;
 800a512:	e1e6      	b.n	800a8e2 <CDC_Receive_FS+0x4ca>
			}
		}
	}
	else
	{
		switch(Buf[0])
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	3b44      	subs	r3, #68	; 0x44
 800a51a:	2b0f      	cmp	r3, #15
 800a51c:	f200 81e7 	bhi.w	800a8ee <CDC_Receive_FS+0x4d6>
 800a520:	a201      	add	r2, pc, #4	; (adr r2, 800a528 <CDC_Receive_FS+0x110>)
 800a522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a526:	bf00      	nop
 800a528:	0800a5df 	.word	0x0800a5df
 800a52c:	0800a8ef 	.word	0x0800a8ef
 800a530:	0800a8ef 	.word	0x0800a8ef
 800a534:	0800a8ef 	.word	0x0800a8ef
 800a538:	0800a8ef 	.word	0x0800a8ef
 800a53c:	0800a69b 	.word	0x0800a69b
 800a540:	0800a8ef 	.word	0x0800a8ef
 800a544:	0800a8ef 	.word	0x0800a8ef
 800a548:	0800a8ef 	.word	0x0800a8ef
 800a54c:	0800a7ed 	.word	0x0800a7ed
 800a550:	0800a8ef 	.word	0x0800a8ef
 800a554:	0800a8ef 	.word	0x0800a8ef
 800a558:	0800a8ef 	.word	0x0800a8ef
 800a55c:	0800a8ef 	.word	0x0800a8ef
 800a560:	0800a879 	.word	0x0800a879
 800a564:	0800a569 	.word	0x0800a569
		{
			case	USB_MODE_TRANSFER_SIZE:
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a568:	6879      	ldr	r1, [r7, #4]
 800a56a:	4873      	ldr	r0, [pc, #460]	; (800a738 <CDC_Receive_FS+0x320>)
 800a56c:	f7fe fc91 	bl	8008e92 <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a570:	4871      	ldr	r0, [pc, #452]	; (800a738 <CDC_Receive_FS+0x320>)
 800a572:	f7fe fcd7 	bl	8008f24 <USBD_CDC_ReceivePacket>

				free(xUSBDownloadVar.DataBuffer);
 800a576:	4b71      	ldr	r3, [pc, #452]	; (800a73c <CDC_Receive_FS+0x324>)
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 fe86 	bl	800b28c <free>
				xUSBDownloadVar.Size = atoi((char*)&Buf[POS_TRANSFER_SIZE]);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3302      	adds	r3, #2
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fe31 	bl	800b1ec <atoi>
 800a58a:	4603      	mov	r3, r0
 800a58c:	461a      	mov	r2, r3
 800a58e:	4b6b      	ldr	r3, [pc, #428]	; (800a73c <CDC_Receive_FS+0x324>)
 800a590:	605a      	str	r2, [r3, #4]

				strncpy((char*)Tx_Buffer, "Size Received for Data Transfer: ", 36);
 800a592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a596:	2224      	movs	r2, #36	; 0x24
 800a598:	496d      	ldr	r1, [pc, #436]	; (800a750 <CDC_Receive_FS+0x338>)
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 ff6f 	bl	800b47e <strncpy>
				itoa(xUSBDownloadVar.Size, (char*)Aux_Buffer,10);
 800a5a0:	4b66      	ldr	r3, [pc, #408]	; (800a73c <CDC_Receive_FS+0x324>)
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f107 0320 	add.w	r3, r7, #32
 800a5aa:	220a      	movs	r2, #10
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	f000 fe63 	bl	800b278 <itoa>
				strcat((char*)Tx_Buffer, (char*)Aux_Buffer);
 800a5b2:	f107 0220 	add.w	r2, r7, #32
 800a5b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 ff3d 	bl	800b43c <strcat>
				strcat((char*)Tx_Buffer, "\0");

				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 800a5c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7f5 fdfe 	bl	80001c8 <strlen>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 f9ac 	bl	800a934 <CDC_Transmit_FS>
			break;
 800a5dc:	e18a      	b.n	800a8f4 <CDC_Receive_FS+0x4dc>

			case	USB_MODE_TRANSFER_DATATYPE:
				if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "dataset", 7) == 0)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3302      	adds	r3, #2
 800a5e2:	2207      	movs	r2, #7
 800a5e4:	495b      	ldr	r1, [pc, #364]	; (800a754 <CDC_Receive_FS+0x33c>)
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 ff37 	bl	800b45a <strncmp>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10a      	bne.n	800a608 <CDC_Receive_FS+0x1f0>
				{
					xUSBDownloadVar.DataType = DATATYPE_DATASET;
 800a5f2:	4b52      	ldr	r3, [pc, #328]	; (800a73c <CDC_Receive_FS+0x324>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	721a      	strb	r2, [r3, #8]
					strncpy((char*)Tx_Buffer, "Data Type: dataset\0", 20);
 800a5f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5fc:	2214      	movs	r2, #20
 800a5fe:	4956      	ldr	r1, [pc, #344]	; (800a758 <CDC_Receive_FS+0x340>)
 800a600:	4618      	mov	r0, r3
 800a602:	f000 ff3c 	bl	800b47e <strncpy>
 800a606:	e033      	b.n	800a670 <CDC_Receive_FS+0x258>
				}
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "float model", 11) == 0)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3302      	adds	r3, #2
 800a60c:	220b      	movs	r2, #11
 800a60e:	4953      	ldr	r1, [pc, #332]	; (800a75c <CDC_Receive_FS+0x344>)
 800a610:	4618      	mov	r0, r3
 800a612:	f000 ff22 	bl	800b45a <strncmp>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10a      	bne.n	800a632 <CDC_Receive_FS+0x21a>
				{
					xUSBDownloadVar.DataType = DATATYPE_FLOATMODEL;
 800a61c:	4b47      	ldr	r3, [pc, #284]	; (800a73c <CDC_Receive_FS+0x324>)
 800a61e:	2201      	movs	r2, #1
 800a620:	721a      	strb	r2, [r3, #8]
					strncpy((char*)Tx_Buffer, "Data Type: float model\0", 33);
 800a622:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a626:	2221      	movs	r2, #33	; 0x21
 800a628:	494d      	ldr	r1, [pc, #308]	; (800a760 <CDC_Receive_FS+0x348>)
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 ff27 	bl	800b47e <strncpy>
 800a630:	e01e      	b.n	800a670 <CDC_Receive_FS+0x258>
				}
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int model", 9) == 0)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	3302      	adds	r3, #2
 800a636:	2209      	movs	r2, #9
 800a638:	494a      	ldr	r1, [pc, #296]	; (800a764 <CDC_Receive_FS+0x34c>)
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 ff0d 	bl	800b45a <strncmp>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d10a      	bne.n	800a65c <CDC_Receive_FS+0x244>
				{
					xUSBDownloadVar.DataType = DATATYPE_INTMODEL;
 800a646:	4b3d      	ldr	r3, [pc, #244]	; (800a73c <CDC_Receive_FS+0x324>)
 800a648:	2202      	movs	r2, #2
 800a64a:	721a      	strb	r2, [r3, #8]
					strncpy((char*)Tx_Buffer, "Data Type: int model\0", 33);
 800a64c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a650:	2221      	movs	r2, #33	; 0x21
 800a652:	4945      	ldr	r1, [pc, #276]	; (800a768 <CDC_Receive_FS+0x350>)
 800a654:	4618      	mov	r0, r3
 800a656:	f000 ff12 	bl	800b47e <strncpy>
 800a65a:	e009      	b.n	800a670 <CDC_Receive_FS+0x258>
				}
				else
				{
					xUSBDownloadVar.DataType = 0xff;
 800a65c:	4b37      	ldr	r3, [pc, #220]	; (800a73c <CDC_Receive_FS+0x324>)
 800a65e:	22ff      	movs	r2, #255	; 0xff
 800a660:	721a      	strb	r2, [r3, #8]
					strncpy((char*)Tx_Buffer, "Data Type: Error\0", 33);
 800a662:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a666:	2221      	movs	r2, #33	; 0x21
 800a668:	4940      	ldr	r1, [pc, #256]	; (800a76c <CDC_Receive_FS+0x354>)
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 ff07 	bl	800b47e <strncpy>
				}
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	4831      	ldr	r0, [pc, #196]	; (800a738 <CDC_Receive_FS+0x320>)
 800a674:	f7fe fc0d 	bl	8008e92 <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a678:	482f      	ldr	r0, [pc, #188]	; (800a738 <CDC_Receive_FS+0x320>)
 800a67a:	f7fe fc53 	bl	8008f24 <USBD_CDC_ReceivePacket>

				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 800a67e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a682:	4618      	mov	r0, r3
 800a684:	f7f5 fda0 	bl	80001c8 <strlen>
 800a688:	4603      	mov	r3, r0
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a690:	4611      	mov	r1, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f000 f94e 	bl	800a934 <CDC_Transmit_FS>
			break;
 800a698:	e12c      	b.n	800a8f4 <CDC_Receive_FS+0x4dc>

			case	USB_MODE_INITTRANSFER:;
				/* Flash Erase Variables */
				uint32_t SectorError;
				FLASH_EraseInitTypeDef xFlash_Erase;
				xFlash_Erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 800a69a:	2300      	movs	r3, #0
 800a69c:	60bb      	str	r3, [r7, #8]
				xFlash_Erase.NbSectors = 1;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	617b      	str	r3, [r7, #20]
				xFlash_Erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	61bb      	str	r3, [r7, #24]

				/* Flash Sector Erase */
				HAL_FLASH_Unlock();
 800a6a6:	f7fa fa3d 	bl	8004b24 <HAL_FLASH_Unlock>
				switch(xUSBDownloadVar.DataType)
 800a6aa:	4b24      	ldr	r3, [pc, #144]	; (800a73c <CDC_Receive_FS+0x324>)
 800a6ac:	7a1b      	ldrb	r3, [r3, #8]
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d061      	beq.n	800a778 <CDC_Receive_FS+0x360>
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	dc6d      	bgt.n	800a794 <CDC_Receive_FS+0x37c>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <CDC_Receive_FS+0x2aa>
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d02c      	beq.n	800a71a <CDC_Receive_FS+0x302>
 800a6c0:	e068      	b.n	800a794 <CDC_Receive_FS+0x37c>
				{
				case DATATYPE_DATASET	:
					xFlash_Erase.Sector = FLASH_SECTOR_6;
 800a6c2:	2306      	movs	r3, #6
 800a6c4:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 800a6c6:	f107 021c 	add.w	r2, r7, #28
 800a6ca:	f107 0308 	add.w	r3, r7, #8
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fa fb89 	bl	8004de8 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_7;
 800a6d6:	2307      	movs	r3, #7
 800a6d8:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 800a6da:	f107 021c 	add.w	r2, r7, #28
 800a6de:	f107 0308 	add.w	r3, r7, #8
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fa fb7f 	bl	8004de8 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_8;
 800a6ea:	2308      	movs	r3, #8
 800a6ec:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 800a6ee:	f107 021c 	add.w	r2, r7, #28
 800a6f2:	f107 0308 	add.w	r3, r7, #8
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fa fb75 	bl	8004de8 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_9;
 800a6fe:	2309      	movs	r3, #9
 800a700:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 800a702:	f107 021c 	add.w	r2, r7, #28
 800a706:	f107 0308 	add.w	r3, r7, #8
 800a70a:	4611      	mov	r1, r2
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fa fb6b 	bl	8004de8 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_DATASET;
 800a712:	4b0d      	ldr	r3, [pc, #52]	; (800a748 <CDC_Receive_FS+0x330>)
 800a714:	4a16      	ldr	r2, [pc, #88]	; (800a770 <CDC_Receive_FS+0x358>)
 800a716:	601a      	str	r2, [r3, #0]
					break;
 800a718:	e03c      	b.n	800a794 <CDC_Receive_FS+0x37c>
				case DATATYPE_FLOATMODEL:
					xFlash_Erase.Sector = FLASH_SECTOR_10;
 800a71a:	230a      	movs	r3, #10
 800a71c:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 800a71e:	f107 021c 	add.w	r2, r7, #28
 800a722:	f107 0308 	add.w	r3, r7, #8
 800a726:	4611      	mov	r1, r2
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fa fb5d 	bl	8004de8 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_FLOATMODEL;
 800a72e:	4b06      	ldr	r3, [pc, #24]	; (800a748 <CDC_Receive_FS+0x330>)
 800a730:	4a10      	ldr	r2, [pc, #64]	; (800a774 <CDC_Receive_FS+0x35c>)
 800a732:	601a      	str	r2, [r3, #0]
					break;
 800a734:	e02e      	b.n	800a794 <CDC_Receive_FS+0x37c>
 800a736:	bf00      	nop
 800a738:	20000588 	.word	0x20000588
 800a73c:	20000298 	.word	0x20000298
 800a740:	200002b0 	.word	0x200002b0
 800a744:	200002b4 	.word	0x200002b4
 800a748:	200002b8 	.word	0x200002b8
 800a74c:	0800b80c 	.word	0x0800b80c
 800a750:	0800b81c 	.word	0x0800b81c
 800a754:	0800b840 	.word	0x0800b840
 800a758:	0800b848 	.word	0x0800b848
 800a75c:	0800b85c 	.word	0x0800b85c
 800a760:	0800b868 	.word	0x0800b868
 800a764:	0800b880 	.word	0x0800b880
 800a768:	0800b88c 	.word	0x0800b88c
 800a76c:	0800b8a4 	.word	0x0800b8a4
 800a770:	08040000 	.word	0x08040000
 800a774:	080c0000 	.word	0x080c0000
				case DATATYPE_INTMODEL:
					xFlash_Erase.Sector = FLASH_SECTOR_11;
 800a778:	230b      	movs	r3, #11
 800a77a:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 800a77c:	f107 021c 	add.w	r2, r7, #28
 800a780:	f107 0308 	add.w	r3, r7, #8
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7fa fb2e 	bl	8004de8 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_INTMODEL;
 800a78c:	4b5c      	ldr	r3, [pc, #368]	; (800a900 <CDC_Receive_FS+0x4e8>)
 800a78e:	4a5d      	ldr	r2, [pc, #372]	; (800a904 <CDC_Receive_FS+0x4ec>)
 800a790:	601a      	str	r2, [r3, #0]
					break;
 800a792:	bf00      	nop
				}
				HAL_FLASH_Lock();
 800a794:	f7fa f9e8 	bl	8004b68 <HAL_FLASH_Lock>

				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a798:	6879      	ldr	r1, [r7, #4]
 800a79a:	485b      	ldr	r0, [pc, #364]	; (800a908 <CDC_Receive_FS+0x4f0>)
 800a79c:	f7fe fb79 	bl	8008e92 <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a7a0:	4859      	ldr	r0, [pc, #356]	; (800a908 <CDC_Receive_FS+0x4f0>)
 800a7a2:	f7fe fbbf 	bl	8008f24 <USBD_CDC_ReceivePacket>
				PacketCount					=	0;
 800a7a6:	4b59      	ldr	r3, [pc, #356]	; (800a90c <CDC_Receive_FS+0x4f4>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	801a      	strh	r2, [r3, #0]
				xUSBDownloadVar.RxMode		=	true;
 800a7ac:	4b58      	ldr	r3, [pc, #352]	; (800a910 <CDC_Receive_FS+0x4f8>)
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	701a      	strb	r2, [r3, #0]
				strncpy((char*)Tx_Buffer, "FLASH Sections Erased. \0", 24);
 800a7b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7b6:	4a57      	ldr	r2, [pc, #348]	; (800a914 <CDC_Receive_FS+0x4fc>)
 800a7b8:	461c      	mov	r4, r3
 800a7ba:	4615      	mov	r5, r2
 800a7bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a7c4:	e884 0003 	stmia.w	r4, {r0, r1}
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 800a7c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7f5 fcfb 	bl	80001c8 <strlen>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7da:	4611      	mov	r1, r2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f000 f8a9 	bl	800a934 <CDC_Transmit_FS>
				flash_cont = Flash_BaseAddr;
 800a7e2:	4b47      	ldr	r3, [pc, #284]	; (800a900 <CDC_Receive_FS+0x4e8>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a4c      	ldr	r2, [pc, #304]	; (800a918 <CDC_Receive_FS+0x500>)
 800a7e8:	6013      	str	r3, [r2, #0]
			break;
 800a7ea:	e083      	b.n	800a8f4 <CDC_Receive_FS+0x4dc>

			case USB_MODE_SELMODEL:
				if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "float", 5) == 0)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3302      	adds	r3, #2
 800a7f0:	2205      	movs	r2, #5
 800a7f2:	494a      	ldr	r1, [pc, #296]	; (800a91c <CDC_Receive_FS+0x504>)
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f000 fe30 	bl	800b45a <strncmp>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d103      	bne.n	800a808 <CDC_Receive_FS+0x3f0>
					xUSBDownloadVar.flag_model = FLAGMODEL_FLOAT;
 800a800:	4b43      	ldr	r3, [pc, #268]	; (800a910 <CDC_Receive_FS+0x4f8>)
 800a802:	2201      	movs	r2, #1
 800a804:	741a      	strb	r2, [r3, #16]
					xUSBDownloadVar.flag_model = FLAGMODEL_INT8;
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 16", 6) == 0)
					xUSBDownloadVar.flag_model = FLAGMODEL_INT16;
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 32", 6) == 0)
					xUSBDownloadVar.flag_model = FLAGMODEL_INT32;
				break;
 800a806:	e074      	b.n	800a8f2 <CDC_Receive_FS+0x4da>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 4", 5) == 0)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3302      	adds	r3, #2
 800a80c:	2205      	movs	r2, #5
 800a80e:	4944      	ldr	r1, [pc, #272]	; (800a920 <CDC_Receive_FS+0x508>)
 800a810:	4618      	mov	r0, r3
 800a812:	f000 fe22 	bl	800b45a <strncmp>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d103      	bne.n	800a824 <CDC_Receive_FS+0x40c>
					xUSBDownloadVar.flag_model = FLAGMODEL_INT4;
 800a81c:	4b3c      	ldr	r3, [pc, #240]	; (800a910 <CDC_Receive_FS+0x4f8>)
 800a81e:	2202      	movs	r2, #2
 800a820:	741a      	strb	r2, [r3, #16]
				break;
 800a822:	e066      	b.n	800a8f2 <CDC_Receive_FS+0x4da>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 8", 5) == 0)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3302      	adds	r3, #2
 800a828:	2205      	movs	r2, #5
 800a82a:	493e      	ldr	r1, [pc, #248]	; (800a924 <CDC_Receive_FS+0x50c>)
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 fe14 	bl	800b45a <strncmp>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d103      	bne.n	800a840 <CDC_Receive_FS+0x428>
					xUSBDownloadVar.flag_model = FLAGMODEL_INT8;
 800a838:	4b35      	ldr	r3, [pc, #212]	; (800a910 <CDC_Receive_FS+0x4f8>)
 800a83a:	2204      	movs	r2, #4
 800a83c:	741a      	strb	r2, [r3, #16]
				break;
 800a83e:	e058      	b.n	800a8f2 <CDC_Receive_FS+0x4da>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 16", 6) == 0)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3302      	adds	r3, #2
 800a844:	2206      	movs	r2, #6
 800a846:	4938      	ldr	r1, [pc, #224]	; (800a928 <CDC_Receive_FS+0x510>)
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 fe06 	bl	800b45a <strncmp>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d103      	bne.n	800a85c <CDC_Receive_FS+0x444>
					xUSBDownloadVar.flag_model = FLAGMODEL_INT16;
 800a854:	4b2e      	ldr	r3, [pc, #184]	; (800a910 <CDC_Receive_FS+0x4f8>)
 800a856:	2208      	movs	r2, #8
 800a858:	741a      	strb	r2, [r3, #16]
				break;
 800a85a:	e04a      	b.n	800a8f2 <CDC_Receive_FS+0x4da>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 32", 6) == 0)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3302      	adds	r3, #2
 800a860:	2206      	movs	r2, #6
 800a862:	4932      	ldr	r1, [pc, #200]	; (800a92c <CDC_Receive_FS+0x514>)
 800a864:	4618      	mov	r0, r3
 800a866:	f000 fdf8 	bl	800b45a <strncmp>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d140      	bne.n	800a8f2 <CDC_Receive_FS+0x4da>
					xUSBDownloadVar.flag_model = FLAGMODEL_INT32;
 800a870:	4b27      	ldr	r3, [pc, #156]	; (800a910 <CDC_Receive_FS+0x4f8>)
 800a872:	2210      	movs	r2, #16
 800a874:	741a      	strb	r2, [r3, #16]
				break;
 800a876:	e03c      	b.n	800a8f2 <CDC_Receive_FS+0x4da>

			case USB_MODE_RUN:
				xUSBDownloadVar.flag_run = true;
 800a878:	4b25      	ldr	r3, [pc, #148]	; (800a910 <CDC_Receive_FS+0x4f8>)
 800a87a:	2201      	movs	r2, #1
 800a87c:	745a      	strb	r2, [r3, #17]
				xUSBDownloadVar.test_index = atoi((char*)&Buf[POS_TRANSFER_SIZE]);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	3302      	adds	r3, #2
 800a882:	4618      	mov	r0, r3
 800a884:	f000 fcb2 	bl	800b1ec <atoi>
 800a888:	4603      	mov	r3, r0
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	4b20      	ldr	r3, [pc, #128]	; (800a910 <CDC_Receive_FS+0x4f8>)
 800a88e:	825a      	strh	r2, [r3, #18]
				num = xUSBDownloadVar.test_index;
 800a890:	4b1f      	ldr	r3, [pc, #124]	; (800a910 <CDC_Receive_FS+0x4f8>)
 800a892:	8a5b      	ldrh	r3, [r3, #18]
 800a894:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
				dig_count = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				do
				{
					dig_count++;
 800a89e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					num /= 10;
 800a8a8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800a8ac:	4a20      	ldr	r2, [pc, #128]	; (800a930 <CDC_Receive_FS+0x518>)
 800a8ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b2:	08db      	lsrs	r3, r3, #3
 800a8b4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
				} while(num != 0);
 800a8b8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1ee      	bne.n	800a89e <CDC_Receive_FS+0x486>

				xUSBDownloadVar.test_size = atoi((char*)&Buf[POS_TRANSFER_SIZE + dig_count + 1]);
 800a8c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a8c4:	3303      	adds	r3, #3
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fc8e 	bl	800b1ec <atoi>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	4b0e      	ldr	r3, [pc, #56]	; (800a910 <CDC_Receive_FS+0x4f8>)
 800a8d6:	829a      	strh	r2, [r3, #20]
				break;
 800a8d8:	e00c      	b.n	800a8f4 <CDC_Receive_FS+0x4dc>
		}
 800a8da:	bf00      	nop
 800a8dc:	e00a      	b.n	800a8f4 <CDC_Receive_FS+0x4dc>
				break;
 800a8de:	bf00      	nop
 800a8e0:	e008      	b.n	800a8f4 <CDC_Receive_FS+0x4dc>
				break;
 800a8e2:	bf00      	nop
 800a8e4:	e006      	b.n	800a8f4 <CDC_Receive_FS+0x4dc>
				break;
 800a8e6:	bf00      	nop
 800a8e8:	e004      	b.n	800a8f4 <CDC_Receive_FS+0x4dc>
				break;
 800a8ea:	bf00      	nop
 800a8ec:	e002      	b.n	800a8f4 <CDC_Receive_FS+0x4dc>

			default:
				break;
 800a8ee:	bf00      	nop
 800a8f0:	e000      	b.n	800a8f4 <CDC_Receive_FS+0x4dc>
				break;
 800a8f2:	bf00      	nop
		}
	}
	return (USBD_OK);
 800a8f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3778      	adds	r7, #120	; 0x78
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a8fe:	bf00      	nop
 800a900:	200002b8 	.word	0x200002b8
 800a904:	080e0000 	.word	0x080e0000
 800a908:	20000588 	.word	0x20000588
 800a90c:	200002b4 	.word	0x200002b4
 800a910:	20000298 	.word	0x20000298
 800a914:	0800b8b8 	.word	0x0800b8b8
 800a918:	200002b0 	.word	0x200002b0
 800a91c:	0800b8d4 	.word	0x0800b8d4
 800a920:	0800b8dc 	.word	0x0800b8dc
 800a924:	0800b8e4 	.word	0x0800b8e4
 800a928:	0800b8ec 	.word	0x0800b8ec
 800a92c:	0800b8f4 	.word	0x0800b8f4
 800a930:	cccccccd 	.word	0xcccccccd

0800a934 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a940:	2300      	movs	r3, #0
 800a942:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a944:	4b0d      	ldr	r3, [pc, #52]	; (800a97c <CDC_Transmit_FS+0x48>)
 800a946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a94a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a956:	2301      	movs	r3, #1
 800a958:	e00b      	b.n	800a972 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a95a:	887b      	ldrh	r3, [r7, #2]
 800a95c:	461a      	mov	r2, r3
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	4806      	ldr	r0, [pc, #24]	; (800a97c <CDC_Transmit_FS+0x48>)
 800a962:	f7fe fa78 	bl	8008e56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a966:	4805      	ldr	r0, [pc, #20]	; (800a97c <CDC_Transmit_FS+0x48>)
 800a968:	f7fe faac 	bl	8008ec4 <USBD_CDC_TransmitPacket>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	20000588 	.word	0x20000588

0800a980 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a980:	b480      	push	{r7}
 800a982:	b087      	sub	sp, #28
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	4613      	mov	r3, r2
 800a98c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a996:	4618      	mov	r0, r3
 800a998:	371c      	adds	r7, #28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
	...

0800a9a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	6039      	str	r1, [r7, #0]
 800a9ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2212      	movs	r2, #18
 800a9b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9b6:	4b03      	ldr	r3, [pc, #12]	; (800a9c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	2000014c 	.word	0x2000014c

0800a9c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	6039      	str	r1, [r7, #0]
 800a9d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2204      	movs	r2, #4
 800a9d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a9da:	4b03      	ldr	r3, [pc, #12]	; (800a9e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	20000160 	.word	0x20000160

0800a9ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	6039      	str	r1, [r7, #0]
 800a9f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9f8:	79fb      	ldrb	r3, [r7, #7]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d105      	bne.n	800aa0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	4907      	ldr	r1, [pc, #28]	; (800aa20 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa02:	4808      	ldr	r0, [pc, #32]	; (800aa24 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa04:	f7ff fb41 	bl	800a08a <USBD_GetString>
 800aa08:	e004      	b.n	800aa14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	4904      	ldr	r1, [pc, #16]	; (800aa20 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa0e:	4805      	ldr	r0, [pc, #20]	; (800aa24 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa10:	f7ff fb3b 	bl	800a08a <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa14:	4b02      	ldr	r3, [pc, #8]	; (800aa20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20001858 	.word	0x20001858
 800aa24:	0800b8fc 	.word	0x0800b8fc

0800aa28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	4603      	mov	r3, r0
 800aa30:	6039      	str	r1, [r7, #0]
 800aa32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	4904      	ldr	r1, [pc, #16]	; (800aa48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa38:	4804      	ldr	r0, [pc, #16]	; (800aa4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa3a:	f7ff fb26 	bl	800a08a <USBD_GetString>
  return USBD_StrDesc;
 800aa3e:	4b02      	ldr	r3, [pc, #8]	; (800aa48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	20001858 	.word	0x20001858
 800aa4c:	0800b914 	.word	0x0800b914

0800aa50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	6039      	str	r1, [r7, #0]
 800aa5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	221a      	movs	r2, #26
 800aa60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa62:	f000 f843 	bl	800aaec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa66:	4b02      	ldr	r3, [pc, #8]	; (800aa70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	20000164 	.word	0x20000164

0800aa74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	6039      	str	r1, [r7, #0]
 800aa7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d105      	bne.n	800aa92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	4907      	ldr	r1, [pc, #28]	; (800aaa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa8a:	4808      	ldr	r0, [pc, #32]	; (800aaac <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa8c:	f7ff fafd 	bl	800a08a <USBD_GetString>
 800aa90:	e004      	b.n	800aa9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	4904      	ldr	r1, [pc, #16]	; (800aaa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa96:	4805      	ldr	r0, [pc, #20]	; (800aaac <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa98:	f7ff faf7 	bl	800a08a <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa9c:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20001858 	.word	0x20001858
 800aaac:	0800b928 	.word	0x0800b928

0800aab0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	4603      	mov	r3, r0
 800aab8:	6039      	str	r1, [r7, #0]
 800aaba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aabc:	79fb      	ldrb	r3, [r7, #7]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d105      	bne.n	800aace <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	4907      	ldr	r1, [pc, #28]	; (800aae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aac6:	4808      	ldr	r0, [pc, #32]	; (800aae8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aac8:	f7ff fadf 	bl	800a08a <USBD_GetString>
 800aacc:	e004      	b.n	800aad8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	4904      	ldr	r1, [pc, #16]	; (800aae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aad2:	4805      	ldr	r0, [pc, #20]	; (800aae8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aad4:	f7ff fad9 	bl	800a08a <USBD_GetString>
  }
  return USBD_StrDesc;
 800aad8:	4b02      	ldr	r3, [pc, #8]	; (800aae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20001858 	.word	0x20001858
 800aae8:	0800b934 	.word	0x0800b934

0800aaec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aaf2:	4b0f      	ldr	r3, [pc, #60]	; (800ab30 <Get_SerialNum+0x44>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aaf8:	4b0e      	ldr	r3, [pc, #56]	; (800ab34 <Get_SerialNum+0x48>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aafe:	4b0e      	ldr	r3, [pc, #56]	; (800ab38 <Get_SerialNum+0x4c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4413      	add	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d009      	beq.n	800ab26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab12:	2208      	movs	r2, #8
 800ab14:	4909      	ldr	r1, [pc, #36]	; (800ab3c <Get_SerialNum+0x50>)
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 f814 	bl	800ab44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	4908      	ldr	r1, [pc, #32]	; (800ab40 <Get_SerialNum+0x54>)
 800ab20:	68b8      	ldr	r0, [r7, #8]
 800ab22:	f000 f80f 	bl	800ab44 <IntToUnicode>
  }
}
 800ab26:	bf00      	nop
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	1fff7a10 	.word	0x1fff7a10
 800ab34:	1fff7a14 	.word	0x1fff7a14
 800ab38:	1fff7a18 	.word	0x1fff7a18
 800ab3c:	20000166 	.word	0x20000166
 800ab40:	20000176 	.word	0x20000176

0800ab44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab56:	2300      	movs	r3, #0
 800ab58:	75fb      	strb	r3, [r7, #23]
 800ab5a:	e027      	b.n	800abac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	0f1b      	lsrs	r3, r3, #28
 800ab60:	2b09      	cmp	r3, #9
 800ab62:	d80b      	bhi.n	800ab7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	0f1b      	lsrs	r3, r3, #28
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	7dfb      	ldrb	r3, [r7, #23]
 800ab6c:	005b      	lsls	r3, r3, #1
 800ab6e:	4619      	mov	r1, r3
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	440b      	add	r3, r1
 800ab74:	3230      	adds	r2, #48	; 0x30
 800ab76:	b2d2      	uxtb	r2, r2
 800ab78:	701a      	strb	r2, [r3, #0]
 800ab7a:	e00a      	b.n	800ab92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	0f1b      	lsrs	r3, r3, #28
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	4619      	mov	r1, r3
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	440b      	add	r3, r1
 800ab8c:	3237      	adds	r2, #55	; 0x37
 800ab8e:	b2d2      	uxtb	r2, r2
 800ab90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	011b      	lsls	r3, r3, #4
 800ab96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	4413      	add	r3, r2
 800aba2:	2200      	movs	r2, #0
 800aba4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	3301      	adds	r3, #1
 800abaa:	75fb      	strb	r3, [r7, #23]
 800abac:	7dfa      	ldrb	r2, [r7, #23]
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d3d3      	bcc.n	800ab5c <IntToUnicode+0x18>
  }
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop
 800abb8:	371c      	adds	r7, #28
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
	...

0800abc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08a      	sub	sp, #40	; 0x28
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abcc:	f107 0314 	add.w	r3, r7, #20
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	605a      	str	r2, [r3, #4]
 800abd6:	609a      	str	r2, [r3, #8]
 800abd8:	60da      	str	r2, [r3, #12]
 800abda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abe4:	d13a      	bne.n	800ac5c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abe6:	2300      	movs	r3, #0
 800abe8:	613b      	str	r3, [r7, #16]
 800abea:	4b1e      	ldr	r3, [pc, #120]	; (800ac64 <HAL_PCD_MspInit+0xa0>)
 800abec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abee:	4a1d      	ldr	r2, [pc, #116]	; (800ac64 <HAL_PCD_MspInit+0xa0>)
 800abf0:	f043 0301 	orr.w	r3, r3, #1
 800abf4:	6313      	str	r3, [r2, #48]	; 0x30
 800abf6:	4b1b      	ldr	r3, [pc, #108]	; (800ac64 <HAL_PCD_MspInit+0xa0>)
 800abf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	613b      	str	r3, [r7, #16]
 800ac00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ac02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ac06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac08:	2302      	movs	r3, #2
 800ac0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac10:	2303      	movs	r3, #3
 800ac12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac14:	230a      	movs	r3, #10
 800ac16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac18:	f107 0314 	add.w	r3, r7, #20
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	4812      	ldr	r0, [pc, #72]	; (800ac68 <HAL_PCD_MspInit+0xa4>)
 800ac20:	f7fa fa04 	bl	800502c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac24:	4b0f      	ldr	r3, [pc, #60]	; (800ac64 <HAL_PCD_MspInit+0xa0>)
 800ac26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac28:	4a0e      	ldr	r2, [pc, #56]	; (800ac64 <HAL_PCD_MspInit+0xa0>)
 800ac2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac2e:	6353      	str	r3, [r2, #52]	; 0x34
 800ac30:	2300      	movs	r3, #0
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	4b0b      	ldr	r3, [pc, #44]	; (800ac64 <HAL_PCD_MspInit+0xa0>)
 800ac36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac38:	4a0a      	ldr	r2, [pc, #40]	; (800ac64 <HAL_PCD_MspInit+0xa0>)
 800ac3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac3e:	6453      	str	r3, [r2, #68]	; 0x44
 800ac40:	4b08      	ldr	r3, [pc, #32]	; (800ac64 <HAL_PCD_MspInit+0xa0>)
 800ac42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2100      	movs	r1, #0
 800ac50:	2043      	movs	r0, #67	; 0x43
 800ac52:	f7f9 fedc 	bl	8004a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac56:	2043      	movs	r0, #67	; 0x43
 800ac58:	f7f9 fef5 	bl	8004a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac5c:	bf00      	nop
 800ac5e:	3728      	adds	r7, #40	; 0x28
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	40023800 	.word	0x40023800
 800ac68:	40020000 	.word	0x40020000

0800ac6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ac80:	4619      	mov	r1, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	f7fe fa1a 	bl	80090bc <USBD_LL_SetupStage>
}
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aca2:	78fa      	ldrb	r2, [r7, #3]
 800aca4:	6879      	ldr	r1, [r7, #4]
 800aca6:	4613      	mov	r3, r2
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	1a9b      	subs	r3, r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	440b      	add	r3, r1
 800acb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	78fb      	ldrb	r3, [r7, #3]
 800acb8:	4619      	mov	r1, r3
 800acba:	f7fe fa54 	bl	8009166 <USBD_LL_DataOutStage>
}
 800acbe:	bf00      	nop
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	460b      	mov	r3, r1
 800acd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800acd8:	78fa      	ldrb	r2, [r7, #3]
 800acda:	6879      	ldr	r1, [r7, #4]
 800acdc:	4613      	mov	r3, r2
 800acde:	00db      	lsls	r3, r3, #3
 800ace0:	1a9b      	subs	r3, r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	440b      	add	r3, r1
 800ace6:	3348      	adds	r3, #72	; 0x48
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	78fb      	ldrb	r3, [r7, #3]
 800acec:	4619      	mov	r1, r3
 800acee:	f7fe fa9d 	bl	800922c <USBD_LL_DataInStage>
}
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fe fbb1 	bl	8009470 <USBD_LL_SOF>
}
 800ad0e:	bf00      	nop
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d102      	bne.n	800ad30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	73fb      	strb	r3, [r7, #15]
 800ad2e:	e008      	b.n	800ad42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d102      	bne.n	800ad3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	73fb      	strb	r3, [r7, #15]
 800ad3c:	e001      	b.n	800ad42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ad3e:	f7f9 fbef 	bl	8004520 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad48:	7bfa      	ldrb	r2, [r7, #15]
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fe fb51 	bl	80093f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe fafd 	bl	8009358 <USBD_LL_Reset>
}
 800ad5e:	bf00      	nop
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fe fb4c 	bl	8009414 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	6812      	ldr	r2, [r2, #0]
 800ad8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad8e:	f043 0301 	orr.w	r3, r3, #1
 800ad92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d005      	beq.n	800ada8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad9c:	4b04      	ldr	r3, [pc, #16]	; (800adb0 <HAL_PCD_SuspendCallback+0x48>)
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	4a03      	ldr	r2, [pc, #12]	; (800adb0 <HAL_PCD_SuspendCallback+0x48>)
 800ada2:	f043 0306 	orr.w	r3, r3, #6
 800ada6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ada8:	bf00      	nop
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	e000ed00 	.word	0xe000ed00

0800adb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe fb3c 	bl	8009440 <USBD_LL_Resume>
}
 800adc8:	bf00      	nop
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	460b      	mov	r3, r1
 800adda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ade2:	78fa      	ldrb	r2, [r7, #3]
 800ade4:	4611      	mov	r1, r2
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe fb8a 	bl	8009500 <USBD_LL_IsoOUTIncomplete>
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	460b      	mov	r3, r1
 800adfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae06:	78fa      	ldrb	r2, [r7, #3]
 800ae08:	4611      	mov	r1, r2
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe fb52 	bl	80094b4 <USBD_LL_IsoINIncomplete>
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fe fb90 	bl	800954c <USBD_LL_DevConnected>
}
 800ae2c:	bf00      	nop
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fe fb8d 	bl	8009562 <USBD_LL_DevDisconnected>
}
 800ae48:	bf00      	nop
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d13c      	bne.n	800aeda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae60:	4a20      	ldr	r2, [pc, #128]	; (800aee4 <USBD_LL_Init+0x94>)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a1e      	ldr	r2, [pc, #120]	; (800aee4 <USBD_LL_Init+0x94>)
 800ae6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae70:	4b1c      	ldr	r3, [pc, #112]	; (800aee4 <USBD_LL_Init+0x94>)
 800ae72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ae76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ae78:	4b1a      	ldr	r3, [pc, #104]	; (800aee4 <USBD_LL_Init+0x94>)
 800ae7a:	2204      	movs	r2, #4
 800ae7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae7e:	4b19      	ldr	r3, [pc, #100]	; (800aee4 <USBD_LL_Init+0x94>)
 800ae80:	2202      	movs	r2, #2
 800ae82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae84:	4b17      	ldr	r3, [pc, #92]	; (800aee4 <USBD_LL_Init+0x94>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae8a:	4b16      	ldr	r3, [pc, #88]	; (800aee4 <USBD_LL_Init+0x94>)
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae90:	4b14      	ldr	r3, [pc, #80]	; (800aee4 <USBD_LL_Init+0x94>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ae96:	4b13      	ldr	r3, [pc, #76]	; (800aee4 <USBD_LL_Init+0x94>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ae9c:	4b11      	ldr	r3, [pc, #68]	; (800aee4 <USBD_LL_Init+0x94>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aea2:	4b10      	ldr	r3, [pc, #64]	; (800aee4 <USBD_LL_Init+0x94>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aea8:	4b0e      	ldr	r3, [pc, #56]	; (800aee4 <USBD_LL_Init+0x94>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aeae:	480d      	ldr	r0, [pc, #52]	; (800aee4 <USBD_LL_Init+0x94>)
 800aeb0:	f7fa fa58 	bl	8005364 <HAL_PCD_Init>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aeba:	f7f9 fb31 	bl	8004520 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aebe:	2180      	movs	r1, #128	; 0x80
 800aec0:	4808      	ldr	r0, [pc, #32]	; (800aee4 <USBD_LL_Init+0x94>)
 800aec2:	f7fb fbb6 	bl	8006632 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aec6:	2240      	movs	r2, #64	; 0x40
 800aec8:	2100      	movs	r1, #0
 800aeca:	4806      	ldr	r0, [pc, #24]	; (800aee4 <USBD_LL_Init+0x94>)
 800aecc:	f7fb fb6a 	bl	80065a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aed0:	2280      	movs	r2, #128	; 0x80
 800aed2:	2101      	movs	r1, #1
 800aed4:	4803      	ldr	r0, [pc, #12]	; (800aee4 <USBD_LL_Init+0x94>)
 800aed6:	f7fb fb65 	bl	80065a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	20001a58 	.word	0x20001a58

0800aee8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fa fb4d 	bl	800559e <HAL_PCD_Start>
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 f942 	bl	800b194 <USBD_Get_USB_Status>
 800af10:	4603      	mov	r3, r0
 800af12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af14:	7bbb      	ldrb	r3, [r7, #14]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b084      	sub	sp, #16
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	4608      	mov	r0, r1
 800af28:	4611      	mov	r1, r2
 800af2a:	461a      	mov	r2, r3
 800af2c:	4603      	mov	r3, r0
 800af2e:	70fb      	strb	r3, [r7, #3]
 800af30:	460b      	mov	r3, r1
 800af32:	70bb      	strb	r3, [r7, #2]
 800af34:	4613      	mov	r3, r2
 800af36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af46:	78bb      	ldrb	r3, [r7, #2]
 800af48:	883a      	ldrh	r2, [r7, #0]
 800af4a:	78f9      	ldrb	r1, [r7, #3]
 800af4c:	f7fa ff31 	bl	8005db2 <HAL_PCD_EP_Open>
 800af50:	4603      	mov	r3, r0
 800af52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af54:	7bfb      	ldrb	r3, [r7, #15]
 800af56:	4618      	mov	r0, r3
 800af58:	f000 f91c 	bl	800b194 <USBD_Get_USB_Status>
 800af5c:	4603      	mov	r3, r0
 800af5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af60:	7bbb      	ldrb	r3, [r7, #14]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	460b      	mov	r3, r1
 800af74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af76:	2300      	movs	r3, #0
 800af78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af84:	78fa      	ldrb	r2, [r7, #3]
 800af86:	4611      	mov	r1, r2
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fa ff7a 	bl	8005e82 <HAL_PCD_EP_Close>
 800af8e:	4603      	mov	r3, r0
 800af90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	4618      	mov	r0, r3
 800af96:	f000 f8fd 	bl	800b194 <USBD_Get_USB_Status>
 800af9a:	4603      	mov	r3, r0
 800af9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afb4:	2300      	movs	r3, #0
 800afb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afc2:	78fa      	ldrb	r2, [r7, #3]
 800afc4:	4611      	mov	r1, r2
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fb f852 	bl	8006070 <HAL_PCD_EP_SetStall>
 800afcc:	4603      	mov	r3, r0
 800afce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 f8de 	bl	800b194 <USBD_Get_USB_Status>
 800afd8:	4603      	mov	r3, r0
 800afda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b084      	sub	sp, #16
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	460b      	mov	r3, r1
 800aff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff2:	2300      	movs	r3, #0
 800aff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b000:	78fa      	ldrb	r2, [r7, #3]
 800b002:	4611      	mov	r1, r2
 800b004:	4618      	mov	r0, r3
 800b006:	f7fb f897 	bl	8006138 <HAL_PCD_EP_ClrStall>
 800b00a:	4603      	mov	r3, r0
 800b00c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b00e:	7bfb      	ldrb	r3, [r7, #15]
 800b010:	4618      	mov	r0, r3
 800b012:	f000 f8bf 	bl	800b194 <USBD_Get_USB_Status>
 800b016:	4603      	mov	r3, r0
 800b018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b01a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	460b      	mov	r3, r1
 800b02e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b036:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	da0b      	bge.n	800b058 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b046:	68f9      	ldr	r1, [r7, #12]
 800b048:	4613      	mov	r3, r2
 800b04a:	00db      	lsls	r3, r3, #3
 800b04c:	1a9b      	subs	r3, r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	440b      	add	r3, r1
 800b052:	333e      	adds	r3, #62	; 0x3e
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	e00b      	b.n	800b070 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b058:	78fb      	ldrb	r3, [r7, #3]
 800b05a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b05e:	68f9      	ldr	r1, [r7, #12]
 800b060:	4613      	mov	r3, r2
 800b062:	00db      	lsls	r3, r3, #3
 800b064:	1a9b      	subs	r3, r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	440b      	add	r3, r1
 800b06a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b06e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b070:	4618      	mov	r0, r3
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b088:	2300      	movs	r3, #0
 800b08a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b096:	78fa      	ldrb	r2, [r7, #3]
 800b098:	4611      	mov	r1, r2
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fa fe64 	bl	8005d68 <HAL_PCD_SetAddress>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 f874 	bl	800b194 <USBD_Get_USB_Status>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b086      	sub	sp, #24
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	603b      	str	r3, [r7, #0]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0d8:	7af9      	ldrb	r1, [r7, #11]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	f7fa ff7d 	bl	8005fdc <HAL_PCD_EP_Transmit>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e6:	7dfb      	ldrb	r3, [r7, #23]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 f853 	bl	800b194 <USBD_Get_USB_Status>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3718      	adds	r7, #24
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	607a      	str	r2, [r7, #4]
 800b106:	603b      	str	r3, [r7, #0]
 800b108:	460b      	mov	r3, r1
 800b10a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b11a:	7af9      	ldrb	r1, [r7, #11]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	f7fa fef9 	bl	8005f16 <HAL_PCD_EP_Receive>
 800b124:	4603      	mov	r3, r0
 800b126:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 f832 	bl	800b194 <USBD_Get_USB_Status>
 800b130:	4603      	mov	r3, r0
 800b132:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b134:	7dbb      	ldrb	r3, [r7, #22]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b082      	sub	sp, #8
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
 800b146:	460b      	mov	r3, r1
 800b148:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b150:	78fa      	ldrb	r2, [r7, #3]
 800b152:	4611      	mov	r1, r2
 800b154:	4618      	mov	r0, r3
 800b156:	f7fa ff29 	bl	8005fac <HAL_PCD_EP_GetRxCount>
 800b15a:	4603      	mov	r3, r0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b16c:	4b03      	ldr	r3, [pc, #12]	; (800b17c <USBD_static_malloc+0x18>)
}
 800b16e:	4618      	mov	r0, r3
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	200002bc 	.word	0x200002bc

0800b180 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]

}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	4603      	mov	r3, r0
 800b19c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d817      	bhi.n	800b1d8 <USBD_Get_USB_Status+0x44>
 800b1a8:	a201      	add	r2, pc, #4	; (adr r2, 800b1b0 <USBD_Get_USB_Status+0x1c>)
 800b1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ae:	bf00      	nop
 800b1b0:	0800b1c1 	.word	0x0800b1c1
 800b1b4:	0800b1c7 	.word	0x0800b1c7
 800b1b8:	0800b1cd 	.word	0x0800b1cd
 800b1bc:	0800b1d3 	.word	0x0800b1d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1c4:	e00b      	b.n	800b1de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ca:	e008      	b.n	800b1de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b1d0:	e005      	b.n	800b1de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1d2:	2303      	movs	r3, #3
 800b1d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b1d6:	e002      	b.n	800b1de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b1d8:	2303      	movs	r3, #3
 800b1da:	73fb      	strb	r3, [r7, #15]
    break;
 800b1dc:	bf00      	nop
  }
  return usb_status;
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <atoi>:
 800b1ec:	220a      	movs	r2, #10
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	f000 b9dc 	b.w	800b5ac <strtol>

0800b1f4 <__errno>:
 800b1f4:	4b01      	ldr	r3, [pc, #4]	; (800b1fc <__errno+0x8>)
 800b1f6:	6818      	ldr	r0, [r3, #0]
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	20000180 	.word	0x20000180

0800b200 <__libc_init_array>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	4d0d      	ldr	r5, [pc, #52]	; (800b238 <__libc_init_array+0x38>)
 800b204:	4c0d      	ldr	r4, [pc, #52]	; (800b23c <__libc_init_array+0x3c>)
 800b206:	1b64      	subs	r4, r4, r5
 800b208:	10a4      	asrs	r4, r4, #2
 800b20a:	2600      	movs	r6, #0
 800b20c:	42a6      	cmp	r6, r4
 800b20e:	d109      	bne.n	800b224 <__libc_init_array+0x24>
 800b210:	4d0b      	ldr	r5, [pc, #44]	; (800b240 <__libc_init_array+0x40>)
 800b212:	4c0c      	ldr	r4, [pc, #48]	; (800b244 <__libc_init_array+0x44>)
 800b214:	f000 faee 	bl	800b7f4 <_init>
 800b218:	1b64      	subs	r4, r4, r5
 800b21a:	10a4      	asrs	r4, r4, #2
 800b21c:	2600      	movs	r6, #0
 800b21e:	42a6      	cmp	r6, r4
 800b220:	d105      	bne.n	800b22e <__libc_init_array+0x2e>
 800b222:	bd70      	pop	{r4, r5, r6, pc}
 800b224:	f855 3b04 	ldr.w	r3, [r5], #4
 800b228:	4798      	blx	r3
 800b22a:	3601      	adds	r6, #1
 800b22c:	e7ee      	b.n	800b20c <__libc_init_array+0xc>
 800b22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b232:	4798      	blx	r3
 800b234:	3601      	adds	r6, #1
 800b236:	e7f2      	b.n	800b21e <__libc_init_array+0x1e>
 800b238:	0800ba84 	.word	0x0800ba84
 800b23c:	0800ba84 	.word	0x0800ba84
 800b240:	0800ba84 	.word	0x0800ba84
 800b244:	0800ba88 	.word	0x0800ba88

0800b248 <__itoa>:
 800b248:	1e93      	subs	r3, r2, #2
 800b24a:	2b22      	cmp	r3, #34	; 0x22
 800b24c:	b510      	push	{r4, lr}
 800b24e:	460c      	mov	r4, r1
 800b250:	d904      	bls.n	800b25c <__itoa+0x14>
 800b252:	2300      	movs	r3, #0
 800b254:	700b      	strb	r3, [r1, #0]
 800b256:	461c      	mov	r4, r3
 800b258:	4620      	mov	r0, r4
 800b25a:	bd10      	pop	{r4, pc}
 800b25c:	2a0a      	cmp	r2, #10
 800b25e:	d109      	bne.n	800b274 <__itoa+0x2c>
 800b260:	2800      	cmp	r0, #0
 800b262:	da07      	bge.n	800b274 <__itoa+0x2c>
 800b264:	232d      	movs	r3, #45	; 0x2d
 800b266:	700b      	strb	r3, [r1, #0]
 800b268:	4240      	negs	r0, r0
 800b26a:	2101      	movs	r1, #1
 800b26c:	4421      	add	r1, r4
 800b26e:	f000 f9a7 	bl	800b5c0 <__utoa>
 800b272:	e7f1      	b.n	800b258 <__itoa+0x10>
 800b274:	2100      	movs	r1, #0
 800b276:	e7f9      	b.n	800b26c <__itoa+0x24>

0800b278 <itoa>:
 800b278:	f7ff bfe6 	b.w	800b248 <__itoa>

0800b27c <malloc>:
 800b27c:	4b02      	ldr	r3, [pc, #8]	; (800b288 <malloc+0xc>)
 800b27e:	4601      	mov	r1, r0
 800b280:	6818      	ldr	r0, [r3, #0]
 800b282:	f000 b871 	b.w	800b368 <_malloc_r>
 800b286:	bf00      	nop
 800b288:	20000180 	.word	0x20000180

0800b28c <free>:
 800b28c:	4b02      	ldr	r3, [pc, #8]	; (800b298 <free+0xc>)
 800b28e:	4601      	mov	r1, r0
 800b290:	6818      	ldr	r0, [r3, #0]
 800b292:	f000 b819 	b.w	800b2c8 <_free_r>
 800b296:	bf00      	nop
 800b298:	20000180 	.word	0x20000180

0800b29c <memcpy>:
 800b29c:	440a      	add	r2, r1
 800b29e:	4291      	cmp	r1, r2
 800b2a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2a4:	d100      	bne.n	800b2a8 <memcpy+0xc>
 800b2a6:	4770      	bx	lr
 800b2a8:	b510      	push	{r4, lr}
 800b2aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2b2:	4291      	cmp	r1, r2
 800b2b4:	d1f9      	bne.n	800b2aa <memcpy+0xe>
 800b2b6:	bd10      	pop	{r4, pc}

0800b2b8 <memset>:
 800b2b8:	4402      	add	r2, r0
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d100      	bne.n	800b2c2 <memset+0xa>
 800b2c0:	4770      	bx	lr
 800b2c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b2c6:	e7f9      	b.n	800b2bc <memset+0x4>

0800b2c8 <_free_r>:
 800b2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2ca:	2900      	cmp	r1, #0
 800b2cc:	d048      	beq.n	800b360 <_free_r+0x98>
 800b2ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2d2:	9001      	str	r0, [sp, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b2da:	bfb8      	it	lt
 800b2dc:	18e4      	addlt	r4, r4, r3
 800b2de:	f000 f9b1 	bl	800b644 <__malloc_lock>
 800b2e2:	4a20      	ldr	r2, [pc, #128]	; (800b364 <_free_r+0x9c>)
 800b2e4:	9801      	ldr	r0, [sp, #4]
 800b2e6:	6813      	ldr	r3, [r2, #0]
 800b2e8:	4615      	mov	r5, r2
 800b2ea:	b933      	cbnz	r3, 800b2fa <_free_r+0x32>
 800b2ec:	6063      	str	r3, [r4, #4]
 800b2ee:	6014      	str	r4, [r2, #0]
 800b2f0:	b003      	add	sp, #12
 800b2f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2f6:	f000 b9ab 	b.w	800b650 <__malloc_unlock>
 800b2fa:	42a3      	cmp	r3, r4
 800b2fc:	d90b      	bls.n	800b316 <_free_r+0x4e>
 800b2fe:	6821      	ldr	r1, [r4, #0]
 800b300:	1862      	adds	r2, r4, r1
 800b302:	4293      	cmp	r3, r2
 800b304:	bf04      	itt	eq
 800b306:	681a      	ldreq	r2, [r3, #0]
 800b308:	685b      	ldreq	r3, [r3, #4]
 800b30a:	6063      	str	r3, [r4, #4]
 800b30c:	bf04      	itt	eq
 800b30e:	1852      	addeq	r2, r2, r1
 800b310:	6022      	streq	r2, [r4, #0]
 800b312:	602c      	str	r4, [r5, #0]
 800b314:	e7ec      	b.n	800b2f0 <_free_r+0x28>
 800b316:	461a      	mov	r2, r3
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	b10b      	cbz	r3, 800b320 <_free_r+0x58>
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	d9fa      	bls.n	800b316 <_free_r+0x4e>
 800b320:	6811      	ldr	r1, [r2, #0]
 800b322:	1855      	adds	r5, r2, r1
 800b324:	42a5      	cmp	r5, r4
 800b326:	d10b      	bne.n	800b340 <_free_r+0x78>
 800b328:	6824      	ldr	r4, [r4, #0]
 800b32a:	4421      	add	r1, r4
 800b32c:	1854      	adds	r4, r2, r1
 800b32e:	42a3      	cmp	r3, r4
 800b330:	6011      	str	r1, [r2, #0]
 800b332:	d1dd      	bne.n	800b2f0 <_free_r+0x28>
 800b334:	681c      	ldr	r4, [r3, #0]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	6053      	str	r3, [r2, #4]
 800b33a:	4421      	add	r1, r4
 800b33c:	6011      	str	r1, [r2, #0]
 800b33e:	e7d7      	b.n	800b2f0 <_free_r+0x28>
 800b340:	d902      	bls.n	800b348 <_free_r+0x80>
 800b342:	230c      	movs	r3, #12
 800b344:	6003      	str	r3, [r0, #0]
 800b346:	e7d3      	b.n	800b2f0 <_free_r+0x28>
 800b348:	6825      	ldr	r5, [r4, #0]
 800b34a:	1961      	adds	r1, r4, r5
 800b34c:	428b      	cmp	r3, r1
 800b34e:	bf04      	itt	eq
 800b350:	6819      	ldreq	r1, [r3, #0]
 800b352:	685b      	ldreq	r3, [r3, #4]
 800b354:	6063      	str	r3, [r4, #4]
 800b356:	bf04      	itt	eq
 800b358:	1949      	addeq	r1, r1, r5
 800b35a:	6021      	streq	r1, [r4, #0]
 800b35c:	6054      	str	r4, [r2, #4]
 800b35e:	e7c7      	b.n	800b2f0 <_free_r+0x28>
 800b360:	b003      	add	sp, #12
 800b362:	bd30      	pop	{r4, r5, pc}
 800b364:	200004dc 	.word	0x200004dc

0800b368 <_malloc_r>:
 800b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36a:	1ccd      	adds	r5, r1, #3
 800b36c:	f025 0503 	bic.w	r5, r5, #3
 800b370:	3508      	adds	r5, #8
 800b372:	2d0c      	cmp	r5, #12
 800b374:	bf38      	it	cc
 800b376:	250c      	movcc	r5, #12
 800b378:	2d00      	cmp	r5, #0
 800b37a:	4606      	mov	r6, r0
 800b37c:	db01      	blt.n	800b382 <_malloc_r+0x1a>
 800b37e:	42a9      	cmp	r1, r5
 800b380:	d903      	bls.n	800b38a <_malloc_r+0x22>
 800b382:	230c      	movs	r3, #12
 800b384:	6033      	str	r3, [r6, #0]
 800b386:	2000      	movs	r0, #0
 800b388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b38a:	f000 f95b 	bl	800b644 <__malloc_lock>
 800b38e:	4921      	ldr	r1, [pc, #132]	; (800b414 <_malloc_r+0xac>)
 800b390:	680a      	ldr	r2, [r1, #0]
 800b392:	4614      	mov	r4, r2
 800b394:	b99c      	cbnz	r4, 800b3be <_malloc_r+0x56>
 800b396:	4f20      	ldr	r7, [pc, #128]	; (800b418 <_malloc_r+0xb0>)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	b923      	cbnz	r3, 800b3a6 <_malloc_r+0x3e>
 800b39c:	4621      	mov	r1, r4
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f000 f83c 	bl	800b41c <_sbrk_r>
 800b3a4:	6038      	str	r0, [r7, #0]
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f000 f837 	bl	800b41c <_sbrk_r>
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	d123      	bne.n	800b3fa <_malloc_r+0x92>
 800b3b2:	230c      	movs	r3, #12
 800b3b4:	6033      	str	r3, [r6, #0]
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	f000 f94a 	bl	800b650 <__malloc_unlock>
 800b3bc:	e7e3      	b.n	800b386 <_malloc_r+0x1e>
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	1b5b      	subs	r3, r3, r5
 800b3c2:	d417      	bmi.n	800b3f4 <_malloc_r+0x8c>
 800b3c4:	2b0b      	cmp	r3, #11
 800b3c6:	d903      	bls.n	800b3d0 <_malloc_r+0x68>
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	441c      	add	r4, r3
 800b3cc:	6025      	str	r5, [r4, #0]
 800b3ce:	e004      	b.n	800b3da <_malloc_r+0x72>
 800b3d0:	6863      	ldr	r3, [r4, #4]
 800b3d2:	42a2      	cmp	r2, r4
 800b3d4:	bf0c      	ite	eq
 800b3d6:	600b      	streq	r3, [r1, #0]
 800b3d8:	6053      	strne	r3, [r2, #4]
 800b3da:	4630      	mov	r0, r6
 800b3dc:	f000 f938 	bl	800b650 <__malloc_unlock>
 800b3e0:	f104 000b 	add.w	r0, r4, #11
 800b3e4:	1d23      	adds	r3, r4, #4
 800b3e6:	f020 0007 	bic.w	r0, r0, #7
 800b3ea:	1ac2      	subs	r2, r0, r3
 800b3ec:	d0cc      	beq.n	800b388 <_malloc_r+0x20>
 800b3ee:	1a1b      	subs	r3, r3, r0
 800b3f0:	50a3      	str	r3, [r4, r2]
 800b3f2:	e7c9      	b.n	800b388 <_malloc_r+0x20>
 800b3f4:	4622      	mov	r2, r4
 800b3f6:	6864      	ldr	r4, [r4, #4]
 800b3f8:	e7cc      	b.n	800b394 <_malloc_r+0x2c>
 800b3fa:	1cc4      	adds	r4, r0, #3
 800b3fc:	f024 0403 	bic.w	r4, r4, #3
 800b400:	42a0      	cmp	r0, r4
 800b402:	d0e3      	beq.n	800b3cc <_malloc_r+0x64>
 800b404:	1a21      	subs	r1, r4, r0
 800b406:	4630      	mov	r0, r6
 800b408:	f000 f808 	bl	800b41c <_sbrk_r>
 800b40c:	3001      	adds	r0, #1
 800b40e:	d1dd      	bne.n	800b3cc <_malloc_r+0x64>
 800b410:	e7cf      	b.n	800b3b2 <_malloc_r+0x4a>
 800b412:	bf00      	nop
 800b414:	200004dc 	.word	0x200004dc
 800b418:	200004e0 	.word	0x200004e0

0800b41c <_sbrk_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	4d06      	ldr	r5, [pc, #24]	; (800b438 <_sbrk_r+0x1c>)
 800b420:	2300      	movs	r3, #0
 800b422:	4604      	mov	r4, r0
 800b424:	4608      	mov	r0, r1
 800b426:	602b      	str	r3, [r5, #0]
 800b428:	f7f9 f8f8 	bl	800461c <_sbrk>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_sbrk_r+0x1a>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	b103      	cbz	r3, 800b436 <_sbrk_r+0x1a>
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	20001e60 	.word	0x20001e60

0800b43c <strcat>:
 800b43c:	b510      	push	{r4, lr}
 800b43e:	4602      	mov	r2, r0
 800b440:	7814      	ldrb	r4, [r2, #0]
 800b442:	4613      	mov	r3, r2
 800b444:	3201      	adds	r2, #1
 800b446:	2c00      	cmp	r4, #0
 800b448:	d1fa      	bne.n	800b440 <strcat+0x4>
 800b44a:	3b01      	subs	r3, #1
 800b44c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b450:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b454:	2a00      	cmp	r2, #0
 800b456:	d1f9      	bne.n	800b44c <strcat+0x10>
 800b458:	bd10      	pop	{r4, pc}

0800b45a <strncmp>:
 800b45a:	b510      	push	{r4, lr}
 800b45c:	b16a      	cbz	r2, 800b47a <strncmp+0x20>
 800b45e:	3901      	subs	r1, #1
 800b460:	1884      	adds	r4, r0, r2
 800b462:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b466:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d103      	bne.n	800b476 <strncmp+0x1c>
 800b46e:	42a0      	cmp	r0, r4
 800b470:	d001      	beq.n	800b476 <strncmp+0x1c>
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1f5      	bne.n	800b462 <strncmp+0x8>
 800b476:	1a98      	subs	r0, r3, r2
 800b478:	bd10      	pop	{r4, pc}
 800b47a:	4610      	mov	r0, r2
 800b47c:	e7fc      	b.n	800b478 <strncmp+0x1e>

0800b47e <strncpy>:
 800b47e:	b510      	push	{r4, lr}
 800b480:	3901      	subs	r1, #1
 800b482:	4603      	mov	r3, r0
 800b484:	b132      	cbz	r2, 800b494 <strncpy+0x16>
 800b486:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b48a:	f803 4b01 	strb.w	r4, [r3], #1
 800b48e:	3a01      	subs	r2, #1
 800b490:	2c00      	cmp	r4, #0
 800b492:	d1f7      	bne.n	800b484 <strncpy+0x6>
 800b494:	441a      	add	r2, r3
 800b496:	2100      	movs	r1, #0
 800b498:	4293      	cmp	r3, r2
 800b49a:	d100      	bne.n	800b49e <strncpy+0x20>
 800b49c:	bd10      	pop	{r4, pc}
 800b49e:	f803 1b01 	strb.w	r1, [r3], #1
 800b4a2:	e7f9      	b.n	800b498 <strncpy+0x1a>

0800b4a4 <_strtol_l.isra.0>:
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4aa:	d001      	beq.n	800b4b0 <_strtol_l.isra.0+0xc>
 800b4ac:	2b24      	cmp	r3, #36	; 0x24
 800b4ae:	d906      	bls.n	800b4be <_strtol_l.isra.0+0x1a>
 800b4b0:	f7ff fea0 	bl	800b1f4 <__errno>
 800b4b4:	2316      	movs	r3, #22
 800b4b6:	6003      	str	r3, [r0, #0]
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4be:	4f3a      	ldr	r7, [pc, #232]	; (800b5a8 <_strtol_l.isra.0+0x104>)
 800b4c0:	468e      	mov	lr, r1
 800b4c2:	4676      	mov	r6, lr
 800b4c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b4c8:	5de5      	ldrb	r5, [r4, r7]
 800b4ca:	f015 0508 	ands.w	r5, r5, #8
 800b4ce:	d1f8      	bne.n	800b4c2 <_strtol_l.isra.0+0x1e>
 800b4d0:	2c2d      	cmp	r4, #45	; 0x2d
 800b4d2:	d134      	bne.n	800b53e <_strtol_l.isra.0+0x9a>
 800b4d4:	f89e 4000 	ldrb.w	r4, [lr]
 800b4d8:	f04f 0801 	mov.w	r8, #1
 800b4dc:	f106 0e02 	add.w	lr, r6, #2
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d05c      	beq.n	800b59e <_strtol_l.isra.0+0xfa>
 800b4e4:	2b10      	cmp	r3, #16
 800b4e6:	d10c      	bne.n	800b502 <_strtol_l.isra.0+0x5e>
 800b4e8:	2c30      	cmp	r4, #48	; 0x30
 800b4ea:	d10a      	bne.n	800b502 <_strtol_l.isra.0+0x5e>
 800b4ec:	f89e 4000 	ldrb.w	r4, [lr]
 800b4f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b4f4:	2c58      	cmp	r4, #88	; 0x58
 800b4f6:	d14d      	bne.n	800b594 <_strtol_l.isra.0+0xf0>
 800b4f8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b4fc:	2310      	movs	r3, #16
 800b4fe:	f10e 0e02 	add.w	lr, lr, #2
 800b502:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b506:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b50a:	2600      	movs	r6, #0
 800b50c:	fbbc f9f3 	udiv	r9, ip, r3
 800b510:	4635      	mov	r5, r6
 800b512:	fb03 ca19 	mls	sl, r3, r9, ip
 800b516:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b51a:	2f09      	cmp	r7, #9
 800b51c:	d818      	bhi.n	800b550 <_strtol_l.isra.0+0xac>
 800b51e:	463c      	mov	r4, r7
 800b520:	42a3      	cmp	r3, r4
 800b522:	dd24      	ble.n	800b56e <_strtol_l.isra.0+0xca>
 800b524:	2e00      	cmp	r6, #0
 800b526:	db1f      	blt.n	800b568 <_strtol_l.isra.0+0xc4>
 800b528:	45a9      	cmp	r9, r5
 800b52a:	d31d      	bcc.n	800b568 <_strtol_l.isra.0+0xc4>
 800b52c:	d101      	bne.n	800b532 <_strtol_l.isra.0+0x8e>
 800b52e:	45a2      	cmp	sl, r4
 800b530:	db1a      	blt.n	800b568 <_strtol_l.isra.0+0xc4>
 800b532:	fb05 4503 	mla	r5, r5, r3, r4
 800b536:	2601      	movs	r6, #1
 800b538:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b53c:	e7eb      	b.n	800b516 <_strtol_l.isra.0+0x72>
 800b53e:	2c2b      	cmp	r4, #43	; 0x2b
 800b540:	bf08      	it	eq
 800b542:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b546:	46a8      	mov	r8, r5
 800b548:	bf08      	it	eq
 800b54a:	f106 0e02 	addeq.w	lr, r6, #2
 800b54e:	e7c7      	b.n	800b4e0 <_strtol_l.isra.0+0x3c>
 800b550:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b554:	2f19      	cmp	r7, #25
 800b556:	d801      	bhi.n	800b55c <_strtol_l.isra.0+0xb8>
 800b558:	3c37      	subs	r4, #55	; 0x37
 800b55a:	e7e1      	b.n	800b520 <_strtol_l.isra.0+0x7c>
 800b55c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b560:	2f19      	cmp	r7, #25
 800b562:	d804      	bhi.n	800b56e <_strtol_l.isra.0+0xca>
 800b564:	3c57      	subs	r4, #87	; 0x57
 800b566:	e7db      	b.n	800b520 <_strtol_l.isra.0+0x7c>
 800b568:	f04f 36ff 	mov.w	r6, #4294967295
 800b56c:	e7e4      	b.n	800b538 <_strtol_l.isra.0+0x94>
 800b56e:	2e00      	cmp	r6, #0
 800b570:	da05      	bge.n	800b57e <_strtol_l.isra.0+0xda>
 800b572:	2322      	movs	r3, #34	; 0x22
 800b574:	6003      	str	r3, [r0, #0]
 800b576:	4665      	mov	r5, ip
 800b578:	b942      	cbnz	r2, 800b58c <_strtol_l.isra.0+0xe8>
 800b57a:	4628      	mov	r0, r5
 800b57c:	e79d      	b.n	800b4ba <_strtol_l.isra.0+0x16>
 800b57e:	f1b8 0f00 	cmp.w	r8, #0
 800b582:	d000      	beq.n	800b586 <_strtol_l.isra.0+0xe2>
 800b584:	426d      	negs	r5, r5
 800b586:	2a00      	cmp	r2, #0
 800b588:	d0f7      	beq.n	800b57a <_strtol_l.isra.0+0xd6>
 800b58a:	b10e      	cbz	r6, 800b590 <_strtol_l.isra.0+0xec>
 800b58c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b590:	6011      	str	r1, [r2, #0]
 800b592:	e7f2      	b.n	800b57a <_strtol_l.isra.0+0xd6>
 800b594:	2430      	movs	r4, #48	; 0x30
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1b3      	bne.n	800b502 <_strtol_l.isra.0+0x5e>
 800b59a:	2308      	movs	r3, #8
 800b59c:	e7b1      	b.n	800b502 <_strtol_l.isra.0+0x5e>
 800b59e:	2c30      	cmp	r4, #48	; 0x30
 800b5a0:	d0a4      	beq.n	800b4ec <_strtol_l.isra.0+0x48>
 800b5a2:	230a      	movs	r3, #10
 800b5a4:	e7ad      	b.n	800b502 <_strtol_l.isra.0+0x5e>
 800b5a6:	bf00      	nop
 800b5a8:	0800b97a 	.word	0x0800b97a

0800b5ac <strtol>:
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	460a      	mov	r2, r1
 800b5b0:	4601      	mov	r1, r0
 800b5b2:	4802      	ldr	r0, [pc, #8]	; (800b5bc <strtol+0x10>)
 800b5b4:	6800      	ldr	r0, [r0, #0]
 800b5b6:	f7ff bf75 	b.w	800b4a4 <_strtol_l.isra.0>
 800b5ba:	bf00      	nop
 800b5bc:	20000180 	.word	0x20000180

0800b5c0 <__utoa>:
 800b5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5c2:	4c1f      	ldr	r4, [pc, #124]	; (800b640 <__utoa+0x80>)
 800b5c4:	b08b      	sub	sp, #44	; 0x2c
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	466e      	mov	r6, sp
 800b5cc:	f104 0c20 	add.w	ip, r4, #32
 800b5d0:	6820      	ldr	r0, [r4, #0]
 800b5d2:	6861      	ldr	r1, [r4, #4]
 800b5d4:	4637      	mov	r7, r6
 800b5d6:	c703      	stmia	r7!, {r0, r1}
 800b5d8:	3408      	adds	r4, #8
 800b5da:	4564      	cmp	r4, ip
 800b5dc:	463e      	mov	r6, r7
 800b5de:	d1f7      	bne.n	800b5d0 <__utoa+0x10>
 800b5e0:	7921      	ldrb	r1, [r4, #4]
 800b5e2:	7139      	strb	r1, [r7, #4]
 800b5e4:	1e91      	subs	r1, r2, #2
 800b5e6:	6820      	ldr	r0, [r4, #0]
 800b5e8:	6038      	str	r0, [r7, #0]
 800b5ea:	2922      	cmp	r1, #34	; 0x22
 800b5ec:	f04f 0100 	mov.w	r1, #0
 800b5f0:	d904      	bls.n	800b5fc <__utoa+0x3c>
 800b5f2:	7019      	strb	r1, [r3, #0]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	b00b      	add	sp, #44	; 0x2c
 800b5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5fc:	1e58      	subs	r0, r3, #1
 800b5fe:	4684      	mov	ip, r0
 800b600:	fbb5 f7f2 	udiv	r7, r5, r2
 800b604:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b608:	fb02 5617 	mls	r6, r2, r7, r5
 800b60c:	4476      	add	r6, lr
 800b60e:	460c      	mov	r4, r1
 800b610:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b614:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b618:	462e      	mov	r6, r5
 800b61a:	42b2      	cmp	r2, r6
 800b61c:	f101 0101 	add.w	r1, r1, #1
 800b620:	463d      	mov	r5, r7
 800b622:	d9ed      	bls.n	800b600 <__utoa+0x40>
 800b624:	2200      	movs	r2, #0
 800b626:	545a      	strb	r2, [r3, r1]
 800b628:	1919      	adds	r1, r3, r4
 800b62a:	1aa5      	subs	r5, r4, r2
 800b62c:	42aa      	cmp	r2, r5
 800b62e:	dae2      	bge.n	800b5f6 <__utoa+0x36>
 800b630:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b634:	780e      	ldrb	r6, [r1, #0]
 800b636:	7006      	strb	r6, [r0, #0]
 800b638:	3201      	adds	r2, #1
 800b63a:	f801 5901 	strb.w	r5, [r1], #-1
 800b63e:	e7f4      	b.n	800b62a <__utoa+0x6a>
 800b640:	0800b954 	.word	0x0800b954

0800b644 <__malloc_lock>:
 800b644:	4801      	ldr	r0, [pc, #4]	; (800b64c <__malloc_lock+0x8>)
 800b646:	f000 b809 	b.w	800b65c <__retarget_lock_acquire_recursive>
 800b64a:	bf00      	nop
 800b64c:	20001e68 	.word	0x20001e68

0800b650 <__malloc_unlock>:
 800b650:	4801      	ldr	r0, [pc, #4]	; (800b658 <__malloc_unlock+0x8>)
 800b652:	f000 b804 	b.w	800b65e <__retarget_lock_release_recursive>
 800b656:	bf00      	nop
 800b658:	20001e68 	.word	0x20001e68

0800b65c <__retarget_lock_acquire_recursive>:
 800b65c:	4770      	bx	lr

0800b65e <__retarget_lock_release_recursive>:
 800b65e:	4770      	bx	lr

0800b660 <ceil>:
 800b660:	ec51 0b10 	vmov	r0, r1, d0
 800b664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b668:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b66c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b670:	2e13      	cmp	r6, #19
 800b672:	ee10 5a10 	vmov	r5, s0
 800b676:	ee10 8a10 	vmov	r8, s0
 800b67a:	460c      	mov	r4, r1
 800b67c:	dc30      	bgt.n	800b6e0 <ceil+0x80>
 800b67e:	2e00      	cmp	r6, #0
 800b680:	da12      	bge.n	800b6a8 <ceil+0x48>
 800b682:	a335      	add	r3, pc, #212	; (adr r3, 800b758 <ceil+0xf8>)
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f7f4 fdac 	bl	80001e4 <__adddf3>
 800b68c:	2200      	movs	r2, #0
 800b68e:	2300      	movs	r3, #0
 800b690:	f7f5 f9ee 	bl	8000a70 <__aeabi_dcmpgt>
 800b694:	b128      	cbz	r0, 800b6a2 <ceil+0x42>
 800b696:	2c00      	cmp	r4, #0
 800b698:	db55      	blt.n	800b746 <ceil+0xe6>
 800b69a:	432c      	orrs	r4, r5
 800b69c:	d057      	beq.n	800b74e <ceil+0xee>
 800b69e:	4c30      	ldr	r4, [pc, #192]	; (800b760 <ceil+0x100>)
 800b6a0:	2500      	movs	r5, #0
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	e025      	b.n	800b6f4 <ceil+0x94>
 800b6a8:	4f2e      	ldr	r7, [pc, #184]	; (800b764 <ceil+0x104>)
 800b6aa:	4137      	asrs	r7, r6
 800b6ac:	ea01 0307 	and.w	r3, r1, r7
 800b6b0:	4303      	orrs	r3, r0
 800b6b2:	d01f      	beq.n	800b6f4 <ceil+0x94>
 800b6b4:	a328      	add	r3, pc, #160	; (adr r3, 800b758 <ceil+0xf8>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	f7f4 fd93 	bl	80001e4 <__adddf3>
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f7f5 f9d5 	bl	8000a70 <__aeabi_dcmpgt>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d0eb      	beq.n	800b6a2 <ceil+0x42>
 800b6ca:	2c00      	cmp	r4, #0
 800b6cc:	bfc2      	ittt	gt
 800b6ce:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800b6d2:	fa43 f606 	asrgt.w	r6, r3, r6
 800b6d6:	19a4      	addgt	r4, r4, r6
 800b6d8:	ea24 0407 	bic.w	r4, r4, r7
 800b6dc:	2500      	movs	r5, #0
 800b6de:	e7e0      	b.n	800b6a2 <ceil+0x42>
 800b6e0:	2e33      	cmp	r6, #51	; 0x33
 800b6e2:	dd0b      	ble.n	800b6fc <ceil+0x9c>
 800b6e4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b6e8:	d104      	bne.n	800b6f4 <ceil+0x94>
 800b6ea:	ee10 2a10 	vmov	r2, s0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	f7f4 fd78 	bl	80001e4 <__adddf3>
 800b6f4:	ec41 0b10 	vmov	d0, r0, r1
 800b6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6fc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b700:	f04f 33ff 	mov.w	r3, #4294967295
 800b704:	fa23 f707 	lsr.w	r7, r3, r7
 800b708:	4207      	tst	r7, r0
 800b70a:	d0f3      	beq.n	800b6f4 <ceil+0x94>
 800b70c:	a312      	add	r3, pc, #72	; (adr r3, 800b758 <ceil+0xf8>)
 800b70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b712:	f7f4 fd67 	bl	80001e4 <__adddf3>
 800b716:	2200      	movs	r2, #0
 800b718:	2300      	movs	r3, #0
 800b71a:	f7f5 f9a9 	bl	8000a70 <__aeabi_dcmpgt>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d0bf      	beq.n	800b6a2 <ceil+0x42>
 800b722:	2c00      	cmp	r4, #0
 800b724:	dd02      	ble.n	800b72c <ceil+0xcc>
 800b726:	2e14      	cmp	r6, #20
 800b728:	d103      	bne.n	800b732 <ceil+0xd2>
 800b72a:	3401      	adds	r4, #1
 800b72c:	ea25 0507 	bic.w	r5, r5, r7
 800b730:	e7b7      	b.n	800b6a2 <ceil+0x42>
 800b732:	2301      	movs	r3, #1
 800b734:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b738:	fa03 f606 	lsl.w	r6, r3, r6
 800b73c:	4435      	add	r5, r6
 800b73e:	4545      	cmp	r5, r8
 800b740:	bf38      	it	cc
 800b742:	18e4      	addcc	r4, r4, r3
 800b744:	e7f2      	b.n	800b72c <ceil+0xcc>
 800b746:	2500      	movs	r5, #0
 800b748:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b74c:	e7a9      	b.n	800b6a2 <ceil+0x42>
 800b74e:	4625      	mov	r5, r4
 800b750:	e7a7      	b.n	800b6a2 <ceil+0x42>
 800b752:	bf00      	nop
 800b754:	f3af 8000 	nop.w
 800b758:	8800759c 	.word	0x8800759c
 800b75c:	7e37e43c 	.word	0x7e37e43c
 800b760:	3ff00000 	.word	0x3ff00000
 800b764:	000fffff 	.word	0x000fffff

0800b768 <round>:
 800b768:	ec51 0b10 	vmov	r0, r1, d0
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800b772:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800b776:	2c13      	cmp	r4, #19
 800b778:	ee10 2a10 	vmov	r2, s0
 800b77c:	460b      	mov	r3, r1
 800b77e:	dc19      	bgt.n	800b7b4 <round+0x4c>
 800b780:	2c00      	cmp	r4, #0
 800b782:	da09      	bge.n	800b798 <round+0x30>
 800b784:	3401      	adds	r4, #1
 800b786:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800b78a:	d103      	bne.n	800b794 <round+0x2c>
 800b78c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b790:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b794:	2100      	movs	r1, #0
 800b796:	e028      	b.n	800b7ea <round+0x82>
 800b798:	4d15      	ldr	r5, [pc, #84]	; (800b7f0 <round+0x88>)
 800b79a:	4125      	asrs	r5, r4
 800b79c:	ea01 0605 	and.w	r6, r1, r5
 800b7a0:	4332      	orrs	r2, r6
 800b7a2:	d00e      	beq.n	800b7c2 <round+0x5a>
 800b7a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b7a8:	fa42 f404 	asr.w	r4, r2, r4
 800b7ac:	4423      	add	r3, r4
 800b7ae:	ea23 0305 	bic.w	r3, r3, r5
 800b7b2:	e7ef      	b.n	800b794 <round+0x2c>
 800b7b4:	2c33      	cmp	r4, #51	; 0x33
 800b7b6:	dd07      	ble.n	800b7c8 <round+0x60>
 800b7b8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800b7bc:	d101      	bne.n	800b7c2 <round+0x5a>
 800b7be:	f7f4 fd11 	bl	80001e4 <__adddf3>
 800b7c2:	ec41 0b10 	vmov	d0, r0, r1
 800b7c6:	bd70      	pop	{r4, r5, r6, pc}
 800b7c8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800b7cc:	f04f 35ff 	mov.w	r5, #4294967295
 800b7d0:	40f5      	lsrs	r5, r6
 800b7d2:	4228      	tst	r0, r5
 800b7d4:	d0f5      	beq.n	800b7c2 <round+0x5a>
 800b7d6:	2101      	movs	r1, #1
 800b7d8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800b7dc:	fa01 f404 	lsl.w	r4, r1, r4
 800b7e0:	1912      	adds	r2, r2, r4
 800b7e2:	bf28      	it	cs
 800b7e4:	185b      	addcs	r3, r3, r1
 800b7e6:	ea22 0105 	bic.w	r1, r2, r5
 800b7ea:	4608      	mov	r0, r1
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	e7e8      	b.n	800b7c2 <round+0x5a>
 800b7f0:	000fffff 	.word	0x000fffff

0800b7f4 <_init>:
 800b7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f6:	bf00      	nop
 800b7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7fa:	bc08      	pop	{r3}
 800b7fc:	469e      	mov	lr, r3
 800b7fe:	4770      	bx	lr

0800b800 <_fini>:
 800b800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b802:	bf00      	nop
 800b804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b806:	bc08      	pop	{r3}
 800b808:	469e      	mov	lr, r3
 800b80a:	4770      	bx	lr
