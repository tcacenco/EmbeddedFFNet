
FeedForwardNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b554  10000000  08000188  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800b6dc  0800b6dc  0002b6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b94c  0800b94c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b94c  0800b94c  0002b94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b954  0800b954  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b954  0800b954  0002b954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b958  0800b958  0002b958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b95c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c8c  200001e4  0800bb40  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e70  0800bb40  00031e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8b1  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004248  00000000  00000000  0004aac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0004ed10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  0004fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252de  00000000  00000000  00050990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fec  00000000  00000000  00075c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cae11  00000000  00000000  0008bc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156a6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000433c  00000000  00000000  00156ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	200001e4 	.word	0x200001e4
1000001c:	00000000 	.word	0x00000000
10000020:	1000b53c 	.word	0x1000b53c

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	200001e8 	.word	0x200001e8
1000003c:	1000b53c 	.word	0x1000b53c

10000040 <strlen>:
10000040:	4603      	mov	r3, r0
10000042:	f813 2b01 	ldrb.w	r2, [r3], #1
10000046:	2a00      	cmp	r2, #0
10000048:	d1fb      	bne.n	10000042 <strlen+0x2>
1000004a:	1a18      	subs	r0, r3, r0
1000004c:	3801      	subs	r0, #1
1000004e:	4770      	bx	lr

10000050 <__aeabi_drsub>:
10000050:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
10000054:	e002      	b.n	1000005c <__adddf3>
10000056:	bf00      	nop

10000058 <__aeabi_dsub>:
10000058:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1000005c <__adddf3>:
1000005c:	b530      	push	{r4, r5, lr}
1000005e:	ea4f 0441 	mov.w	r4, r1, lsl #1
10000062:	ea4f 0543 	mov.w	r5, r3, lsl #1
10000066:	ea94 0f05 	teq	r4, r5
1000006a:	bf08      	it	eq
1000006c:	ea90 0f02 	teqeq	r0, r2
10000070:	bf1f      	itttt	ne
10000072:	ea54 0c00 	orrsne.w	ip, r4, r0
10000076:	ea55 0c02 	orrsne.w	ip, r5, r2
1000007a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1000007e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000082:	f000 80e2 	beq.w	1000024a <__adddf3+0x1ee>
10000086:	ea4f 5454 	mov.w	r4, r4, lsr #21
1000008a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1000008e:	bfb8      	it	lt
10000090:	426d      	neglt	r5, r5
10000092:	dd0c      	ble.n	100000ae <__adddf3+0x52>
10000094:	442c      	add	r4, r5
10000096:	ea80 0202 	eor.w	r2, r0, r2
1000009a:	ea81 0303 	eor.w	r3, r1, r3
1000009e:	ea82 0000 	eor.w	r0, r2, r0
100000a2:	ea83 0101 	eor.w	r1, r3, r1
100000a6:	ea80 0202 	eor.w	r2, r0, r2
100000aa:	ea81 0303 	eor.w	r3, r1, r3
100000ae:	2d36      	cmp	r5, #54	; 0x36
100000b0:	bf88      	it	hi
100000b2:	bd30      	pophi	{r4, r5, pc}
100000b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
100000b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
100000bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
100000c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
100000c4:	d002      	beq.n	100000cc <__adddf3+0x70>
100000c6:	4240      	negs	r0, r0
100000c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
100000cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
100000d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
100000d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
100000d8:	d002      	beq.n	100000e0 <__adddf3+0x84>
100000da:	4252      	negs	r2, r2
100000dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
100000e0:	ea94 0f05 	teq	r4, r5
100000e4:	f000 80a7 	beq.w	10000236 <__adddf3+0x1da>
100000e8:	f1a4 0401 	sub.w	r4, r4, #1
100000ec:	f1d5 0e20 	rsbs	lr, r5, #32
100000f0:	db0d      	blt.n	1000010e <__adddf3+0xb2>
100000f2:	fa02 fc0e 	lsl.w	ip, r2, lr
100000f6:	fa22 f205 	lsr.w	r2, r2, r5
100000fa:	1880      	adds	r0, r0, r2
100000fc:	f141 0100 	adc.w	r1, r1, #0
10000100:	fa03 f20e 	lsl.w	r2, r3, lr
10000104:	1880      	adds	r0, r0, r2
10000106:	fa43 f305 	asr.w	r3, r3, r5
1000010a:	4159      	adcs	r1, r3
1000010c:	e00e      	b.n	1000012c <__adddf3+0xd0>
1000010e:	f1a5 0520 	sub.w	r5, r5, #32
10000112:	f10e 0e20 	add.w	lr, lr, #32
10000116:	2a01      	cmp	r2, #1
10000118:	fa03 fc0e 	lsl.w	ip, r3, lr
1000011c:	bf28      	it	cs
1000011e:	f04c 0c02 	orrcs.w	ip, ip, #2
10000122:	fa43 f305 	asr.w	r3, r3, r5
10000126:	18c0      	adds	r0, r0, r3
10000128:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1000012c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
10000130:	d507      	bpl.n	10000142 <__adddf3+0xe6>
10000132:	f04f 0e00 	mov.w	lr, #0
10000136:	f1dc 0c00 	rsbs	ip, ip, #0
1000013a:	eb7e 0000 	sbcs.w	r0, lr, r0
1000013e:	eb6e 0101 	sbc.w	r1, lr, r1
10000142:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
10000146:	d31b      	bcc.n	10000180 <__adddf3+0x124>
10000148:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1000014c:	d30c      	bcc.n	10000168 <__adddf3+0x10c>
1000014e:	0849      	lsrs	r1, r1, #1
10000150:	ea5f 0030 	movs.w	r0, r0, rrx
10000154:	ea4f 0c3c 	mov.w	ip, ip, rrx
10000158:	f104 0401 	add.w	r4, r4, #1
1000015c:	ea4f 5244 	mov.w	r2, r4, lsl #21
10000160:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
10000164:	f080 809a 	bcs.w	1000029c <__adddf3+0x240>
10000168:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1000016c:	bf08      	it	eq
1000016e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000172:	f150 0000 	adcs.w	r0, r0, #0
10000176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000017a:	ea41 0105 	orr.w	r1, r1, r5
1000017e:	bd30      	pop	{r4, r5, pc}
10000180:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
10000184:	4140      	adcs	r0, r0
10000186:	eb41 0101 	adc.w	r1, r1, r1
1000018a:	3c01      	subs	r4, #1
1000018c:	bf28      	it	cs
1000018e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
10000192:	d2e9      	bcs.n	10000168 <__adddf3+0x10c>
10000194:	f091 0f00 	teq	r1, #0
10000198:	bf04      	itt	eq
1000019a:	4601      	moveq	r1, r0
1000019c:	2000      	moveq	r0, #0
1000019e:	fab1 f381 	clz	r3, r1
100001a2:	bf08      	it	eq
100001a4:	3320      	addeq	r3, #32
100001a6:	f1a3 030b 	sub.w	r3, r3, #11
100001aa:	f1b3 0220 	subs.w	r2, r3, #32
100001ae:	da0c      	bge.n	100001ca <__adddf3+0x16e>
100001b0:	320c      	adds	r2, #12
100001b2:	dd08      	ble.n	100001c6 <__adddf3+0x16a>
100001b4:	f102 0c14 	add.w	ip, r2, #20
100001b8:	f1c2 020c 	rsb	r2, r2, #12
100001bc:	fa01 f00c 	lsl.w	r0, r1, ip
100001c0:	fa21 f102 	lsr.w	r1, r1, r2
100001c4:	e00c      	b.n	100001e0 <__adddf3+0x184>
100001c6:	f102 0214 	add.w	r2, r2, #20
100001ca:	bfd8      	it	le
100001cc:	f1c2 0c20 	rsble	ip, r2, #32
100001d0:	fa01 f102 	lsl.w	r1, r1, r2
100001d4:	fa20 fc0c 	lsr.w	ip, r0, ip
100001d8:	bfdc      	itt	le
100001da:	ea41 010c 	orrle.w	r1, r1, ip
100001de:	4090      	lslle	r0, r2
100001e0:	1ae4      	subs	r4, r4, r3
100001e2:	bfa2      	ittt	ge
100001e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
100001e8:	4329      	orrge	r1, r5
100001ea:	bd30      	popge	{r4, r5, pc}
100001ec:	ea6f 0404 	mvn.w	r4, r4
100001f0:	3c1f      	subs	r4, #31
100001f2:	da1c      	bge.n	1000022e <__adddf3+0x1d2>
100001f4:	340c      	adds	r4, #12
100001f6:	dc0e      	bgt.n	10000216 <__adddf3+0x1ba>
100001f8:	f104 0414 	add.w	r4, r4, #20
100001fc:	f1c4 0220 	rsb	r2, r4, #32
10000200:	fa20 f004 	lsr.w	r0, r0, r4
10000204:	fa01 f302 	lsl.w	r3, r1, r2
10000208:	ea40 0003 	orr.w	r0, r0, r3
1000020c:	fa21 f304 	lsr.w	r3, r1, r4
10000210:	ea45 0103 	orr.w	r1, r5, r3
10000214:	bd30      	pop	{r4, r5, pc}
10000216:	f1c4 040c 	rsb	r4, r4, #12
1000021a:	f1c4 0220 	rsb	r2, r4, #32
1000021e:	fa20 f002 	lsr.w	r0, r0, r2
10000222:	fa01 f304 	lsl.w	r3, r1, r4
10000226:	ea40 0003 	orr.w	r0, r0, r3
1000022a:	4629      	mov	r1, r5
1000022c:	bd30      	pop	{r4, r5, pc}
1000022e:	fa21 f004 	lsr.w	r0, r1, r4
10000232:	4629      	mov	r1, r5
10000234:	bd30      	pop	{r4, r5, pc}
10000236:	f094 0f00 	teq	r4, #0
1000023a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1000023e:	bf06      	itte	eq
10000240:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
10000244:	3401      	addeq	r4, #1
10000246:	3d01      	subne	r5, #1
10000248:	e74e      	b.n	100000e8 <__adddf3+0x8c>
1000024a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000024e:	bf18      	it	ne
10000250:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000254:	d029      	beq.n	100002aa <__adddf3+0x24e>
10000256:	ea94 0f05 	teq	r4, r5
1000025a:	bf08      	it	eq
1000025c:	ea90 0f02 	teqeq	r0, r2
10000260:	d005      	beq.n	1000026e <__adddf3+0x212>
10000262:	ea54 0c00 	orrs.w	ip, r4, r0
10000266:	bf04      	itt	eq
10000268:	4619      	moveq	r1, r3
1000026a:	4610      	moveq	r0, r2
1000026c:	bd30      	pop	{r4, r5, pc}
1000026e:	ea91 0f03 	teq	r1, r3
10000272:	bf1e      	ittt	ne
10000274:	2100      	movne	r1, #0
10000276:	2000      	movne	r0, #0
10000278:	bd30      	popne	{r4, r5, pc}
1000027a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1000027e:	d105      	bne.n	1000028c <__adddf3+0x230>
10000280:	0040      	lsls	r0, r0, #1
10000282:	4149      	adcs	r1, r1
10000284:	bf28      	it	cs
10000286:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1000028a:	bd30      	pop	{r4, r5, pc}
1000028c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
10000290:	bf3c      	itt	cc
10000292:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
10000296:	bd30      	popcc	{r4, r5, pc}
10000298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1000029c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
100002a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
100002a4:	f04f 0000 	mov.w	r0, #0
100002a8:	bd30      	pop	{r4, r5, pc}
100002aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
100002ae:	bf1a      	itte	ne
100002b0:	4619      	movne	r1, r3
100002b2:	4610      	movne	r0, r2
100002b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
100002b8:	bf1c      	itt	ne
100002ba:	460b      	movne	r3, r1
100002bc:	4602      	movne	r2, r0
100002be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
100002c2:	bf06      	itte	eq
100002c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
100002c8:	ea91 0f03 	teqeq	r1, r3
100002cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
100002d0:	bd30      	pop	{r4, r5, pc}
100002d2:	bf00      	nop

100002d4 <__aeabi_ui2d>:
100002d4:	f090 0f00 	teq	r0, #0
100002d8:	bf04      	itt	eq
100002da:	2100      	moveq	r1, #0
100002dc:	4770      	bxeq	lr
100002de:	b530      	push	{r4, r5, lr}
100002e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100002e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100002e8:	f04f 0500 	mov.w	r5, #0
100002ec:	f04f 0100 	mov.w	r1, #0
100002f0:	e750      	b.n	10000194 <__adddf3+0x138>
100002f2:	bf00      	nop

100002f4 <__aeabi_i2d>:
100002f4:	f090 0f00 	teq	r0, #0
100002f8:	bf04      	itt	eq
100002fa:	2100      	moveq	r1, #0
100002fc:	4770      	bxeq	lr
100002fe:	b530      	push	{r4, r5, lr}
10000300:	f44f 6480 	mov.w	r4, #1024	; 0x400
10000304:	f104 0432 	add.w	r4, r4, #50	; 0x32
10000308:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1000030c:	bf48      	it	mi
1000030e:	4240      	negmi	r0, r0
10000310:	f04f 0100 	mov.w	r1, #0
10000314:	e73e      	b.n	10000194 <__adddf3+0x138>
10000316:	bf00      	nop

10000318 <__aeabi_f2d>:
10000318:	0042      	lsls	r2, r0, #1
1000031a:	ea4f 01e2 	mov.w	r1, r2, asr #3
1000031e:	ea4f 0131 	mov.w	r1, r1, rrx
10000322:	ea4f 7002 	mov.w	r0, r2, lsl #28
10000326:	bf1f      	itttt	ne
10000328:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1000032c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
10000330:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
10000334:	4770      	bxne	lr
10000336:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1000033a:	bf08      	it	eq
1000033c:	4770      	bxeq	lr
1000033e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
10000342:	bf04      	itt	eq
10000344:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
10000348:	4770      	bxeq	lr
1000034a:	b530      	push	{r4, r5, lr}
1000034c:	f44f 7460 	mov.w	r4, #896	; 0x380
10000350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
10000354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
10000358:	e71c      	b.n	10000194 <__adddf3+0x138>
1000035a:	bf00      	nop

1000035c <__aeabi_ul2d>:
1000035c:	ea50 0201 	orrs.w	r2, r0, r1
10000360:	bf08      	it	eq
10000362:	4770      	bxeq	lr
10000364:	b530      	push	{r4, r5, lr}
10000366:	f04f 0500 	mov.w	r5, #0
1000036a:	e00a      	b.n	10000382 <__aeabi_l2d+0x16>

1000036c <__aeabi_l2d>:
1000036c:	ea50 0201 	orrs.w	r2, r0, r1
10000370:	bf08      	it	eq
10000372:	4770      	bxeq	lr
10000374:	b530      	push	{r4, r5, lr}
10000376:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1000037a:	d502      	bpl.n	10000382 <__aeabi_l2d+0x16>
1000037c:	4240      	negs	r0, r0
1000037e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000382:	f44f 6480 	mov.w	r4, #1024	; 0x400
10000386:	f104 0432 	add.w	r4, r4, #50	; 0x32
1000038a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1000038e:	f43f aed8 	beq.w	10000142 <__adddf3+0xe6>
10000392:	f04f 0203 	mov.w	r2, #3
10000396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1000039a:	bf18      	it	ne
1000039c:	3203      	addne	r2, #3
1000039e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
100003a2:	bf18      	it	ne
100003a4:	3203      	addne	r2, #3
100003a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
100003aa:	f1c2 0320 	rsb	r3, r2, #32
100003ae:	fa00 fc03 	lsl.w	ip, r0, r3
100003b2:	fa20 f002 	lsr.w	r0, r0, r2
100003b6:	fa01 fe03 	lsl.w	lr, r1, r3
100003ba:	ea40 000e 	orr.w	r0, r0, lr
100003be:	fa21 f102 	lsr.w	r1, r1, r2
100003c2:	4414      	add	r4, r2
100003c4:	e6bd      	b.n	10000142 <__adddf3+0xe6>
100003c6:	bf00      	nop

100003c8 <__aeabi_dmul>:
100003c8:	b570      	push	{r4, r5, r6, lr}
100003ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
100003ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
100003d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
100003d6:	bf1d      	ittte	ne
100003d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
100003dc:	ea94 0f0c 	teqne	r4, ip
100003e0:	ea95 0f0c 	teqne	r5, ip
100003e4:	f000 f8de 	bleq	100005a4 <__aeabi_dmul+0x1dc>
100003e8:	442c      	add	r4, r5
100003ea:	ea81 0603 	eor.w	r6, r1, r3
100003ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
100003f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
100003f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
100003fa:	bf18      	it	ne
100003fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
10000400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
10000404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
10000408:	d038      	beq.n	1000047c <__aeabi_dmul+0xb4>
1000040a:	fba0 ce02 	umull	ip, lr, r0, r2
1000040e:	f04f 0500 	mov.w	r5, #0
10000412:	fbe1 e502 	umlal	lr, r5, r1, r2
10000416:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1000041a:	fbe0 e503 	umlal	lr, r5, r0, r3
1000041e:	f04f 0600 	mov.w	r6, #0
10000422:	fbe1 5603 	umlal	r5, r6, r1, r3
10000426:	f09c 0f00 	teq	ip, #0
1000042a:	bf18      	it	ne
1000042c:	f04e 0e01 	orrne.w	lr, lr, #1
10000430:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
10000434:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
10000438:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1000043c:	d204      	bcs.n	10000448 <__aeabi_dmul+0x80>
1000043e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
10000442:	416d      	adcs	r5, r5
10000444:	eb46 0606 	adc.w	r6, r6, r6
10000448:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1000044c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
10000450:	ea4f 20c5 	mov.w	r0, r5, lsl #11
10000454:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
10000458:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1000045c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
10000460:	bf88      	it	hi
10000462:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000466:	d81e      	bhi.n	100004a6 <__aeabi_dmul+0xde>
10000468:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1000046c:	bf08      	it	eq
1000046e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
10000472:	f150 0000 	adcs.w	r0, r0, #0
10000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000047a:	bd70      	pop	{r4, r5, r6, pc}
1000047c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
10000480:	ea46 0101 	orr.w	r1, r6, r1
10000484:	ea40 0002 	orr.w	r0, r0, r2
10000488:	ea81 0103 	eor.w	r1, r1, r3
1000048c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
10000490:	bfc2      	ittt	gt
10000492:	ebd4 050c 	rsbsgt	r5, r4, ip
10000496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1000049a:	bd70      	popgt	{r4, r5, r6, pc}
1000049c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
100004a0:	f04f 0e00 	mov.w	lr, #0
100004a4:	3c01      	subs	r4, #1
100004a6:	f300 80ab 	bgt.w	10000600 <__aeabi_dmul+0x238>
100004aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
100004ae:	bfde      	ittt	le
100004b0:	2000      	movle	r0, #0
100004b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
100004b6:	bd70      	pople	{r4, r5, r6, pc}
100004b8:	f1c4 0400 	rsb	r4, r4, #0
100004bc:	3c20      	subs	r4, #32
100004be:	da35      	bge.n	1000052c <__aeabi_dmul+0x164>
100004c0:	340c      	adds	r4, #12
100004c2:	dc1b      	bgt.n	100004fc <__aeabi_dmul+0x134>
100004c4:	f104 0414 	add.w	r4, r4, #20
100004c8:	f1c4 0520 	rsb	r5, r4, #32
100004cc:	fa00 f305 	lsl.w	r3, r0, r5
100004d0:	fa20 f004 	lsr.w	r0, r0, r4
100004d4:	fa01 f205 	lsl.w	r2, r1, r5
100004d8:	ea40 0002 	orr.w	r0, r0, r2
100004dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
100004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
100004e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100004e8:	fa21 f604 	lsr.w	r6, r1, r4
100004ec:	eb42 0106 	adc.w	r1, r2, r6
100004f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100004f4:	bf08      	it	eq
100004f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100004fa:	bd70      	pop	{r4, r5, r6, pc}
100004fc:	f1c4 040c 	rsb	r4, r4, #12
10000500:	f1c4 0520 	rsb	r5, r4, #32
10000504:	fa00 f304 	lsl.w	r3, r0, r4
10000508:	fa20 f005 	lsr.w	r0, r0, r5
1000050c:	fa01 f204 	lsl.w	r2, r1, r4
10000510:	ea40 0002 	orr.w	r0, r0, r2
10000514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
10000518:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1000051c:	f141 0100 	adc.w	r1, r1, #0
10000520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
10000524:	bf08      	it	eq
10000526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1000052a:	bd70      	pop	{r4, r5, r6, pc}
1000052c:	f1c4 0520 	rsb	r5, r4, #32
10000530:	fa00 f205 	lsl.w	r2, r0, r5
10000534:	ea4e 0e02 	orr.w	lr, lr, r2
10000538:	fa20 f304 	lsr.w	r3, r0, r4
1000053c:	fa01 f205 	lsl.w	r2, r1, r5
10000540:	ea43 0302 	orr.w	r3, r3, r2
10000544:	fa21 f004 	lsr.w	r0, r1, r4
10000548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1000054c:	fa21 f204 	lsr.w	r2, r1, r4
10000550:	ea20 0002 	bic.w	r0, r0, r2
10000554:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
10000558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1000055c:	bf08      	it	eq
1000055e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
10000562:	bd70      	pop	{r4, r5, r6, pc}
10000564:	f094 0f00 	teq	r4, #0
10000568:	d10f      	bne.n	1000058a <__aeabi_dmul+0x1c2>
1000056a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1000056e:	0040      	lsls	r0, r0, #1
10000570:	eb41 0101 	adc.w	r1, r1, r1
10000574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
10000578:	bf08      	it	eq
1000057a:	3c01      	subeq	r4, #1
1000057c:	d0f7      	beq.n	1000056e <__aeabi_dmul+0x1a6>
1000057e:	ea41 0106 	orr.w	r1, r1, r6
10000582:	f095 0f00 	teq	r5, #0
10000586:	bf18      	it	ne
10000588:	4770      	bxne	lr
1000058a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1000058e:	0052      	lsls	r2, r2, #1
10000590:	eb43 0303 	adc.w	r3, r3, r3
10000594:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
10000598:	bf08      	it	eq
1000059a:	3d01      	subeq	r5, #1
1000059c:	d0f7      	beq.n	1000058e <__aeabi_dmul+0x1c6>
1000059e:	ea43 0306 	orr.w	r3, r3, r6
100005a2:	4770      	bx	lr
100005a4:	ea94 0f0c 	teq	r4, ip
100005a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
100005ac:	bf18      	it	ne
100005ae:	ea95 0f0c 	teqne	r5, ip
100005b2:	d00c      	beq.n	100005ce <__aeabi_dmul+0x206>
100005b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
100005b8:	bf18      	it	ne
100005ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
100005be:	d1d1      	bne.n	10000564 <__aeabi_dmul+0x19c>
100005c0:	ea81 0103 	eor.w	r1, r1, r3
100005c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100005c8:	f04f 0000 	mov.w	r0, #0
100005cc:	bd70      	pop	{r4, r5, r6, pc}
100005ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
100005d2:	bf06      	itte	eq
100005d4:	4610      	moveq	r0, r2
100005d6:	4619      	moveq	r1, r3
100005d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
100005dc:	d019      	beq.n	10000612 <__aeabi_dmul+0x24a>
100005de:	ea94 0f0c 	teq	r4, ip
100005e2:	d102      	bne.n	100005ea <__aeabi_dmul+0x222>
100005e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
100005e8:	d113      	bne.n	10000612 <__aeabi_dmul+0x24a>
100005ea:	ea95 0f0c 	teq	r5, ip
100005ee:	d105      	bne.n	100005fc <__aeabi_dmul+0x234>
100005f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
100005f4:	bf1c      	itt	ne
100005f6:	4610      	movne	r0, r2
100005f8:	4619      	movne	r1, r3
100005fa:	d10a      	bne.n	10000612 <__aeabi_dmul+0x24a>
100005fc:	ea81 0103 	eor.w	r1, r1, r3
10000600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
10000604:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
10000608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1000060c:	f04f 0000 	mov.w	r0, #0
10000610:	bd70      	pop	{r4, r5, r6, pc}
10000612:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
10000616:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1000061a:	bd70      	pop	{r4, r5, r6, pc}

1000061c <__aeabi_ddiv>:
1000061c:	b570      	push	{r4, r5, r6, lr}
1000061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
10000622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
10000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1000062a:	bf1d      	ittte	ne
1000062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
10000630:	ea94 0f0c 	teqne	r4, ip
10000634:	ea95 0f0c 	teqne	r5, ip
10000638:	f000 f8a7 	bleq	1000078a <__aeabi_ddiv+0x16e>
1000063c:	eba4 0405 	sub.w	r4, r4, r5
10000640:	ea81 0e03 	eor.w	lr, r1, r3
10000644:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000648:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000064c:	f000 8088 	beq.w	10000760 <__aeabi_ddiv+0x144>
10000650:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000654:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
10000658:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1000065c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
10000660:	ea4f 2202 	mov.w	r2, r2, lsl #8
10000664:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
10000668:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1000066c:	ea4f 2600 	mov.w	r6, r0, lsl #8
10000670:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
10000674:	429d      	cmp	r5, r3
10000676:	bf08      	it	eq
10000678:	4296      	cmpeq	r6, r2
1000067a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1000067e:	f504 7440 	add.w	r4, r4, #768	; 0x300
10000682:	d202      	bcs.n	1000068a <__aeabi_ddiv+0x6e>
10000684:	085b      	lsrs	r3, r3, #1
10000686:	ea4f 0232 	mov.w	r2, r2, rrx
1000068a:	1ab6      	subs	r6, r6, r2
1000068c:	eb65 0503 	sbc.w	r5, r5, r3
10000690:	085b      	lsrs	r3, r3, #1
10000692:	ea4f 0232 	mov.w	r2, r2, rrx
10000696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1000069a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1000069e:	ebb6 0e02 	subs.w	lr, r6, r2
100006a2:	eb75 0e03 	sbcs.w	lr, r5, r3
100006a6:	bf22      	ittt	cs
100006a8:	1ab6      	subcs	r6, r6, r2
100006aa:	4675      	movcs	r5, lr
100006ac:	ea40 000c 	orrcs.w	r0, r0, ip
100006b0:	085b      	lsrs	r3, r3, #1
100006b2:	ea4f 0232 	mov.w	r2, r2, rrx
100006b6:	ebb6 0e02 	subs.w	lr, r6, r2
100006ba:	eb75 0e03 	sbcs.w	lr, r5, r3
100006be:	bf22      	ittt	cs
100006c0:	1ab6      	subcs	r6, r6, r2
100006c2:	4675      	movcs	r5, lr
100006c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
100006c8:	085b      	lsrs	r3, r3, #1
100006ca:	ea4f 0232 	mov.w	r2, r2, rrx
100006ce:	ebb6 0e02 	subs.w	lr, r6, r2
100006d2:	eb75 0e03 	sbcs.w	lr, r5, r3
100006d6:	bf22      	ittt	cs
100006d8:	1ab6      	subcs	r6, r6, r2
100006da:	4675      	movcs	r5, lr
100006dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
100006e0:	085b      	lsrs	r3, r3, #1
100006e2:	ea4f 0232 	mov.w	r2, r2, rrx
100006e6:	ebb6 0e02 	subs.w	lr, r6, r2
100006ea:	eb75 0e03 	sbcs.w	lr, r5, r3
100006ee:	bf22      	ittt	cs
100006f0:	1ab6      	subcs	r6, r6, r2
100006f2:	4675      	movcs	r5, lr
100006f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
100006f8:	ea55 0e06 	orrs.w	lr, r5, r6
100006fc:	d018      	beq.n	10000730 <__aeabi_ddiv+0x114>
100006fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
10000702:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
10000706:	ea4f 1606 	mov.w	r6, r6, lsl #4
1000070a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1000070e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
10000712:	ea4f 02c2 	mov.w	r2, r2, lsl #3
10000716:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1000071a:	d1c0      	bne.n	1000069e <__aeabi_ddiv+0x82>
1000071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
10000720:	d10b      	bne.n	1000073a <__aeabi_ddiv+0x11e>
10000722:	ea41 0100 	orr.w	r1, r1, r0
10000726:	f04f 0000 	mov.w	r0, #0
1000072a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1000072e:	e7b6      	b.n	1000069e <__aeabi_ddiv+0x82>
10000730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
10000734:	bf04      	itt	eq
10000736:	4301      	orreq	r1, r0
10000738:	2000      	moveq	r0, #0
1000073a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1000073e:	bf88      	it	hi
10000740:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000744:	f63f aeaf 	bhi.w	100004a6 <__aeabi_dmul+0xde>
10000748:	ebb5 0c03 	subs.w	ip, r5, r3
1000074c:	bf04      	itt	eq
1000074e:	ebb6 0c02 	subseq.w	ip, r6, r2
10000752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000756:	f150 0000 	adcs.w	r0, r0, #0
1000075a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000075e:	bd70      	pop	{r4, r5, r6, pc}
10000760:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
10000764:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
10000768:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1000076c:	bfc2      	ittt	gt
1000076e:	ebd4 050c 	rsbsgt	r5, r4, ip
10000772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
10000776:	bd70      	popgt	{r4, r5, r6, pc}
10000778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1000077c:	f04f 0e00 	mov.w	lr, #0
10000780:	3c01      	subs	r4, #1
10000782:	e690      	b.n	100004a6 <__aeabi_dmul+0xde>
10000784:	ea45 0e06 	orr.w	lr, r5, r6
10000788:	e68d      	b.n	100004a6 <__aeabi_dmul+0xde>
1000078a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000078e:	ea94 0f0c 	teq	r4, ip
10000792:	bf08      	it	eq
10000794:	ea95 0f0c 	teqeq	r5, ip
10000798:	f43f af3b 	beq.w	10000612 <__aeabi_dmul+0x24a>
1000079c:	ea94 0f0c 	teq	r4, ip
100007a0:	d10a      	bne.n	100007b8 <__aeabi_ddiv+0x19c>
100007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
100007a6:	f47f af34 	bne.w	10000612 <__aeabi_dmul+0x24a>
100007aa:	ea95 0f0c 	teq	r5, ip
100007ae:	f47f af25 	bne.w	100005fc <__aeabi_dmul+0x234>
100007b2:	4610      	mov	r0, r2
100007b4:	4619      	mov	r1, r3
100007b6:	e72c      	b.n	10000612 <__aeabi_dmul+0x24a>
100007b8:	ea95 0f0c 	teq	r5, ip
100007bc:	d106      	bne.n	100007cc <__aeabi_ddiv+0x1b0>
100007be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
100007c2:	f43f aefd 	beq.w	100005c0 <__aeabi_dmul+0x1f8>
100007c6:	4610      	mov	r0, r2
100007c8:	4619      	mov	r1, r3
100007ca:	e722      	b.n	10000612 <__aeabi_dmul+0x24a>
100007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
100007d0:	bf18      	it	ne
100007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
100007d6:	f47f aec5 	bne.w	10000564 <__aeabi_dmul+0x19c>
100007da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
100007de:	f47f af0d 	bne.w	100005fc <__aeabi_dmul+0x234>
100007e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
100007e6:	f47f aeeb 	bne.w	100005c0 <__aeabi_dmul+0x1f8>
100007ea:	e712      	b.n	10000612 <__aeabi_dmul+0x24a>

100007ec <__gedf2>:
100007ec:	f04f 3cff 	mov.w	ip, #4294967295
100007f0:	e006      	b.n	10000800 <__cmpdf2+0x4>
100007f2:	bf00      	nop

100007f4 <__ledf2>:
100007f4:	f04f 0c01 	mov.w	ip, #1
100007f8:	e002      	b.n	10000800 <__cmpdf2+0x4>
100007fa:	bf00      	nop

100007fc <__cmpdf2>:
100007fc:	f04f 0c01 	mov.w	ip, #1
10000800:	f84d cd04 	str.w	ip, [sp, #-4]!
10000804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
10000808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1000080c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10000810:	bf18      	it	ne
10000812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
10000816:	d01b      	beq.n	10000850 <__cmpdf2+0x54>
10000818:	b001      	add	sp, #4
1000081a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1000081e:	bf0c      	ite	eq
10000820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
10000824:	ea91 0f03 	teqne	r1, r3
10000828:	bf02      	ittt	eq
1000082a:	ea90 0f02 	teqeq	r0, r2
1000082e:	2000      	moveq	r0, #0
10000830:	4770      	bxeq	lr
10000832:	f110 0f00 	cmn.w	r0, #0
10000836:	ea91 0f03 	teq	r1, r3
1000083a:	bf58      	it	pl
1000083c:	4299      	cmppl	r1, r3
1000083e:	bf08      	it	eq
10000840:	4290      	cmpeq	r0, r2
10000842:	bf2c      	ite	cs
10000844:	17d8      	asrcs	r0, r3, #31
10000846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1000084a:	f040 0001 	orr.w	r0, r0, #1
1000084e:	4770      	bx	lr
10000850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
10000854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000858:	d102      	bne.n	10000860 <__cmpdf2+0x64>
1000085a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1000085e:	d107      	bne.n	10000870 <__cmpdf2+0x74>
10000860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10000864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000868:	d1d6      	bne.n	10000818 <__cmpdf2+0x1c>
1000086a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1000086e:	d0d3      	beq.n	10000818 <__cmpdf2+0x1c>
10000870:	f85d 0b04 	ldr.w	r0, [sp], #4
10000874:	4770      	bx	lr
10000876:	bf00      	nop

10000878 <__aeabi_cdrcmple>:
10000878:	4684      	mov	ip, r0
1000087a:	4610      	mov	r0, r2
1000087c:	4662      	mov	r2, ip
1000087e:	468c      	mov	ip, r1
10000880:	4619      	mov	r1, r3
10000882:	4663      	mov	r3, ip
10000884:	e000      	b.n	10000888 <__aeabi_cdcmpeq>
10000886:	bf00      	nop

10000888 <__aeabi_cdcmpeq>:
10000888:	b501      	push	{r0, lr}
1000088a:	f7ff ffb7 	bl	100007fc <__cmpdf2>
1000088e:	2800      	cmp	r0, #0
10000890:	bf48      	it	mi
10000892:	f110 0f00 	cmnmi.w	r0, #0
10000896:	bd01      	pop	{r0, pc}

10000898 <__aeabi_dcmpeq>:
10000898:	f84d ed08 	str.w	lr, [sp, #-8]!
1000089c:	f7ff fff4 	bl	10000888 <__aeabi_cdcmpeq>
100008a0:	bf0c      	ite	eq
100008a2:	2001      	moveq	r0, #1
100008a4:	2000      	movne	r0, #0
100008a6:	f85d fb08 	ldr.w	pc, [sp], #8
100008aa:	bf00      	nop

100008ac <__aeabi_dcmplt>:
100008ac:	f84d ed08 	str.w	lr, [sp, #-8]!
100008b0:	f7ff ffea 	bl	10000888 <__aeabi_cdcmpeq>
100008b4:	bf34      	ite	cc
100008b6:	2001      	movcc	r0, #1
100008b8:	2000      	movcs	r0, #0
100008ba:	f85d fb08 	ldr.w	pc, [sp], #8
100008be:	bf00      	nop

100008c0 <__aeabi_dcmple>:
100008c0:	f84d ed08 	str.w	lr, [sp, #-8]!
100008c4:	f7ff ffe0 	bl	10000888 <__aeabi_cdcmpeq>
100008c8:	bf94      	ite	ls
100008ca:	2001      	movls	r0, #1
100008cc:	2000      	movhi	r0, #0
100008ce:	f85d fb08 	ldr.w	pc, [sp], #8
100008d2:	bf00      	nop

100008d4 <__aeabi_dcmpge>:
100008d4:	f84d ed08 	str.w	lr, [sp, #-8]!
100008d8:	f7ff ffce 	bl	10000878 <__aeabi_cdrcmple>
100008dc:	bf94      	ite	ls
100008de:	2001      	movls	r0, #1
100008e0:	2000      	movhi	r0, #0
100008e2:	f85d fb08 	ldr.w	pc, [sp], #8
100008e6:	bf00      	nop

100008e8 <__aeabi_dcmpgt>:
100008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
100008ec:	f7ff ffc4 	bl	10000878 <__aeabi_cdrcmple>
100008f0:	bf34      	ite	cc
100008f2:	2001      	movcc	r0, #1
100008f4:	2000      	movcs	r0, #0
100008f6:	f85d fb08 	ldr.w	pc, [sp], #8
100008fa:	bf00      	nop

100008fc <__aeabi_d2iz>:
100008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
10000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
10000904:	d215      	bcs.n	10000932 <__aeabi_d2iz+0x36>
10000906:	d511      	bpl.n	1000092c <__aeabi_d2iz+0x30>
10000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1000090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
10000910:	d912      	bls.n	10000938 <__aeabi_d2iz+0x3c>
10000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1000091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1000091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
10000922:	fa23 f002 	lsr.w	r0, r3, r2
10000926:	bf18      	it	ne
10000928:	4240      	negne	r0, r0
1000092a:	4770      	bx	lr
1000092c:	f04f 0000 	mov.w	r0, #0
10000930:	4770      	bx	lr
10000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
10000936:	d105      	bne.n	10000944 <__aeabi_d2iz+0x48>
10000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1000093c:	bf08      	it	eq
1000093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
10000942:	4770      	bx	lr
10000944:	f04f 0000 	mov.w	r0, #0
10000948:	4770      	bx	lr
1000094a:	bf00      	nop

1000094c <__aeabi_d2uiz>:
1000094c:	004a      	lsls	r2, r1, #1
1000094e:	d211      	bcs.n	10000974 <__aeabi_d2uiz+0x28>
10000950:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
10000954:	d211      	bcs.n	1000097a <__aeabi_d2uiz+0x2e>
10000956:	d50d      	bpl.n	10000974 <__aeabi_d2uiz+0x28>
10000958:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1000095c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
10000960:	d40e      	bmi.n	10000980 <__aeabi_d2uiz+0x34>
10000962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1000096a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1000096e:	fa23 f002 	lsr.w	r0, r3, r2
10000972:	4770      	bx	lr
10000974:	f04f 0000 	mov.w	r0, #0
10000978:	4770      	bx	lr
1000097a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1000097e:	d102      	bne.n	10000986 <__aeabi_d2uiz+0x3a>
10000980:	f04f 30ff 	mov.w	r0, #4294967295
10000984:	4770      	bx	lr
10000986:	f04f 0000 	mov.w	r0, #0
1000098a:	4770      	bx	lr

1000098c <__aeabi_frsub>:
1000098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
10000990:	e002      	b.n	10000998 <__addsf3>
10000992:	bf00      	nop

10000994 <__aeabi_fsub>:
10000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

10000998 <__addsf3>:
10000998:	0042      	lsls	r2, r0, #1
1000099a:	bf1f      	itttt	ne
1000099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
100009a0:	ea92 0f03 	teqne	r2, r3
100009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
100009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
100009ac:	d06a      	beq.n	10000a84 <__addsf3+0xec>
100009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
100009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
100009b6:	bfc1      	itttt	gt
100009b8:	18d2      	addgt	r2, r2, r3
100009ba:	4041      	eorgt	r1, r0
100009bc:	4048      	eorgt	r0, r1
100009be:	4041      	eorgt	r1, r0
100009c0:	bfb8      	it	lt
100009c2:	425b      	neglt	r3, r3
100009c4:	2b19      	cmp	r3, #25
100009c6:	bf88      	it	hi
100009c8:	4770      	bxhi	lr
100009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
100009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
100009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
100009d6:	bf18      	it	ne
100009d8:	4240      	negne	r0, r0
100009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
100009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
100009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
100009e6:	bf18      	it	ne
100009e8:	4249      	negne	r1, r1
100009ea:	ea92 0f03 	teq	r2, r3
100009ee:	d03f      	beq.n	10000a70 <__addsf3+0xd8>
100009f0:	f1a2 0201 	sub.w	r2, r2, #1
100009f4:	fa41 fc03 	asr.w	ip, r1, r3
100009f8:	eb10 000c 	adds.w	r0, r0, ip
100009fc:	f1c3 0320 	rsb	r3, r3, #32
10000a00:	fa01 f103 	lsl.w	r1, r1, r3
10000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
10000a08:	d502      	bpl.n	10000a10 <__addsf3+0x78>
10000a0a:	4249      	negs	r1, r1
10000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
10000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
10000a14:	d313      	bcc.n	10000a3e <__addsf3+0xa6>
10000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
10000a1a:	d306      	bcc.n	10000a2a <__addsf3+0x92>
10000a1c:	0840      	lsrs	r0, r0, #1
10000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
10000a22:	f102 0201 	add.w	r2, r2, #1
10000a26:	2afe      	cmp	r2, #254	; 0xfe
10000a28:	d251      	bcs.n	10000ace <__addsf3+0x136>
10000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
10000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
10000a32:	bf08      	it	eq
10000a34:	f020 0001 	biceq.w	r0, r0, #1
10000a38:	ea40 0003 	orr.w	r0, r0, r3
10000a3c:	4770      	bx	lr
10000a3e:	0049      	lsls	r1, r1, #1
10000a40:	eb40 0000 	adc.w	r0, r0, r0
10000a44:	3a01      	subs	r2, #1
10000a46:	bf28      	it	cs
10000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
10000a4c:	d2ed      	bcs.n	10000a2a <__addsf3+0x92>
10000a4e:	fab0 fc80 	clz	ip, r0
10000a52:	f1ac 0c08 	sub.w	ip, ip, #8
10000a56:	ebb2 020c 	subs.w	r2, r2, ip
10000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
10000a5e:	bfaa      	itet	ge
10000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
10000a64:	4252      	neglt	r2, r2
10000a66:	4318      	orrge	r0, r3
10000a68:	bfbc      	itt	lt
10000a6a:	40d0      	lsrlt	r0, r2
10000a6c:	4318      	orrlt	r0, r3
10000a6e:	4770      	bx	lr
10000a70:	f092 0f00 	teq	r2, #0
10000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
10000a78:	bf06      	itte	eq
10000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
10000a7e:	3201      	addeq	r2, #1
10000a80:	3b01      	subne	r3, #1
10000a82:	e7b5      	b.n	100009f0 <__addsf3+0x58>
10000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
10000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
10000a8c:	bf18      	it	ne
10000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
10000a92:	d021      	beq.n	10000ad8 <__addsf3+0x140>
10000a94:	ea92 0f03 	teq	r2, r3
10000a98:	d004      	beq.n	10000aa4 <__addsf3+0x10c>
10000a9a:	f092 0f00 	teq	r2, #0
10000a9e:	bf08      	it	eq
10000aa0:	4608      	moveq	r0, r1
10000aa2:	4770      	bx	lr
10000aa4:	ea90 0f01 	teq	r0, r1
10000aa8:	bf1c      	itt	ne
10000aaa:	2000      	movne	r0, #0
10000aac:	4770      	bxne	lr
10000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
10000ab2:	d104      	bne.n	10000abe <__addsf3+0x126>
10000ab4:	0040      	lsls	r0, r0, #1
10000ab6:	bf28      	it	cs
10000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
10000abc:	4770      	bx	lr
10000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
10000ac2:	bf3c      	itt	cc
10000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
10000ac8:	4770      	bxcc	lr
10000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
10000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
10000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
10000ad6:	4770      	bx	lr
10000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
10000adc:	bf16      	itet	ne
10000ade:	4608      	movne	r0, r1
10000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
10000ae4:	4601      	movne	r1, r0
10000ae6:	0242      	lsls	r2, r0, #9
10000ae8:	bf06      	itte	eq
10000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
10000aee:	ea90 0f01 	teqeq	r0, r1
10000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
10000af6:	4770      	bx	lr

10000af8 <__aeabi_ui2f>:
10000af8:	f04f 0300 	mov.w	r3, #0
10000afc:	e004      	b.n	10000b08 <__aeabi_i2f+0x8>
10000afe:	bf00      	nop

10000b00 <__aeabi_i2f>:
10000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
10000b04:	bf48      	it	mi
10000b06:	4240      	negmi	r0, r0
10000b08:	ea5f 0c00 	movs.w	ip, r0
10000b0c:	bf08      	it	eq
10000b0e:	4770      	bxeq	lr
10000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
10000b14:	4601      	mov	r1, r0
10000b16:	f04f 0000 	mov.w	r0, #0
10000b1a:	e01c      	b.n	10000b56 <__aeabi_l2f+0x2a>

10000b1c <__aeabi_ul2f>:
10000b1c:	ea50 0201 	orrs.w	r2, r0, r1
10000b20:	bf08      	it	eq
10000b22:	4770      	bxeq	lr
10000b24:	f04f 0300 	mov.w	r3, #0
10000b28:	e00a      	b.n	10000b40 <__aeabi_l2f+0x14>
10000b2a:	bf00      	nop

10000b2c <__aeabi_l2f>:
10000b2c:	ea50 0201 	orrs.w	r2, r0, r1
10000b30:	bf08      	it	eq
10000b32:	4770      	bxeq	lr
10000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
10000b38:	d502      	bpl.n	10000b40 <__aeabi_l2f+0x14>
10000b3a:	4240      	negs	r0, r0
10000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000b40:	ea5f 0c01 	movs.w	ip, r1
10000b44:	bf02      	ittt	eq
10000b46:	4684      	moveq	ip, r0
10000b48:	4601      	moveq	r1, r0
10000b4a:	2000      	moveq	r0, #0
10000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
10000b50:	bf08      	it	eq
10000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
10000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
10000b5a:	fabc f28c 	clz	r2, ip
10000b5e:	3a08      	subs	r2, #8
10000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
10000b64:	db10      	blt.n	10000b88 <__aeabi_l2f+0x5c>
10000b66:	fa01 fc02 	lsl.w	ip, r1, r2
10000b6a:	4463      	add	r3, ip
10000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
10000b70:	f1c2 0220 	rsb	r2, r2, #32
10000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
10000b78:	fa20 f202 	lsr.w	r2, r0, r2
10000b7c:	eb43 0002 	adc.w	r0, r3, r2
10000b80:	bf08      	it	eq
10000b82:	f020 0001 	biceq.w	r0, r0, #1
10000b86:	4770      	bx	lr
10000b88:	f102 0220 	add.w	r2, r2, #32
10000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
10000b90:	f1c2 0220 	rsb	r2, r2, #32
10000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
10000b98:	fa21 f202 	lsr.w	r2, r1, r2
10000b9c:	eb43 0002 	adc.w	r0, r3, r2
10000ba0:	bf08      	it	eq
10000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
10000ba6:	4770      	bx	lr

10000ba8 <__aeabi_ldivmod>:
10000ba8:	b97b      	cbnz	r3, 10000bca <__aeabi_ldivmod+0x22>
10000baa:	b972      	cbnz	r2, 10000bca <__aeabi_ldivmod+0x22>
10000bac:	2900      	cmp	r1, #0
10000bae:	bfbe      	ittt	lt
10000bb0:	2000      	movlt	r0, #0
10000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
10000bb6:	e006      	blt.n	10000bc6 <__aeabi_ldivmod+0x1e>
10000bb8:	bf08      	it	eq
10000bba:	2800      	cmpeq	r0, #0
10000bbc:	bf1c      	itt	ne
10000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
10000bc2:	f04f 30ff 	movne.w	r0, #4294967295
10000bc6:	f000 ba23 	b.w	10001010 <__aeabi_idiv0>
10000bca:	f1ad 0c08 	sub.w	ip, sp, #8
10000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
10000bd2:	2900      	cmp	r1, #0
10000bd4:	db09      	blt.n	10000bea <__aeabi_ldivmod+0x42>
10000bd6:	2b00      	cmp	r3, #0
10000bd8:	db1a      	blt.n	10000c10 <__aeabi_ldivmod+0x68>
10000bda:	f000 f8b7 	bl	10000d4c <__udivmoddi4>
10000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
10000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10000be6:	b004      	add	sp, #16
10000be8:	4770      	bx	lr
10000bea:	4240      	negs	r0, r0
10000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000bf0:	2b00      	cmp	r3, #0
10000bf2:	db1b      	blt.n	10000c2c <__aeabi_ldivmod+0x84>
10000bf4:	f000 f8aa 	bl	10000d4c <__udivmoddi4>
10000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
10000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10000c00:	b004      	add	sp, #16
10000c02:	4240      	negs	r0, r0
10000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000c08:	4252      	negs	r2, r2
10000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10000c0e:	4770      	bx	lr
10000c10:	4252      	negs	r2, r2
10000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10000c16:	f000 f899 	bl	10000d4c <__udivmoddi4>
10000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
10000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10000c22:	b004      	add	sp, #16
10000c24:	4240      	negs	r0, r0
10000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000c2a:	4770      	bx	lr
10000c2c:	4252      	negs	r2, r2
10000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10000c32:	f000 f88b 	bl	10000d4c <__udivmoddi4>
10000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
10000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10000c3e:	b004      	add	sp, #16
10000c40:	4252      	negs	r2, r2
10000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10000c46:	4770      	bx	lr

10000c48 <__aeabi_uldivmod>:
10000c48:	b953      	cbnz	r3, 10000c60 <__aeabi_uldivmod+0x18>
10000c4a:	b94a      	cbnz	r2, 10000c60 <__aeabi_uldivmod+0x18>
10000c4c:	2900      	cmp	r1, #0
10000c4e:	bf08      	it	eq
10000c50:	2800      	cmpeq	r0, #0
10000c52:	bf1c      	itt	ne
10000c54:	f04f 31ff 	movne.w	r1, #4294967295
10000c58:	f04f 30ff 	movne.w	r0, #4294967295
10000c5c:	f000 b9d8 	b.w	10001010 <__aeabi_idiv0>
10000c60:	f1ad 0c08 	sub.w	ip, sp, #8
10000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
10000c68:	f000 f870 	bl	10000d4c <__udivmoddi4>
10000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
10000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10000c74:	b004      	add	sp, #16
10000c76:	4770      	bx	lr

10000c78 <__aeabi_f2lz>:
10000c78:	ee07 0a90 	vmov	s15, r0
10000c7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
10000c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10000c84:	d401      	bmi.n	10000c8a <__aeabi_f2lz+0x12>
10000c86:	f000 b823 	b.w	10000cd0 <__aeabi_f2ulz>
10000c8a:	eef1 7a67 	vneg.f32	s15, s15
10000c8e:	b508      	push	{r3, lr}
10000c90:	ee17 0a90 	vmov	r0, s15
10000c94:	f000 f81c 	bl	10000cd0 <__aeabi_f2ulz>
10000c98:	4240      	negs	r0, r0
10000c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000c9e:	bd08      	pop	{r3, pc}

10000ca0 <__aeabi_d2lz>:
10000ca0:	b538      	push	{r3, r4, r5, lr}
10000ca2:	2200      	movs	r2, #0
10000ca4:	2300      	movs	r3, #0
10000ca6:	4604      	mov	r4, r0
10000ca8:	460d      	mov	r5, r1
10000caa:	f7ff fdff 	bl	100008ac <__aeabi_dcmplt>
10000cae:	b928      	cbnz	r0, 10000cbc <__aeabi_d2lz+0x1c>
10000cb0:	4620      	mov	r0, r4
10000cb2:	4629      	mov	r1, r5
10000cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10000cb8:	f000 b82a 	b.w	10000d10 <__aeabi_d2ulz>
10000cbc:	4620      	mov	r0, r4
10000cbe:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
10000cc2:	f000 f825 	bl	10000d10 <__aeabi_d2ulz>
10000cc6:	4240      	negs	r0, r0
10000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000ccc:	bd38      	pop	{r3, r4, r5, pc}
10000cce:	bf00      	nop

10000cd0 <__aeabi_f2ulz>:
10000cd0:	b5d0      	push	{r4, r6, r7, lr}
10000cd2:	f7ff fb21 	bl	10000318 <__aeabi_f2d>
10000cd6:	4b0c      	ldr	r3, [pc, #48]	; (10000d08 <__aeabi_f2ulz+0x38>)
10000cd8:	2200      	movs	r2, #0
10000cda:	4606      	mov	r6, r0
10000cdc:	460f      	mov	r7, r1
10000cde:	f7ff fb73 	bl	100003c8 <__aeabi_dmul>
10000ce2:	f7ff fe33 	bl	1000094c <__aeabi_d2uiz>
10000ce6:	4604      	mov	r4, r0
10000ce8:	f7ff faf4 	bl	100002d4 <__aeabi_ui2d>
10000cec:	4b07      	ldr	r3, [pc, #28]	; (10000d0c <__aeabi_f2ulz+0x3c>)
10000cee:	2200      	movs	r2, #0
10000cf0:	f7ff fb6a 	bl	100003c8 <__aeabi_dmul>
10000cf4:	4602      	mov	r2, r0
10000cf6:	460b      	mov	r3, r1
10000cf8:	4630      	mov	r0, r6
10000cfa:	4639      	mov	r1, r7
10000cfc:	f7ff f9ac 	bl	10000058 <__aeabi_dsub>
10000d00:	f7ff fe24 	bl	1000094c <__aeabi_d2uiz>
10000d04:	4621      	mov	r1, r4
10000d06:	bdd0      	pop	{r4, r6, r7, pc}
10000d08:	3df00000 	.word	0x3df00000
10000d0c:	41f00000 	.word	0x41f00000

10000d10 <__aeabi_d2ulz>:
10000d10:	b5d0      	push	{r4, r6, r7, lr}
10000d12:	4b0c      	ldr	r3, [pc, #48]	; (10000d44 <__aeabi_d2ulz+0x34>)
10000d14:	2200      	movs	r2, #0
10000d16:	4606      	mov	r6, r0
10000d18:	460f      	mov	r7, r1
10000d1a:	f7ff fb55 	bl	100003c8 <__aeabi_dmul>
10000d1e:	f7ff fe15 	bl	1000094c <__aeabi_d2uiz>
10000d22:	4604      	mov	r4, r0
10000d24:	f7ff fad6 	bl	100002d4 <__aeabi_ui2d>
10000d28:	4b07      	ldr	r3, [pc, #28]	; (10000d48 <__aeabi_d2ulz+0x38>)
10000d2a:	2200      	movs	r2, #0
10000d2c:	f7ff fb4c 	bl	100003c8 <__aeabi_dmul>
10000d30:	4602      	mov	r2, r0
10000d32:	460b      	mov	r3, r1
10000d34:	4630      	mov	r0, r6
10000d36:	4639      	mov	r1, r7
10000d38:	f7ff f98e 	bl	10000058 <__aeabi_dsub>
10000d3c:	f7ff fe06 	bl	1000094c <__aeabi_d2uiz>
10000d40:	4621      	mov	r1, r4
10000d42:	bdd0      	pop	{r4, r6, r7, pc}
10000d44:	3df00000 	.word	0x3df00000
10000d48:	41f00000 	.word	0x41f00000

10000d4c <__udivmoddi4>:
10000d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10000d50:	9d08      	ldr	r5, [sp, #32]
10000d52:	4604      	mov	r4, r0
10000d54:	468c      	mov	ip, r1
10000d56:	2b00      	cmp	r3, #0
10000d58:	f040 8083 	bne.w	10000e62 <__udivmoddi4+0x116>
10000d5c:	428a      	cmp	r2, r1
10000d5e:	4617      	mov	r7, r2
10000d60:	d947      	bls.n	10000df2 <__udivmoddi4+0xa6>
10000d62:	fab2 f282 	clz	r2, r2
10000d66:	b142      	cbz	r2, 10000d7a <__udivmoddi4+0x2e>
10000d68:	f1c2 0020 	rsb	r0, r2, #32
10000d6c:	fa24 f000 	lsr.w	r0, r4, r0
10000d70:	4091      	lsls	r1, r2
10000d72:	4097      	lsls	r7, r2
10000d74:	ea40 0c01 	orr.w	ip, r0, r1
10000d78:	4094      	lsls	r4, r2
10000d7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
10000d7e:	0c23      	lsrs	r3, r4, #16
10000d80:	fbbc f6f8 	udiv	r6, ip, r8
10000d84:	fa1f fe87 	uxth.w	lr, r7
10000d88:	fb08 c116 	mls	r1, r8, r6, ip
10000d8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
10000d90:	fb06 f10e 	mul.w	r1, r6, lr
10000d94:	4299      	cmp	r1, r3
10000d96:	d909      	bls.n	10000dac <__udivmoddi4+0x60>
10000d98:	18fb      	adds	r3, r7, r3
10000d9a:	f106 30ff 	add.w	r0, r6, #4294967295
10000d9e:	f080 8119 	bcs.w	10000fd4 <__udivmoddi4+0x288>
10000da2:	4299      	cmp	r1, r3
10000da4:	f240 8116 	bls.w	10000fd4 <__udivmoddi4+0x288>
10000da8:	3e02      	subs	r6, #2
10000daa:	443b      	add	r3, r7
10000dac:	1a5b      	subs	r3, r3, r1
10000dae:	b2a4      	uxth	r4, r4
10000db0:	fbb3 f0f8 	udiv	r0, r3, r8
10000db4:	fb08 3310 	mls	r3, r8, r0, r3
10000db8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
10000dbc:	fb00 fe0e 	mul.w	lr, r0, lr
10000dc0:	45a6      	cmp	lr, r4
10000dc2:	d909      	bls.n	10000dd8 <__udivmoddi4+0x8c>
10000dc4:	193c      	adds	r4, r7, r4
10000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
10000dca:	f080 8105 	bcs.w	10000fd8 <__udivmoddi4+0x28c>
10000dce:	45a6      	cmp	lr, r4
10000dd0:	f240 8102 	bls.w	10000fd8 <__udivmoddi4+0x28c>
10000dd4:	3802      	subs	r0, #2
10000dd6:	443c      	add	r4, r7
10000dd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
10000ddc:	eba4 040e 	sub.w	r4, r4, lr
10000de0:	2600      	movs	r6, #0
10000de2:	b11d      	cbz	r5, 10000dec <__udivmoddi4+0xa0>
10000de4:	40d4      	lsrs	r4, r2
10000de6:	2300      	movs	r3, #0
10000de8:	e9c5 4300 	strd	r4, r3, [r5]
10000dec:	4631      	mov	r1, r6
10000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10000df2:	b902      	cbnz	r2, 10000df6 <__udivmoddi4+0xaa>
10000df4:	deff      	udf	#255	; 0xff
10000df6:	fab2 f282 	clz	r2, r2
10000dfa:	2a00      	cmp	r2, #0
10000dfc:	d150      	bne.n	10000ea0 <__udivmoddi4+0x154>
10000dfe:	1bcb      	subs	r3, r1, r7
10000e00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
10000e04:	fa1f f887 	uxth.w	r8, r7
10000e08:	2601      	movs	r6, #1
10000e0a:	fbb3 fcfe 	udiv	ip, r3, lr
10000e0e:	0c21      	lsrs	r1, r4, #16
10000e10:	fb0e 331c 	mls	r3, lr, ip, r3
10000e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
10000e18:	fb08 f30c 	mul.w	r3, r8, ip
10000e1c:	428b      	cmp	r3, r1
10000e1e:	d907      	bls.n	10000e30 <__udivmoddi4+0xe4>
10000e20:	1879      	adds	r1, r7, r1
10000e22:	f10c 30ff 	add.w	r0, ip, #4294967295
10000e26:	d202      	bcs.n	10000e2e <__udivmoddi4+0xe2>
10000e28:	428b      	cmp	r3, r1
10000e2a:	f200 80e9 	bhi.w	10001000 <__udivmoddi4+0x2b4>
10000e2e:	4684      	mov	ip, r0
10000e30:	1ac9      	subs	r1, r1, r3
10000e32:	b2a3      	uxth	r3, r4
10000e34:	fbb1 f0fe 	udiv	r0, r1, lr
10000e38:	fb0e 1110 	mls	r1, lr, r0, r1
10000e3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
10000e40:	fb08 f800 	mul.w	r8, r8, r0
10000e44:	45a0      	cmp	r8, r4
10000e46:	d907      	bls.n	10000e58 <__udivmoddi4+0x10c>
10000e48:	193c      	adds	r4, r7, r4
10000e4a:	f100 33ff 	add.w	r3, r0, #4294967295
10000e4e:	d202      	bcs.n	10000e56 <__udivmoddi4+0x10a>
10000e50:	45a0      	cmp	r8, r4
10000e52:	f200 80d9 	bhi.w	10001008 <__udivmoddi4+0x2bc>
10000e56:	4618      	mov	r0, r3
10000e58:	eba4 0408 	sub.w	r4, r4, r8
10000e5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
10000e60:	e7bf      	b.n	10000de2 <__udivmoddi4+0x96>
10000e62:	428b      	cmp	r3, r1
10000e64:	d909      	bls.n	10000e7a <__udivmoddi4+0x12e>
10000e66:	2d00      	cmp	r5, #0
10000e68:	f000 80b1 	beq.w	10000fce <__udivmoddi4+0x282>
10000e6c:	2600      	movs	r6, #0
10000e6e:	e9c5 0100 	strd	r0, r1, [r5]
10000e72:	4630      	mov	r0, r6
10000e74:	4631      	mov	r1, r6
10000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10000e7a:	fab3 f683 	clz	r6, r3
10000e7e:	2e00      	cmp	r6, #0
10000e80:	d14a      	bne.n	10000f18 <__udivmoddi4+0x1cc>
10000e82:	428b      	cmp	r3, r1
10000e84:	d302      	bcc.n	10000e8c <__udivmoddi4+0x140>
10000e86:	4282      	cmp	r2, r0
10000e88:	f200 80b8 	bhi.w	10000ffc <__udivmoddi4+0x2b0>
10000e8c:	1a84      	subs	r4, r0, r2
10000e8e:	eb61 0103 	sbc.w	r1, r1, r3
10000e92:	2001      	movs	r0, #1
10000e94:	468c      	mov	ip, r1
10000e96:	2d00      	cmp	r5, #0
10000e98:	d0a8      	beq.n	10000dec <__udivmoddi4+0xa0>
10000e9a:	e9c5 4c00 	strd	r4, ip, [r5]
10000e9e:	e7a5      	b.n	10000dec <__udivmoddi4+0xa0>
10000ea0:	f1c2 0320 	rsb	r3, r2, #32
10000ea4:	fa20 f603 	lsr.w	r6, r0, r3
10000ea8:	4097      	lsls	r7, r2
10000eaa:	fa01 f002 	lsl.w	r0, r1, r2
10000eae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
10000eb2:	40d9      	lsrs	r1, r3
10000eb4:	4330      	orrs	r0, r6
10000eb6:	0c03      	lsrs	r3, r0, #16
10000eb8:	fbb1 f6fe 	udiv	r6, r1, lr
10000ebc:	fa1f f887 	uxth.w	r8, r7
10000ec0:	fb0e 1116 	mls	r1, lr, r6, r1
10000ec4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
10000ec8:	fb06 f108 	mul.w	r1, r6, r8
10000ecc:	4299      	cmp	r1, r3
10000ece:	fa04 f402 	lsl.w	r4, r4, r2
10000ed2:	d909      	bls.n	10000ee8 <__udivmoddi4+0x19c>
10000ed4:	18fb      	adds	r3, r7, r3
10000ed6:	f106 3cff 	add.w	ip, r6, #4294967295
10000eda:	f080 808d 	bcs.w	10000ff8 <__udivmoddi4+0x2ac>
10000ede:	4299      	cmp	r1, r3
10000ee0:	f240 808a 	bls.w	10000ff8 <__udivmoddi4+0x2ac>
10000ee4:	3e02      	subs	r6, #2
10000ee6:	443b      	add	r3, r7
10000ee8:	1a5b      	subs	r3, r3, r1
10000eea:	b281      	uxth	r1, r0
10000eec:	fbb3 f0fe 	udiv	r0, r3, lr
10000ef0:	fb0e 3310 	mls	r3, lr, r0, r3
10000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
10000ef8:	fb00 f308 	mul.w	r3, r0, r8
10000efc:	428b      	cmp	r3, r1
10000efe:	d907      	bls.n	10000f10 <__udivmoddi4+0x1c4>
10000f00:	1879      	adds	r1, r7, r1
10000f02:	f100 3cff 	add.w	ip, r0, #4294967295
10000f06:	d273      	bcs.n	10000ff0 <__udivmoddi4+0x2a4>
10000f08:	428b      	cmp	r3, r1
10000f0a:	d971      	bls.n	10000ff0 <__udivmoddi4+0x2a4>
10000f0c:	3802      	subs	r0, #2
10000f0e:	4439      	add	r1, r7
10000f10:	1acb      	subs	r3, r1, r3
10000f12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
10000f16:	e778      	b.n	10000e0a <__udivmoddi4+0xbe>
10000f18:	f1c6 0c20 	rsb	ip, r6, #32
10000f1c:	fa03 f406 	lsl.w	r4, r3, r6
10000f20:	fa22 f30c 	lsr.w	r3, r2, ip
10000f24:	431c      	orrs	r4, r3
10000f26:	fa20 f70c 	lsr.w	r7, r0, ip
10000f2a:	fa01 f306 	lsl.w	r3, r1, r6
10000f2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
10000f32:	fa21 f10c 	lsr.w	r1, r1, ip
10000f36:	431f      	orrs	r7, r3
10000f38:	0c3b      	lsrs	r3, r7, #16
10000f3a:	fbb1 f9fe 	udiv	r9, r1, lr
10000f3e:	fa1f f884 	uxth.w	r8, r4
10000f42:	fb0e 1119 	mls	r1, lr, r9, r1
10000f46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
10000f4a:	fb09 fa08 	mul.w	sl, r9, r8
10000f4e:	458a      	cmp	sl, r1
10000f50:	fa02 f206 	lsl.w	r2, r2, r6
10000f54:	fa00 f306 	lsl.w	r3, r0, r6
10000f58:	d908      	bls.n	10000f6c <__udivmoddi4+0x220>
10000f5a:	1861      	adds	r1, r4, r1
10000f5c:	f109 30ff 	add.w	r0, r9, #4294967295
10000f60:	d248      	bcs.n	10000ff4 <__udivmoddi4+0x2a8>
10000f62:	458a      	cmp	sl, r1
10000f64:	d946      	bls.n	10000ff4 <__udivmoddi4+0x2a8>
10000f66:	f1a9 0902 	sub.w	r9, r9, #2
10000f6a:	4421      	add	r1, r4
10000f6c:	eba1 010a 	sub.w	r1, r1, sl
10000f70:	b2bf      	uxth	r7, r7
10000f72:	fbb1 f0fe 	udiv	r0, r1, lr
10000f76:	fb0e 1110 	mls	r1, lr, r0, r1
10000f7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
10000f7e:	fb00 f808 	mul.w	r8, r0, r8
10000f82:	45b8      	cmp	r8, r7
10000f84:	d907      	bls.n	10000f96 <__udivmoddi4+0x24a>
10000f86:	19e7      	adds	r7, r4, r7
10000f88:	f100 31ff 	add.w	r1, r0, #4294967295
10000f8c:	d22e      	bcs.n	10000fec <__udivmoddi4+0x2a0>
10000f8e:	45b8      	cmp	r8, r7
10000f90:	d92c      	bls.n	10000fec <__udivmoddi4+0x2a0>
10000f92:	3802      	subs	r0, #2
10000f94:	4427      	add	r7, r4
10000f96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
10000f9a:	eba7 0708 	sub.w	r7, r7, r8
10000f9e:	fba0 8902 	umull	r8, r9, r0, r2
10000fa2:	454f      	cmp	r7, r9
10000fa4:	46c6      	mov	lr, r8
10000fa6:	4649      	mov	r1, r9
10000fa8:	d31a      	bcc.n	10000fe0 <__udivmoddi4+0x294>
10000faa:	d017      	beq.n	10000fdc <__udivmoddi4+0x290>
10000fac:	b15d      	cbz	r5, 10000fc6 <__udivmoddi4+0x27a>
10000fae:	ebb3 020e 	subs.w	r2, r3, lr
10000fb2:	eb67 0701 	sbc.w	r7, r7, r1
10000fb6:	fa07 fc0c 	lsl.w	ip, r7, ip
10000fba:	40f2      	lsrs	r2, r6
10000fbc:	ea4c 0202 	orr.w	r2, ip, r2
10000fc0:	40f7      	lsrs	r7, r6
10000fc2:	e9c5 2700 	strd	r2, r7, [r5]
10000fc6:	2600      	movs	r6, #0
10000fc8:	4631      	mov	r1, r6
10000fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10000fce:	462e      	mov	r6, r5
10000fd0:	4628      	mov	r0, r5
10000fd2:	e70b      	b.n	10000dec <__udivmoddi4+0xa0>
10000fd4:	4606      	mov	r6, r0
10000fd6:	e6e9      	b.n	10000dac <__udivmoddi4+0x60>
10000fd8:	4618      	mov	r0, r3
10000fda:	e6fd      	b.n	10000dd8 <__udivmoddi4+0x8c>
10000fdc:	4543      	cmp	r3, r8
10000fde:	d2e5      	bcs.n	10000fac <__udivmoddi4+0x260>
10000fe0:	ebb8 0e02 	subs.w	lr, r8, r2
10000fe4:	eb69 0104 	sbc.w	r1, r9, r4
10000fe8:	3801      	subs	r0, #1
10000fea:	e7df      	b.n	10000fac <__udivmoddi4+0x260>
10000fec:	4608      	mov	r0, r1
10000fee:	e7d2      	b.n	10000f96 <__udivmoddi4+0x24a>
10000ff0:	4660      	mov	r0, ip
10000ff2:	e78d      	b.n	10000f10 <__udivmoddi4+0x1c4>
10000ff4:	4681      	mov	r9, r0
10000ff6:	e7b9      	b.n	10000f6c <__udivmoddi4+0x220>
10000ff8:	4666      	mov	r6, ip
10000ffa:	e775      	b.n	10000ee8 <__udivmoddi4+0x19c>
10000ffc:	4630      	mov	r0, r6
10000ffe:	e74a      	b.n	10000e96 <__udivmoddi4+0x14a>
10001000:	f1ac 0c02 	sub.w	ip, ip, #2
10001004:	4439      	add	r1, r7
10001006:	e713      	b.n	10000e30 <__udivmoddi4+0xe4>
10001008:	3802      	subs	r0, #2
1000100a:	443c      	add	r4, r7
1000100c:	e724      	b.n	10000e58 <__udivmoddi4+0x10c>
1000100e:	bf00      	nop

10001010 <__aeabi_idiv0>:
10001010:	4770      	bx	lr
10001012:	bf00      	nop

10001014 <v_LoadFloatModel>:
#include	"DataTransfer.h"

// TODO: TESTAR TUDO NOVAMENTE

void v_LoadFloatModel(netparam_t* xNetParam, float** WBPtr)
{
10001014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10001018:	b098      	sub	sp, #96	; 0x60
1000101a:	af12      	add	r7, sp, #72	; 0x48
1000101c:	6078      	str	r0, [r7, #4]
1000101e:	6039      	str	r1, [r7, #0]
	uint16_t	i;
	uint32_t	values = 0;
10001020:	2300      	movs	r3, #0
10001022:	613b      	str	r3, [r7, #16]
	uint8_t* 	DataPtr;

	DataPtr = (uint8_t*)BASEADDR_FLOATMODEL;
10001024:	4b28      	ldr	r3, [pc, #160]	; (100010c8 <v_LoadFloatModel+0xb4>)
10001026:	60fb      	str	r3, [r7, #12]

	memcpy(xNetParam, DataPtr, sizeof(*xNetParam));
10001028:	2254      	movs	r2, #84	; 0x54
1000102a:	68f9      	ldr	r1, [r7, #12]
1000102c:	6878      	ldr	r0, [r7, #4]
1000102e:	f009 ffd9 	bl	1000afe4 <memcpy>

	v_FloatSetParameters(*xNetParam);
10001032:	687b      	ldr	r3, [r7, #4]
10001034:	681a      	ldr	r2, [r3, #0]
10001036:	f04f 0800 	mov.w	r8, #0
1000103a:	4690      	mov	r8, r2
1000103c:	685a      	ldr	r2, [r3, #4]
1000103e:	2600      	movs	r6, #0
10001040:	4616      	mov	r6, r2
10001042:	689a      	ldr	r2, [r3, #8]
10001044:	2500      	movs	r5, #0
10001046:	4615      	mov	r5, r2
10001048:	68da      	ldr	r2, [r3, #12]
1000104a:	2400      	movs	r4, #0
1000104c:	4614      	mov	r4, r2
1000104e:	4668      	mov	r0, sp
10001050:	3310      	adds	r3, #16
10001052:	2244      	movs	r2, #68	; 0x44
10001054:	4619      	mov	r1, r3
10001056:	f009 ffc5 	bl	1000afe4 <memcpy>
1000105a:	4640      	mov	r0, r8
1000105c:	4631      	mov	r1, r6
1000105e:	462a      	mov	r2, r5
10001060:	4623      	mov	r3, r4
10001062:	f000 f9fb 	bl	1000145c <v_FloatSetParameters>
	v_DynamicAlloc_NeuronVar(WBPtr);
10001066:	6838      	ldr	r0, [r7, #0]
10001068:	f000 fa9a 	bl	100015a0 <v_DynamicAlloc_NeuronVar>

	for (i = 0; i < (xNetParam->Layers - 1); i++)
1000106c:	2300      	movs	r3, #0
1000106e:	82fb      	strh	r3, [r7, #22]
10001070:	e014      	b.n	1000109c <v_LoadFloatModel+0x88>
	{
		values += ((1 + xNetParam->NonLayer[i]) * xNetParam->NonLayer[i + 1]);
10001072:	8afb      	ldrh	r3, [r7, #22]
10001074:	687a      	ldr	r2, [r7, #4]
10001076:	005b      	lsls	r3, r3, #1
10001078:	4413      	add	r3, r2
1000107a:	889b      	ldrh	r3, [r3, #4]
1000107c:	1c5a      	adds	r2, r3, #1
1000107e:	8afb      	ldrh	r3, [r7, #22]
10001080:	3301      	adds	r3, #1
10001082:	6879      	ldr	r1, [r7, #4]
10001084:	005b      	lsls	r3, r3, #1
10001086:	440b      	add	r3, r1
10001088:	889b      	ldrh	r3, [r3, #4]
1000108a:	fb03 f302 	mul.w	r3, r3, r2
1000108e:	461a      	mov	r2, r3
10001090:	693b      	ldr	r3, [r7, #16]
10001092:	4413      	add	r3, r2
10001094:	613b      	str	r3, [r7, #16]
	for (i = 0; i < (xNetParam->Layers - 1); i++)
10001096:	8afb      	ldrh	r3, [r7, #22]
10001098:	3301      	adds	r3, #1
1000109a:	82fb      	strh	r3, [r7, #22]
1000109c:	8afa      	ldrh	r2, [r7, #22]
1000109e:	687b      	ldr	r3, [r7, #4]
100010a0:	885b      	ldrh	r3, [r3, #2]
100010a2:	3b01      	subs	r3, #1
100010a4:	429a      	cmp	r2, r3
100010a6:	dbe4      	blt.n	10001072 <v_LoadFloatModel+0x5e>
	}

	memcpy(*WBPtr, &DataPtr[sizeof(*xNetParam)], (values * sizeof(float)));
100010a8:	683b      	ldr	r3, [r7, #0]
100010aa:	6818      	ldr	r0, [r3, #0]
100010ac:	68fb      	ldr	r3, [r7, #12]
100010ae:	f103 0154 	add.w	r1, r3, #84	; 0x54
100010b2:	693b      	ldr	r3, [r7, #16]
100010b4:	009b      	lsls	r3, r3, #2
100010b6:	461a      	mov	r2, r3
100010b8:	f009 ff94 	bl	1000afe4 <memcpy>
}
100010bc:	bf00      	nop
100010be:	3718      	adds	r7, #24
100010c0:	46bd      	mov	sp, r7
100010c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
100010c6:	bf00      	nop
100010c8:	080c0000 	.word	0x080c0000

100010cc <v_LoadIntModel>:
//	fwrite(WBPtr, sizeof(float), values, FPtr);
//	fclose(FPtr);
//}

void v_LoadIntModel(netparam_t *xNetParam, distribution_t *xDistribution, quantizedval_t *xQuantizedVal)
{
100010cc:	b5b0      	push	{r4, r5, r7, lr}
100010ce:	b09c      	sub	sp, #112	; 0x70
100010d0:	af14      	add	r7, sp, #80	; 0x50
100010d2:	60f8      	str	r0, [r7, #12]
100010d4:	60b9      	str	r1, [r7, #8]
100010d6:	607a      	str	r2, [r7, #4]
	uint16_t	i;
	uint32_t	values = 0;
100010d8:	2300      	movs	r3, #0
100010da:	61bb      	str	r3, [r7, #24]
	uint8_t*	DataPtr;

	DataPtr = (uint8_t*)BASEADDR_INTMODEL;
100010dc:	4ba7      	ldr	r3, [pc, #668]	; (1000137c <v_LoadIntModel+0x2b0>)
100010de:	617b      	str	r3, [r7, #20]

	memcpy(xNetParam, DataPtr, sizeof(*xNetParam));
100010e0:	2254      	movs	r2, #84	; 0x54
100010e2:	6979      	ldr	r1, [r7, #20]
100010e4:	68f8      	ldr	r0, [r7, #12]
100010e6:	f009 ff7d 	bl	1000afe4 <memcpy>

	v_DynamicAlloc_quant(xQuantizedVal, xDistribution, *xNetParam);
100010ea:	68fb      	ldr	r3, [r7, #12]
100010ec:	681a      	ldr	r2, [r3, #0]
100010ee:	2500      	movs	r5, #0
100010f0:	4615      	mov	r5, r2
100010f2:	685a      	ldr	r2, [r3, #4]
100010f4:	2400      	movs	r4, #0
100010f6:	4614      	mov	r4, r2
100010f8:	4668      	mov	r0, sp
100010fa:	3308      	adds	r3, #8
100010fc:	224c      	movs	r2, #76	; 0x4c
100010fe:	4619      	mov	r1, r3
10001100:	f009 ff70 	bl	1000afe4 <memcpy>
10001104:	462a      	mov	r2, r5
10001106:	4623      	mov	r3, r4
10001108:	68b9      	ldr	r1, [r7, #8]
1000110a:	6878      	ldr	r0, [r7, #4]
1000110c:	f000 fc36 	bl	1000197c <v_DynamicAlloc_quant>

	for (i = 0; i < (xNetParam->Layers - 1); i++)
10001110:	2300      	movs	r3, #0
10001112:	83fb      	strh	r3, [r7, #30]
10001114:	e014      	b.n	10001140 <v_LoadIntModel+0x74>
	{
		values += ((1 + xNetParam->NonLayer[i]) * xNetParam->NonLayer[i + 1]);
10001116:	8bfb      	ldrh	r3, [r7, #30]
10001118:	68fa      	ldr	r2, [r7, #12]
1000111a:	005b      	lsls	r3, r3, #1
1000111c:	4413      	add	r3, r2
1000111e:	889b      	ldrh	r3, [r3, #4]
10001120:	1c5a      	adds	r2, r3, #1
10001122:	8bfb      	ldrh	r3, [r7, #30]
10001124:	3301      	adds	r3, #1
10001126:	68f9      	ldr	r1, [r7, #12]
10001128:	005b      	lsls	r3, r3, #1
1000112a:	440b      	add	r3, r1
1000112c:	889b      	ldrh	r3, [r3, #4]
1000112e:	fb03 f302 	mul.w	r3, r3, r2
10001132:	461a      	mov	r2, r3
10001134:	69bb      	ldr	r3, [r7, #24]
10001136:	4413      	add	r3, r2
10001138:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < (xNetParam->Layers - 1); i++)
1000113a:	8bfb      	ldrh	r3, [r7, #30]
1000113c:	3301      	adds	r3, #1
1000113e:	83fb      	strh	r3, [r7, #30]
10001140:	8bfa      	ldrh	r2, [r7, #30]
10001142:	68fb      	ldr	r3, [r7, #12]
10001144:	885b      	ldrh	r3, [r3, #2]
10001146:	3b01      	subs	r3, #1
10001148:	429a      	cmp	r2, r3
1000114a:	dbe4      	blt.n	10001116 <v_LoadIntModel+0x4a>
	}

	memcpy(xDistribution->W_min,		&DataPtr[sizeof(*xNetParam)], (sizeof(float) * xNetParam->Layers));
1000114c:	68bb      	ldr	r3, [r7, #8]
1000114e:	6818      	ldr	r0, [r3, #0]
10001150:	697b      	ldr	r3, [r7, #20]
10001152:	f103 0154 	add.w	r1, r3, #84	; 0x54
10001156:	68fb      	ldr	r3, [r7, #12]
10001158:	885b      	ldrh	r3, [r3, #2]
1000115a:	009b      	lsls	r3, r3, #2
1000115c:	461a      	mov	r2, r3
1000115e:	f009 ff41 	bl	1000afe4 <memcpy>
	memcpy(xDistribution->W_max,		&DataPtr[sizeof(*xNetParam)	+ 1*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
10001162:	68bb      	ldr	r3, [r7, #8]
10001164:	6858      	ldr	r0, [r3, #4]
10001166:	68fb      	ldr	r3, [r7, #12]
10001168:	885b      	ldrh	r3, [r3, #2]
1000116a:	3315      	adds	r3, #21
1000116c:	009b      	lsls	r3, r3, #2
1000116e:	697a      	ldr	r2, [r7, #20]
10001170:	18d1      	adds	r1, r2, r3
10001172:	68fb      	ldr	r3, [r7, #12]
10001174:	885b      	ldrh	r3, [r3, #2]
10001176:	009b      	lsls	r3, r3, #2
10001178:	461a      	mov	r2, r3
1000117a:	f009 ff33 	bl	1000afe4 <memcpy>
	memcpy(xDistribution->b_min,		&DataPtr[sizeof(*xNetParam)	+ 2*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
1000117e:	68bb      	ldr	r3, [r7, #8]
10001180:	6898      	ldr	r0, [r3, #8]
10001182:	68fb      	ldr	r3, [r7, #12]
10001184:	885b      	ldrh	r3, [r3, #2]
10001186:	00db      	lsls	r3, r3, #3
10001188:	3354      	adds	r3, #84	; 0x54
1000118a:	697a      	ldr	r2, [r7, #20]
1000118c:	18d1      	adds	r1, r2, r3
1000118e:	68fb      	ldr	r3, [r7, #12]
10001190:	885b      	ldrh	r3, [r3, #2]
10001192:	009b      	lsls	r3, r3, #2
10001194:	461a      	mov	r2, r3
10001196:	f009 ff25 	bl	1000afe4 <memcpy>
	memcpy(xDistribution->b_max,		&DataPtr[sizeof(*xNetParam)	+ 3*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
1000119a:	68bb      	ldr	r3, [r7, #8]
1000119c:	68d8      	ldr	r0, [r3, #12]
1000119e:	68fb      	ldr	r3, [r7, #12]
100011a0:	885b      	ldrh	r3, [r3, #2]
100011a2:	461a      	mov	r2, r3
100011a4:	4613      	mov	r3, r2
100011a6:	005b      	lsls	r3, r3, #1
100011a8:	4413      	add	r3, r2
100011aa:	009b      	lsls	r3, r3, #2
100011ac:	3354      	adds	r3, #84	; 0x54
100011ae:	697a      	ldr	r2, [r7, #20]
100011b0:	18d1      	adds	r1, r2, r3
100011b2:	68fb      	ldr	r3, [r7, #12]
100011b4:	885b      	ldrh	r3, [r3, #2]
100011b6:	009b      	lsls	r3, r3, #2
100011b8:	461a      	mov	r2, r3
100011ba:	f009 ff13 	bl	1000afe4 <memcpy>
	memcpy(xDistribution->func_min,		&DataPtr[sizeof(*xNetParam) + 4*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
100011be:	68bb      	ldr	r3, [r7, #8]
100011c0:	6918      	ldr	r0, [r3, #16]
100011c2:	68fb      	ldr	r3, [r7, #12]
100011c4:	885b      	ldrh	r3, [r3, #2]
100011c6:	011b      	lsls	r3, r3, #4
100011c8:	3354      	adds	r3, #84	; 0x54
100011ca:	697a      	ldr	r2, [r7, #20]
100011cc:	18d1      	adds	r1, r2, r3
100011ce:	68fb      	ldr	r3, [r7, #12]
100011d0:	885b      	ldrh	r3, [r3, #2]
100011d2:	009b      	lsls	r3, r3, #2
100011d4:	461a      	mov	r2, r3
100011d6:	f009 ff05 	bl	1000afe4 <memcpy>
	memcpy(xDistribution->func_max,		&DataPtr[sizeof(*xNetParam) + 5*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
100011da:	68bb      	ldr	r3, [r7, #8]
100011dc:	6958      	ldr	r0, [r3, #20]
100011de:	68fb      	ldr	r3, [r7, #12]
100011e0:	885b      	ldrh	r3, [r3, #2]
100011e2:	461a      	mov	r2, r3
100011e4:	4613      	mov	r3, r2
100011e6:	009b      	lsls	r3, r3, #2
100011e8:	4413      	add	r3, r2
100011ea:	009b      	lsls	r3, r3, #2
100011ec:	3354      	adds	r3, #84	; 0x54
100011ee:	697a      	ldr	r2, [r7, #20]
100011f0:	18d1      	adds	r1, r2, r3
100011f2:	68fb      	ldr	r3, [r7, #12]
100011f4:	885b      	ldrh	r3, [r3, #2]
100011f6:	009b      	lsls	r3, r3, #2
100011f8:	461a      	mov	r2, r3
100011fa:	f009 fef3 	bl	1000afe4 <memcpy>
	memcpy(xQuantizedVal->Sy,			&DataPtr[sizeof(*xNetParam)	+ 6 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
100011fe:	687b      	ldr	r3, [r7, #4]
10001200:	6818      	ldr	r0, [r3, #0]
10001202:	68fb      	ldr	r3, [r7, #12]
10001204:	885b      	ldrh	r3, [r3, #2]
10001206:	461a      	mov	r2, r3
10001208:	4613      	mov	r3, r2
1000120a:	005b      	lsls	r3, r3, #1
1000120c:	4413      	add	r3, r2
1000120e:	00db      	lsls	r3, r3, #3
10001210:	3354      	adds	r3, #84	; 0x54
10001212:	697a      	ldr	r2, [r7, #20]
10001214:	18d1      	adds	r1, r2, r3
10001216:	68fb      	ldr	r3, [r7, #12]
10001218:	885b      	ldrh	r3, [r3, #2]
1000121a:	009b      	lsls	r3, r3, #2
1000121c:	461a      	mov	r2, r3
1000121e:	f009 fee1 	bl	1000afe4 <memcpy>
	memcpy(xQuantizedVal->Sz,			&DataPtr[sizeof(*xNetParam)	+ 7 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
10001222:	687b      	ldr	r3, [r7, #4]
10001224:	6858      	ldr	r0, [r3, #4]
10001226:	68fb      	ldr	r3, [r7, #12]
10001228:	885b      	ldrh	r3, [r3, #2]
1000122a:	461a      	mov	r2, r3
1000122c:	4613      	mov	r3, r2
1000122e:	00db      	lsls	r3, r3, #3
10001230:	1a9b      	subs	r3, r3, r2
10001232:	009b      	lsls	r3, r3, #2
10001234:	3354      	adds	r3, #84	; 0x54
10001236:	697a      	ldr	r2, [r7, #20]
10001238:	18d1      	adds	r1, r2, r3
1000123a:	68fb      	ldr	r3, [r7, #12]
1000123c:	885b      	ldrh	r3, [r3, #2]
1000123e:	009b      	lsls	r3, r3, #2
10001240:	461a      	mov	r2, r3
10001242:	f009 fecf 	bl	1000afe4 <memcpy>
	memcpy(xQuantizedVal->Sw,			&DataPtr[sizeof(*xNetParam)	+ 8 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
10001246:	687b      	ldr	r3, [r7, #4]
10001248:	6898      	ldr	r0, [r3, #8]
1000124a:	68fb      	ldr	r3, [r7, #12]
1000124c:	885b      	ldrh	r3, [r3, #2]
1000124e:	015b      	lsls	r3, r3, #5
10001250:	3354      	adds	r3, #84	; 0x54
10001252:	697a      	ldr	r2, [r7, #20]
10001254:	18d1      	adds	r1, r2, r3
10001256:	68fb      	ldr	r3, [r7, #12]
10001258:	885b      	ldrh	r3, [r3, #2]
1000125a:	009b      	lsls	r3, r3, #2
1000125c:	461a      	mov	r2, r3
1000125e:	f009 fec1 	bl	1000afe4 <memcpy>
	memcpy(xQuantizedVal->Sb,			&DataPtr[sizeof(*xNetParam)	+ 9 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
10001262:	687b      	ldr	r3, [r7, #4]
10001264:	68d8      	ldr	r0, [r3, #12]
10001266:	68fb      	ldr	r3, [r7, #12]
10001268:	885b      	ldrh	r3, [r3, #2]
1000126a:	461a      	mov	r2, r3
1000126c:	4613      	mov	r3, r2
1000126e:	00db      	lsls	r3, r3, #3
10001270:	4413      	add	r3, r2
10001272:	009b      	lsls	r3, r3, #2
10001274:	3354      	adds	r3, #84	; 0x54
10001276:	697a      	ldr	r2, [r7, #20]
10001278:	18d1      	adds	r1, r2, r3
1000127a:	68fb      	ldr	r3, [r7, #12]
1000127c:	885b      	ldrh	r3, [r3, #2]
1000127e:	009b      	lsls	r3, r3, #2
10001280:	461a      	mov	r2, r3
10001282:	f009 feaf 	bl	1000afe4 <memcpy>
	memcpy(xQuantizedVal->Ssumcomp,		&DataPtr[sizeof(*xNetParam) + 10 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
10001286:	687b      	ldr	r3, [r7, #4]
10001288:	6918      	ldr	r0, [r3, #16]
1000128a:	68fb      	ldr	r3, [r7, #12]
1000128c:	885b      	ldrh	r3, [r3, #2]
1000128e:	461a      	mov	r2, r3
10001290:	4613      	mov	r3, r2
10001292:	009b      	lsls	r3, r3, #2
10001294:	4413      	add	r3, r2
10001296:	00db      	lsls	r3, r3, #3
10001298:	3354      	adds	r3, #84	; 0x54
1000129a:	697a      	ldr	r2, [r7, #20]
1000129c:	18d1      	adds	r1, r2, r3
1000129e:	68fb      	ldr	r3, [r7, #12]
100012a0:	885b      	ldrh	r3, [r3, #2]
100012a2:	009b      	lsls	r3, r3, #2
100012a4:	461a      	mov	r2, r3
100012a6:	f009 fe9d 	bl	1000afe4 <memcpy>
	memcpy(xQuantizedVal->Sbiascomp,	&DataPtr[sizeof(*xNetParam) + 11 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
100012aa:	687b      	ldr	r3, [r7, #4]
100012ac:	6958      	ldr	r0, [r3, #20]
100012ae:	68fb      	ldr	r3, [r7, #12]
100012b0:	885b      	ldrh	r3, [r3, #2]
100012b2:	461a      	mov	r2, r3
100012b4:	232c      	movs	r3, #44	; 0x2c
100012b6:	fb03 f302 	mul.w	r3, r3, r2
100012ba:	3354      	adds	r3, #84	; 0x54
100012bc:	697a      	ldr	r2, [r7, #20]
100012be:	18d1      	adds	r1, r2, r3
100012c0:	68fb      	ldr	r3, [r7, #12]
100012c2:	885b      	ldrh	r3, [r3, #2]
100012c4:	009b      	lsls	r3, r3, #2
100012c6:	461a      	mov	r2, r3
100012c8:	f009 fe8c 	bl	1000afe4 <memcpy>
	memcpy(xQuantizedVal->ZWsum,		&DataPtr[sizeof(*xNetParam) + 12 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
100012cc:	687b      	ldr	r3, [r7, #4]
100012ce:	6998      	ldr	r0, [r3, #24]
100012d0:	68fb      	ldr	r3, [r7, #12]
100012d2:	885b      	ldrh	r3, [r3, #2]
100012d4:	461a      	mov	r2, r3
100012d6:	4613      	mov	r3, r2
100012d8:	005b      	lsls	r3, r3, #1
100012da:	4413      	add	r3, r2
100012dc:	011b      	lsls	r3, r3, #4
100012de:	3354      	adds	r3, #84	; 0x54
100012e0:	697a      	ldr	r2, [r7, #20]
100012e2:	18d1      	adds	r1, r2, r3
100012e4:	68fb      	ldr	r3, [r7, #12]
100012e6:	885b      	ldrh	r3, [r3, #2]
100012e8:	009b      	lsls	r3, r3, #2
100012ea:	461a      	mov	r2, r3
100012ec:	f009 fe7a 	bl	1000afe4 <memcpy>
	memcpy(xQuantizedVal->Zy,			&DataPtr[sizeof(*xNetParam) + 13 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
100012f0:	687b      	ldr	r3, [r7, #4]
100012f2:	69d8      	ldr	r0, [r3, #28]
100012f4:	68fb      	ldr	r3, [r7, #12]
100012f6:	885b      	ldrh	r3, [r3, #2]
100012f8:	461a      	mov	r2, r3
100012fa:	2334      	movs	r3, #52	; 0x34
100012fc:	fb03 f302 	mul.w	r3, r3, r2
10001300:	3354      	adds	r3, #84	; 0x54
10001302:	697a      	ldr	r2, [r7, #20]
10001304:	18d1      	adds	r1, r2, r3
10001306:	68fb      	ldr	r3, [r7, #12]
10001308:	885b      	ldrh	r3, [r3, #2]
1000130a:	009b      	lsls	r3, r3, #2
1000130c:	461a      	mov	r2, r3
1000130e:	f009 fe69 	bl	1000afe4 <memcpy>

	memcpy(((uint8_t*)xQuantizedVal->WBPtr), &DataPtr[sizeof(*xNetParam) + 14 * (sizeof(float) * xNetParam->Layers)], ceil((values * xNetParam->xVarPrecision.precision) / 8.0));
10001312:	687b      	ldr	r3, [r7, #4]
10001314:	6a1c      	ldr	r4, [r3, #32]
10001316:	68fb      	ldr	r3, [r7, #12]
10001318:	885b      	ldrh	r3, [r3, #2]
1000131a:	461a      	mov	r2, r3
1000131c:	4613      	mov	r3, r2
1000131e:	00db      	lsls	r3, r3, #3
10001320:	1a9b      	subs	r3, r3, r2
10001322:	00db      	lsls	r3, r3, #3
10001324:	3354      	adds	r3, #84	; 0x54
10001326:	697a      	ldr	r2, [r7, #20]
10001328:	18d5      	adds	r5, r2, r3
1000132a:	68fb      	ldr	r3, [r7, #12]
1000132c:	785b      	ldrb	r3, [r3, #1]
1000132e:	461a      	mov	r2, r3
10001330:	69bb      	ldr	r3, [r7, #24]
10001332:	fb03 f302 	mul.w	r3, r3, r2
10001336:	4618      	mov	r0, r3
10001338:	f7fe ffcc 	bl	100002d4 <__aeabi_ui2d>
1000133c:	f04f 0200 	mov.w	r2, #0
10001340:	4b0f      	ldr	r3, [pc, #60]	; (10001380 <v_LoadIntModel+0x2b4>)
10001342:	f7ff f96b 	bl	1000061c <__aeabi_ddiv>
10001346:	4602      	mov	r2, r0
10001348:	460b      	mov	r3, r1
1000134a:	ec43 2b17 	vmov	d7, r2, r3
1000134e:	eeb0 0a47 	vmov.f32	s0, s14
10001352:	eef0 0a67 	vmov.f32	s1, s15
10001356:	f00a f827 	bl	1000b3a8 <ceil>
1000135a:	ec53 2b10 	vmov	r2, r3, d0
1000135e:	4610      	mov	r0, r2
10001360:	4619      	mov	r1, r3
10001362:	f7ff faf3 	bl	1000094c <__aeabi_d2uiz>
10001366:	4603      	mov	r3, r0
10001368:	461a      	mov	r2, r3
1000136a:	4629      	mov	r1, r5
1000136c:	4620      	mov	r0, r4
1000136e:	f009 fe39 	bl	1000afe4 <memcpy>
}
10001372:	bf00      	nop
10001374:	3720      	adds	r7, #32
10001376:	46bd      	mov	sp, r7
10001378:	bdb0      	pop	{r4, r5, r7, pc}
1000137a:	bf00      	nop
1000137c:	080e0000 	.word	0x080e0000
10001380:	40200000 	.word	0x40200000

10001384 <v_LoadTestDataNum>:
//
//	fclose(FPtr);
//}

void v_LoadTestDataNum(DataSet_t* xDataSet, netparam_t	xNetParam, uint16_t num)
{
10001384:	b084      	sub	sp, #16
10001386:	b580      	push	{r7, lr}
10001388:	b084      	sub	sp, #16
1000138a:	af00      	add	r7, sp, #0
1000138c:	6078      	str	r0, [r7, #4]
1000138e:	f107 001c 	add.w	r0, r7, #28
10001392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t* DataPtr;

	DataPtr = (uint8_t*)BASEADDR_DATASET;
10001396:	4b30      	ldr	r3, [pc, #192]	; (10001458 <v_LoadTestDataNum+0xd4>)
10001398:	60fb      	str	r3, [r7, #12]

	memcpy(&(xDataSet->test_size), &DataPtr[0], sizeof(uint16_t));
1000139a:	687b      	ldr	r3, [r7, #4]
1000139c:	3314      	adds	r3, #20
1000139e:	68fa      	ldr	r2, [r7, #12]
100013a0:	8812      	ldrh	r2, [r2, #0]
100013a2:	b292      	uxth	r2, r2
100013a4:	801a      	strh	r2, [r3, #0]

	if (xDataSet->x_test != NULL)
100013a6:	687b      	ldr	r3, [r7, #4]
100013a8:	68db      	ldr	r3, [r3, #12]
100013aa:	2b00      	cmp	r3, #0
100013ac:	d004      	beq.n	100013b8 <v_LoadTestDataNum+0x34>
	{
		free(xDataSet->x_test);
100013ae:	687b      	ldr	r3, [r7, #4]
100013b0:	68db      	ldr	r3, [r3, #12]
100013b2:	4618      	mov	r0, r3
100013b4:	f009 fe0e 	bl	1000afd4 <free>
	}
	if (xDataSet->y_test != NULL)
100013b8:	687b      	ldr	r3, [r7, #4]
100013ba:	691b      	ldr	r3, [r3, #16]
100013bc:	2b00      	cmp	r3, #0
100013be:	d004      	beq.n	100013ca <v_LoadTestDataNum+0x46>
	{
		free(xDataSet->y_test);
100013c0:	687b      	ldr	r3, [r7, #4]
100013c2:	691b      	ldr	r3, [r3, #16]
100013c4:	4618      	mov	r0, r3
100013c6:	f009 fe05 	bl	1000afd4 <free>
	}

	xDataSet->x_test = malloc(sizeof(float) * 40);
100013ca:	20a0      	movs	r0, #160	; 0xa0
100013cc:	f009 fdfa 	bl	1000afc4 <malloc>
100013d0:	4603      	mov	r3, r0
100013d2:	461a      	mov	r2, r3
100013d4:	687b      	ldr	r3, [r7, #4]
100013d6:	60da      	str	r2, [r3, #12]
	xDataSet->y_test = malloc(sizeof(float));
100013d8:	2004      	movs	r0, #4
100013da:	f009 fdf3 	bl	1000afc4 <malloc>
100013de:	4603      	mov	r3, r0
100013e0:	461a      	mov	r2, r3
100013e2:	687b      	ldr	r3, [r7, #4]
100013e4:	611a      	str	r2, [r3, #16]

	memcpy(xDataSet->x_test, &DataPtr[sizeof(uint16_t)+(num*(xNetParam.NonLayer[0])*sizeof(float))], (sizeof(float) * xNetParam.NonLayer[0]));
100013e6:	687b      	ldr	r3, [r7, #4]
100013e8:	68d8      	ldr	r0, [r3, #12]
100013ea:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
100013ee:	8c3a      	ldrh	r2, [r7, #32]
100013f0:	fb02 f303 	mul.w	r3, r2, r3
100013f4:	009b      	lsls	r3, r3, #2
100013f6:	3302      	adds	r3, #2
100013f8:	68fa      	ldr	r2, [r7, #12]
100013fa:	4413      	add	r3, r2
100013fc:	8c3a      	ldrh	r2, [r7, #32]
100013fe:	0092      	lsls	r2, r2, #2
10001400:	4619      	mov	r1, r3
10001402:	f009 fdef 	bl	1000afe4 <memcpy>
	memcpy(xDataSet->y_test, &DataPtr[sizeof(uint16_t) + (xDataSet->test_size * sizeof(float) * xNetParam.NonLayer[0]) + (num * (xNetParam.NonLayer[xNetParam.Layers - 1]) * sizeof(float))], (sizeof(float) * xNetParam.NonLayer[xNetParam.Layers - 1]));
10001406:	687b      	ldr	r3, [r7, #4]
10001408:	6918      	ldr	r0, [r3, #16]
1000140a:	687b      	ldr	r3, [r7, #4]
1000140c:	8a9b      	ldrh	r3, [r3, #20]
1000140e:	8c3a      	ldrh	r2, [r7, #32]
10001410:	fb02 f203 	mul.w	r2, r2, r3
10001414:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
10001418:	8bfb      	ldrh	r3, [r7, #30]
1000141a:	3b01      	subs	r3, #1
1000141c:	005b      	lsls	r3, r3, #1
1000141e:	f107 0c18 	add.w	ip, r7, #24
10001422:	4463      	add	r3, ip
10001424:	891b      	ldrh	r3, [r3, #8]
10001426:	fb03 f301 	mul.w	r3, r3, r1
1000142a:	4413      	add	r3, r2
1000142c:	009b      	lsls	r3, r3, #2
1000142e:	3302      	adds	r3, #2
10001430:	68fa      	ldr	r2, [r7, #12]
10001432:	18d1      	adds	r1, r2, r3
10001434:	8bfb      	ldrh	r3, [r7, #30]
10001436:	3b01      	subs	r3, #1
10001438:	005b      	lsls	r3, r3, #1
1000143a:	f107 0218 	add.w	r2, r7, #24
1000143e:	4413      	add	r3, r2
10001440:	891b      	ldrh	r3, [r3, #8]
10001442:	009b      	lsls	r3, r3, #2
10001444:	461a      	mov	r2, r3
10001446:	f009 fdcd 	bl	1000afe4 <memcpy>
}
1000144a:	bf00      	nop
1000144c:	3710      	adds	r7, #16
1000144e:	46bd      	mov	sp, r7
10001450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
10001454:	b004      	add	sp, #16
10001456:	4770      	bx	lr
10001458:	08040000 	.word	0x08040000

1000145c <v_FloatSetParameters>:

//************************************************************************************************
//	SET STRUCTS
//************************************************************************************************
void v_FloatSetParameters(netparam_t	input_xNetParam)
{
1000145c:	b084      	sub	sp, #16
1000145e:	b580      	push	{r7, lr}
10001460:	af00      	add	r7, sp, #0
10001462:	f107 0c08 	add.w	ip, r7, #8
10001466:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	xNetParam = input_xNetParam;
1000146a:	4b07      	ldr	r3, [pc, #28]	; (10001488 <v_FloatSetParameters+0x2c>)
1000146c:	4618      	mov	r0, r3
1000146e:	f107 0308 	add.w	r3, r7, #8
10001472:	2254      	movs	r2, #84	; 0x54
10001474:	4619      	mov	r1, r3
10001476:	f009 fdb5 	bl	1000afe4 <memcpy>
}
1000147a:	bf00      	nop
1000147c:	46bd      	mov	sp, r7
1000147e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
10001482:	b004      	add	sp, #16
10001484:	4770      	bx	lr
10001486:	bf00      	nop
10001488:	200004ec 	.word	0x200004ec

1000148c <v_float_SetPtr>:

void v_float_SetPtr(float* input_WBPtr)
{
1000148c:	b480      	push	{r7}
1000148e:	b083      	sub	sp, #12
10001490:	af00      	add	r7, sp, #0
10001492:	6078      	str	r0, [r7, #4]
	WBPtr = input_WBPtr;
10001494:	4a04      	ldr	r2, [pc, #16]	; (100014a8 <v_float_SetPtr+0x1c>)
10001496:	687b      	ldr	r3, [r7, #4]
10001498:	6013      	str	r3, [r2, #0]
}
1000149a:	bf00      	nop
1000149c:	370c      	adds	r7, #12
1000149e:	46bd      	mov	sp, r7
100014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
100014a4:	4770      	bx	lr
100014a6:	bf00      	nop
100014a8:	200004e8 	.word	0x200004e8

100014ac <v_DynamicAllocForwardProp>:
//**************************************************/**
//	IN		xNetParam			(NETWORK HYPERPARAMETERS STRUCT)
//	OUT		*ptr				(pointer to void)
//**************************************************
void v_DynamicAllocForwardProp(float** ZPtrPtr, float** FuncPtrPtr)
{
100014ac:	b580      	push	{r7, lr}
100014ae:	b084      	sub	sp, #16
100014b0:	af00      	add	r7, sp, #0
100014b2:	6078      	str	r0, [r7, #4]
100014b4:	6039      	str	r1, [r7, #0]
	uint16_t	i;
	uint32_t	neurons = 0;
100014b6:	2300      	movs	r3, #0
100014b8:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < xNetParam.Layers; i++)
100014ba:	2300      	movs	r3, #0
100014bc:	81fb      	strh	r3, [r7, #14]
100014be:	e00b      	b.n	100014d8 <v_DynamicAllocForwardProp+0x2c>
	{
		neurons += xNetParam.NonLayer[i];
100014c0:	89fb      	ldrh	r3, [r7, #14]
100014c2:	4a35      	ldr	r2, [pc, #212]	; (10001598 <v_DynamicAllocForwardProp+0xec>)
100014c4:	005b      	lsls	r3, r3, #1
100014c6:	4413      	add	r3, r2
100014c8:	889b      	ldrh	r3, [r3, #4]
100014ca:	461a      	mov	r2, r3
100014cc:	68bb      	ldr	r3, [r7, #8]
100014ce:	4413      	add	r3, r2
100014d0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < xNetParam.Layers; i++)
100014d2:	89fb      	ldrh	r3, [r7, #14]
100014d4:	3301      	adds	r3, #1
100014d6:	81fb      	strh	r3, [r7, #14]
100014d8:	4b2f      	ldr	r3, [pc, #188]	; (10001598 <v_DynamicAllocForwardProp+0xec>)
100014da:	885b      	ldrh	r3, [r3, #2]
100014dc:	89fa      	ldrh	r2, [r7, #14]
100014de:	429a      	cmp	r2, r3
100014e0:	d3ee      	bcc.n	100014c0 <v_DynamicAllocForwardProp+0x14>
	}

	*FuncPtrPtr = malloc(ceil((float)(neurons * xNetParam.xVarPrecision.precision) / 8.0));
100014e2:	4b2d      	ldr	r3, [pc, #180]	; (10001598 <v_DynamicAllocForwardProp+0xec>)
100014e4:	785b      	ldrb	r3, [r3, #1]
100014e6:	461a      	mov	r2, r3
100014e8:	68bb      	ldr	r3, [r7, #8]
100014ea:	fb03 f302 	mul.w	r3, r3, r2
100014ee:	ee07 3a90 	vmov	s15, r3
100014f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
100014f6:	ee17 0a90 	vmov	r0, s15
100014fa:	f7fe ff0d 	bl	10000318 <__aeabi_f2d>
100014fe:	f04f 0200 	mov.w	r2, #0
10001502:	4b26      	ldr	r3, [pc, #152]	; (1000159c <v_DynamicAllocForwardProp+0xf0>)
10001504:	f7ff f88a 	bl	1000061c <__aeabi_ddiv>
10001508:	4602      	mov	r2, r0
1000150a:	460b      	mov	r3, r1
1000150c:	ec43 2b17 	vmov	d7, r2, r3
10001510:	eeb0 0a47 	vmov.f32	s0, s14
10001514:	eef0 0a67 	vmov.f32	s1, s15
10001518:	f009 ff46 	bl	1000b3a8 <ceil>
1000151c:	ec53 2b10 	vmov	r2, r3, d0
10001520:	4610      	mov	r0, r2
10001522:	4619      	mov	r1, r3
10001524:	f7ff fa12 	bl	1000094c <__aeabi_d2uiz>
10001528:	4603      	mov	r3, r0
1000152a:	4618      	mov	r0, r3
1000152c:	f009 fd4a 	bl	1000afc4 <malloc>
10001530:	4603      	mov	r3, r0
10001532:	461a      	mov	r2, r3
10001534:	683b      	ldr	r3, [r7, #0]
10001536:	601a      	str	r2, [r3, #0]
	*ZPtrPtr = malloc(ceil((float)(neurons*xNetParam.xVarPrecision.precision) / 8.0));
10001538:	4b17      	ldr	r3, [pc, #92]	; (10001598 <v_DynamicAllocForwardProp+0xec>)
1000153a:	785b      	ldrb	r3, [r3, #1]
1000153c:	461a      	mov	r2, r3
1000153e:	68bb      	ldr	r3, [r7, #8]
10001540:	fb03 f302 	mul.w	r3, r3, r2
10001544:	ee07 3a90 	vmov	s15, r3
10001548:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000154c:	ee17 0a90 	vmov	r0, s15
10001550:	f7fe fee2 	bl	10000318 <__aeabi_f2d>
10001554:	f04f 0200 	mov.w	r2, #0
10001558:	4b10      	ldr	r3, [pc, #64]	; (1000159c <v_DynamicAllocForwardProp+0xf0>)
1000155a:	f7ff f85f 	bl	1000061c <__aeabi_ddiv>
1000155e:	4602      	mov	r2, r0
10001560:	460b      	mov	r3, r1
10001562:	ec43 2b17 	vmov	d7, r2, r3
10001566:	eeb0 0a47 	vmov.f32	s0, s14
1000156a:	eef0 0a67 	vmov.f32	s1, s15
1000156e:	f009 ff1b 	bl	1000b3a8 <ceil>
10001572:	ec53 2b10 	vmov	r2, r3, d0
10001576:	4610      	mov	r0, r2
10001578:	4619      	mov	r1, r3
1000157a:	f7ff f9e7 	bl	1000094c <__aeabi_d2uiz>
1000157e:	4603      	mov	r3, r0
10001580:	4618      	mov	r0, r3
10001582:	f009 fd1f 	bl	1000afc4 <malloc>
10001586:	4603      	mov	r3, r0
10001588:	461a      	mov	r2, r3
1000158a:	687b      	ldr	r3, [r7, #4]
1000158c:	601a      	str	r2, [r3, #0]
}
1000158e:	bf00      	nop
10001590:	3710      	adds	r7, #16
10001592:	46bd      	mov	sp, r7
10001594:	bd80      	pop	{r7, pc}
10001596:	bf00      	nop
10001598:	200004ec 	.word	0x200004ec
1000159c:	40200000 	.word	0x40200000

100015a0 <v_DynamicAlloc_NeuronVar>:
//**************************************************/**
//	IN		xNetParam			(NETWORK HYPERPARAMETERS STRUCT)
//	OUT		*ptr				(pointer to void)
//**************************************************
void v_DynamicAlloc_NeuronVar(float** WBPtrPtr)
{
100015a0:	b580      	push	{r7, lr}
100015a2:	b084      	sub	sp, #16
100015a4:	af00      	add	r7, sp, #0
100015a6:	6078      	str	r0, [r7, #4]
	uint16_t	i;
	uint32_t	values = 0;
100015a8:	2300      	movs	r3, #0
100015aa:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
100015ac:	2300      	movs	r3, #0
100015ae:	81fb      	strh	r3, [r7, #14]
100015b0:	e014      	b.n	100015dc <v_DynamicAlloc_NeuronVar+0x3c>
	{
		values += ((1 + xNetParam.NonLayer[i]) * xNetParam.NonLayer[i + 1]);
100015b2:	89fb      	ldrh	r3, [r7, #14]
100015b4:	4a24      	ldr	r2, [pc, #144]	; (10001648 <v_DynamicAlloc_NeuronVar+0xa8>)
100015b6:	005b      	lsls	r3, r3, #1
100015b8:	4413      	add	r3, r2
100015ba:	889b      	ldrh	r3, [r3, #4]
100015bc:	1c5a      	adds	r2, r3, #1
100015be:	89fb      	ldrh	r3, [r7, #14]
100015c0:	3301      	adds	r3, #1
100015c2:	4921      	ldr	r1, [pc, #132]	; (10001648 <v_DynamicAlloc_NeuronVar+0xa8>)
100015c4:	005b      	lsls	r3, r3, #1
100015c6:	440b      	add	r3, r1
100015c8:	889b      	ldrh	r3, [r3, #4]
100015ca:	fb03 f302 	mul.w	r3, r3, r2
100015ce:	461a      	mov	r2, r3
100015d0:	68bb      	ldr	r3, [r7, #8]
100015d2:	4413      	add	r3, r2
100015d4:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
100015d6:	89fb      	ldrh	r3, [r7, #14]
100015d8:	3301      	adds	r3, #1
100015da:	81fb      	strh	r3, [r7, #14]
100015dc:	89fa      	ldrh	r2, [r7, #14]
100015de:	4b1a      	ldr	r3, [pc, #104]	; (10001648 <v_DynamicAlloc_NeuronVar+0xa8>)
100015e0:	885b      	ldrh	r3, [r3, #2]
100015e2:	3b01      	subs	r3, #1
100015e4:	429a      	cmp	r2, r3
100015e6:	dbe4      	blt.n	100015b2 <v_DynamicAlloc_NeuronVar+0x12>
	}
	*WBPtrPtr = malloc(ceil((float)(values * xNetParam.xVarPrecision.precision) / 8.0));
100015e8:	4b17      	ldr	r3, [pc, #92]	; (10001648 <v_DynamicAlloc_NeuronVar+0xa8>)
100015ea:	785b      	ldrb	r3, [r3, #1]
100015ec:	461a      	mov	r2, r3
100015ee:	68bb      	ldr	r3, [r7, #8]
100015f0:	fb03 f302 	mul.w	r3, r3, r2
100015f4:	ee07 3a90 	vmov	s15, r3
100015f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
100015fc:	ee17 0a90 	vmov	r0, s15
10001600:	f7fe fe8a 	bl	10000318 <__aeabi_f2d>
10001604:	f04f 0200 	mov.w	r2, #0
10001608:	4b10      	ldr	r3, [pc, #64]	; (1000164c <v_DynamicAlloc_NeuronVar+0xac>)
1000160a:	f7ff f807 	bl	1000061c <__aeabi_ddiv>
1000160e:	4602      	mov	r2, r0
10001610:	460b      	mov	r3, r1
10001612:	ec43 2b17 	vmov	d7, r2, r3
10001616:	eeb0 0a47 	vmov.f32	s0, s14
1000161a:	eef0 0a67 	vmov.f32	s1, s15
1000161e:	f009 fec3 	bl	1000b3a8 <ceil>
10001622:	ec53 2b10 	vmov	r2, r3, d0
10001626:	4610      	mov	r0, r2
10001628:	4619      	mov	r1, r3
1000162a:	f7ff f98f 	bl	1000094c <__aeabi_d2uiz>
1000162e:	4603      	mov	r3, r0
10001630:	4618      	mov	r0, r3
10001632:	f009 fcc7 	bl	1000afc4 <malloc>
10001636:	4603      	mov	r3, r0
10001638:	461a      	mov	r2, r3
1000163a:	687b      	ldr	r3, [r7, #4]
1000163c:	601a      	str	r2, [r3, #0]
}
1000163e:	bf00      	nop
10001640:	3710      	adds	r7, #16
10001642:	46bd      	mov	sp, r7
10001644:	bd80      	pop	{r7, pc}
10001646:	bf00      	nop
10001648:	200004ec 	.word	0x200004ec
1000164c:	40200000 	.word	0x40200000

10001650 <v_MACForwardProp_FP32>:
	//	IN		res, xNetParam, layer, WBPtr, FuncPtr			(FLOAT POINTER, NETWORK HYPERPARAMETERS STRUCT, layer, FLOAT POINTER, FLOAT POINTER)
	//	OUT		NONE
	//	obs.:	to adapt the function, change float to int....
	//**************************************************
void v_MACForwardProp_FP32(float* res, uint16_t	layer, float* FuncPtr)
{
10001650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10001654:	b0a0      	sub	sp, #128	; 0x80
10001656:	af14      	add	r7, sp, #80	; 0x50
10001658:	60f8      	str	r0, [r7, #12]
1000165a:	460b      	mov	r3, r1
1000165c:	607a      	str	r2, [r7, #4]
1000165e:	817b      	strh	r3, [r7, #10]
	float		aux;
	uint32_t	index_w, index_b, rows, cols;

	index_w = u32_GetIndex(xNetParam, layer, 0, false);
10001660:	4b42      	ldr	r3, [pc, #264]	; (1000176c <v_MACForwardProp_FP32+0x11c>)
10001662:	2200      	movs	r2, #0
10001664:	9213      	str	r2, [sp, #76]	; 0x4c
10001666:	2200      	movs	r2, #0
10001668:	9212      	str	r2, [sp, #72]	; 0x48
1000166a:	897a      	ldrh	r2, [r7, #10]
1000166c:	9211      	str	r2, [sp, #68]	; 0x44
1000166e:	681a      	ldr	r2, [r3, #0]
10001670:	f04f 0800 	mov.w	r8, #0
10001674:	4690      	mov	r8, r2
10001676:	685a      	ldr	r2, [r3, #4]
10001678:	2600      	movs	r6, #0
1000167a:	4616      	mov	r6, r2
1000167c:	689a      	ldr	r2, [r3, #8]
1000167e:	2500      	movs	r5, #0
10001680:	4615      	mov	r5, r2
10001682:	68da      	ldr	r2, [r3, #12]
10001684:	2400      	movs	r4, #0
10001686:	4614      	mov	r4, r2
10001688:	4668      	mov	r0, sp
1000168a:	3310      	adds	r3, #16
1000168c:	2244      	movs	r2, #68	; 0x44
1000168e:	4619      	mov	r1, r3
10001690:	f009 fca8 	bl	1000afe4 <memcpy>
10001694:	4640      	mov	r0, r8
10001696:	4631      	mov	r1, r6
10001698:	462a      	mov	r2, r5
1000169a:	4623      	mov	r3, r4
1000169c:	f002 fa24 	bl	10003ae8 <u32_GetIndex>
100016a0:	6238      	str	r0, [r7, #32]
	index_b = index_w + (xNetParam.NonLayer[layer - 1] * xNetParam.NonLayer[layer]);
100016a2:	897b      	ldrh	r3, [r7, #10]
100016a4:	3b01      	subs	r3, #1
100016a6:	4a31      	ldr	r2, [pc, #196]	; (1000176c <v_MACForwardProp_FP32+0x11c>)
100016a8:	005b      	lsls	r3, r3, #1
100016aa:	4413      	add	r3, r2
100016ac:	889b      	ldrh	r3, [r3, #4]
100016ae:	4619      	mov	r1, r3
100016b0:	897b      	ldrh	r3, [r7, #10]
100016b2:	4a2e      	ldr	r2, [pc, #184]	; (1000176c <v_MACForwardProp_FP32+0x11c>)
100016b4:	005b      	lsls	r3, r3, #1
100016b6:	4413      	add	r3, r2
100016b8:	889b      	ldrh	r3, [r3, #4]
100016ba:	fb03 f301 	mul.w	r3, r3, r1
100016be:	461a      	mov	r2, r3
100016c0:	6a3b      	ldr	r3, [r7, #32]
100016c2:	4413      	add	r3, r2
100016c4:	61fb      	str	r3, [r7, #28]
	rows = xNetParam.NonLayer[layer];
100016c6:	897b      	ldrh	r3, [r7, #10]
100016c8:	4a28      	ldr	r2, [pc, #160]	; (1000176c <v_MACForwardProp_FP32+0x11c>)
100016ca:	005b      	lsls	r3, r3, #1
100016cc:	4413      	add	r3, r2
100016ce:	889b      	ldrh	r3, [r3, #4]
100016d0:	61bb      	str	r3, [r7, #24]
	cols = xNetParam.NonLayer[layer - 1];
100016d2:	897b      	ldrh	r3, [r7, #10]
100016d4:	3b01      	subs	r3, #1
100016d6:	4a25      	ldr	r2, [pc, #148]	; (1000176c <v_MACForwardProp_FP32+0x11c>)
100016d8:	005b      	lsls	r3, r3, #1
100016da:	4413      	add	r3, r2
100016dc:	889b      	ldrh	r3, [r3, #4]
100016de:	617b      	str	r3, [r7, #20]

	for (size_t i = 0; i < rows; i++)
100016e0:	2300      	movs	r3, #0
100016e2:	62bb      	str	r3, [r7, #40]	; 0x28
100016e4:	e037      	b.n	10001756 <v_MACForwardProp_FP32+0x106>
	{
		aux = WBPtr[index_b + i];
100016e6:	4b22      	ldr	r3, [pc, #136]	; (10001770 <v_MACForwardProp_FP32+0x120>)
100016e8:	681a      	ldr	r2, [r3, #0]
100016ea:	69f9      	ldr	r1, [r7, #28]
100016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
100016ee:	440b      	add	r3, r1
100016f0:	009b      	lsls	r3, r3, #2
100016f2:	4413      	add	r3, r2
100016f4:	681b      	ldr	r3, [r3, #0]
100016f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		for (size_t j = 0; j < cols; j++)
100016f8:	2300      	movs	r3, #0
100016fa:	627b      	str	r3, [r7, #36]	; 0x24
100016fc:	e01e      	b.n	1000173c <v_MACForwardProp_FP32+0xec>
		{
			aux += WBPtr[index_w + (i * cols) + j] * FuncPtr[j];
100016fe:	4b1c      	ldr	r3, [pc, #112]	; (10001770 <v_MACForwardProp_FP32+0x120>)
10001700:	681a      	ldr	r2, [r3, #0]
10001702:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001704:	6979      	ldr	r1, [r7, #20]
10001706:	fb01 f103 	mul.w	r1, r1, r3
1000170a:	6a3b      	ldr	r3, [r7, #32]
1000170c:	4419      	add	r1, r3
1000170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001710:	440b      	add	r3, r1
10001712:	009b      	lsls	r3, r3, #2
10001714:	4413      	add	r3, r2
10001716:	ed93 7a00 	vldr	s14, [r3]
1000171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000171c:	009b      	lsls	r3, r3, #2
1000171e:	687a      	ldr	r2, [r7, #4]
10001720:	4413      	add	r3, r2
10001722:	edd3 7a00 	vldr	s15, [r3]
10001726:	ee67 7a27 	vmul.f32	s15, s14, s15
1000172a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
1000172e:	ee77 7a27 	vadd.f32	s15, s14, s15
10001732:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		for (size_t j = 0; j < cols; j++)
10001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001738:	3301      	adds	r3, #1
1000173a:	627b      	str	r3, [r7, #36]	; 0x24
1000173c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000173e:	697b      	ldr	r3, [r7, #20]
10001740:	429a      	cmp	r2, r3
10001742:	d3dc      	bcc.n	100016fe <v_MACForwardProp_FP32+0xae>
		}
		res[i] = aux;
10001744:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001746:	009b      	lsls	r3, r3, #2
10001748:	68fa      	ldr	r2, [r7, #12]
1000174a:	4413      	add	r3, r2
1000174c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000174e:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < rows; i++)
10001750:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001752:	3301      	adds	r3, #1
10001754:	62bb      	str	r3, [r7, #40]	; 0x28
10001756:	6aba      	ldr	r2, [r7, #40]	; 0x28
10001758:	69bb      	ldr	r3, [r7, #24]
1000175a:	429a      	cmp	r2, r3
1000175c:	d3c3      	bcc.n	100016e6 <v_MACForwardProp_FP32+0x96>
	}
}
1000175e:	bf00      	nop
10001760:	bf00      	nop
10001762:	3730      	adds	r7, #48	; 0x30
10001764:	46bd      	mov	sp, r7
10001766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000176a:	bf00      	nop
1000176c:	200004ec 	.word	0x200004ec
10001770:	200004e8 	.word	0x200004e8

10001774 <v_ReLUActiv_FP32>:
//	IN		ZPtr, xNetParam, layer, FuncPtr
//	OUT		NONE
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_ReLUActiv_FP32(float* ZPtr, uint16_t layer, float* FuncPtr)
{
10001774:	b480      	push	{r7}
10001776:	b087      	sub	sp, #28
10001778:	af00      	add	r7, sp, #0
1000177a:	60f8      	str	r0, [r7, #12]
1000177c:	460b      	mov	r3, r1
1000177e:	607a      	str	r2, [r7, #4]
10001780:	817b      	strh	r3, [r7, #10]
	for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10001782:	2300      	movs	r3, #0
10001784:	617b      	str	r3, [r7, #20]
10001786:	e031      	b.n	100017ec <v_ReLUActiv_FP32+0x78>
	{
		if (ZPtr[i] < 0)
10001788:	697b      	ldr	r3, [r7, #20]
1000178a:	009b      	lsls	r3, r3, #2
1000178c:	68fa      	ldr	r2, [r7, #12]
1000178e:	4413      	add	r3, r2
10001790:	edd3 7a00 	vldr	s15, [r3]
10001794:	eef5 7ac0 	vcmpe.f32	s15, #0.0
10001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000179c:	d519      	bpl.n	100017d2 <v_ReLUActiv_FP32+0x5e>
		{
			FuncPtr[i] = (xNetParam.LeakyReLU_rate * ZPtr[i]) / UINT16_MAX;
1000179e:	4b1b      	ldr	r3, [pc, #108]	; (1000180c <v_ReLUActiv_FP32+0x98>)
100017a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
100017a4:	ee07 3a90 	vmov	s15, r3
100017a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
100017ac:	697b      	ldr	r3, [r7, #20]
100017ae:	009b      	lsls	r3, r3, #2
100017b0:	68fa      	ldr	r2, [r7, #12]
100017b2:	4413      	add	r3, r2
100017b4:	edd3 7a00 	vldr	s15, [r3]
100017b8:	ee27 7a27 	vmul.f32	s14, s14, s15
100017bc:	697b      	ldr	r3, [r7, #20]
100017be:	009b      	lsls	r3, r3, #2
100017c0:	687a      	ldr	r2, [r7, #4]
100017c2:	4413      	add	r3, r2
100017c4:	eddf 6a12 	vldr	s13, [pc, #72]	; 10001810 <v_ReLUActiv_FP32+0x9c>
100017c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
100017cc:	edc3 7a00 	vstr	s15, [r3]
100017d0:	e009      	b.n	100017e6 <v_ReLUActiv_FP32+0x72>
		}
		else
		{
			FuncPtr[i] = ZPtr[i];
100017d2:	697b      	ldr	r3, [r7, #20]
100017d4:	009b      	lsls	r3, r3, #2
100017d6:	68fa      	ldr	r2, [r7, #12]
100017d8:	441a      	add	r2, r3
100017da:	697b      	ldr	r3, [r7, #20]
100017dc:	009b      	lsls	r3, r3, #2
100017de:	6879      	ldr	r1, [r7, #4]
100017e0:	440b      	add	r3, r1
100017e2:	6812      	ldr	r2, [r2, #0]
100017e4:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
100017e6:	697b      	ldr	r3, [r7, #20]
100017e8:	3301      	adds	r3, #1
100017ea:	617b      	str	r3, [r7, #20]
100017ec:	897b      	ldrh	r3, [r7, #10]
100017ee:	4a07      	ldr	r2, [pc, #28]	; (1000180c <v_ReLUActiv_FP32+0x98>)
100017f0:	005b      	lsls	r3, r3, #1
100017f2:	4413      	add	r3, r2
100017f4:	889b      	ldrh	r3, [r3, #4]
100017f6:	461a      	mov	r2, r3
100017f8:	697b      	ldr	r3, [r7, #20]
100017fa:	4293      	cmp	r3, r2
100017fc:	d3c4      	bcc.n	10001788 <v_ReLUActiv_FP32+0x14>
		}
	}
}
100017fe:	bf00      	nop
10001800:	bf00      	nop
10001802:	371c      	adds	r7, #28
10001804:	46bd      	mov	sp, r7
10001806:	f85d 7b04 	ldr.w	r7, [sp], #4
1000180a:	4770      	bx	lr
1000180c:	200004ec 	.word	0x200004ec
10001810:	477fff00 	.word	0x477fff00

10001814 <v_LinearActiv_FP32>:

void v_LinearActiv_FP32(float* ZPtr, uint16_t layer, float* FuncPtr)
{
10001814:	b480      	push	{r7}
10001816:	b087      	sub	sp, #28
10001818:	af00      	add	r7, sp, #0
1000181a:	60f8      	str	r0, [r7, #12]
1000181c:	460b      	mov	r3, r1
1000181e:	607a      	str	r2, [r7, #4]
10001820:	817b      	strh	r3, [r7, #10]
	for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10001822:	2300      	movs	r3, #0
10001824:	617b      	str	r3, [r7, #20]
10001826:	e00c      	b.n	10001842 <v_LinearActiv_FP32+0x2e>
	{
		FuncPtr[i] = ZPtr[i];
10001828:	697b      	ldr	r3, [r7, #20]
1000182a:	009b      	lsls	r3, r3, #2
1000182c:	68fa      	ldr	r2, [r7, #12]
1000182e:	441a      	add	r2, r3
10001830:	697b      	ldr	r3, [r7, #20]
10001832:	009b      	lsls	r3, r3, #2
10001834:	6879      	ldr	r1, [r7, #4]
10001836:	440b      	add	r3, r1
10001838:	6812      	ldr	r2, [r2, #0]
1000183a:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
1000183c:	697b      	ldr	r3, [r7, #20]
1000183e:	3301      	adds	r3, #1
10001840:	617b      	str	r3, [r7, #20]
10001842:	897b      	ldrh	r3, [r7, #10]
10001844:	4a07      	ldr	r2, [pc, #28]	; (10001864 <v_LinearActiv_FP32+0x50>)
10001846:	005b      	lsls	r3, r3, #1
10001848:	4413      	add	r3, r2
1000184a:	889b      	ldrh	r3, [r3, #4]
1000184c:	461a      	mov	r2, r3
1000184e:	697b      	ldr	r3, [r7, #20]
10001850:	4293      	cmp	r3, r2
10001852:	d3e9      	bcc.n	10001828 <v_LinearActiv_FP32+0x14>
	}
}
10001854:	bf00      	nop
10001856:	bf00      	nop
10001858:	371c      	adds	r7, #28
1000185a:	46bd      	mov	sp, r7
1000185c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001860:	4770      	bx	lr
10001862:	bf00      	nop
10001864:	200004ec 	.word	0x200004ec

10001868 <v_ProcessForwardPropNN_FP32>:
//	IN		result, xNetParam, Input, WBPtr			(result, NETWORK HYPERPARAMETERS STRUCT,FLOAT POINTER, FLOAT POINTER)
//	OUT		NONE
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_ProcessForwardPropNN_FP32(float* ZPtr, float* FuncPtr, float* Input)
{
10001868:	b580      	push	{r7, lr}
1000186a:	b088      	sub	sp, #32
1000186c:	af00      	add	r7, sp, #0
1000186e:	60f8      	str	r0, [r7, #12]
10001870:	60b9      	str	r1, [r7, #8]
10001872:	607a      	str	r2, [r7, #4]
	uint16_t	i;
	uint32_t	neurons = 0;
10001874:	2300      	movs	r3, #0
10001876:	61bb      	str	r3, [r7, #24]
	uint32_t	aux_index = 0;
10001878:	2300      	movs	r3, #0
1000187a:	617b      	str	r3, [r7, #20]

	for (i = 0; i < xNetParam.Layers; i++)
1000187c:	2300      	movs	r3, #0
1000187e:	83fb      	strh	r3, [r7, #30]
10001880:	e00b      	b.n	1000189a <v_ProcessForwardPropNN_FP32+0x32>
	{
		neurons += xNetParam.NonLayer[i];
10001882:	8bfb      	ldrh	r3, [r7, #30]
10001884:	4a3c      	ldr	r2, [pc, #240]	; (10001978 <v_ProcessForwardPropNN_FP32+0x110>)
10001886:	005b      	lsls	r3, r3, #1
10001888:	4413      	add	r3, r2
1000188a:	889b      	ldrh	r3, [r3, #4]
1000188c:	461a      	mov	r2, r3
1000188e:	69bb      	ldr	r3, [r7, #24]
10001890:	4413      	add	r3, r2
10001892:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < xNetParam.Layers; i++)
10001894:	8bfb      	ldrh	r3, [r7, #30]
10001896:	3301      	adds	r3, #1
10001898:	83fb      	strh	r3, [r7, #30]
1000189a:	4b37      	ldr	r3, [pc, #220]	; (10001978 <v_ProcessForwardPropNN_FP32+0x110>)
1000189c:	885b      	ldrh	r3, [r3, #2]
1000189e:	8bfa      	ldrh	r2, [r7, #30]
100018a0:	429a      	cmp	r2, r3
100018a2:	d3ee      	bcc.n	10001882 <v_ProcessForwardPropNN_FP32+0x1a>
	}
	memcpy(FuncPtr, Input, (xNetParam.NonLayer[0] * FP32_SIZE));
100018a4:	4b34      	ldr	r3, [pc, #208]	; (10001978 <v_ProcessForwardPropNN_FP32+0x110>)
100018a6:	889b      	ldrh	r3, [r3, #4]
100018a8:	009b      	lsls	r3, r3, #2
100018aa:	461a      	mov	r2, r3
100018ac:	6879      	ldr	r1, [r7, #4]
100018ae:	68b8      	ldr	r0, [r7, #8]
100018b0:	f009 fb98 	bl	1000afe4 <memcpy>

	neurons = 0;
100018b4:	2300      	movs	r3, #0
100018b6:	61bb      	str	r3, [r7, #24]
	for (i = 1; i < (xNetParam.Layers-1); i++)
100018b8:	2301      	movs	r3, #1
100018ba:	83fb      	strh	r3, [r7, #30]
100018bc:	e026      	b.n	1000190c <v_ProcessForwardPropNN_FP32+0xa4>
	{
		aux_index = neurons;
100018be:	69bb      	ldr	r3, [r7, #24]
100018c0:	617b      	str	r3, [r7, #20]
		neurons += xNetParam.NonLayer[i - 1];
100018c2:	8bfb      	ldrh	r3, [r7, #30]
100018c4:	3b01      	subs	r3, #1
100018c6:	4a2c      	ldr	r2, [pc, #176]	; (10001978 <v_ProcessForwardPropNN_FP32+0x110>)
100018c8:	005b      	lsls	r3, r3, #1
100018ca:	4413      	add	r3, r2
100018cc:	889b      	ldrh	r3, [r3, #4]
100018ce:	461a      	mov	r2, r3
100018d0:	69bb      	ldr	r3, [r7, #24]
100018d2:	4413      	add	r3, r2
100018d4:	61bb      	str	r3, [r7, #24]
		v_MACForwardProp_FP32(&ZPtr[neurons], i, &FuncPtr[aux_index]);		//	CALCULATE [Z = W*F + b]
100018d6:	69bb      	ldr	r3, [r7, #24]
100018d8:	009b      	lsls	r3, r3, #2
100018da:	68fa      	ldr	r2, [r7, #12]
100018dc:	18d0      	adds	r0, r2, r3
100018de:	697b      	ldr	r3, [r7, #20]
100018e0:	009b      	lsls	r3, r3, #2
100018e2:	68ba      	ldr	r2, [r7, #8]
100018e4:	441a      	add	r2, r3
100018e6:	8bfb      	ldrh	r3, [r7, #30]
100018e8:	4619      	mov	r1, r3
100018ea:	f7ff feb1 	bl	10001650 <v_MACForwardProp_FP32>
		v_ReLUActiv_FP32(&ZPtr[neurons], i, &FuncPtr[neurons]);				//	CALCULATE [F = ACTIV(Z)]
100018ee:	69bb      	ldr	r3, [r7, #24]
100018f0:	009b      	lsls	r3, r3, #2
100018f2:	68fa      	ldr	r2, [r7, #12]
100018f4:	18d0      	adds	r0, r2, r3
100018f6:	69bb      	ldr	r3, [r7, #24]
100018f8:	009b      	lsls	r3, r3, #2
100018fa:	68ba      	ldr	r2, [r7, #8]
100018fc:	441a      	add	r2, r3
100018fe:	8bfb      	ldrh	r3, [r7, #30]
10001900:	4619      	mov	r1, r3
10001902:	f7ff ff37 	bl	10001774 <v_ReLUActiv_FP32>
	for (i = 1; i < (xNetParam.Layers-1); i++)
10001906:	8bfb      	ldrh	r3, [r7, #30]
10001908:	3301      	adds	r3, #1
1000190a:	83fb      	strh	r3, [r7, #30]
1000190c:	8bfa      	ldrh	r2, [r7, #30]
1000190e:	4b1a      	ldr	r3, [pc, #104]	; (10001978 <v_ProcessForwardPropNN_FP32+0x110>)
10001910:	885b      	ldrh	r3, [r3, #2]
10001912:	3b01      	subs	r3, #1
10001914:	429a      	cmp	r2, r3
10001916:	dbd2      	blt.n	100018be <v_ProcessForwardPropNN_FP32+0x56>
	}
	aux_index = neurons;
10001918:	69bb      	ldr	r3, [r7, #24]
1000191a:	617b      	str	r3, [r7, #20]
	neurons += xNetParam.NonLayer[xNetParam.Layers - 2];
1000191c:	4b16      	ldr	r3, [pc, #88]	; (10001978 <v_ProcessForwardPropNN_FP32+0x110>)
1000191e:	885b      	ldrh	r3, [r3, #2]
10001920:	3b02      	subs	r3, #2
10001922:	4a15      	ldr	r2, [pc, #84]	; (10001978 <v_ProcessForwardPropNN_FP32+0x110>)
10001924:	005b      	lsls	r3, r3, #1
10001926:	4413      	add	r3, r2
10001928:	889b      	ldrh	r3, [r3, #4]
1000192a:	461a      	mov	r2, r3
1000192c:	69bb      	ldr	r3, [r7, #24]
1000192e:	4413      	add	r3, r2
10001930:	61bb      	str	r3, [r7, #24]
	v_MACForwardProp_FP32(&ZPtr[neurons], (xNetParam.Layers - 1), &FuncPtr[aux_index]);		//	CALCULATE [Z = W*F + b]
10001932:	69bb      	ldr	r3, [r7, #24]
10001934:	009b      	lsls	r3, r3, #2
10001936:	68fa      	ldr	r2, [r7, #12]
10001938:	18d0      	adds	r0, r2, r3
1000193a:	4b0f      	ldr	r3, [pc, #60]	; (10001978 <v_ProcessForwardPropNN_FP32+0x110>)
1000193c:	885b      	ldrh	r3, [r3, #2]
1000193e:	3b01      	subs	r3, #1
10001940:	b299      	uxth	r1, r3
10001942:	697b      	ldr	r3, [r7, #20]
10001944:	009b      	lsls	r3, r3, #2
10001946:	68ba      	ldr	r2, [r7, #8]
10001948:	4413      	add	r3, r2
1000194a:	461a      	mov	r2, r3
1000194c:	f7ff fe80 	bl	10001650 <v_MACForwardProp_FP32>
	v_LinearActiv_FP32(&ZPtr[neurons], (xNetParam.Layers - 1), &FuncPtr[neurons]);										//	CALCULATE [F = ACTIV(Z)]
10001950:	69bb      	ldr	r3, [r7, #24]
10001952:	009b      	lsls	r3, r3, #2
10001954:	68fa      	ldr	r2, [r7, #12]
10001956:	18d0      	adds	r0, r2, r3
10001958:	4b07      	ldr	r3, [pc, #28]	; (10001978 <v_ProcessForwardPropNN_FP32+0x110>)
1000195a:	885b      	ldrh	r3, [r3, #2]
1000195c:	3b01      	subs	r3, #1
1000195e:	b299      	uxth	r1, r3
10001960:	69bb      	ldr	r3, [r7, #24]
10001962:	009b      	lsls	r3, r3, #2
10001964:	68ba      	ldr	r2, [r7, #8]
10001966:	4413      	add	r3, r2
10001968:	461a      	mov	r2, r3
1000196a:	f7ff ff53 	bl	10001814 <v_LinearActiv_FP32>
}
1000196e:	bf00      	nop
10001970:	3720      	adds	r7, #32
10001972:	46bd      	mov	sp, r7
10001974:	bd80      	pop	{r7, pc}
10001976:	bf00      	nop
10001978:	200004ec 	.word	0x200004ec

1000197c <v_DynamicAlloc_quant>:

//************************************************************************************************
//	MEMORY FUNCTIONS
//************************************************************************************************
void v_DynamicAlloc_quant(quantizedval_t* xQuantizedVal, distribution_t* xDistribution, netparam_t	xNetParam)
{
1000197c:	b082      	sub	sp, #8
1000197e:	b580      	push	{r7, lr}
10001980:	b086      	sub	sp, #24
10001982:	af00      	add	r7, sp, #0
10001984:	6078      	str	r0, [r7, #4]
10001986:	6039      	str	r1, [r7, #0]
10001988:	f107 0120 	add.w	r1, r7, #32
1000198c:	e881 000c 	stmia.w	r1, {r2, r3}
	uint16_t	i;
	uint32_t	values = 0;
10001990:	2300      	movs	r3, #0
10001992:	613b      	str	r3, [r7, #16]
	uint16_t	neurons = 0;
10001994:	2300      	movs	r3, #0
10001996:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
10001998:	2300      	movs	r3, #0
1000199a:	82fb      	strh	r3, [r7, #22]
1000199c:	e01f      	b.n	100019de <v_DynamicAlloc_quant+0x62>
	{
		neurons += xNetParam.NonLayer[i];
1000199e:	8afb      	ldrh	r3, [r7, #22]
100019a0:	005b      	lsls	r3, r3, #1
100019a2:	f107 0220 	add.w	r2, r7, #32
100019a6:	4413      	add	r3, r2
100019a8:	889a      	ldrh	r2, [r3, #4]
100019aa:	89fb      	ldrh	r3, [r7, #14]
100019ac:	4413      	add	r3, r2
100019ae:	81fb      	strh	r3, [r7, #14]
		values += ((1 + xNetParam.NonLayer[i]) * xNetParam.NonLayer[i + 1]);
100019b0:	8afb      	ldrh	r3, [r7, #22]
100019b2:	005b      	lsls	r3, r3, #1
100019b4:	f107 0220 	add.w	r2, r7, #32
100019b8:	4413      	add	r3, r2
100019ba:	889b      	ldrh	r3, [r3, #4]
100019bc:	1c5a      	adds	r2, r3, #1
100019be:	8afb      	ldrh	r3, [r7, #22]
100019c0:	3301      	adds	r3, #1
100019c2:	005b      	lsls	r3, r3, #1
100019c4:	f107 0120 	add.w	r1, r7, #32
100019c8:	440b      	add	r3, r1
100019ca:	889b      	ldrh	r3, [r3, #4]
100019cc:	fb03 f302 	mul.w	r3, r3, r2
100019d0:	461a      	mov	r2, r3
100019d2:	693b      	ldr	r3, [r7, #16]
100019d4:	4413      	add	r3, r2
100019d6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
100019d8:	8afb      	ldrh	r3, [r7, #22]
100019da:	3301      	adds	r3, #1
100019dc:	82fb      	strh	r3, [r7, #22]
100019de:	8afa      	ldrh	r2, [r7, #22]
100019e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
100019e2:	3b01      	subs	r3, #1
100019e4:	429a      	cmp	r2, r3
100019e6:	dbda      	blt.n	1000199e <v_DynamicAlloc_quant+0x22>
	}
	neurons += xNetParam.NonLayer[xNetParam.Layers - 1];
100019e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
100019ea:	3b01      	subs	r3, #1
100019ec:	005b      	lsls	r3, r3, #1
100019ee:	f107 0220 	add.w	r2, r7, #32
100019f2:	4413      	add	r3, r2
100019f4:	889a      	ldrh	r2, [r3, #4]
100019f6:	89fb      	ldrh	r3, [r7, #14]
100019f8:	4413      	add	r3, r2
100019fa:	81fb      	strh	r3, [r7, #14]

	xQuantizedVal->WBPtr = (void*)malloc(ceil((float)(values * xNetParam.xVarPrecision.precision) / 8.0));
100019fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
10001a00:	461a      	mov	r2, r3
10001a02:	693b      	ldr	r3, [r7, #16]
10001a04:	fb03 f302 	mul.w	r3, r3, r2
10001a08:	ee07 3a90 	vmov	s15, r3
10001a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001a10:	ee17 0a90 	vmov	r0, s15
10001a14:	f7fe fc80 	bl	10000318 <__aeabi_f2d>
10001a18:	f04f 0200 	mov.w	r2, #0
10001a1c:	4b4f      	ldr	r3, [pc, #316]	; (10001b5c <v_DynamicAlloc_quant+0x1e0>)
10001a1e:	f7fe fdfd 	bl	1000061c <__aeabi_ddiv>
10001a22:	4602      	mov	r2, r0
10001a24:	460b      	mov	r3, r1
10001a26:	ec43 2b17 	vmov	d7, r2, r3
10001a2a:	eeb0 0a47 	vmov.f32	s0, s14
10001a2e:	eef0 0a67 	vmov.f32	s1, s15
10001a32:	f009 fcb9 	bl	1000b3a8 <ceil>
10001a36:	ec53 2b10 	vmov	r2, r3, d0
10001a3a:	4610      	mov	r0, r2
10001a3c:	4619      	mov	r1, r3
10001a3e:	f7fe ff85 	bl	1000094c <__aeabi_d2uiz>
10001a42:	4603      	mov	r3, r0
10001a44:	4618      	mov	r0, r3
10001a46:	f009 fabd 	bl	1000afc4 <malloc>
10001a4a:	4603      	mov	r3, r0
10001a4c:	461a      	mov	r2, r3
10001a4e:	687b      	ldr	r3, [r7, #4]
10001a50:	621a      	str	r2, [r3, #32]

	xQuantizedVal->Zy = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001a54:	009b      	lsls	r3, r3, #2
10001a56:	4618      	mov	r0, r3
10001a58:	f009 fab4 	bl	1000afc4 <malloc>
10001a5c:	4603      	mov	r3, r0
10001a5e:	461a      	mov	r2, r3
10001a60:	687b      	ldr	r3, [r7, #4]
10001a62:	61da      	str	r2, [r3, #28]
	xQuantizedVal->Sy = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001a64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001a66:	009b      	lsls	r3, r3, #2
10001a68:	4618      	mov	r0, r3
10001a6a:	f009 faab 	bl	1000afc4 <malloc>
10001a6e:	4603      	mov	r3, r0
10001a70:	461a      	mov	r2, r3
10001a72:	687b      	ldr	r3, [r7, #4]
10001a74:	601a      	str	r2, [r3, #0]
	xQuantizedVal->Sz = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001a78:	009b      	lsls	r3, r3, #2
10001a7a:	4618      	mov	r0, r3
10001a7c:	f009 faa2 	bl	1000afc4 <malloc>
10001a80:	4603      	mov	r3, r0
10001a82:	461a      	mov	r2, r3
10001a84:	687b      	ldr	r3, [r7, #4]
10001a86:	605a      	str	r2, [r3, #4]
	xQuantizedVal->Sw = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001a88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001a8a:	009b      	lsls	r3, r3, #2
10001a8c:	4618      	mov	r0, r3
10001a8e:	f009 fa99 	bl	1000afc4 <malloc>
10001a92:	4603      	mov	r3, r0
10001a94:	461a      	mov	r2, r3
10001a96:	687b      	ldr	r3, [r7, #4]
10001a98:	609a      	str	r2, [r3, #8]
	xQuantizedVal->Sb = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001a9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001a9c:	009b      	lsls	r3, r3, #2
10001a9e:	4618      	mov	r0, r3
10001aa0:	f009 fa90 	bl	1000afc4 <malloc>
10001aa4:	4603      	mov	r3, r0
10001aa6:	461a      	mov	r2, r3
10001aa8:	687b      	ldr	r3, [r7, #4]
10001aaa:	60da      	str	r2, [r3, #12]
	xQuantizedVal->Ssumcomp = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001aac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001aae:	009b      	lsls	r3, r3, #2
10001ab0:	4618      	mov	r0, r3
10001ab2:	f009 fa87 	bl	1000afc4 <malloc>
10001ab6:	4603      	mov	r3, r0
10001ab8:	461a      	mov	r2, r3
10001aba:	687b      	ldr	r3, [r7, #4]
10001abc:	611a      	str	r2, [r3, #16]
	xQuantizedVal->Sbiascomp = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001abe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001ac0:	009b      	lsls	r3, r3, #2
10001ac2:	4618      	mov	r0, r3
10001ac4:	f009 fa7e 	bl	1000afc4 <malloc>
10001ac8:	4603      	mov	r3, r0
10001aca:	461a      	mov	r2, r3
10001acc:	687b      	ldr	r3, [r7, #4]
10001ace:	615a      	str	r2, [r3, #20]
	xQuantizedVal->ZWsum = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001ad2:	009b      	lsls	r3, r3, #2
10001ad4:	4618      	mov	r0, r3
10001ad6:	f009 fa75 	bl	1000afc4 <malloc>
10001ada:	4603      	mov	r3, r0
10001adc:	461a      	mov	r2, r3
10001ade:	687b      	ldr	r3, [r7, #4]
10001ae0:	619a      	str	r2, [r3, #24]
	xDistribution->W_min = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001ae2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001ae4:	009b      	lsls	r3, r3, #2
10001ae6:	4618      	mov	r0, r3
10001ae8:	f009 fa6c 	bl	1000afc4 <malloc>
10001aec:	4603      	mov	r3, r0
10001aee:	461a      	mov	r2, r3
10001af0:	683b      	ldr	r3, [r7, #0]
10001af2:	601a      	str	r2, [r3, #0]
	xDistribution->W_max = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001af4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001af6:	009b      	lsls	r3, r3, #2
10001af8:	4618      	mov	r0, r3
10001afa:	f009 fa63 	bl	1000afc4 <malloc>
10001afe:	4603      	mov	r3, r0
10001b00:	461a      	mov	r2, r3
10001b02:	683b      	ldr	r3, [r7, #0]
10001b04:	605a      	str	r2, [r3, #4]
	xDistribution->b_min = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001b06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001b08:	009b      	lsls	r3, r3, #2
10001b0a:	4618      	mov	r0, r3
10001b0c:	f009 fa5a 	bl	1000afc4 <malloc>
10001b10:	4603      	mov	r3, r0
10001b12:	461a      	mov	r2, r3
10001b14:	683b      	ldr	r3, [r7, #0]
10001b16:	609a      	str	r2, [r3, #8]
	xDistribution->b_max = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001b18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001b1a:	009b      	lsls	r3, r3, #2
10001b1c:	4618      	mov	r0, r3
10001b1e:	f009 fa51 	bl	1000afc4 <malloc>
10001b22:	4603      	mov	r3, r0
10001b24:	461a      	mov	r2, r3
10001b26:	683b      	ldr	r3, [r7, #0]
10001b28:	60da      	str	r2, [r3, #12]
	xDistribution->func_min = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001b2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001b2c:	009b      	lsls	r3, r3, #2
10001b2e:	4618      	mov	r0, r3
10001b30:	f009 fa48 	bl	1000afc4 <malloc>
10001b34:	4603      	mov	r3, r0
10001b36:	461a      	mov	r2, r3
10001b38:	683b      	ldr	r3, [r7, #0]
10001b3a:	611a      	str	r2, [r3, #16]
	xDistribution->func_max = (float*)malloc(xNetParam.Layers * FP32_SIZE);
10001b3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10001b3e:	009b      	lsls	r3, r3, #2
10001b40:	4618      	mov	r0, r3
10001b42:	f009 fa3f 	bl	1000afc4 <malloc>
10001b46:	4603      	mov	r3, r0
10001b48:	461a      	mov	r2, r3
10001b4a:	683b      	ldr	r3, [r7, #0]
10001b4c:	615a      	str	r2, [r3, #20]
}
10001b4e:	bf00      	nop
10001b50:	3718      	adds	r7, #24
10001b52:	46bd      	mov	sp, r7
10001b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
10001b58:	b002      	add	sp, #8
10001b5a:	4770      	bx	lr
10001b5c:	40200000 	.word	0x40200000

10001b60 <v_SetQuantNetParameters>:
	free(xDistribution.func_min);
	free(xDistribution.func_max);
}

void v_SetQuantNetParameters(netparam_t	input_xnetparam, quantizedval_t input_xquantizedval, distribution_t input_xDistribution)
{
10001b60:	b084      	sub	sp, #16
10001b62:	b5b0      	push	{r4, r5, r7, lr}
10001b64:	af00      	add	r7, sp, #0
10001b66:	f107 0410 	add.w	r4, r7, #16
10001b6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xNetParam = input_xnetparam;
10001b6e:	4b11      	ldr	r3, [pc, #68]	; (10001bb4 <v_SetQuantNetParameters+0x54>)
10001b70:	4618      	mov	r0, r3
10001b72:	f107 0310 	add.w	r3, r7, #16
10001b76:	2254      	movs	r2, #84	; 0x54
10001b78:	4619      	mov	r1, r3
10001b7a:	f009 fa33 	bl	1000afe4 <memcpy>
	xQuantizedVal = input_xquantizedval;
10001b7e:	4b0e      	ldr	r3, [pc, #56]	; (10001bb8 <v_SetQuantNetParameters+0x58>)
10001b80:	461d      	mov	r5, r3
10001b82:	f107 0464 	add.w	r4, r7, #100	; 0x64
10001b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10001b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10001b8e:	6823      	ldr	r3, [r4, #0]
10001b90:	602b      	str	r3, [r5, #0]
	xDistribution = input_xDistribution;
10001b92:	4b0a      	ldr	r3, [pc, #40]	; (10001bbc <v_SetQuantNetParameters+0x5c>)
10001b94:	461d      	mov	r5, r3
10001b96:	f107 0488 	add.w	r4, r7, #136	; 0x88
10001b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10001b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10001b9e:	e894 0003 	ldmia.w	r4, {r0, r1}
10001ba2:	e885 0003 	stmia.w	r5, {r0, r1}
}
10001ba6:	bf00      	nop
10001ba8:	46bd      	mov	sp, r7
10001baa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
10001bae:	b004      	add	sp, #16
10001bb0:	4770      	bx	lr
10001bb2:	bf00      	nop
10001bb4:	20000200 	.word	0x20000200
10001bb8:	20000254 	.word	0x20000254
10001bbc:	20000278 	.word	0x20000278

10001bc0 <v_DynamicAllocForwardProp_int>:

void v_DynamicAllocForwardProp_int(void** ZPtrPtr, void** FuncPtrPtr)
{
10001bc0:	b580      	push	{r7, lr}
10001bc2:	b084      	sub	sp, #16
10001bc4:	af00      	add	r7, sp, #0
10001bc6:	6078      	str	r0, [r7, #4]
10001bc8:	6039      	str	r1, [r7, #0]
	uint16_t	i;
	uint32_t	neurons = 0;
10001bca:	2300      	movs	r3, #0
10001bcc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
10001bce:	2300      	movs	r3, #0
10001bd0:	81fb      	strh	r3, [r7, #14]
10001bd2:	e00c      	b.n	10001bee <v_DynamicAllocForwardProp_int+0x2e>
	{
		neurons += xNetParam.NonLayer[i];
10001bd4:	89fb      	ldrh	r3, [r7, #14]
10001bd6:	4a3e      	ldr	r2, [pc, #248]	; (10001cd0 <v_DynamicAllocForwardProp_int+0x110>)
10001bd8:	005b      	lsls	r3, r3, #1
10001bda:	4413      	add	r3, r2
10001bdc:	889b      	ldrh	r3, [r3, #4]
10001bde:	b29b      	uxth	r3, r3
10001be0:	461a      	mov	r2, r3
10001be2:	68bb      	ldr	r3, [r7, #8]
10001be4:	4413      	add	r3, r2
10001be6:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
10001be8:	89fb      	ldrh	r3, [r7, #14]
10001bea:	3301      	adds	r3, #1
10001bec:	81fb      	strh	r3, [r7, #14]
10001bee:	89fa      	ldrh	r2, [r7, #14]
10001bf0:	4b37      	ldr	r3, [pc, #220]	; (10001cd0 <v_DynamicAllocForwardProp_int+0x110>)
10001bf2:	885b      	ldrh	r3, [r3, #2]
10001bf4:	b29b      	uxth	r3, r3
10001bf6:	3b01      	subs	r3, #1
10001bf8:	429a      	cmp	r2, r3
10001bfa:	dbeb      	blt.n	10001bd4 <v_DynamicAllocForwardProp_int+0x14>
	}
	neurons += xNetParam.NonLayer[xNetParam.Layers - 1];
10001bfc:	4b34      	ldr	r3, [pc, #208]	; (10001cd0 <v_DynamicAllocForwardProp_int+0x110>)
10001bfe:	885b      	ldrh	r3, [r3, #2]
10001c00:	b29b      	uxth	r3, r3
10001c02:	3b01      	subs	r3, #1
10001c04:	4a32      	ldr	r2, [pc, #200]	; (10001cd0 <v_DynamicAllocForwardProp_int+0x110>)
10001c06:	005b      	lsls	r3, r3, #1
10001c08:	4413      	add	r3, r2
10001c0a:	889b      	ldrh	r3, [r3, #4]
10001c0c:	b29b      	uxth	r3, r3
10001c0e:	461a      	mov	r2, r3
10001c10:	68bb      	ldr	r3, [r7, #8]
10001c12:	4413      	add	r3, r2
10001c14:	60bb      	str	r3, [r7, #8]

	*FuncPtrPtr = malloc(ceil((float)(neurons * xNetParam.xVarPrecision.precision) / 8.0));
10001c16:	4b2e      	ldr	r3, [pc, #184]	; (10001cd0 <v_DynamicAllocForwardProp_int+0x110>)
10001c18:	785b      	ldrb	r3, [r3, #1]
10001c1a:	b2db      	uxtb	r3, r3
10001c1c:	461a      	mov	r2, r3
10001c1e:	68bb      	ldr	r3, [r7, #8]
10001c20:	fb03 f302 	mul.w	r3, r3, r2
10001c24:	ee07 3a90 	vmov	s15, r3
10001c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c2c:	ee17 0a90 	vmov	r0, s15
10001c30:	f7fe fb72 	bl	10000318 <__aeabi_f2d>
10001c34:	f04f 0200 	mov.w	r2, #0
10001c38:	4b26      	ldr	r3, [pc, #152]	; (10001cd4 <v_DynamicAllocForwardProp_int+0x114>)
10001c3a:	f7fe fcef 	bl	1000061c <__aeabi_ddiv>
10001c3e:	4602      	mov	r2, r0
10001c40:	460b      	mov	r3, r1
10001c42:	ec43 2b17 	vmov	d7, r2, r3
10001c46:	eeb0 0a47 	vmov.f32	s0, s14
10001c4a:	eef0 0a67 	vmov.f32	s1, s15
10001c4e:	f009 fbab 	bl	1000b3a8 <ceil>
10001c52:	ec53 2b10 	vmov	r2, r3, d0
10001c56:	4610      	mov	r0, r2
10001c58:	4619      	mov	r1, r3
10001c5a:	f7fe fe77 	bl	1000094c <__aeabi_d2uiz>
10001c5e:	4603      	mov	r3, r0
10001c60:	4618      	mov	r0, r3
10001c62:	f009 f9af 	bl	1000afc4 <malloc>
10001c66:	4603      	mov	r3, r0
10001c68:	461a      	mov	r2, r3
10001c6a:	683b      	ldr	r3, [r7, #0]
10001c6c:	601a      	str	r2, [r3, #0]
	*ZPtrPtr = malloc(ceil((float)(neurons * xNetParam.xVarPrecision.precision) / 8.0));
10001c6e:	4b18      	ldr	r3, [pc, #96]	; (10001cd0 <v_DynamicAllocForwardProp_int+0x110>)
10001c70:	785b      	ldrb	r3, [r3, #1]
10001c72:	b2db      	uxtb	r3, r3
10001c74:	461a      	mov	r2, r3
10001c76:	68bb      	ldr	r3, [r7, #8]
10001c78:	fb03 f302 	mul.w	r3, r3, r2
10001c7c:	ee07 3a90 	vmov	s15, r3
10001c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c84:	ee17 0a90 	vmov	r0, s15
10001c88:	f7fe fb46 	bl	10000318 <__aeabi_f2d>
10001c8c:	f04f 0200 	mov.w	r2, #0
10001c90:	4b10      	ldr	r3, [pc, #64]	; (10001cd4 <v_DynamicAllocForwardProp_int+0x114>)
10001c92:	f7fe fcc3 	bl	1000061c <__aeabi_ddiv>
10001c96:	4602      	mov	r2, r0
10001c98:	460b      	mov	r3, r1
10001c9a:	ec43 2b17 	vmov	d7, r2, r3
10001c9e:	eeb0 0a47 	vmov.f32	s0, s14
10001ca2:	eef0 0a67 	vmov.f32	s1, s15
10001ca6:	f009 fb7f 	bl	1000b3a8 <ceil>
10001caa:	ec53 2b10 	vmov	r2, r3, d0
10001cae:	4610      	mov	r0, r2
10001cb0:	4619      	mov	r1, r3
10001cb2:	f7fe fe4b 	bl	1000094c <__aeabi_d2uiz>
10001cb6:	4603      	mov	r3, r0
10001cb8:	4618      	mov	r0, r3
10001cba:	f009 f983 	bl	1000afc4 <malloc>
10001cbe:	4603      	mov	r3, r0
10001cc0:	461a      	mov	r2, r3
10001cc2:	687b      	ldr	r3, [r7, #4]
10001cc4:	601a      	str	r2, [r3, #0]
}
10001cc6:	bf00      	nop
10001cc8:	3710      	adds	r7, #16
10001cca:	46bd      	mov	sp, r7
10001ccc:	bd80      	pop	{r7, pc}
10001cce:	bf00      	nop
10001cd0:	20000200 	.word	0x20000200
10001cd4:	40200000 	.word	0x40200000

10001cd8 <v_MacForwardProp_int>:
//	in		zptr, xnetparam, layer, funcptr
//	out		none
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_MacForwardProp_int(void* res, uint8_t	layer, void* Funcptr, void* WBptr)
{
10001cd8:	b5b0      	push	{r4, r5, r7, lr}
10001cda:	ed2d 8b02 	vpush	{d8}
10001cde:	b0c6      	sub	sp, #280	; 0x118
10001ce0:	af14      	add	r7, sp, #80	; 0x50
10001ce2:	60f8      	str	r0, [r7, #12]
10001ce4:	607a      	str	r2, [r7, #4]
10001ce6:	603b      	str	r3, [r7, #0]
10001ce8:	460b      	mov	r3, r1
10001cea:	72fb      	strb	r3, [r7, #11]
	uint32_t	index_w, index_b, rows, cols;
	long long int	long_aux = 0;
10001cec:	f04f 0200 	mov.w	r2, #0
10001cf0:	f04f 0300 	mov.w	r3, #0
10001cf4:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	int cont;

	index_w = u32_GetIndex(xNetParam, layer, 0, false);
10001cf8:	7afb      	ldrb	r3, [r7, #11]
10001cfa:	b29b      	uxth	r3, r3
10001cfc:	4ca5      	ldr	r4, [pc, #660]	; (10001f94 <v_MacForwardProp_int+0x2bc>)
10001cfe:	2200      	movs	r2, #0
10001d00:	9213      	str	r2, [sp, #76]	; 0x4c
10001d02:	2200      	movs	r2, #0
10001d04:	9212      	str	r2, [sp, #72]	; 0x48
10001d06:	9311      	str	r3, [sp, #68]	; 0x44
10001d08:	4668      	mov	r0, sp
10001d0a:	f104 0310 	add.w	r3, r4, #16
10001d0e:	2244      	movs	r2, #68	; 0x44
10001d10:	4619      	mov	r1, r3
10001d12:	f009 f967 	bl	1000afe4 <memcpy>
10001d16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
10001d1a:	f001 fee5 	bl	10003ae8 <u32_GetIndex>
10001d1e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	index_b = index_w + (xNetParam.NonLayer[layer - 1] * xNetParam.NonLayer[layer]);
10001d22:	7afb      	ldrb	r3, [r7, #11]
10001d24:	3b01      	subs	r3, #1
10001d26:	4a9b      	ldr	r2, [pc, #620]	; (10001f94 <v_MacForwardProp_int+0x2bc>)
10001d28:	005b      	lsls	r3, r3, #1
10001d2a:	4413      	add	r3, r2
10001d2c:	889b      	ldrh	r3, [r3, #4]
10001d2e:	b29b      	uxth	r3, r3
10001d30:	4619      	mov	r1, r3
10001d32:	7afb      	ldrb	r3, [r7, #11]
10001d34:	4a97      	ldr	r2, [pc, #604]	; (10001f94 <v_MacForwardProp_int+0x2bc>)
10001d36:	005b      	lsls	r3, r3, #1
10001d38:	4413      	add	r3, r2
10001d3a:	889b      	ldrh	r3, [r3, #4]
10001d3c:	b29b      	uxth	r3, r3
10001d3e:	fb03 f301 	mul.w	r3, r3, r1
10001d42:	461a      	mov	r2, r3
10001d44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
10001d48:	4413      	add	r3, r2
10001d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	rows = xNetParam.NonLayer[layer];
10001d4e:	7afb      	ldrb	r3, [r7, #11]
10001d50:	4a90      	ldr	r2, [pc, #576]	; (10001f94 <v_MacForwardProp_int+0x2bc>)
10001d52:	005b      	lsls	r3, r3, #1
10001d54:	4413      	add	r3, r2
10001d56:	889b      	ldrh	r3, [r3, #4]
10001d58:	b29b      	uxth	r3, r3
10001d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	cols = xNetParam.NonLayer[layer - 1];
10001d5e:	7afb      	ldrb	r3, [r7, #11]
10001d60:	3b01      	subs	r3, #1
10001d62:	4a8c      	ldr	r2, [pc, #560]	; (10001f94 <v_MacForwardProp_int+0x2bc>)
10001d64:	005b      	lsls	r3, r3, #1
10001d66:	4413      	add	r3, r2
10001d68:	889b      	ldrh	r3, [r3, #4]
10001d6a:	b29b      	uxth	r3, r3
10001d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	switch (xNetParam.xVarPrecision.precision)
10001d70:	4b88      	ldr	r3, [pc, #544]	; (10001f94 <v_MacForwardProp_int+0x2bc>)
10001d72:	785b      	ldrb	r3, [r3, #1]
10001d74:	b2db      	uxtb	r3, r3
10001d76:	3b04      	subs	r3, #4
10001d78:	2b1c      	cmp	r3, #28
10001d7a:	f200 8526 	bhi.w	100027ca <v_MacForwardProp_int+0xaf2>
10001d7e:	a201      	add	r2, pc, #4	; (adr r2, 10001d84 <v_MacForwardProp_int+0xac>)
10001d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001d84:	100023e7 	.word	0x100023e7
10001d88:	100027cb 	.word	0x100027cb
10001d8c:	100027cb 	.word	0x100027cb
10001d90:	100027cb 	.word	0x100027cb
10001d94:	100021b1 	.word	0x100021b1
10001d98:	100027cb 	.word	0x100027cb
10001d9c:	100027cb 	.word	0x100027cb
10001da0:	100027cb 	.word	0x100027cb
10001da4:	100027cb 	.word	0x100027cb
10001da8:	100027cb 	.word	0x100027cb
10001dac:	100027cb 	.word	0x100027cb
10001db0:	100027cb 	.word	0x100027cb
10001db4:	10001f63 	.word	0x10001f63
10001db8:	100027cb 	.word	0x100027cb
10001dbc:	100027cb 	.word	0x100027cb
10001dc0:	100027cb 	.word	0x100027cb
10001dc4:	100027cb 	.word	0x100027cb
10001dc8:	100027cb 	.word	0x100027cb
10001dcc:	100027cb 	.word	0x100027cb
10001dd0:	100027cb 	.word	0x100027cb
10001dd4:	100027cb 	.word	0x100027cb
10001dd8:	100027cb 	.word	0x100027cb
10001ddc:	100027cb 	.word	0x100027cb
10001de0:	100027cb 	.word	0x100027cb
10001de4:	100027cb 	.word	0x100027cb
10001de8:	100027cb 	.word	0x100027cb
10001dec:	100027cb 	.word	0x100027cb
10001df0:	100027cb 	.word	0x100027cb
10001df4:	10001df9 	.word	0x10001df9
	{
	case 32:
		for (size_t i = 0; i < rows; i++)
10001df8:	2300      	movs	r3, #0
10001dfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
10001dfe:	e0a7      	b.n	10001f50 <v_MacForwardProp_int+0x278>
		{
			long_aux = 0;
10001e00:	f04f 0200 	mov.w	r2, #0
10001e04:	f04f 0300 	mov.w	r3, #0
10001e08:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cols; j++)
10001e0c:	2300      	movs	r3, #0
10001e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
10001e12:	e02b      	b.n	10001e6c <v_MacForwardProp_int+0x194>
			{
				//long_aux += ((long long int)((int32_t*)WBptr)[index_w + (i * cols) + j] * (long long int)((int32_t*)Funcptr)[j]) & 0xffffffff00000000;	//mac
				long_aux = __SMMLA(((int32_t*)WBptr)[index_w + (i * cols) + j], ((int32_t*)Funcptr)[j], long_aux);
10001e14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
10001e18:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
10001e1c:	fb02 f203 	mul.w	r2, r2, r3
10001e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
10001e24:	441a      	add	r2, r3
10001e26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
10001e2a:	4413      	add	r3, r2
10001e2c:	009b      	lsls	r3, r3, #2
10001e2e:	683a      	ldr	r2, [r7, #0]
10001e30:	4413      	add	r3, r2
10001e32:	6819      	ldr	r1, [r3, #0]
10001e34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
10001e38:	009b      	lsls	r3, r3, #2
10001e3a:	687a      	ldr	r2, [r7, #4]
10001e3c:	4413      	add	r3, r2
10001e3e:	681a      	ldr	r2, [r3, #0]
10001e40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
10001e44:	67f9      	str	r1, [r7, #124]	; 0x7c
10001e46:	67ba      	str	r2, [r7, #120]	; 0x78
10001e48:	677b      	str	r3, [r7, #116]	; 0x74

__STATIC_FORCEINLINE int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __ASM volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r"  (op1), "r" (op2), "r" (op3) );
10001e4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001e4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
10001e4e:	6f79      	ldr	r1, [r7, #116]	; 0x74
10001e50:	fb53 1302 	smmla	r3, r3, r2, r1
10001e54:	673b      	str	r3, [r7, #112]	; 0x70
 return(result);
10001e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
10001e58:	461a      	mov	r2, r3
10001e5a:	ea4f 73e2 	mov.w	r3, r2, asr #31
10001e5e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cols; j++)
10001e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
10001e66:	3301      	adds	r3, #1
10001e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
10001e6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
10001e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
10001e74:	429a      	cmp	r2, r3
10001e76:	d3cd      	bcc.n	10001e14 <v_MacForwardProp_int+0x13c>
			}

			//long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (xNetParam.NonLayer[layer] * ((int32_t*)WBptr)[index_b + i]));
			long_aux = (round(xQuantizedVal.Ssumcomp[layer] * (long_aux << 32)) + (((int32_t*)WBptr)[index_b + i]));
10001e78:	4b47      	ldr	r3, [pc, #284]	; (10001f98 <v_MacForwardProp_int+0x2c0>)
10001e7a:	691a      	ldr	r2, [r3, #16]
10001e7c:	7afb      	ldrb	r3, [r7, #11]
10001e7e:	009b      	lsls	r3, r3, #2
10001e80:	4413      	add	r3, r2
10001e82:	ed93 8a00 	vldr	s16, [r3]
10001e86:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
10001e8a:	f04f 0200 	mov.w	r2, #0
10001e8e:	f04f 0300 	mov.w	r3, #0
10001e92:	0003      	movs	r3, r0
10001e94:	2200      	movs	r2, #0
10001e96:	4610      	mov	r0, r2
10001e98:	4619      	mov	r1, r3
10001e9a:	f7fe fe47 	bl	10000b2c <__aeabi_l2f>
10001e9e:	ee07 0a90 	vmov	s15, r0
10001ea2:	ee68 7a27 	vmul.f32	s15, s16, s15
10001ea6:	ee17 0a90 	vmov	r0, s15
10001eaa:	f7fe fa35 	bl	10000318 <__aeabi_f2d>
10001eae:	4602      	mov	r2, r0
10001eb0:	460b      	mov	r3, r1
10001eb2:	ec43 2b10 	vmov	d0, r2, r3
10001eb6:	f009 fafb 	bl	1000b4b0 <round>
10001eba:	ec55 4b10 	vmov	r4, r5, d0
10001ebe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
10001ec2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
10001ec6:	4413      	add	r3, r2
10001ec8:	009b      	lsls	r3, r3, #2
10001eca:	683a      	ldr	r2, [r7, #0]
10001ecc:	4413      	add	r3, r2
10001ece:	681b      	ldr	r3, [r3, #0]
10001ed0:	4618      	mov	r0, r3
10001ed2:	f7fe fa0f 	bl	100002f4 <__aeabi_i2d>
10001ed6:	4602      	mov	r2, r0
10001ed8:	460b      	mov	r3, r1
10001eda:	4620      	mov	r0, r4
10001edc:	4629      	mov	r1, r5
10001ede:	f7fe f8bd 	bl	1000005c <__adddf3>
10001ee2:	4602      	mov	r2, r0
10001ee4:	460b      	mov	r3, r1
10001ee6:	4610      	mov	r0, r2
10001ee8:	4619      	mov	r1, r3
10001eea:	f7fe fed9 	bl	10000ca0 <__aeabi_d2lz>
10001eee:	4602      	mov	r2, r0
10001ef0:	460b      	mov	r3, r1
10001ef2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

			// OVERFLOW and UNDERFLOW PROTECTION
			if (long_aux >= INT32_MAX)
10001ef6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
10001efa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
10001efe:	f04f 0100 	mov.w	r1, #0
10001f02:	4282      	cmp	r2, r0
10001f04:	418b      	sbcs	r3, r1
10001f06:	db06      	blt.n	10001f16 <v_MacForwardProp_int+0x23e>
			{
				long_aux = INT32_MAX;
10001f08:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
10001f0c:	f04f 0300 	mov.w	r3, #0
10001f10:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
10001f14:	e00f      	b.n	10001f36 <v_MacForwardProp_int+0x25e>
			}
			else if (long_aux <= INT32_MIN)
10001f16:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
10001f1a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
10001f1e:	f04f 31ff 	mov.w	r1, #4294967295
10001f22:	4290      	cmp	r0, r2
10001f24:	eb71 0303 	sbcs.w	r3, r1, r3
10001f28:	db05      	blt.n	10001f36 <v_MacForwardProp_int+0x25e>
			{
				long_aux = INT32_MIN;
10001f2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
10001f2e:	f04f 33ff 	mov.w	r3, #4294967295
10001f32:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			}
			((int32_t*)res)[i] = (int32_t)long_aux;
10001f36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
10001f3a:	009b      	lsls	r3, r3, #2
10001f3c:	68fa      	ldr	r2, [r7, #12]
10001f3e:	4413      	add	r3, r2
10001f40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
10001f44:	601a      	str	r2, [r3, #0]
		for (size_t i = 0; i < rows; i++)
10001f46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
10001f4a:	3301      	adds	r3, #1
10001f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
10001f50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
10001f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
10001f58:	429a      	cmp	r2, r3
10001f5a:	f4ff af51 	bcc.w	10001e00 <v_MacForwardProp_int+0x128>
		}
		break;
10001f5e:	f000 bc35 	b.w	100027cc <v_MacForwardProp_int+0xaf4>

	case 16:
		cont = (cols/2 + cols%2);
10001f62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
10001f66:	085a      	lsrs	r2, r3, #1
10001f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
10001f6c:	f003 0301 	and.w	r3, r3, #1
10001f70:	4413      	add	r3, r2
10001f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (size_t i = 0; i < rows; i++)
10001f76:	2300      	movs	r3, #0
10001f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
10001f7c:	e110      	b.n	100021a0 <v_MacForwardProp_int+0x4c8>
		{
			long_aux = 0;
10001f7e:	f04f 0200 	mov.w	r2, #0
10001f82:	f04f 0300 	mov.w	r3, #0
10001f86:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
10001f8a:	2300      	movs	r3, #0
10001f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
10001f90:	e09c      	b.n	100020cc <v_MacForwardProp_int+0x3f4>
10001f92:	bf00      	nop
10001f94:	20000200 	.word	0x20000200
10001f98:	20000254 	.word	0x20000254
			{
				//long_aux += ((int16_t*)WBptr)[index_w + (i * cols) + j] * ((int16_t*)Funcptr)[j];	//mac
				if((j < (cont-1)) | (cols%2 == 0))
10001f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
10001fa0:	3b01      	subs	r3, #1
10001fa2:	461a      	mov	r2, r3
10001fa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
10001fa8:	4293      	cmp	r3, r2
10001faa:	bf34      	ite	cc
10001fac:	2301      	movcc	r3, #1
10001fae:	2300      	movcs	r3, #0
10001fb0:	b2da      	uxtb	r2, r3
10001fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
10001fb6:	f003 0301 	and.w	r3, r3, #1
10001fba:	2b00      	cmp	r3, #0
10001fbc:	bf0c      	ite	eq
10001fbe:	2301      	moveq	r3, #1
10001fc0:	2300      	movne	r3, #0
10001fc2:	b2db      	uxtb	r3, r3
10001fc4:	4313      	orrs	r3, r2
10001fc6:	b2db      	uxtb	r3, r3
10001fc8:	2b00      	cmp	r3, #0
10001fca:	d04e      	beq.n	1000206a <v_MacForwardProp_int+0x392>
					long_aux = (int32_t)__SMLAD((((((int16_t*)WBptr)[index_w + (i * cols) + 2*j] << 16) & 0xffff0000) | ((((int16_t*)WBptr)[index_w + (i * cols) + 2*j + 1]) & 0x0000ffff)), (((((int16_t*)Funcptr)[2*j] << 16) & 0xffff0000) | ((((int16_t*)Funcptr)[2*j + 1]) & 0x0000ffff)), long_aux);
10001fcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
10001fd0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
10001fd4:	fb02 f203 	mul.w	r2, r2, r3
10001fd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
10001fdc:	005b      	lsls	r3, r3, #1
10001fde:	441a      	add	r2, r3
10001fe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
10001fe4:	4413      	add	r3, r2
10001fe6:	005b      	lsls	r3, r3, #1
10001fe8:	683a      	ldr	r2, [r7, #0]
10001fea:	4413      	add	r3, r2
10001fec:	f9b3 3000 	ldrsh.w	r3, [r3]
10001ff0:	041b      	lsls	r3, r3, #16
10001ff2:	4619      	mov	r1, r3
10001ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
10001ff8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
10001ffc:	fb02 f203 	mul.w	r2, r2, r3
10002000:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
10002004:	005b      	lsls	r3, r3, #1
10002006:	441a      	add	r2, r3
10002008:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
1000200c:	4413      	add	r3, r2
1000200e:	3301      	adds	r3, #1
10002010:	005b      	lsls	r3, r3, #1
10002012:	683a      	ldr	r2, [r7, #0]
10002014:	4413      	add	r3, r2
10002016:	f9b3 3000 	ldrsh.w	r3, [r3]
1000201a:	b29b      	uxth	r3, r3
1000201c:	4319      	orrs	r1, r3
1000201e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
10002022:	009b      	lsls	r3, r3, #2
10002024:	687a      	ldr	r2, [r7, #4]
10002026:	4413      	add	r3, r2
10002028:	f9b3 3000 	ldrsh.w	r3, [r3]
1000202c:	041b      	lsls	r3, r3, #16
1000202e:	4618      	mov	r0, r3
10002030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
10002034:	009b      	lsls	r3, r3, #2
10002036:	3302      	adds	r3, #2
10002038:	687a      	ldr	r2, [r7, #4]
1000203a:	4413      	add	r3, r2
1000203c:	f9b3 3000 	ldrsh.w	r3, [r3]
10002040:	b29b      	uxth	r3, r3
10002042:	ea40 0203 	orr.w	r2, r0, r3
10002046:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
1000204a:	66f9      	str	r1, [r7, #108]	; 0x6c
1000204c:	66ba      	str	r2, [r7, #104]	; 0x68
1000204e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
10002050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10002052:	6eba      	ldr	r2, [r7, #104]	; 0x68
10002054:	6e79      	ldr	r1, [r7, #100]	; 0x64
10002056:	fb23 1302 	smlad	r3, r3, r2, r1
1000205a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
1000205c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1000205e:	461a      	mov	r2, r3
10002060:	ea4f 73e2 	mov.w	r3, r2, asr #31
10002064:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
10002068:	e02b      	b.n	100020c2 <v_MacForwardProp_int+0x3ea>
				else
					long_aux = (int32_t)__SMLAD((((int16_t*)WBptr)[index_w + (i * cols) + 2*j] & 0x0000ffff), (((int16_t*)Funcptr)[2*j] & 0x0000ffff), long_aux);
1000206a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
1000206e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
10002072:	fb02 f203 	mul.w	r2, r2, r3
10002076:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
1000207a:	005b      	lsls	r3, r3, #1
1000207c:	441a      	add	r2, r3
1000207e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
10002082:	4413      	add	r3, r2
10002084:	005b      	lsls	r3, r3, #1
10002086:	683a      	ldr	r2, [r7, #0]
10002088:	4413      	add	r3, r2
1000208a:	f9b3 3000 	ldrsh.w	r3, [r3]
1000208e:	b299      	uxth	r1, r3
10002090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
10002094:	009b      	lsls	r3, r3, #2
10002096:	687a      	ldr	r2, [r7, #4]
10002098:	4413      	add	r3, r2
1000209a:	f9b3 3000 	ldrsh.w	r3, [r3]
1000209e:	b29a      	uxth	r2, r3
100020a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
100020a4:	65f9      	str	r1, [r7, #92]	; 0x5c
100020a6:	65ba      	str	r2, [r7, #88]	; 0x58
100020a8:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
100020aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
100020ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
100020ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
100020b0:	fb23 1302 	smlad	r3, r3, r2, r1
100020b4:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
100020b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
100020b8:	461a      	mov	r2, r3
100020ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
100020be:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
100020c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
100020c6:	3301      	adds	r3, #1
100020c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
100020cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
100020d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
100020d4:	429a      	cmp	r2, r3
100020d6:	f4ff af61 	bcc.w	10001f9c <v_MacForwardProp_int+0x2c4>
			}

			//long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (xNetParam.NonLayer[layer] * ((int16_t*)WBptr)[index_b + i]));
			long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (((int16_t*)WBptr)[index_b + i]));
100020da:	4bc8      	ldr	r3, [pc, #800]	; (100023fc <v_MacForwardProp_int+0x724>)
100020dc:	691a      	ldr	r2, [r3, #16]
100020de:	7afb      	ldrb	r3, [r7, #11]
100020e0:	009b      	lsls	r3, r3, #2
100020e2:	4413      	add	r3, r2
100020e4:	ed93 8a00 	vldr	s16, [r3]
100020e8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
100020ec:	f7fe fd1e 	bl	10000b2c <__aeabi_l2f>
100020f0:	ee07 0a90 	vmov	s15, r0
100020f4:	ee68 7a27 	vmul.f32	s15, s16, s15
100020f8:	ee17 0a90 	vmov	r0, s15
100020fc:	f7fe f90c 	bl	10000318 <__aeabi_f2d>
10002100:	4602      	mov	r2, r0
10002102:	460b      	mov	r3, r1
10002104:	ec43 2b10 	vmov	d0, r2, r3
10002108:	f009 f9d2 	bl	1000b4b0 <round>
1000210c:	ec55 4b10 	vmov	r4, r5, d0
10002110:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
10002114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
10002118:	4413      	add	r3, r2
1000211a:	005b      	lsls	r3, r3, #1
1000211c:	683a      	ldr	r2, [r7, #0]
1000211e:	4413      	add	r3, r2
10002120:	f9b3 3000 	ldrsh.w	r3, [r3]
10002124:	4618      	mov	r0, r3
10002126:	f7fe f8e5 	bl	100002f4 <__aeabi_i2d>
1000212a:	4602      	mov	r2, r0
1000212c:	460b      	mov	r3, r1
1000212e:	4620      	mov	r0, r4
10002130:	4629      	mov	r1, r5
10002132:	f7fd ff93 	bl	1000005c <__adddf3>
10002136:	4602      	mov	r2, r0
10002138:	460b      	mov	r3, r1
1000213a:	4610      	mov	r0, r2
1000213c:	4619      	mov	r1, r3
1000213e:	f7fe fdaf 	bl	10000ca0 <__aeabi_d2lz>
10002142:	4602      	mov	r2, r0
10002144:	460b      	mov	r3, r1
10002146:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

			// OVERFLOW and UNDERFLOW PROTECTION
			if (long_aux >= INT16_MAX)
1000214a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
1000214e:	f647 70fe 	movw	r0, #32766	; 0x7ffe
10002152:	f04f 0100 	mov.w	r1, #0
10002156:	4290      	cmp	r0, r2
10002158:	eb71 0303 	sbcs.w	r3, r1, r3
1000215c:	da06      	bge.n	1000216c <v_MacForwardProp_int+0x494>
			{
				long_aux = INT16_MAX;
1000215e:	f647 72ff 	movw	r2, #32767	; 0x7fff
10002162:	f04f 0300 	mov.w	r3, #0
10002166:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
1000216a:	e00c      	b.n	10002186 <v_MacForwardProp_int+0x4ae>
			}
			else if (long_aux <= INT16_MIN)
1000216c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
10002170:	48a3      	ldr	r0, [pc, #652]	; (10002400 <v_MacForwardProp_int+0x728>)
10002172:	f04f 31ff 	mov.w	r1, #4294967295
10002176:	4282      	cmp	r2, r0
10002178:	418b      	sbcs	r3, r1
1000217a:	da04      	bge.n	10002186 <v_MacForwardProp_int+0x4ae>
			{
				long_aux = INT16_MIN;
1000217c:	4aa1      	ldr	r2, [pc, #644]	; (10002404 <v_MacForwardProp_int+0x72c>)
1000217e:	f04f 33ff 	mov.w	r3, #4294967295
10002182:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			}
			((int16_t*)res)[i] = (int16_t)long_aux;
10002186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
1000218a:	005b      	lsls	r3, r3, #1
1000218c:	68fa      	ldr	r2, [r7, #12]
1000218e:	4413      	add	r3, r2
10002190:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
10002194:	801a      	strh	r2, [r3, #0]
		for (size_t i = 0; i < rows; i++)
10002196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
1000219a:	3301      	adds	r3, #1
1000219c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
100021a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
100021a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
100021a8:	429a      	cmp	r2, r3
100021aa:	f4ff aee8 	bcc.w	10001f7e <v_MacForwardProp_int+0x2a6>
		}
		break;
100021ae:	e30d      	b.n	100027cc <v_MacForwardProp_int+0xaf4>

	case 8:
		cont = (cols/2 + cols%2);
100021b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
100021b4:	085a      	lsrs	r2, r3, #1
100021b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
100021ba:	f003 0301 	and.w	r3, r3, #1
100021be:	4413      	add	r3, r2
100021c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (size_t i = 0; i < rows; i++)
100021c4:	2300      	movs	r3, #0
100021c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
100021ca:	e104      	b.n	100023d6 <v_MacForwardProp_int+0x6fe>
		{
			long_aux = 0;
100021cc:	f04f 0200 	mov.w	r2, #0
100021d0:	f04f 0300 	mov.w	r3, #0
100021d4:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
100021d8:	2300      	movs	r3, #0
100021da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
100021de:	e094      	b.n	1000230a <v_MacForwardProp_int+0x632>
			{
				//long_aux += ((int8_t*)WBptr)[index_w + (i * cols) + j] * ((int8_t*)Funcptr)[j];	//mac
				if((j < (cont-1)) | (cols%2 == 0))
100021e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
100021e4:	3b01      	subs	r3, #1
100021e6:	461a      	mov	r2, r3
100021e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
100021ec:	4293      	cmp	r3, r2
100021ee:	bf34      	ite	cc
100021f0:	2301      	movcc	r3, #1
100021f2:	2300      	movcs	r3, #0
100021f4:	b2da      	uxtb	r2, r3
100021f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
100021fa:	f003 0301 	and.w	r3, r3, #1
100021fe:	2b00      	cmp	r3, #0
10002200:	bf0c      	ite	eq
10002202:	2301      	moveq	r3, #1
10002204:	2300      	movne	r3, #0
10002206:	b2db      	uxtb	r3, r3
10002208:	4313      	orrs	r3, r2
1000220a:	b2db      	uxtb	r3, r3
1000220c:	2b00      	cmp	r3, #0
1000220e:	d04c      	beq.n	100022aa <v_MacForwardProp_int+0x5d2>
					long_aux = (int32_t)__SMLAD((((((int8_t*)WBptr)[index_w + (i * cols) + 2*j] << 16) & 0xffff0000) | ((((int8_t*)WBptr)[index_w + (i * cols) + 2*j + 1]) & 0x0000ffff)), (((((int8_t*)Funcptr)[2*j] << 16) & 0xffff0000) | ((((int8_t*)Funcptr)[2*j + 1]) & 0x0000ffff)), long_aux);
10002210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
10002214:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
10002218:	fb02 f203 	mul.w	r2, r2, r3
1000221c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
10002220:	005b      	lsls	r3, r3, #1
10002222:	441a      	add	r2, r3
10002224:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
10002228:	4413      	add	r3, r2
1000222a:	683a      	ldr	r2, [r7, #0]
1000222c:	4413      	add	r3, r2
1000222e:	f993 3000 	ldrsb.w	r3, [r3]
10002232:	041b      	lsls	r3, r3, #16
10002234:	4619      	mov	r1, r3
10002236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
1000223a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
1000223e:	fb02 f203 	mul.w	r2, r2, r3
10002242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
10002246:	005b      	lsls	r3, r3, #1
10002248:	441a      	add	r2, r3
1000224a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
1000224e:	4413      	add	r3, r2
10002250:	3301      	adds	r3, #1
10002252:	683a      	ldr	r2, [r7, #0]
10002254:	4413      	add	r3, r2
10002256:	f993 3000 	ldrsb.w	r3, [r3]
1000225a:	b29b      	uxth	r3, r3
1000225c:	4319      	orrs	r1, r3
1000225e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
10002262:	005b      	lsls	r3, r3, #1
10002264:	687a      	ldr	r2, [r7, #4]
10002266:	4413      	add	r3, r2
10002268:	f993 3000 	ldrsb.w	r3, [r3]
1000226c:	041b      	lsls	r3, r3, #16
1000226e:	4618      	mov	r0, r3
10002270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
10002274:	005b      	lsls	r3, r3, #1
10002276:	3301      	adds	r3, #1
10002278:	687a      	ldr	r2, [r7, #4]
1000227a:	4413      	add	r3, r2
1000227c:	f993 3000 	ldrsb.w	r3, [r3]
10002280:	b29b      	uxth	r3, r3
10002282:	ea40 0203 	orr.w	r2, r0, r3
10002286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
1000228a:	64f9      	str	r1, [r7, #76]	; 0x4c
1000228c:	64ba      	str	r2, [r7, #72]	; 0x48
1000228e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
10002290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10002292:	6cba      	ldr	r2, [r7, #72]	; 0x48
10002294:	6c79      	ldr	r1, [r7, #68]	; 0x44
10002296:	fb23 1302 	smlad	r3, r3, r2, r1
1000229a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
1000229c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000229e:	461a      	mov	r2, r3
100022a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
100022a4:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
100022a8:	e02a      	b.n	10002300 <v_MacForwardProp_int+0x628>
				else
					long_aux = (int32_t)__SMLAD((((int8_t*)WBptr)[index_w + (i * cols) + 2*j] & 0x0000ffff), (((int8_t*)Funcptr)[2*j] & 0x0000ffff), long_aux);
100022aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
100022ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
100022b2:	fb02 f203 	mul.w	r2, r2, r3
100022b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
100022ba:	005b      	lsls	r3, r3, #1
100022bc:	441a      	add	r2, r3
100022be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
100022c2:	4413      	add	r3, r2
100022c4:	683a      	ldr	r2, [r7, #0]
100022c6:	4413      	add	r3, r2
100022c8:	f993 3000 	ldrsb.w	r3, [r3]
100022cc:	b299      	uxth	r1, r3
100022ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
100022d2:	005b      	lsls	r3, r3, #1
100022d4:	687a      	ldr	r2, [r7, #4]
100022d6:	4413      	add	r3, r2
100022d8:	f993 3000 	ldrsb.w	r3, [r3]
100022dc:	b29a      	uxth	r2, r3
100022de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
100022e2:	63f9      	str	r1, [r7, #60]	; 0x3c
100022e4:	63ba      	str	r2, [r7, #56]	; 0x38
100022e6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
100022e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100022ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
100022ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
100022ee:	fb23 1302 	smlad	r3, r3, r2, r1
100022f2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
100022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100022f6:	461a      	mov	r2, r3
100022f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
100022fc:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
10002300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
10002304:	3301      	adds	r3, #1
10002306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
1000230a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
1000230e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
10002312:	429a      	cmp	r2, r3
10002314:	f4ff af64 	bcc.w	100021e0 <v_MacForwardProp_int+0x508>
			}

			//long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (xNetParam.NonLayer[layer] * ((int8_t*)WBptr)[index_b + i]));
			long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (((int8_t*)WBptr)[index_b + i]));
10002318:	4b38      	ldr	r3, [pc, #224]	; (100023fc <v_MacForwardProp_int+0x724>)
1000231a:	691a      	ldr	r2, [r3, #16]
1000231c:	7afb      	ldrb	r3, [r7, #11]
1000231e:	009b      	lsls	r3, r3, #2
10002320:	4413      	add	r3, r2
10002322:	ed93 8a00 	vldr	s16, [r3]
10002326:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
1000232a:	f7fe fbff 	bl	10000b2c <__aeabi_l2f>
1000232e:	ee07 0a90 	vmov	s15, r0
10002332:	ee68 7a27 	vmul.f32	s15, s16, s15
10002336:	ee17 0a90 	vmov	r0, s15
1000233a:	f7fd ffed 	bl	10000318 <__aeabi_f2d>
1000233e:	4602      	mov	r2, r0
10002340:	460b      	mov	r3, r1
10002342:	ec43 2b10 	vmov	d0, r2, r3
10002346:	f009 f8b3 	bl	1000b4b0 <round>
1000234a:	ec55 4b10 	vmov	r4, r5, d0
1000234e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
10002352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
10002356:	4413      	add	r3, r2
10002358:	683a      	ldr	r2, [r7, #0]
1000235a:	4413      	add	r3, r2
1000235c:	f993 3000 	ldrsb.w	r3, [r3]
10002360:	4618      	mov	r0, r3
10002362:	f7fd ffc7 	bl	100002f4 <__aeabi_i2d>
10002366:	4602      	mov	r2, r0
10002368:	460b      	mov	r3, r1
1000236a:	4620      	mov	r0, r4
1000236c:	4629      	mov	r1, r5
1000236e:	f7fd fe75 	bl	1000005c <__adddf3>
10002372:	4602      	mov	r2, r0
10002374:	460b      	mov	r3, r1
10002376:	4610      	mov	r0, r2
10002378:	4619      	mov	r1, r3
1000237a:	f7fe fc91 	bl	10000ca0 <__aeabi_d2lz>
1000237e:	4602      	mov	r2, r0
10002380:	460b      	mov	r3, r1
10002382:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

			// OVERFLOW and UNDERFLOW PROTECTION
			if (long_aux >= INT8_MAX)
10002386:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
1000238a:	2a7f      	cmp	r2, #127	; 0x7f
1000238c:	f173 0300 	sbcs.w	r3, r3, #0
10002390:	db06      	blt.n	100023a0 <v_MacForwardProp_int+0x6c8>
			{
				long_aux = INT8_MAX;
10002392:	f04f 027f 	mov.w	r2, #127	; 0x7f
10002396:	f04f 0300 	mov.w	r3, #0
1000239a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
1000239e:	e00e      	b.n	100023be <v_MacForwardProp_int+0x6e6>
			}
			else if (long_aux <= INT8_MIN)
100023a0:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
100023a4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
100023a8:	f04f 31ff 	mov.w	r1, #4294967295
100023ac:	4282      	cmp	r2, r0
100023ae:	418b      	sbcs	r3, r1
100023b0:	da05      	bge.n	100023be <v_MacForwardProp_int+0x6e6>
			{
				long_aux = INT8_MIN;
100023b2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
100023b6:	f04f 33ff 	mov.w	r3, #4294967295
100023ba:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			}
			((int8_t*)res)[i] = (int8_t)long_aux;
100023be:	68fa      	ldr	r2, [r7, #12]
100023c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
100023c4:	4413      	add	r3, r2
100023c6:	f997 20c0 	ldrsb.w	r2, [r7, #192]	; 0xc0
100023ca:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < rows; i++)
100023cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
100023d0:	3301      	adds	r3, #1
100023d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
100023d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
100023da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
100023de:	429a      	cmp	r2, r3
100023e0:	f4ff aef4 	bcc.w	100021cc <v_MacForwardProp_int+0x4f4>
		}
		break;
100023e4:	e1f2      	b.n	100027cc <v_MacForwardProp_int+0xaf4>

	case 4:;
		int16_t EvOdd_Lm1 = 0;
100023e6:	2300      	movs	r3, #0
100023e8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		int16_t EvOdd_L = 0;
100023ec:	2300      	movs	r3, #0
100023ee:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		for (size_t i = 0; i < (layer - 1); i++)
100023f2:	2300      	movs	r3, #0
100023f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
100023f8:	e018      	b.n	1000242c <v_MacForwardProp_int+0x754>
100023fa:	bf00      	nop
100023fc:	20000254 	.word	0x20000254
10002400:	ffff8001 	.word	0xffff8001
10002404:	ffff8000 	.word	0xffff8000
		{
			EvOdd_Lm1 += xNetParam.NonLayer[i];
10002408:	4a8e      	ldr	r2, [pc, #568]	; (10002644 <v_MacForwardProp_int+0x96c>)
1000240a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
1000240e:	005b      	lsls	r3, r3, #1
10002410:	4413      	add	r3, r2
10002412:	889b      	ldrh	r3, [r3, #4]
10002414:	b29a      	uxth	r2, r3
10002416:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
1000241a:	4413      	add	r3, r2
1000241c:	b29b      	uxth	r3, r3
1000241e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		for (size_t i = 0; i < (layer - 1); i++)
10002422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
10002426:	3301      	adds	r3, #1
10002428:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
1000242c:	7afb      	ldrb	r3, [r7, #11]
1000242e:	3b01      	subs	r3, #1
10002430:	461a      	mov	r2, r3
10002432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
10002436:	4293      	cmp	r3, r2
10002438:	d3e6      	bcc.n	10002408 <v_MacForwardProp_int+0x730>
		}
		EvOdd_L = (EvOdd_Lm1 + xNetParam.NonLayer[layer - 1]) % 2;
1000243a:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
1000243e:	7afb      	ldrb	r3, [r7, #11]
10002440:	3b01      	subs	r3, #1
10002442:	4980      	ldr	r1, [pc, #512]	; (10002644 <v_MacForwardProp_int+0x96c>)
10002444:	005b      	lsls	r3, r3, #1
10002446:	440b      	add	r3, r1
10002448:	889b      	ldrh	r3, [r3, #4]
1000244a:	b29b      	uxth	r3, r3
1000244c:	4413      	add	r3, r2
1000244e:	2b00      	cmp	r3, #0
10002450:	f003 0301 	and.w	r3, r3, #1
10002454:	bfb8      	it	lt
10002456:	425b      	neglt	r3, r3
10002458:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		EvOdd_Lm1 = EvOdd_Lm1 % 2;
1000245c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
10002460:	2b00      	cmp	r3, #0
10002462:	f003 0301 	and.w	r3, r3, #1
10002466:	bfb8      	it	lt
10002468:	425b      	neglt	r3, r3
1000246a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

		cont = (cols/2 + cols%2);
1000246e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
10002472:	085a      	lsrs	r2, r3, #1
10002474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
10002478:	f003 0301 	and.w	r3, r3, #1
1000247c:	4413      	add	r3, r2
1000247e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (size_t i = 0; i < rows; i++)
10002482:	2300      	movs	r3, #0
10002484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
10002488:	e197      	b.n	100027ba <v_MacForwardProp_int+0xae2>
		{
			long_aux = 0;
1000248a:	f04f 0200 	mov.w	r2, #0
1000248e:	f04f 0300 	mov.w	r3, #0
10002492:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
10002496:	2300      	movs	r3, #0
10002498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
1000249c:	e104      	b.n	100026a8 <v_MacForwardProp_int+0x9d0>
			{
				//long_aux += ((int8_t*)WBptr)[index_w + (i * cols) + j] * ((int8_t*)Funcptr)[j];	//mac
				//long_aux += v_GetByte_4bits(((int8_t*)WBptr)[(index_w + (i * cols) + j) / 2], (index_w + (i * cols) + j) % 2) * v_GetByte_4bits(((int8_t*)Funcptr)[(j + EvOdd_Lm1) / 2], (j + EvOdd_Lm1) % 2);

				if((j < (cont-1)) | (cols%2 == 0))
1000249e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
100024a2:	3b01      	subs	r3, #1
100024a4:	461a      	mov	r2, r3
100024a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
100024aa:	4293      	cmp	r3, r2
100024ac:	bf34      	ite	cc
100024ae:	2301      	movcc	r3, #1
100024b0:	2300      	movcs	r3, #0
100024b2:	b2da      	uxtb	r2, r3
100024b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
100024b8:	f003 0301 	and.w	r3, r3, #1
100024bc:	2b00      	cmp	r3, #0
100024be:	bf0c      	ite	eq
100024c0:	2301      	moveq	r3, #1
100024c2:	2300      	movne	r3, #0
100024c4:	b2db      	uxtb	r3, r3
100024c6:	4313      	orrs	r3, r2
100024c8:	b2db      	uxtb	r3, r3
100024ca:	2b00      	cmp	r3, #0
100024cc:	f000 80bc 	beq.w	10002648 <v_MacForwardProp_int+0x970>
					long_aux = (int32_t)__SMLAD((((v_GetByte_4bits(((int8_t*)WBptr)[(index_w + (i * cols) + 2*j) / 2], (index_w + (i * cols) + 2*j) % 2) << 16) & 0xffff0000) | ((v_GetByte_4bits(((int8_t*)WBptr)[(index_w + (i * cols) + 2*j + 1) / 2], (index_w + (i * cols) + 2*j + 1) % 2)) & 0x0000ffff)), (((v_GetByte_4bits(((int8_t*)Funcptr)[(2*j + EvOdd_Lm1) / 2], (2*j + EvOdd_Lm1) % 2) << 16) & 0xffff0000) | ((v_GetByte_4bits(((int8_t*)Funcptr)[(2*j + 1 + EvOdd_Lm1) / 2], (2*j + 1 + EvOdd_Lm1) % 2)) & 0x0000ffff)), long_aux);
100024d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
100024d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
100024d8:	fb02 f203 	mul.w	r2, r2, r3
100024dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
100024e0:	005b      	lsls	r3, r3, #1
100024e2:	441a      	add	r2, r3
100024e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
100024e8:	4413      	add	r3, r2
100024ea:	085b      	lsrs	r3, r3, #1
100024ec:	683a      	ldr	r2, [r7, #0]
100024ee:	4413      	add	r3, r2
100024f0:	f993 0000 	ldrsb.w	r0, [r3]
100024f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
100024f8:	b2da      	uxtb	r2, r3
100024fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
100024fe:	b2db      	uxtb	r3, r3
10002500:	fb12 f303 	smulbb	r3, r2, r3
10002504:	b2da      	uxtb	r2, r3
10002506:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
1000250a:	b2db      	uxtb	r3, r3
1000250c:	005b      	lsls	r3, r3, #1
1000250e:	b2db      	uxtb	r3, r3
10002510:	4413      	add	r3, r2
10002512:	b2da      	uxtb	r2, r3
10002514:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
10002518:	b2db      	uxtb	r3, r3
1000251a:	4413      	add	r3, r2
1000251c:	b2db      	uxtb	r3, r3
1000251e:	b25b      	sxtb	r3, r3
10002520:	f003 0301 	and.w	r3, r3, #1
10002524:	b25b      	sxtb	r3, r3
10002526:	4619      	mov	r1, r3
10002528:	f001 fb6c 	bl	10003c04 <v_GetByte_4bits>
1000252c:	4603      	mov	r3, r0
1000252e:	041b      	lsls	r3, r3, #16
10002530:	461c      	mov	r4, r3
10002532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
10002536:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
1000253a:	fb02 f203 	mul.w	r2, r2, r3
1000253e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
10002542:	005b      	lsls	r3, r3, #1
10002544:	441a      	add	r2, r3
10002546:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
1000254a:	4413      	add	r3, r2
1000254c:	3301      	adds	r3, #1
1000254e:	085b      	lsrs	r3, r3, #1
10002550:	683a      	ldr	r2, [r7, #0]
10002552:	4413      	add	r3, r2
10002554:	f993 0000 	ldrsb.w	r0, [r3]
10002558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
1000255c:	b2da      	uxtb	r2, r3
1000255e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
10002562:	b2db      	uxtb	r3, r3
10002564:	fb12 f303 	smulbb	r3, r2, r3
10002568:	b2da      	uxtb	r2, r3
1000256a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
1000256e:	b2db      	uxtb	r3, r3
10002570:	005b      	lsls	r3, r3, #1
10002572:	b2db      	uxtb	r3, r3
10002574:	4413      	add	r3, r2
10002576:	b2da      	uxtb	r2, r3
10002578:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
1000257c:	b2db      	uxtb	r3, r3
1000257e:	4413      	add	r3, r2
10002580:	b2db      	uxtb	r3, r3
10002582:	3301      	adds	r3, #1
10002584:	b2db      	uxtb	r3, r3
10002586:	b25b      	sxtb	r3, r3
10002588:	f003 0301 	and.w	r3, r3, #1
1000258c:	b25b      	sxtb	r3, r3
1000258e:	4619      	mov	r1, r3
10002590:	f001 fb38 	bl	10003c04 <v_GetByte_4bits>
10002594:	4603      	mov	r3, r0
10002596:	b29b      	uxth	r3, r3
10002598:	431c      	orrs	r4, r3
1000259a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
1000259e:	005a      	lsls	r2, r3, #1
100025a0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
100025a4:	4413      	add	r3, r2
100025a6:	085b      	lsrs	r3, r3, #1
100025a8:	687a      	ldr	r2, [r7, #4]
100025aa:	4413      	add	r3, r2
100025ac:	f993 0000 	ldrsb.w	r0, [r3]
100025b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
100025b4:	b2db      	uxtb	r3, r3
100025b6:	005b      	lsls	r3, r3, #1
100025b8:	b2da      	uxtb	r2, r3
100025ba:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
100025be:	b2db      	uxtb	r3, r3
100025c0:	4413      	add	r3, r2
100025c2:	b2db      	uxtb	r3, r3
100025c4:	b25b      	sxtb	r3, r3
100025c6:	f003 0301 	and.w	r3, r3, #1
100025ca:	b25b      	sxtb	r3, r3
100025cc:	4619      	mov	r1, r3
100025ce:	f001 fb19 	bl	10003c04 <v_GetByte_4bits>
100025d2:	4603      	mov	r3, r0
100025d4:	041b      	lsls	r3, r3, #16
100025d6:	461d      	mov	r5, r3
100025d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
100025dc:	005a      	lsls	r2, r3, #1
100025de:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
100025e2:	4413      	add	r3, r2
100025e4:	3301      	adds	r3, #1
100025e6:	085b      	lsrs	r3, r3, #1
100025e8:	687a      	ldr	r2, [r7, #4]
100025ea:	4413      	add	r3, r2
100025ec:	f993 0000 	ldrsb.w	r0, [r3]
100025f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
100025f4:	b2db      	uxtb	r3, r3
100025f6:	005b      	lsls	r3, r3, #1
100025f8:	b2da      	uxtb	r2, r3
100025fa:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
100025fe:	b2db      	uxtb	r3, r3
10002600:	4413      	add	r3, r2
10002602:	b2db      	uxtb	r3, r3
10002604:	3301      	adds	r3, #1
10002606:	b2db      	uxtb	r3, r3
10002608:	b25b      	sxtb	r3, r3
1000260a:	f003 0301 	and.w	r3, r3, #1
1000260e:	b25b      	sxtb	r3, r3
10002610:	4619      	mov	r1, r3
10002612:	f001 faf7 	bl	10003c04 <v_GetByte_4bits>
10002616:	4603      	mov	r3, r0
10002618:	b29b      	uxth	r3, r3
1000261a:	ea45 0203 	orr.w	r2, r5, r3
1000261e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
10002622:	62fc      	str	r4, [r7, #44]	; 0x2c
10002624:	62ba      	str	r2, [r7, #40]	; 0x28
10002626:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
10002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000262a:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000262c:	6a79      	ldr	r1, [r7, #36]	; 0x24
1000262e:	fb23 1302 	smlad	r3, r3, r2, r1
10002632:	623b      	str	r3, [r7, #32]
  return(result);
10002634:	6a3b      	ldr	r3, [r7, #32]
10002636:	461a      	mov	r2, r3
10002638:	ea4f 73e2 	mov.w	r3, r2, asr #31
1000263c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
10002640:	e02d      	b.n	1000269e <v_MacForwardProp_int+0x9c6>
10002642:	bf00      	nop
10002644:	20000200 	.word	0x20000200
				else
					long_aux = (int32_t)__SMLAD((((int8_t*)WBptr)[index_w + (i * cols) + 2*j] & 0x0000ffff), (((int8_t*)Funcptr)[2*j] & 0x0000ffff), long_aux);
10002648:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
1000264c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
10002650:	fb02 f203 	mul.w	r2, r2, r3
10002654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
10002658:	005b      	lsls	r3, r3, #1
1000265a:	441a      	add	r2, r3
1000265c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
10002660:	4413      	add	r3, r2
10002662:	683a      	ldr	r2, [r7, #0]
10002664:	4413      	add	r3, r2
10002666:	f993 3000 	ldrsb.w	r3, [r3]
1000266a:	b299      	uxth	r1, r3
1000266c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
10002670:	005b      	lsls	r3, r3, #1
10002672:	687a      	ldr	r2, [r7, #4]
10002674:	4413      	add	r3, r2
10002676:	f993 3000 	ldrsb.w	r3, [r3]
1000267a:	b29a      	uxth	r2, r3
1000267c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
10002680:	61f9      	str	r1, [r7, #28]
10002682:	61ba      	str	r2, [r7, #24]
10002684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
10002686:	69fb      	ldr	r3, [r7, #28]
10002688:	69ba      	ldr	r2, [r7, #24]
1000268a:	6979      	ldr	r1, [r7, #20]
1000268c:	fb23 1302 	smlad	r3, r3, r2, r1
10002690:	613b      	str	r3, [r7, #16]
  return(result);
10002692:	693b      	ldr	r3, [r7, #16]
10002694:	461a      	mov	r2, r3
10002696:	ea4f 73e2 	mov.w	r3, r2, asr #31
1000269a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			for (size_t j = 0; j < cont; j++)
1000269e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
100026a2:	3301      	adds	r3, #1
100026a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
100026a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
100026ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
100026b0:	429a      	cmp	r2, r3
100026b2:	f4ff aef4 	bcc.w	1000249e <v_MacForwardProp_int+0x7c6>
			}

			//long_aux = (round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (xNetParam.NonLayer[layer] * ((int8_t*)WBptr)[index_b + i]));
			//long_aux = round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (xNetParam.NonLayer[layer] * v_GetByte_4bits(((int8_t*)WBptr)[(index_b + i) / 2], (index_b + i) % 2));
			long_aux = round(xQuantizedVal.Ssumcomp[layer] * long_aux) + (v_GetByte_4bits(((int8_t*)WBptr)[(index_b + i) / 2], (index_b + i) % 2));
100026b6:	4b48      	ldr	r3, [pc, #288]	; (100027d8 <v_MacForwardProp_int+0xb00>)
100026b8:	691a      	ldr	r2, [r3, #16]
100026ba:	7afb      	ldrb	r3, [r7, #11]
100026bc:	009b      	lsls	r3, r3, #2
100026be:	4413      	add	r3, r2
100026c0:	ed93 8a00 	vldr	s16, [r3]
100026c4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
100026c8:	f7fe fa30 	bl	10000b2c <__aeabi_l2f>
100026cc:	ee07 0a90 	vmov	s15, r0
100026d0:	ee68 7a27 	vmul.f32	s15, s16, s15
100026d4:	ee17 0a90 	vmov	r0, s15
100026d8:	f7fd fe1e 	bl	10000318 <__aeabi_f2d>
100026dc:	4602      	mov	r2, r0
100026de:	460b      	mov	r3, r1
100026e0:	ec43 2b10 	vmov	d0, r2, r3
100026e4:	f008 fee4 	bl	1000b4b0 <round>
100026e8:	ec55 4b10 	vmov	r4, r5, d0
100026ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
100026f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
100026f4:	4413      	add	r3, r2
100026f6:	085b      	lsrs	r3, r3, #1
100026f8:	683a      	ldr	r2, [r7, #0]
100026fa:	4413      	add	r3, r2
100026fc:	f993 0000 	ldrsb.w	r0, [r3]
10002700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
10002704:	b2da      	uxtb	r2, r3
10002706:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
1000270a:	b2db      	uxtb	r3, r3
1000270c:	4413      	add	r3, r2
1000270e:	b2db      	uxtb	r3, r3
10002710:	b25b      	sxtb	r3, r3
10002712:	f003 0301 	and.w	r3, r3, #1
10002716:	b25b      	sxtb	r3, r3
10002718:	4619      	mov	r1, r3
1000271a:	f001 fa73 	bl	10003c04 <v_GetByte_4bits>
1000271e:	4603      	mov	r3, r0
10002720:	4618      	mov	r0, r3
10002722:	f7fd fde7 	bl	100002f4 <__aeabi_i2d>
10002726:	4602      	mov	r2, r0
10002728:	460b      	mov	r3, r1
1000272a:	4620      	mov	r0, r4
1000272c:	4629      	mov	r1, r5
1000272e:	f7fd fc95 	bl	1000005c <__adddf3>
10002732:	4602      	mov	r2, r0
10002734:	460b      	mov	r3, r1
10002736:	4610      	mov	r0, r2
10002738:	4619      	mov	r1, r3
1000273a:	f7fe fab1 	bl	10000ca0 <__aeabi_d2lz>
1000273e:	4602      	mov	r2, r0
10002740:	460b      	mov	r3, r1
10002742:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

			// OVERFLOW and UNDERFLOW PROTECTION
			if (long_aux >= INT4_MAX)
10002746:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
1000274a:	2a0f      	cmp	r2, #15
1000274c:	f173 0300 	sbcs.w	r3, r3, #0
10002750:	db06      	blt.n	10002760 <v_MacForwardProp_int+0xa88>
			{
				long_aux = INT4_MAX;
10002752:	f04f 020f 	mov.w	r2, #15
10002756:	f04f 0300 	mov.w	r3, #0
1000275a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
1000275e:	e00e      	b.n	1000277e <v_MacForwardProp_int+0xaa6>
			}
			else if (long_aux <= INT4_MIN)
10002760:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
10002764:	f06f 000e 	mvn.w	r0, #14
10002768:	f04f 31ff 	mov.w	r1, #4294967295
1000276c:	4282      	cmp	r2, r0
1000276e:	418b      	sbcs	r3, r1
10002770:	da05      	bge.n	1000277e <v_MacForwardProp_int+0xaa6>
			{
				long_aux = INT4_MIN;
10002772:	f06f 020f 	mvn.w	r2, #15
10002776:	f04f 33ff 	mov.w	r3, #4294967295
1000277a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			}
			//((int8_t*)res)[i] = (int8_t)long_aux;
			v_MountByte_4bits(&((int8_t*)res)[(EvOdd_L + i) / 2], (int8_t)long_aux, (EvOdd_L + i) % 2);
1000277e:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	; 0x82
10002782:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
10002786:	4413      	add	r3, r2
10002788:	085b      	lsrs	r3, r3, #1
1000278a:	68fa      	ldr	r2, [r7, #12]
1000278c:	18d0      	adds	r0, r2, r3
1000278e:	f997 10c0 	ldrsb.w	r1, [r7, #192]	; 0xc0
10002792:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
10002796:	b2da      	uxtb	r2, r3
10002798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
1000279c:	b2db      	uxtb	r3, r3
1000279e:	4413      	add	r3, r2
100027a0:	b2db      	uxtb	r3, r3
100027a2:	b25b      	sxtb	r3, r3
100027a4:	f003 0301 	and.w	r3, r3, #1
100027a8:	b25b      	sxtb	r3, r3
100027aa:	461a      	mov	r2, r3
100027ac:	f001 f9fc 	bl	10003ba8 <v_MountByte_4bits>
		for (size_t i = 0; i < rows; i++)
100027b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
100027b4:	3301      	adds	r3, #1
100027b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
100027ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
100027be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
100027c2:	429a      	cmp	r2, r3
100027c4:	f4ff ae61 	bcc.w	1000248a <v_MacForwardProp_int+0x7b2>
		}
		break;
100027c8:	e000      	b.n	100027cc <v_MacForwardProp_int+0xaf4>

	default:
		break;
100027ca:	bf00      	nop
	}
}
100027cc:	bf00      	nop
100027ce:	37c8      	adds	r7, #200	; 0xc8
100027d0:	46bd      	mov	sp, r7
100027d2:	ecbd 8b02 	vpop	{d8}
100027d6:	bdb0      	pop	{r4, r5, r7, pc}
100027d8:	20000254 	.word	0x20000254

100027dc <v_ReLUActiv_int>:
//	in		zptr, xnetparam, layer, funcptr
//	out		none
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_ReLUActiv_int(void* ZPtr, uint16_t layer, void* funcptr)
{
100027dc:	b5b0      	push	{r4, r5, r7, lr}
100027de:	b08c      	sub	sp, #48	; 0x30
100027e0:	af00      	add	r7, sp, #0
100027e2:	60f8      	str	r0, [r7, #12]
100027e4:	460b      	mov	r3, r1
100027e6:	607a      	str	r2, [r7, #4]
100027e8:	817b      	strh	r3, [r7, #10]
	long long int long_aux;
	switch (xNetParam.xVarPrecision.precision)
100027ea:	4bb6      	ldr	r3, [pc, #728]	; (10002ac4 <v_ReLUActiv_int+0x2e8>)
100027ec:	785b      	ldrb	r3, [r3, #1]
100027ee:	b2db      	uxtb	r3, r3
100027f0:	3b04      	subs	r3, #4
100027f2:	2b1c      	cmp	r3, #28
100027f4:	f200 82c6 	bhi.w	10002d84 <v_ReLUActiv_int+0x5a8>
100027f8:	a201      	add	r2, pc, #4	; (adr r2, 10002800 <v_ReLUActiv_int+0x24>)
100027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100027fe:	bf00      	nop
10002800:	10002be9 	.word	0x10002be9
10002804:	10002d85 	.word	0x10002d85
10002808:	10002d85 	.word	0x10002d85
1000280c:	10002d85 	.word	0x10002d85
10002810:	10002abd 	.word	0x10002abd
10002814:	10002d85 	.word	0x10002d85
10002818:	10002d85 	.word	0x10002d85
1000281c:	10002d85 	.word	0x10002d85
10002820:	10002d85 	.word	0x10002d85
10002824:	10002d85 	.word	0x10002d85
10002828:	10002d85 	.word	0x10002d85
1000282c:	10002d85 	.word	0x10002d85
10002830:	10002997 	.word	0x10002997
10002834:	10002d85 	.word	0x10002d85
10002838:	10002d85 	.word	0x10002d85
1000283c:	10002d85 	.word	0x10002d85
10002840:	10002d85 	.word	0x10002d85
10002844:	10002d85 	.word	0x10002d85
10002848:	10002d85 	.word	0x10002d85
1000284c:	10002d85 	.word	0x10002d85
10002850:	10002d85 	.word	0x10002d85
10002854:	10002d85 	.word	0x10002d85
10002858:	10002d85 	.word	0x10002d85
1000285c:	10002d85 	.word	0x10002d85
10002860:	10002d85 	.word	0x10002d85
10002864:	10002d85 	.word	0x10002d85
10002868:	10002d85 	.word	0x10002d85
1000286c:	10002d85 	.word	0x10002d85
10002870:	10002875 	.word	0x10002875
	{
	case 32:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002874:	2300      	movs	r3, #0
10002876:	627b      	str	r3, [r7, #36]	; 0x24
10002878:	e081      	b.n	1000297e <v_ReLUActiv_int+0x1a2>
		{
			if (((int32_t*)ZPtr)[i] < 0)
1000287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000287c:	009b      	lsls	r3, r3, #2
1000287e:	68fa      	ldr	r2, [r7, #12]
10002880:	4413      	add	r3, r2
10002882:	681b      	ldr	r3, [r3, #0]
10002884:	2b00      	cmp	r3, #0
10002886:	da37      	bge.n	100028f8 <v_ReLUActiv_int+0x11c>
			{
				long_aux = (((long long int)xNetParam.LeakyReLU_rate * ((int32_t*)ZPtr)[i]) / UINT16_MAX) + xQuantizedVal.Zy[layer];
10002888:	4b8e      	ldr	r3, [pc, #568]	; (10002ac4 <v_ReLUActiv_int+0x2e8>)
1000288a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
1000288e:	b29b      	uxth	r3, r3
10002890:	b298      	uxth	r0, r3
10002892:	f04f 0100 	mov.w	r1, #0
10002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002898:	009b      	lsls	r3, r3, #2
1000289a:	68fa      	ldr	r2, [r7, #12]
1000289c:	4413      	add	r3, r2
1000289e:	681b      	ldr	r3, [r3, #0]
100028a0:	461a      	mov	r2, r3
100028a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
100028a6:	fb02 f501 	mul.w	r5, r2, r1
100028aa:	fb00 f403 	mul.w	r4, r0, r3
100028ae:	442c      	add	r4, r5
100028b0:	fba0 0102 	umull	r0, r1, r0, r2
100028b4:	1863      	adds	r3, r4, r1
100028b6:	4619      	mov	r1, r3
100028b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
100028bc:	f04f 0300 	mov.w	r3, #0
100028c0:	f7fe f972 	bl	10000ba8 <__aeabi_ldivmod>
100028c4:	4602      	mov	r2, r0
100028c6:	460b      	mov	r3, r1
100028c8:	4610      	mov	r0, r2
100028ca:	4619      	mov	r1, r3
100028cc:	f7fe f92e 	bl	10000b2c <__aeabi_l2f>
100028d0:	ee07 0a10 	vmov	s14, r0
100028d4:	4b7c      	ldr	r3, [pc, #496]	; (10002ac8 <v_ReLUActiv_int+0x2ec>)
100028d6:	69da      	ldr	r2, [r3, #28]
100028d8:	897b      	ldrh	r3, [r7, #10]
100028da:	009b      	lsls	r3, r3, #2
100028dc:	4413      	add	r3, r2
100028de:	edd3 7a00 	vldr	s15, [r3]
100028e2:	ee77 7a27 	vadd.f32	s15, s14, s15
100028e6:	ee17 0a90 	vmov	r0, s15
100028ea:	f7fe f9c5 	bl	10000c78 <__aeabi_f2lz>
100028ee:	4602      	mov	r2, r0
100028f0:	460b      	mov	r3, r1
100028f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
100028f6:	e019      	b.n	1000292c <v_ReLUActiv_int+0x150>
			}
			else
			{
				long_aux = ((int32_t*)ZPtr)[i] + xQuantizedVal.Zy[layer];
100028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100028fa:	009b      	lsls	r3, r3, #2
100028fc:	68fa      	ldr	r2, [r7, #12]
100028fe:	4413      	add	r3, r2
10002900:	681b      	ldr	r3, [r3, #0]
10002902:	ee07 3a90 	vmov	s15, r3
10002906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
1000290a:	4b6f      	ldr	r3, [pc, #444]	; (10002ac8 <v_ReLUActiv_int+0x2ec>)
1000290c:	69da      	ldr	r2, [r3, #28]
1000290e:	897b      	ldrh	r3, [r7, #10]
10002910:	009b      	lsls	r3, r3, #2
10002912:	4413      	add	r3, r2
10002914:	edd3 7a00 	vldr	s15, [r3]
10002918:	ee77 7a27 	vadd.f32	s15, s14, s15
1000291c:	ee17 0a90 	vmov	r0, s15
10002920:	f7fe f9aa 	bl	10000c78 <__aeabi_f2lz>
10002924:	4602      	mov	r2, r0
10002926:	460b      	mov	r3, r1
10002928:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if (long_aux >= INT32_MAX)
1000292c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002930:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
10002934:	f04f 0100 	mov.w	r1, #0
10002938:	4282      	cmp	r2, r0
1000293a:	418b      	sbcs	r3, r1
1000293c:	db06      	blt.n	1000294c <v_ReLUActiv_int+0x170>
			{
				long_aux = INT32_MAX;
1000293e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
10002942:	f04f 0300 	mov.w	r3, #0
10002946:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
1000294a:	e00f      	b.n	1000296c <v_ReLUActiv_int+0x190>
			}
			else if (long_aux <= INT32_MIN)
1000294c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002950:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
10002954:	f04f 31ff 	mov.w	r1, #4294967295
10002958:	4290      	cmp	r0, r2
1000295a:	eb71 0303 	sbcs.w	r3, r1, r3
1000295e:	db05      	blt.n	1000296c <v_ReLUActiv_int+0x190>
			{
				long_aux = INT32_MIN;
10002960:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
10002964:	f04f 33ff 	mov.w	r3, #4294967295
10002968:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int32_t*)funcptr)[i] = (int32_t)long_aux;
1000296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000296e:	009b      	lsls	r3, r3, #2
10002970:	687a      	ldr	r2, [r7, #4]
10002972:	4413      	add	r3, r2
10002974:	6aba      	ldr	r2, [r7, #40]	; 0x28
10002976:	601a      	str	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000297a:	3301      	adds	r3, #1
1000297c:	627b      	str	r3, [r7, #36]	; 0x24
1000297e:	897b      	ldrh	r3, [r7, #10]
10002980:	4a50      	ldr	r2, [pc, #320]	; (10002ac4 <v_ReLUActiv_int+0x2e8>)
10002982:	005b      	lsls	r3, r3, #1
10002984:	4413      	add	r3, r2
10002986:	889b      	ldrh	r3, [r3, #4]
10002988:	b29b      	uxth	r3, r3
1000298a:	461a      	mov	r2, r3
1000298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000298e:	4293      	cmp	r3, r2
10002990:	f4ff af73 	bcc.w	1000287a <v_ReLUActiv_int+0x9e>
		}
		break;
10002994:	e1f7      	b.n	10002d86 <v_ReLUActiv_int+0x5aa>

	case 16:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002996:	2300      	movs	r3, #0
10002998:	623b      	str	r3, [r7, #32]
1000299a:	e083      	b.n	10002aa4 <v_ReLUActiv_int+0x2c8>
		{
			if (((int16_t*)ZPtr)[i] < 0)
1000299c:	6a3b      	ldr	r3, [r7, #32]
1000299e:	005b      	lsls	r3, r3, #1
100029a0:	68fa      	ldr	r2, [r7, #12]
100029a2:	4413      	add	r3, r2
100029a4:	f9b3 3000 	ldrsh.w	r3, [r3]
100029a8:	2b00      	cmp	r3, #0
100029aa:	da38      	bge.n	10002a1e <v_ReLUActiv_int+0x242>
			{
				long_aux = (((long long int)xNetParam.LeakyReLU_rate * ((int16_t*)ZPtr)[i]) / UINT16_MAX) + xQuantizedVal.Zy[layer];
100029ac:	4b45      	ldr	r3, [pc, #276]	; (10002ac4 <v_ReLUActiv_int+0x2e8>)
100029ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
100029b2:	b29b      	uxth	r3, r3
100029b4:	b298      	uxth	r0, r3
100029b6:	f04f 0100 	mov.w	r1, #0
100029ba:	6a3b      	ldr	r3, [r7, #32]
100029bc:	005b      	lsls	r3, r3, #1
100029be:	68fa      	ldr	r2, [r7, #12]
100029c0:	4413      	add	r3, r2
100029c2:	f9b3 3000 	ldrsh.w	r3, [r3]
100029c6:	b21a      	sxth	r2, r3
100029c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
100029cc:	fb02 f501 	mul.w	r5, r2, r1
100029d0:	fb00 f403 	mul.w	r4, r0, r3
100029d4:	442c      	add	r4, r5
100029d6:	fba0 0102 	umull	r0, r1, r0, r2
100029da:	1863      	adds	r3, r4, r1
100029dc:	4619      	mov	r1, r3
100029de:	f64f 72ff 	movw	r2, #65535	; 0xffff
100029e2:	f04f 0300 	mov.w	r3, #0
100029e6:	f7fe f8df 	bl	10000ba8 <__aeabi_ldivmod>
100029ea:	4602      	mov	r2, r0
100029ec:	460b      	mov	r3, r1
100029ee:	4610      	mov	r0, r2
100029f0:	4619      	mov	r1, r3
100029f2:	f7fe f89b 	bl	10000b2c <__aeabi_l2f>
100029f6:	ee07 0a10 	vmov	s14, r0
100029fa:	4b33      	ldr	r3, [pc, #204]	; (10002ac8 <v_ReLUActiv_int+0x2ec>)
100029fc:	69da      	ldr	r2, [r3, #28]
100029fe:	897b      	ldrh	r3, [r7, #10]
10002a00:	009b      	lsls	r3, r3, #2
10002a02:	4413      	add	r3, r2
10002a04:	edd3 7a00 	vldr	s15, [r3]
10002a08:	ee77 7a27 	vadd.f32	s15, s14, s15
10002a0c:	ee17 0a90 	vmov	r0, s15
10002a10:	f7fe f932 	bl	10000c78 <__aeabi_f2lz>
10002a14:	4602      	mov	r2, r0
10002a16:	460b      	mov	r3, r1
10002a18:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
10002a1c:	e01a      	b.n	10002a54 <v_ReLUActiv_int+0x278>
			}
			else
			{
				long_aux = ((int16_t*)ZPtr)[i] + xQuantizedVal.Zy[layer];
10002a1e:	6a3b      	ldr	r3, [r7, #32]
10002a20:	005b      	lsls	r3, r3, #1
10002a22:	68fa      	ldr	r2, [r7, #12]
10002a24:	4413      	add	r3, r2
10002a26:	f9b3 3000 	ldrsh.w	r3, [r3]
10002a2a:	ee07 3a90 	vmov	s15, r3
10002a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
10002a32:	4b25      	ldr	r3, [pc, #148]	; (10002ac8 <v_ReLUActiv_int+0x2ec>)
10002a34:	69da      	ldr	r2, [r3, #28]
10002a36:	897b      	ldrh	r3, [r7, #10]
10002a38:	009b      	lsls	r3, r3, #2
10002a3a:	4413      	add	r3, r2
10002a3c:	edd3 7a00 	vldr	s15, [r3]
10002a40:	ee77 7a27 	vadd.f32	s15, s14, s15
10002a44:	ee17 0a90 	vmov	r0, s15
10002a48:	f7fe f916 	bl	10000c78 <__aeabi_f2lz>
10002a4c:	4602      	mov	r2, r0
10002a4e:	460b      	mov	r3, r1
10002a50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if (long_aux >= INT16_MAX)
10002a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002a58:	f647 70fe 	movw	r0, #32766	; 0x7ffe
10002a5c:	f04f 0100 	mov.w	r1, #0
10002a60:	4290      	cmp	r0, r2
10002a62:	eb71 0303 	sbcs.w	r3, r1, r3
10002a66:	da06      	bge.n	10002a76 <v_ReLUActiv_int+0x29a>
			{
				long_aux = INT16_MAX;
10002a68:	f647 72ff 	movw	r2, #32767	; 0x7fff
10002a6c:	f04f 0300 	mov.w	r3, #0
10002a70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
10002a74:	e00c      	b.n	10002a90 <v_ReLUActiv_int+0x2b4>
			}
			else if (long_aux <= INT16_MIN)
10002a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002a7a:	4814      	ldr	r0, [pc, #80]	; (10002acc <v_ReLUActiv_int+0x2f0>)
10002a7c:	f04f 31ff 	mov.w	r1, #4294967295
10002a80:	4282      	cmp	r2, r0
10002a82:	418b      	sbcs	r3, r1
10002a84:	da04      	bge.n	10002a90 <v_ReLUActiv_int+0x2b4>
			{
				long_aux = INT16_MIN;
10002a86:	4a12      	ldr	r2, [pc, #72]	; (10002ad0 <v_ReLUActiv_int+0x2f4>)
10002a88:	f04f 33ff 	mov.w	r3, #4294967295
10002a8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int16_t*)funcptr)[i] = (int16_t)long_aux;
10002a90:	6a3b      	ldr	r3, [r7, #32]
10002a92:	005b      	lsls	r3, r3, #1
10002a94:	687a      	ldr	r2, [r7, #4]
10002a96:	4413      	add	r3, r2
10002a98:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
10002a9c:	801a      	strh	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002a9e:	6a3b      	ldr	r3, [r7, #32]
10002aa0:	3301      	adds	r3, #1
10002aa2:	623b      	str	r3, [r7, #32]
10002aa4:	897b      	ldrh	r3, [r7, #10]
10002aa6:	4a07      	ldr	r2, [pc, #28]	; (10002ac4 <v_ReLUActiv_int+0x2e8>)
10002aa8:	005b      	lsls	r3, r3, #1
10002aaa:	4413      	add	r3, r2
10002aac:	889b      	ldrh	r3, [r3, #4]
10002aae:	b29b      	uxth	r3, r3
10002ab0:	461a      	mov	r2, r3
10002ab2:	6a3b      	ldr	r3, [r7, #32]
10002ab4:	4293      	cmp	r3, r2
10002ab6:	f4ff af71 	bcc.w	1000299c <v_ReLUActiv_int+0x1c0>
		}
		break;
10002aba:	e164      	b.n	10002d86 <v_ReLUActiv_int+0x5aa>

	case 8:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002abc:	2300      	movs	r3, #0
10002abe:	61fb      	str	r3, [r7, #28]
10002ac0:	e086      	b.n	10002bd0 <v_ReLUActiv_int+0x3f4>
10002ac2:	bf00      	nop
10002ac4:	20000200 	.word	0x20000200
10002ac8:	20000254 	.word	0x20000254
10002acc:	ffff8001 	.word	0xffff8001
10002ad0:	ffff8000 	.word	0xffff8000
		{
			if (((int8_t*)ZPtr)[i] < 0)
10002ad4:	68fa      	ldr	r2, [r7, #12]
10002ad6:	69fb      	ldr	r3, [r7, #28]
10002ad8:	4413      	add	r3, r2
10002ada:	f993 3000 	ldrsb.w	r3, [r3]
10002ade:	2b00      	cmp	r3, #0
10002ae0:	da37      	bge.n	10002b52 <v_ReLUActiv_int+0x376>
			{
				long_aux = (((long long int)xNetParam.LeakyReLU_rate * ((int8_t*)ZPtr)[i]) / UINT16_MAX) + xQuantizedVal.Zy[layer];
10002ae2:	4bab      	ldr	r3, [pc, #684]	; (10002d90 <v_ReLUActiv_int+0x5b4>)
10002ae4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
10002ae8:	b29b      	uxth	r3, r3
10002aea:	b298      	uxth	r0, r3
10002aec:	f04f 0100 	mov.w	r1, #0
10002af0:	68fa      	ldr	r2, [r7, #12]
10002af2:	69fb      	ldr	r3, [r7, #28]
10002af4:	4413      	add	r3, r2
10002af6:	f993 3000 	ldrsb.w	r3, [r3]
10002afa:	b25a      	sxtb	r2, r3
10002afc:	ea4f 73e2 	mov.w	r3, r2, asr #31
10002b00:	fb02 f501 	mul.w	r5, r2, r1
10002b04:	fb00 f403 	mul.w	r4, r0, r3
10002b08:	442c      	add	r4, r5
10002b0a:	fba0 0102 	umull	r0, r1, r0, r2
10002b0e:	1863      	adds	r3, r4, r1
10002b10:	4619      	mov	r1, r3
10002b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
10002b16:	f04f 0300 	mov.w	r3, #0
10002b1a:	f7fe f845 	bl	10000ba8 <__aeabi_ldivmod>
10002b1e:	4602      	mov	r2, r0
10002b20:	460b      	mov	r3, r1
10002b22:	4610      	mov	r0, r2
10002b24:	4619      	mov	r1, r3
10002b26:	f7fe f801 	bl	10000b2c <__aeabi_l2f>
10002b2a:	ee07 0a10 	vmov	s14, r0
10002b2e:	4b99      	ldr	r3, [pc, #612]	; (10002d94 <v_ReLUActiv_int+0x5b8>)
10002b30:	69da      	ldr	r2, [r3, #28]
10002b32:	897b      	ldrh	r3, [r7, #10]
10002b34:	009b      	lsls	r3, r3, #2
10002b36:	4413      	add	r3, r2
10002b38:	edd3 7a00 	vldr	s15, [r3]
10002b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
10002b40:	ee17 0a90 	vmov	r0, s15
10002b44:	f7fe f898 	bl	10000c78 <__aeabi_f2lz>
10002b48:	4602      	mov	r2, r0
10002b4a:	460b      	mov	r3, r1
10002b4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
10002b50:	e019      	b.n	10002b86 <v_ReLUActiv_int+0x3aa>
			}
			else
			{
				long_aux = ((int8_t*)ZPtr)[i] + xQuantizedVal.Zy[layer];
10002b52:	68fa      	ldr	r2, [r7, #12]
10002b54:	69fb      	ldr	r3, [r7, #28]
10002b56:	4413      	add	r3, r2
10002b58:	f993 3000 	ldrsb.w	r3, [r3]
10002b5c:	ee07 3a90 	vmov	s15, r3
10002b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
10002b64:	4b8b      	ldr	r3, [pc, #556]	; (10002d94 <v_ReLUActiv_int+0x5b8>)
10002b66:	69da      	ldr	r2, [r3, #28]
10002b68:	897b      	ldrh	r3, [r7, #10]
10002b6a:	009b      	lsls	r3, r3, #2
10002b6c:	4413      	add	r3, r2
10002b6e:	edd3 7a00 	vldr	s15, [r3]
10002b72:	ee77 7a27 	vadd.f32	s15, s14, s15
10002b76:	ee17 0a90 	vmov	r0, s15
10002b7a:	f7fe f87d 	bl	10000c78 <__aeabi_f2lz>
10002b7e:	4602      	mov	r2, r0
10002b80:	460b      	mov	r3, r1
10002b82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if (long_aux >= INT8_MAX)
10002b86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002b8a:	2a7f      	cmp	r2, #127	; 0x7f
10002b8c:	f173 0300 	sbcs.w	r3, r3, #0
10002b90:	db06      	blt.n	10002ba0 <v_ReLUActiv_int+0x3c4>
			{
				long_aux = INT8_MAX;
10002b92:	f04f 027f 	mov.w	r2, #127	; 0x7f
10002b96:	f04f 0300 	mov.w	r3, #0
10002b9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
10002b9e:	e00e      	b.n	10002bbe <v_ReLUActiv_int+0x3e2>
			}
			else if (long_aux <= INT8_MIN)
10002ba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002ba4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
10002ba8:	f04f 31ff 	mov.w	r1, #4294967295
10002bac:	4282      	cmp	r2, r0
10002bae:	418b      	sbcs	r3, r1
10002bb0:	da05      	bge.n	10002bbe <v_ReLUActiv_int+0x3e2>
			{
				long_aux = INT8_MIN;
10002bb2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
10002bb6:	f04f 33ff 	mov.w	r3, #4294967295
10002bba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int8_t*)funcptr)[i] = (int8_t)long_aux;
10002bbe:	687a      	ldr	r2, [r7, #4]
10002bc0:	69fb      	ldr	r3, [r7, #28]
10002bc2:	4413      	add	r3, r2
10002bc4:	f997 2028 	ldrsb.w	r2, [r7, #40]	; 0x28
10002bc8:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002bca:	69fb      	ldr	r3, [r7, #28]
10002bcc:	3301      	adds	r3, #1
10002bce:	61fb      	str	r3, [r7, #28]
10002bd0:	897b      	ldrh	r3, [r7, #10]
10002bd2:	4a6f      	ldr	r2, [pc, #444]	; (10002d90 <v_ReLUActiv_int+0x5b4>)
10002bd4:	005b      	lsls	r3, r3, #1
10002bd6:	4413      	add	r3, r2
10002bd8:	889b      	ldrh	r3, [r3, #4]
10002bda:	b29b      	uxth	r3, r3
10002bdc:	461a      	mov	r2, r3
10002bde:	69fb      	ldr	r3, [r7, #28]
10002be0:	4293      	cmp	r3, r2
10002be2:	f4ff af77 	bcc.w	10002ad4 <v_ReLUActiv_int+0x2f8>
		}
		break;
10002be6:	e0ce      	b.n	10002d86 <v_ReLUActiv_int+0x5aa>

	case 4:;
		int16_t EvOdd_L = 0;
10002be8:	2300      	movs	r3, #0
10002bea:	837b      	strh	r3, [r7, #26]
		for (size_t i = 0; i < layer; i++)
10002bec:	2300      	movs	r3, #0
10002bee:	617b      	str	r3, [r7, #20]
10002bf0:	e00c      	b.n	10002c0c <v_ReLUActiv_int+0x430>
		{
			EvOdd_L += xNetParam.NonLayer[i];
10002bf2:	4a67      	ldr	r2, [pc, #412]	; (10002d90 <v_ReLUActiv_int+0x5b4>)
10002bf4:	697b      	ldr	r3, [r7, #20]
10002bf6:	005b      	lsls	r3, r3, #1
10002bf8:	4413      	add	r3, r2
10002bfa:	889b      	ldrh	r3, [r3, #4]
10002bfc:	b29a      	uxth	r2, r3
10002bfe:	8b7b      	ldrh	r3, [r7, #26]
10002c00:	4413      	add	r3, r2
10002c02:	b29b      	uxth	r3, r3
10002c04:	837b      	strh	r3, [r7, #26]
		for (size_t i = 0; i < layer; i++)
10002c06:	697b      	ldr	r3, [r7, #20]
10002c08:	3301      	adds	r3, #1
10002c0a:	617b      	str	r3, [r7, #20]
10002c0c:	897b      	ldrh	r3, [r7, #10]
10002c0e:	697a      	ldr	r2, [r7, #20]
10002c10:	429a      	cmp	r2, r3
10002c12:	d3ee      	bcc.n	10002bf2 <v_ReLUActiv_int+0x416>
		}
		EvOdd_L = EvOdd_L % 2;
10002c14:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
10002c18:	2b00      	cmp	r3, #0
10002c1a:	f003 0301 	and.w	r3, r3, #1
10002c1e:	bfb8      	it	lt
10002c20:	425b      	neglt	r3, r3
10002c22:	837b      	strh	r3, [r7, #26]

		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002c24:	2300      	movs	r3, #0
10002c26:	613b      	str	r3, [r7, #16]
10002c28:	e0a0      	b.n	10002d6c <v_ReLUActiv_int+0x590>
		{
			long_aux = v_GetByte_4bits(((int8_t*)ZPtr)[(i + EvOdd_L) / 2], (i + EvOdd_L) % 2);
10002c2a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
10002c2e:	693b      	ldr	r3, [r7, #16]
10002c30:	4413      	add	r3, r2
10002c32:	085b      	lsrs	r3, r3, #1
10002c34:	68fa      	ldr	r2, [r7, #12]
10002c36:	4413      	add	r3, r2
10002c38:	f993 0000 	ldrsb.w	r0, [r3]
10002c3c:	8b7b      	ldrh	r3, [r7, #26]
10002c3e:	b2da      	uxtb	r2, r3
10002c40:	693b      	ldr	r3, [r7, #16]
10002c42:	b2db      	uxtb	r3, r3
10002c44:	4413      	add	r3, r2
10002c46:	b2db      	uxtb	r3, r3
10002c48:	b25b      	sxtb	r3, r3
10002c4a:	f003 0301 	and.w	r3, r3, #1
10002c4e:	b25b      	sxtb	r3, r3
10002c50:	4619      	mov	r1, r3
10002c52:	f000 ffd7 	bl	10003c04 <v_GetByte_4bits>
10002c56:	4603      	mov	r3, r0
10002c58:	b25a      	sxtb	r2, r3
10002c5a:	ea4f 73e2 	mov.w	r3, r2, asr #31
10002c5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			if (long_aux < 0)
10002c62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002c66:	2a00      	cmp	r2, #0
10002c68:	f173 0300 	sbcs.w	r3, r3, #0
10002c6c:	da32      	bge.n	10002cd4 <v_ReLUActiv_int+0x4f8>
			{
				long_aux = (((long long int)xNetParam.LeakyReLU_rate * long_aux) / UINT16_MAX) + xQuantizedVal.Zy[layer];
10002c6e:	4b48      	ldr	r3, [pc, #288]	; (10002d90 <v_ReLUActiv_int+0x5b4>)
10002c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
10002c74:	b29b      	uxth	r3, r3
10002c76:	b29a      	uxth	r2, r3
10002c78:	f04f 0300 	mov.w	r3, #0
10002c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10002c7e:	fb03 f001 	mul.w	r0, r3, r1
10002c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10002c84:	fb02 f101 	mul.w	r1, r2, r1
10002c88:	1844      	adds	r4, r0, r1
10002c8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10002c8c:	fba1 0102 	umull	r0, r1, r1, r2
10002c90:	1863      	adds	r3, r4, r1
10002c92:	4619      	mov	r1, r3
10002c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
10002c98:	f04f 0300 	mov.w	r3, #0
10002c9c:	f7fd ff84 	bl	10000ba8 <__aeabi_ldivmod>
10002ca0:	4602      	mov	r2, r0
10002ca2:	460b      	mov	r3, r1
10002ca4:	4610      	mov	r0, r2
10002ca6:	4619      	mov	r1, r3
10002ca8:	f7fd ff40 	bl	10000b2c <__aeabi_l2f>
10002cac:	ee07 0a10 	vmov	s14, r0
10002cb0:	4b38      	ldr	r3, [pc, #224]	; (10002d94 <v_ReLUActiv_int+0x5b8>)
10002cb2:	69da      	ldr	r2, [r3, #28]
10002cb4:	897b      	ldrh	r3, [r7, #10]
10002cb6:	009b      	lsls	r3, r3, #2
10002cb8:	4413      	add	r3, r2
10002cba:	edd3 7a00 	vldr	s15, [r3]
10002cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
10002cc2:	ee17 0a90 	vmov	r0, s15
10002cc6:	f7fd ffd7 	bl	10000c78 <__aeabi_f2lz>
10002cca:	4602      	mov	r2, r0
10002ccc:	460b      	mov	r3, r1
10002cce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
10002cd2:	e016      	b.n	10002d02 <v_ReLUActiv_int+0x526>
			}
			else
			{
				long_aux = long_aux + xQuantizedVal.Zy[layer];
10002cd4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
10002cd8:	f7fd ff28 	bl	10000b2c <__aeabi_l2f>
10002cdc:	ee07 0a10 	vmov	s14, r0
10002ce0:	4b2c      	ldr	r3, [pc, #176]	; (10002d94 <v_ReLUActiv_int+0x5b8>)
10002ce2:	69da      	ldr	r2, [r3, #28]
10002ce4:	897b      	ldrh	r3, [r7, #10]
10002ce6:	009b      	lsls	r3, r3, #2
10002ce8:	4413      	add	r3, r2
10002cea:	edd3 7a00 	vldr	s15, [r3]
10002cee:	ee77 7a27 	vadd.f32	s15, s14, s15
10002cf2:	ee17 0a90 	vmov	r0, s15
10002cf6:	f7fd ffbf 	bl	10000c78 <__aeabi_f2lz>
10002cfa:	4602      	mov	r2, r0
10002cfc:	460b      	mov	r3, r1
10002cfe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if (long_aux >= INT4_MAX)
10002d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002d06:	2a0f      	cmp	r2, #15
10002d08:	f173 0300 	sbcs.w	r3, r3, #0
10002d0c:	db06      	blt.n	10002d1c <v_ReLUActiv_int+0x540>
			{
				long_aux = INT4_MAX;
10002d0e:	f04f 020f 	mov.w	r2, #15
10002d12:	f04f 0300 	mov.w	r3, #0
10002d16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
10002d1a:	e00e      	b.n	10002d3a <v_ReLUActiv_int+0x55e>
			}
			else if (long_aux <= INT4_MIN)
10002d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002d20:	f06f 000e 	mvn.w	r0, #14
10002d24:	f04f 31ff 	mov.w	r1, #4294967295
10002d28:	4282      	cmp	r2, r0
10002d2a:	418b      	sbcs	r3, r1
10002d2c:	da05      	bge.n	10002d3a <v_ReLUActiv_int+0x55e>
			{
				long_aux = INT4_MIN;
10002d2e:	f06f 020f 	mvn.w	r2, #15
10002d32:	f04f 33ff 	mov.w	r3, #4294967295
10002d36:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			v_MountByte_4bits(&((int8_t*)funcptr)[(i + EvOdd_L) / 2], (int8_t)long_aux, (i + EvOdd_L) % 2);
10002d3a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
10002d3e:	693b      	ldr	r3, [r7, #16]
10002d40:	4413      	add	r3, r2
10002d42:	085b      	lsrs	r3, r3, #1
10002d44:	687a      	ldr	r2, [r7, #4]
10002d46:	18d0      	adds	r0, r2, r3
10002d48:	f997 1028 	ldrsb.w	r1, [r7, #40]	; 0x28
10002d4c:	8b7b      	ldrh	r3, [r7, #26]
10002d4e:	b2da      	uxtb	r2, r3
10002d50:	693b      	ldr	r3, [r7, #16]
10002d52:	b2db      	uxtb	r3, r3
10002d54:	4413      	add	r3, r2
10002d56:	b2db      	uxtb	r3, r3
10002d58:	b25b      	sxtb	r3, r3
10002d5a:	f003 0301 	and.w	r3, r3, #1
10002d5e:	b25b      	sxtb	r3, r3
10002d60:	461a      	mov	r2, r3
10002d62:	f000 ff21 	bl	10003ba8 <v_MountByte_4bits>
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002d66:	693b      	ldr	r3, [r7, #16]
10002d68:	3301      	adds	r3, #1
10002d6a:	613b      	str	r3, [r7, #16]
10002d6c:	897b      	ldrh	r3, [r7, #10]
10002d6e:	4a08      	ldr	r2, [pc, #32]	; (10002d90 <v_ReLUActiv_int+0x5b4>)
10002d70:	005b      	lsls	r3, r3, #1
10002d72:	4413      	add	r3, r2
10002d74:	889b      	ldrh	r3, [r3, #4]
10002d76:	b29b      	uxth	r3, r3
10002d78:	461a      	mov	r2, r3
10002d7a:	693b      	ldr	r3, [r7, #16]
10002d7c:	4293      	cmp	r3, r2
10002d7e:	f4ff af54 	bcc.w	10002c2a <v_ReLUActiv_int+0x44e>
			//((int8_t*)funcptr)[i] = (int8_t)long_aux;
		}
		break;
10002d82:	e000      	b.n	10002d86 <v_ReLUActiv_int+0x5aa>

	default:
		break;
10002d84:	bf00      	nop
	}
}
10002d86:	bf00      	nop
10002d88:	3730      	adds	r7, #48	; 0x30
10002d8a:	46bd      	mov	sp, r7
10002d8c:	bdb0      	pop	{r4, r5, r7, pc}
10002d8e:	bf00      	nop
10002d90:	20000200 	.word	0x20000200
10002d94:	20000254 	.word	0x20000254

10002d98 <v_LinearActiv_int>:
//	in		result, xnetparam, input, wbptr			(result, network hyperparameters struct,float pointer, float pointer)
//	out		none
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_LinearActiv_int(void* ZPtr, uint16_t layer, void* FuncPtr)
{
10002d98:	b580      	push	{r7, lr}
10002d9a:	b08c      	sub	sp, #48	; 0x30
10002d9c:	af00      	add	r7, sp, #0
10002d9e:	60f8      	str	r0, [r7, #12]
10002da0:	460b      	mov	r3, r1
10002da2:	607a      	str	r2, [r7, #4]
10002da4:	817b      	strh	r3, [r7, #10]
	long long int long_aux;
	switch (xNetParam.xVarPrecision.precision)
10002da6:	4bc7      	ldr	r3, [pc, #796]	; (100030c4 <v_LinearActiv_int+0x32c>)
10002da8:	785b      	ldrb	r3, [r3, #1]
10002daa:	b2db      	uxtb	r3, r3
10002dac:	3b04      	subs	r3, #4
10002dae:	2b1c      	cmp	r3, #28
10002db0:	f200 81c3 	bhi.w	1000313a <v_LinearActiv_int+0x3a2>
10002db4:	a201      	add	r2, pc, #4	; (adr r2, 10002dbc <v_LinearActiv_int+0x24>)
10002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002dba:	bf00      	nop
10002dbc:	1000300f 	.word	0x1000300f
10002dc0:	1000313b 	.word	0x1000313b
10002dc4:	1000313b 	.word	0x1000313b
10002dc8:	1000313b 	.word	0x1000313b
10002dcc:	10002f75 	.word	0x10002f75
10002dd0:	1000313b 	.word	0x1000313b
10002dd4:	1000313b 	.word	0x1000313b
10002dd8:	1000313b 	.word	0x1000313b
10002ddc:	1000313b 	.word	0x1000313b
10002de0:	1000313b 	.word	0x1000313b
10002de4:	1000313b 	.word	0x1000313b
10002de8:	1000313b 	.word	0x1000313b
10002dec:	10002ed3 	.word	0x10002ed3
10002df0:	1000313b 	.word	0x1000313b
10002df4:	1000313b 	.word	0x1000313b
10002df8:	1000313b 	.word	0x1000313b
10002dfc:	1000313b 	.word	0x1000313b
10002e00:	1000313b 	.word	0x1000313b
10002e04:	1000313b 	.word	0x1000313b
10002e08:	1000313b 	.word	0x1000313b
10002e0c:	1000313b 	.word	0x1000313b
10002e10:	1000313b 	.word	0x1000313b
10002e14:	1000313b 	.word	0x1000313b
10002e18:	1000313b 	.word	0x1000313b
10002e1c:	1000313b 	.word	0x1000313b
10002e20:	1000313b 	.word	0x1000313b
10002e24:	1000313b 	.word	0x1000313b
10002e28:	1000313b 	.word	0x1000313b
10002e2c:	10002e31 	.word	0x10002e31
	{
	case 32:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002e30:	2300      	movs	r3, #0
10002e32:	627b      	str	r3, [r7, #36]	; 0x24
10002e34:	e042      	b.n	10002ebc <v_LinearActiv_int+0x124>
		{
			long_aux = (((int32_t*)ZPtr)[i] + xQuantizedVal.Zy[layer]);
10002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002e38:	009b      	lsls	r3, r3, #2
10002e3a:	68fa      	ldr	r2, [r7, #12]
10002e3c:	4413      	add	r3, r2
10002e3e:	681b      	ldr	r3, [r3, #0]
10002e40:	ee07 3a90 	vmov	s15, r3
10002e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
10002e48:	4b9f      	ldr	r3, [pc, #636]	; (100030c8 <v_LinearActiv_int+0x330>)
10002e4a:	69da      	ldr	r2, [r3, #28]
10002e4c:	897b      	ldrh	r3, [r7, #10]
10002e4e:	009b      	lsls	r3, r3, #2
10002e50:	4413      	add	r3, r2
10002e52:	edd3 7a00 	vldr	s15, [r3]
10002e56:	ee77 7a27 	vadd.f32	s15, s14, s15
10002e5a:	ee17 0a90 	vmov	r0, s15
10002e5e:	f7fd ff0b 	bl	10000c78 <__aeabi_f2lz>
10002e62:	4602      	mov	r2, r0
10002e64:	460b      	mov	r3, r1
10002e66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			if (long_aux >= INT32_MAX)
10002e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002e6e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
10002e72:	f04f 0100 	mov.w	r1, #0
10002e76:	4282      	cmp	r2, r0
10002e78:	418b      	sbcs	r3, r1
10002e7a:	db06      	blt.n	10002e8a <v_LinearActiv_int+0xf2>
			{
				long_aux = INT32_MAX;
10002e7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
10002e80:	f04f 0300 	mov.w	r3, #0
10002e84:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
10002e88:	e00f      	b.n	10002eaa <v_LinearActiv_int+0x112>
			}
			else if (long_aux <= INT32_MIN)
10002e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002e8e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
10002e92:	f04f 31ff 	mov.w	r1, #4294967295
10002e96:	4290      	cmp	r0, r2
10002e98:	eb71 0303 	sbcs.w	r3, r1, r3
10002e9c:	db05      	blt.n	10002eaa <v_LinearActiv_int+0x112>
			{
				long_aux = INT32_MIN;
10002e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
10002ea2:	f04f 33ff 	mov.w	r3, #4294967295
10002ea6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int32_t*)FuncPtr)[i] = long_aux;
10002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002eac:	009b      	lsls	r3, r3, #2
10002eae:	687a      	ldr	r2, [r7, #4]
10002eb0:	4413      	add	r3, r2
10002eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
10002eb4:	601a      	str	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002eb8:	3301      	adds	r3, #1
10002eba:	627b      	str	r3, [r7, #36]	; 0x24
10002ebc:	897b      	ldrh	r3, [r7, #10]
10002ebe:	4a81      	ldr	r2, [pc, #516]	; (100030c4 <v_LinearActiv_int+0x32c>)
10002ec0:	005b      	lsls	r3, r3, #1
10002ec2:	4413      	add	r3, r2
10002ec4:	889b      	ldrh	r3, [r3, #4]
10002ec6:	b29b      	uxth	r3, r3
10002ec8:	461a      	mov	r2, r3
10002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002ecc:	4293      	cmp	r3, r2
10002ece:	d3b2      	bcc.n	10002e36 <v_LinearActiv_int+0x9e>
		}
		break;
10002ed0:	e134      	b.n	1000313c <v_LinearActiv_int+0x3a4>

	case 16:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002ed2:	2300      	movs	r3, #0
10002ed4:	623b      	str	r3, [r7, #32]
10002ed6:	e042      	b.n	10002f5e <v_LinearActiv_int+0x1c6>
		{
			long_aux = (((int16_t*)ZPtr)[i] + xQuantizedVal.Zy[layer]);
10002ed8:	6a3b      	ldr	r3, [r7, #32]
10002eda:	005b      	lsls	r3, r3, #1
10002edc:	68fa      	ldr	r2, [r7, #12]
10002ede:	4413      	add	r3, r2
10002ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
10002ee4:	ee07 3a90 	vmov	s15, r3
10002ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
10002eec:	4b76      	ldr	r3, [pc, #472]	; (100030c8 <v_LinearActiv_int+0x330>)
10002eee:	69da      	ldr	r2, [r3, #28]
10002ef0:	897b      	ldrh	r3, [r7, #10]
10002ef2:	009b      	lsls	r3, r3, #2
10002ef4:	4413      	add	r3, r2
10002ef6:	edd3 7a00 	vldr	s15, [r3]
10002efa:	ee77 7a27 	vadd.f32	s15, s14, s15
10002efe:	ee17 0a90 	vmov	r0, s15
10002f02:	f7fd feb9 	bl	10000c78 <__aeabi_f2lz>
10002f06:	4602      	mov	r2, r0
10002f08:	460b      	mov	r3, r1
10002f0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			if (long_aux >= INT16_MAX)
10002f0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002f12:	f647 70fe 	movw	r0, #32766	; 0x7ffe
10002f16:	f04f 0100 	mov.w	r1, #0
10002f1a:	4290      	cmp	r0, r2
10002f1c:	eb71 0303 	sbcs.w	r3, r1, r3
10002f20:	da06      	bge.n	10002f30 <v_LinearActiv_int+0x198>
			{
				long_aux = INT16_MAX;
10002f22:	f647 72ff 	movw	r2, #32767	; 0x7fff
10002f26:	f04f 0300 	mov.w	r3, #0
10002f2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
10002f2e:	e00c      	b.n	10002f4a <v_LinearActiv_int+0x1b2>
			}
			else if (long_aux <= INT16_MIN)
10002f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002f34:	4865      	ldr	r0, [pc, #404]	; (100030cc <v_LinearActiv_int+0x334>)
10002f36:	f04f 31ff 	mov.w	r1, #4294967295
10002f3a:	4282      	cmp	r2, r0
10002f3c:	418b      	sbcs	r3, r1
10002f3e:	da04      	bge.n	10002f4a <v_LinearActiv_int+0x1b2>
			{
				long_aux = INT16_MIN;
10002f40:	4a63      	ldr	r2, [pc, #396]	; (100030d0 <v_LinearActiv_int+0x338>)
10002f42:	f04f 33ff 	mov.w	r3, #4294967295
10002f46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int16_t*)FuncPtr)[i] = long_aux;
10002f4a:	6a3b      	ldr	r3, [r7, #32]
10002f4c:	005b      	lsls	r3, r3, #1
10002f4e:	687a      	ldr	r2, [r7, #4]
10002f50:	4413      	add	r3, r2
10002f52:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
10002f56:	801a      	strh	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002f58:	6a3b      	ldr	r3, [r7, #32]
10002f5a:	3301      	adds	r3, #1
10002f5c:	623b      	str	r3, [r7, #32]
10002f5e:	897b      	ldrh	r3, [r7, #10]
10002f60:	4a58      	ldr	r2, [pc, #352]	; (100030c4 <v_LinearActiv_int+0x32c>)
10002f62:	005b      	lsls	r3, r3, #1
10002f64:	4413      	add	r3, r2
10002f66:	889b      	ldrh	r3, [r3, #4]
10002f68:	b29b      	uxth	r3, r3
10002f6a:	461a      	mov	r2, r3
10002f6c:	6a3b      	ldr	r3, [r7, #32]
10002f6e:	4293      	cmp	r3, r2
10002f70:	d3b2      	bcc.n	10002ed8 <v_LinearActiv_int+0x140>
		}
		break;
10002f72:	e0e3      	b.n	1000313c <v_LinearActiv_int+0x3a4>

	case 8:
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002f74:	2300      	movs	r3, #0
10002f76:	61fb      	str	r3, [r7, #28]
10002f78:	e03e      	b.n	10002ff8 <v_LinearActiv_int+0x260>
		{
			long_aux = (((int8_t*)ZPtr)[i] + xQuantizedVal.Zy[layer]);
10002f7a:	68fa      	ldr	r2, [r7, #12]
10002f7c:	69fb      	ldr	r3, [r7, #28]
10002f7e:	4413      	add	r3, r2
10002f80:	f993 3000 	ldrsb.w	r3, [r3]
10002f84:	ee07 3a90 	vmov	s15, r3
10002f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
10002f8c:	4b4e      	ldr	r3, [pc, #312]	; (100030c8 <v_LinearActiv_int+0x330>)
10002f8e:	69da      	ldr	r2, [r3, #28]
10002f90:	897b      	ldrh	r3, [r7, #10]
10002f92:	009b      	lsls	r3, r3, #2
10002f94:	4413      	add	r3, r2
10002f96:	edd3 7a00 	vldr	s15, [r3]
10002f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
10002f9e:	ee17 0a90 	vmov	r0, s15
10002fa2:	f7fd fe69 	bl	10000c78 <__aeabi_f2lz>
10002fa6:	4602      	mov	r2, r0
10002fa8:	460b      	mov	r3, r1
10002faa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			if (long_aux >= INT8_MAX)
10002fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002fb2:	2a7f      	cmp	r2, #127	; 0x7f
10002fb4:	f173 0300 	sbcs.w	r3, r3, #0
10002fb8:	db06      	blt.n	10002fc8 <v_LinearActiv_int+0x230>
			{
				long_aux = INT8_MAX;
10002fba:	f04f 027f 	mov.w	r2, #127	; 0x7f
10002fbe:	f04f 0300 	mov.w	r3, #0
10002fc2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
10002fc6:	e00e      	b.n	10002fe6 <v_LinearActiv_int+0x24e>
			}
			else if (long_aux <= INT8_MIN)
10002fc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
10002fcc:	f06f 007e 	mvn.w	r0, #126	; 0x7e
10002fd0:	f04f 31ff 	mov.w	r1, #4294967295
10002fd4:	4282      	cmp	r2, r0
10002fd6:	418b      	sbcs	r3, r1
10002fd8:	da05      	bge.n	10002fe6 <v_LinearActiv_int+0x24e>
			{
				long_aux = INT8_MIN;
10002fda:	f06f 027f 	mvn.w	r2, #127	; 0x7f
10002fde:	f04f 33ff 	mov.w	r3, #4294967295
10002fe2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			((int8_t*)FuncPtr)[i] = long_aux;
10002fe6:	687a      	ldr	r2, [r7, #4]
10002fe8:	69fb      	ldr	r3, [r7, #28]
10002fea:	4413      	add	r3, r2
10002fec:	f997 2028 	ldrsb.w	r2, [r7, #40]	; 0x28
10002ff0:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
10002ff2:	69fb      	ldr	r3, [r7, #28]
10002ff4:	3301      	adds	r3, #1
10002ff6:	61fb      	str	r3, [r7, #28]
10002ff8:	897b      	ldrh	r3, [r7, #10]
10002ffa:	4a32      	ldr	r2, [pc, #200]	; (100030c4 <v_LinearActiv_int+0x32c>)
10002ffc:	005b      	lsls	r3, r3, #1
10002ffe:	4413      	add	r3, r2
10003000:	889b      	ldrh	r3, [r3, #4]
10003002:	b29b      	uxth	r3, r3
10003004:	461a      	mov	r2, r3
10003006:	69fb      	ldr	r3, [r7, #28]
10003008:	4293      	cmp	r3, r2
1000300a:	d3b6      	bcc.n	10002f7a <v_LinearActiv_int+0x1e2>
		}
		break;
1000300c:	e096      	b.n	1000313c <v_LinearActiv_int+0x3a4>

	case 4:;
		int16_t EvOdd_L = 0;
1000300e:	2300      	movs	r3, #0
10003010:	837b      	strh	r3, [r7, #26]
		for (size_t i = 0; i < layer; i++)
10003012:	2300      	movs	r3, #0
10003014:	617b      	str	r3, [r7, #20]
10003016:	e00c      	b.n	10003032 <v_LinearActiv_int+0x29a>
		{
			EvOdd_L += xNetParam.NonLayer[i];
10003018:	4a2a      	ldr	r2, [pc, #168]	; (100030c4 <v_LinearActiv_int+0x32c>)
1000301a:	697b      	ldr	r3, [r7, #20]
1000301c:	005b      	lsls	r3, r3, #1
1000301e:	4413      	add	r3, r2
10003020:	889b      	ldrh	r3, [r3, #4]
10003022:	b29a      	uxth	r2, r3
10003024:	8b7b      	ldrh	r3, [r7, #26]
10003026:	4413      	add	r3, r2
10003028:	b29b      	uxth	r3, r3
1000302a:	837b      	strh	r3, [r7, #26]
		for (size_t i = 0; i < layer; i++)
1000302c:	697b      	ldr	r3, [r7, #20]
1000302e:	3301      	adds	r3, #1
10003030:	617b      	str	r3, [r7, #20]
10003032:	897b      	ldrh	r3, [r7, #10]
10003034:	697a      	ldr	r2, [r7, #20]
10003036:	429a      	cmp	r2, r3
10003038:	d3ee      	bcc.n	10003018 <v_LinearActiv_int+0x280>
		}
		EvOdd_L = EvOdd_L % 2;
1000303a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
1000303e:	2b00      	cmp	r3, #0
10003040:	f003 0301 	and.w	r3, r3, #1
10003044:	bfb8      	it	lt
10003046:	425b      	neglt	r3, r3
10003048:	837b      	strh	r3, [r7, #26]

		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
1000304a:	2300      	movs	r3, #0
1000304c:	613b      	str	r3, [r7, #16]
1000304e:	e069      	b.n	10003124 <v_LinearActiv_int+0x38c>
		{
			long_aux = v_GetByte_4bits(((int8_t*)ZPtr)[(i + EvOdd_L) / 2], (i + EvOdd_L) % 2) + xQuantizedVal.Zy[layer];
10003050:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
10003054:	693b      	ldr	r3, [r7, #16]
10003056:	4413      	add	r3, r2
10003058:	085b      	lsrs	r3, r3, #1
1000305a:	68fa      	ldr	r2, [r7, #12]
1000305c:	4413      	add	r3, r2
1000305e:	f993 0000 	ldrsb.w	r0, [r3]
10003062:	8b7b      	ldrh	r3, [r7, #26]
10003064:	b2da      	uxtb	r2, r3
10003066:	693b      	ldr	r3, [r7, #16]
10003068:	b2db      	uxtb	r3, r3
1000306a:	4413      	add	r3, r2
1000306c:	b2db      	uxtb	r3, r3
1000306e:	b25b      	sxtb	r3, r3
10003070:	f003 0301 	and.w	r3, r3, #1
10003074:	b25b      	sxtb	r3, r3
10003076:	4619      	mov	r1, r3
10003078:	f000 fdc4 	bl	10003c04 <v_GetByte_4bits>
1000307c:	4603      	mov	r3, r0
1000307e:	ee07 3a90 	vmov	s15, r3
10003082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
10003086:	4b10      	ldr	r3, [pc, #64]	; (100030c8 <v_LinearActiv_int+0x330>)
10003088:	69da      	ldr	r2, [r3, #28]
1000308a:	897b      	ldrh	r3, [r7, #10]
1000308c:	009b      	lsls	r3, r3, #2
1000308e:	4413      	add	r3, r2
10003090:	edd3 7a00 	vldr	s15, [r3]
10003094:	ee77 7a27 	vadd.f32	s15, s14, s15
10003098:	ee17 0a90 	vmov	r0, s15
1000309c:	f7fd fdec 	bl	10000c78 <__aeabi_f2lz>
100030a0:	4602      	mov	r2, r0
100030a2:	460b      	mov	r3, r1
100030a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			if (long_aux >= INT4_MAX)
100030a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
100030ac:	2a0f      	cmp	r2, #15
100030ae:	f173 0300 	sbcs.w	r3, r3, #0
100030b2:	db0f      	blt.n	100030d4 <v_LinearActiv_int+0x33c>
			{
				long_aux = INT4_MAX;
100030b4:	f04f 020f 	mov.w	r2, #15
100030b8:	f04f 0300 	mov.w	r3, #0
100030bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
100030c0:	e017      	b.n	100030f2 <v_LinearActiv_int+0x35a>
100030c2:	bf00      	nop
100030c4:	20000200 	.word	0x20000200
100030c8:	20000254 	.word	0x20000254
100030cc:	ffff8001 	.word	0xffff8001
100030d0:	ffff8000 	.word	0xffff8000
			}
			else if (long_aux <= INT4_MIN)
100030d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
100030d8:	f06f 000e 	mvn.w	r0, #14
100030dc:	f04f 31ff 	mov.w	r1, #4294967295
100030e0:	4282      	cmp	r2, r0
100030e2:	418b      	sbcs	r3, r1
100030e4:	da05      	bge.n	100030f2 <v_LinearActiv_int+0x35a>
			{
				long_aux = INT4_MIN;
100030e6:	f06f 020f 	mvn.w	r2, #15
100030ea:	f04f 33ff 	mov.w	r3, #4294967295
100030ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			v_MountByte_4bits(&((int8_t*)FuncPtr)[(i + EvOdd_L) / 2], (int8_t)long_aux, (i + EvOdd_L) % 2);
100030f2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
100030f6:	693b      	ldr	r3, [r7, #16]
100030f8:	4413      	add	r3, r2
100030fa:	085b      	lsrs	r3, r3, #1
100030fc:	687a      	ldr	r2, [r7, #4]
100030fe:	18d0      	adds	r0, r2, r3
10003100:	f997 1028 	ldrsb.w	r1, [r7, #40]	; 0x28
10003104:	8b7b      	ldrh	r3, [r7, #26]
10003106:	b2da      	uxtb	r2, r3
10003108:	693b      	ldr	r3, [r7, #16]
1000310a:	b2db      	uxtb	r3, r3
1000310c:	4413      	add	r3, r2
1000310e:	b2db      	uxtb	r3, r3
10003110:	b25b      	sxtb	r3, r3
10003112:	f003 0301 	and.w	r3, r3, #1
10003116:	b25b      	sxtb	r3, r3
10003118:	461a      	mov	r2, r3
1000311a:	f000 fd45 	bl	10003ba8 <v_MountByte_4bits>
		for (size_t i = 0; i < xNetParam.NonLayer[layer]; i++)
1000311e:	693b      	ldr	r3, [r7, #16]
10003120:	3301      	adds	r3, #1
10003122:	613b      	str	r3, [r7, #16]
10003124:	897b      	ldrh	r3, [r7, #10]
10003126:	4a07      	ldr	r2, [pc, #28]	; (10003144 <v_LinearActiv_int+0x3ac>)
10003128:	005b      	lsls	r3, r3, #1
1000312a:	4413      	add	r3, r2
1000312c:	889b      	ldrh	r3, [r3, #4]
1000312e:	b29b      	uxth	r3, r3
10003130:	461a      	mov	r2, r3
10003132:	693b      	ldr	r3, [r7, #16]
10003134:	4293      	cmp	r3, r2
10003136:	d38b      	bcc.n	10003050 <v_LinearActiv_int+0x2b8>
		}
		break;
10003138:	e000      	b.n	1000313c <v_LinearActiv_int+0x3a4>

	default:
		break;
1000313a:	bf00      	nop
	}
}
1000313c:	bf00      	nop
1000313e:	3730      	adds	r7, #48	; 0x30
10003140:	46bd      	mov	sp, r7
10003142:	bd80      	pop	{r7, pc}
10003144:	20000200 	.word	0x20000200

10003148 <v_QuantizeIntputs_int>:
//	in		result, xnetparam, input, wbptr			(result, network hyperparameters struct,float pointer, float pointer)
//	out		none
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_QuantizeIntputs_int(void* quant_input, float* input)
{
10003148:	b590      	push	{r4, r7, lr}
1000314a:	b087      	sub	sp, #28
1000314c:	af00      	add	r7, sp, #0
1000314e:	6078      	str	r0, [r7, #4]
10003150:	6039      	str	r1, [r7, #0]
	switch (xNetParam.xVarPrecision.precision)
10003152:	4bc2      	ldr	r3, [pc, #776]	; (1000345c <v_QuantizeIntputs_int+0x314>)
10003154:	785b      	ldrb	r3, [r3, #1]
10003156:	b2db      	uxtb	r3, r3
10003158:	3b04      	subs	r3, #4
1000315a:	2b1c      	cmp	r3, #28
1000315c:	f200 82dc 	bhi.w	10003718 <v_QuantizeIntputs_int+0x5d0>
10003160:	a201      	add	r2, pc, #4	; (adr r2, 10003168 <v_QuantizeIntputs_int+0x20>)
10003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10003166:	bf00      	nop
10003168:	1000359d 	.word	0x1000359d
1000316c:	10003719 	.word	0x10003719
10003170:	10003719 	.word	0x10003719
10003174:	10003719 	.word	0x10003719
10003178:	10003457 	.word	0x10003457
1000317c:	10003719 	.word	0x10003719
10003180:	10003719 	.word	0x10003719
10003184:	10003719 	.word	0x10003719
10003188:	10003719 	.word	0x10003719
1000318c:	10003719 	.word	0x10003719
10003190:	10003719 	.word	0x10003719
10003194:	10003719 	.word	0x10003719
10003198:	10003317 	.word	0x10003317
1000319c:	10003719 	.word	0x10003719
100031a0:	10003719 	.word	0x10003719
100031a4:	10003719 	.word	0x10003719
100031a8:	10003719 	.word	0x10003719
100031ac:	10003719 	.word	0x10003719
100031b0:	10003719 	.word	0x10003719
100031b4:	10003719 	.word	0x10003719
100031b8:	10003719 	.word	0x10003719
100031bc:	10003719 	.word	0x10003719
100031c0:	10003719 	.word	0x10003719
100031c4:	10003719 	.word	0x10003719
100031c8:	10003719 	.word	0x10003719
100031cc:	10003719 	.word	0x10003719
100031d0:	10003719 	.word	0x10003719
100031d4:	10003719 	.word	0x10003719
100031d8:	100031dd 	.word	0x100031dd
	{
	case 32:
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
100031dc:	2300      	movs	r3, #0
100031de:	617b      	str	r3, [r7, #20]
100031e0:	e090      	b.n	10003304 <v_QuantizeIntputs_int+0x1bc>
		{
			// Saturation Protection
			if (input[i] >= xDistribution.func_max[0])
100031e2:	697b      	ldr	r3, [r7, #20]
100031e4:	009b      	lsls	r3, r3, #2
100031e6:	683a      	ldr	r2, [r7, #0]
100031e8:	4413      	add	r3, r2
100031ea:	ed93 7a00 	vldr	s14, [r3]
100031ee:	4b9c      	ldr	r3, [pc, #624]	; (10003460 <v_QuantizeIntputs_int+0x318>)
100031f0:	695b      	ldr	r3, [r3, #20]
100031f2:	edd3 7a00 	vldr	s15, [r3]
100031f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
100031fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100031fe:	db24      	blt.n	1000324a <v_QuantizeIntputs_int+0x102>
			{
				((int32_t*)quant_input)[i] = (int32_t)round((xDistribution.func_max[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
10003200:	4b97      	ldr	r3, [pc, #604]	; (10003460 <v_QuantizeIntputs_int+0x318>)
10003202:	695b      	ldr	r3, [r3, #20]
10003204:	edd3 6a00 	vldr	s13, [r3]
10003208:	4b96      	ldr	r3, [pc, #600]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
1000320a:	681b      	ldr	r3, [r3, #0]
1000320c:	edd3 7a00 	vldr	s15, [r3]
10003210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
10003214:	4b93      	ldr	r3, [pc, #588]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
10003216:	69db      	ldr	r3, [r3, #28]
10003218:	edd3 7a00 	vldr	s15, [r3]
1000321c:	ee77 7a27 	vadd.f32	s15, s14, s15
10003220:	ee17 0a90 	vmov	r0, s15
10003224:	f7fd f878 	bl	10000318 <__aeabi_f2d>
10003228:	4602      	mov	r2, r0
1000322a:	460b      	mov	r3, r1
1000322c:	ec43 2b10 	vmov	d0, r2, r3
10003230:	f008 f93e 	bl	1000b4b0 <round>
10003234:	ec51 0b10 	vmov	r0, r1, d0
10003238:	697b      	ldr	r3, [r7, #20]
1000323a:	009b      	lsls	r3, r3, #2
1000323c:	687a      	ldr	r2, [r7, #4]
1000323e:	18d4      	adds	r4, r2, r3
10003240:	f7fd fb5c 	bl	100008fc <__aeabi_d2iz>
10003244:	4603      	mov	r3, r0
10003246:	6023      	str	r3, [r4, #0]
10003248:	e059      	b.n	100032fe <v_QuantizeIntputs_int+0x1b6>
			}
			else if (input[i] <= xDistribution.func_min[0])
1000324a:	697b      	ldr	r3, [r7, #20]
1000324c:	009b      	lsls	r3, r3, #2
1000324e:	683a      	ldr	r2, [r7, #0]
10003250:	4413      	add	r3, r2
10003252:	ed93 7a00 	vldr	s14, [r3]
10003256:	4b82      	ldr	r3, [pc, #520]	; (10003460 <v_QuantizeIntputs_int+0x318>)
10003258:	691b      	ldr	r3, [r3, #16]
1000325a:	edd3 7a00 	vldr	s15, [r3]
1000325e:	eeb4 7ae7 	vcmpe.f32	s14, s15
10003262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10003266:	d824      	bhi.n	100032b2 <v_QuantizeIntputs_int+0x16a>
			{
				((int32_t*)quant_input)[i] = (int32_t)round((xDistribution.func_min[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
10003268:	4b7d      	ldr	r3, [pc, #500]	; (10003460 <v_QuantizeIntputs_int+0x318>)
1000326a:	691b      	ldr	r3, [r3, #16]
1000326c:	edd3 6a00 	vldr	s13, [r3]
10003270:	4b7c      	ldr	r3, [pc, #496]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
10003272:	681b      	ldr	r3, [r3, #0]
10003274:	edd3 7a00 	vldr	s15, [r3]
10003278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
1000327c:	4b79      	ldr	r3, [pc, #484]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
1000327e:	69db      	ldr	r3, [r3, #28]
10003280:	edd3 7a00 	vldr	s15, [r3]
10003284:	ee77 7a27 	vadd.f32	s15, s14, s15
10003288:	ee17 0a90 	vmov	r0, s15
1000328c:	f7fd f844 	bl	10000318 <__aeabi_f2d>
10003290:	4602      	mov	r2, r0
10003292:	460b      	mov	r3, r1
10003294:	ec43 2b10 	vmov	d0, r2, r3
10003298:	f008 f90a 	bl	1000b4b0 <round>
1000329c:	ec51 0b10 	vmov	r0, r1, d0
100032a0:	697b      	ldr	r3, [r7, #20]
100032a2:	009b      	lsls	r3, r3, #2
100032a4:	687a      	ldr	r2, [r7, #4]
100032a6:	18d4      	adds	r4, r2, r3
100032a8:	f7fd fb28 	bl	100008fc <__aeabi_d2iz>
100032ac:	4603      	mov	r3, r0
100032ae:	6023      	str	r3, [r4, #0]
100032b0:	e025      	b.n	100032fe <v_QuantizeIntputs_int+0x1b6>
			}
			else
			{
				((int32_t*)quant_input)[i] = (int32_t)round((input[i] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
100032b2:	697b      	ldr	r3, [r7, #20]
100032b4:	009b      	lsls	r3, r3, #2
100032b6:	683a      	ldr	r2, [r7, #0]
100032b8:	4413      	add	r3, r2
100032ba:	edd3 6a00 	vldr	s13, [r3]
100032be:	4b69      	ldr	r3, [pc, #420]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
100032c0:	681b      	ldr	r3, [r3, #0]
100032c2:	edd3 7a00 	vldr	s15, [r3]
100032c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
100032ca:	4b66      	ldr	r3, [pc, #408]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
100032cc:	69db      	ldr	r3, [r3, #28]
100032ce:	edd3 7a00 	vldr	s15, [r3]
100032d2:	ee77 7a27 	vadd.f32	s15, s14, s15
100032d6:	ee17 0a90 	vmov	r0, s15
100032da:	f7fd f81d 	bl	10000318 <__aeabi_f2d>
100032de:	4602      	mov	r2, r0
100032e0:	460b      	mov	r3, r1
100032e2:	ec43 2b10 	vmov	d0, r2, r3
100032e6:	f008 f8e3 	bl	1000b4b0 <round>
100032ea:	ec51 0b10 	vmov	r0, r1, d0
100032ee:	697b      	ldr	r3, [r7, #20]
100032f0:	009b      	lsls	r3, r3, #2
100032f2:	687a      	ldr	r2, [r7, #4]
100032f4:	18d4      	adds	r4, r2, r3
100032f6:	f7fd fb01 	bl	100008fc <__aeabi_d2iz>
100032fa:	4603      	mov	r3, r0
100032fc:	6023      	str	r3, [r4, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
100032fe:	697b      	ldr	r3, [r7, #20]
10003300:	3301      	adds	r3, #1
10003302:	617b      	str	r3, [r7, #20]
10003304:	4b55      	ldr	r3, [pc, #340]	; (1000345c <v_QuantizeIntputs_int+0x314>)
10003306:	889b      	ldrh	r3, [r3, #4]
10003308:	b29b      	uxth	r3, r3
1000330a:	461a      	mov	r2, r3
1000330c:	697b      	ldr	r3, [r7, #20]
1000330e:	4293      	cmp	r3, r2
10003310:	f4ff af67 	bcc.w	100031e2 <v_QuantizeIntputs_int+0x9a>
			}
		}
		break;
10003314:	e201      	b.n	1000371a <v_QuantizeIntputs_int+0x5d2>

	case 16:
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
10003316:	2300      	movs	r3, #0
10003318:	613b      	str	r3, [r7, #16]
1000331a:	e093      	b.n	10003444 <v_QuantizeIntputs_int+0x2fc>
		{

			// Saturation Protection
			if (input[i] >= xDistribution.func_max[0])
1000331c:	693b      	ldr	r3, [r7, #16]
1000331e:	009b      	lsls	r3, r3, #2
10003320:	683a      	ldr	r2, [r7, #0]
10003322:	4413      	add	r3, r2
10003324:	ed93 7a00 	vldr	s14, [r3]
10003328:	4b4d      	ldr	r3, [pc, #308]	; (10003460 <v_QuantizeIntputs_int+0x318>)
1000332a:	695b      	ldr	r3, [r3, #20]
1000332c:	edd3 7a00 	vldr	s15, [r3]
10003330:	eeb4 7ae7 	vcmpe.f32	s14, s15
10003334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10003338:	db25      	blt.n	10003386 <v_QuantizeIntputs_int+0x23e>
			{
				((int16_t*)quant_input)[i] = (int16_t)round((xDistribution.func_max[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
1000333a:	4b49      	ldr	r3, [pc, #292]	; (10003460 <v_QuantizeIntputs_int+0x318>)
1000333c:	695b      	ldr	r3, [r3, #20]
1000333e:	edd3 6a00 	vldr	s13, [r3]
10003342:	4b48      	ldr	r3, [pc, #288]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
10003344:	681b      	ldr	r3, [r3, #0]
10003346:	edd3 7a00 	vldr	s15, [r3]
1000334a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
1000334e:	4b45      	ldr	r3, [pc, #276]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
10003350:	69db      	ldr	r3, [r3, #28]
10003352:	edd3 7a00 	vldr	s15, [r3]
10003356:	ee77 7a27 	vadd.f32	s15, s14, s15
1000335a:	ee17 0a90 	vmov	r0, s15
1000335e:	f7fc ffdb 	bl	10000318 <__aeabi_f2d>
10003362:	4602      	mov	r2, r0
10003364:	460b      	mov	r3, r1
10003366:	ec43 2b10 	vmov	d0, r2, r3
1000336a:	f008 f8a1 	bl	1000b4b0 <round>
1000336e:	ec51 0b10 	vmov	r0, r1, d0
10003372:	693b      	ldr	r3, [r7, #16]
10003374:	005b      	lsls	r3, r3, #1
10003376:	687a      	ldr	r2, [r7, #4]
10003378:	18d4      	adds	r4, r2, r3
1000337a:	f7fd fabf 	bl	100008fc <__aeabi_d2iz>
1000337e:	4603      	mov	r3, r0
10003380:	b21b      	sxth	r3, r3
10003382:	8023      	strh	r3, [r4, #0]
10003384:	e05b      	b.n	1000343e <v_QuantizeIntputs_int+0x2f6>
			}
			else if (input[i] <= xDistribution.func_min[0])
10003386:	693b      	ldr	r3, [r7, #16]
10003388:	009b      	lsls	r3, r3, #2
1000338a:	683a      	ldr	r2, [r7, #0]
1000338c:	4413      	add	r3, r2
1000338e:	ed93 7a00 	vldr	s14, [r3]
10003392:	4b33      	ldr	r3, [pc, #204]	; (10003460 <v_QuantizeIntputs_int+0x318>)
10003394:	691b      	ldr	r3, [r3, #16]
10003396:	edd3 7a00 	vldr	s15, [r3]
1000339a:	eeb4 7ae7 	vcmpe.f32	s14, s15
1000339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100033a2:	d825      	bhi.n	100033f0 <v_QuantizeIntputs_int+0x2a8>
			{
				((int16_t*)quant_input)[i] = (int16_t)round((xDistribution.func_min[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
100033a4:	4b2e      	ldr	r3, [pc, #184]	; (10003460 <v_QuantizeIntputs_int+0x318>)
100033a6:	691b      	ldr	r3, [r3, #16]
100033a8:	edd3 6a00 	vldr	s13, [r3]
100033ac:	4b2d      	ldr	r3, [pc, #180]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
100033ae:	681b      	ldr	r3, [r3, #0]
100033b0:	edd3 7a00 	vldr	s15, [r3]
100033b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
100033b8:	4b2a      	ldr	r3, [pc, #168]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
100033ba:	69db      	ldr	r3, [r3, #28]
100033bc:	edd3 7a00 	vldr	s15, [r3]
100033c0:	ee77 7a27 	vadd.f32	s15, s14, s15
100033c4:	ee17 0a90 	vmov	r0, s15
100033c8:	f7fc ffa6 	bl	10000318 <__aeabi_f2d>
100033cc:	4602      	mov	r2, r0
100033ce:	460b      	mov	r3, r1
100033d0:	ec43 2b10 	vmov	d0, r2, r3
100033d4:	f008 f86c 	bl	1000b4b0 <round>
100033d8:	ec51 0b10 	vmov	r0, r1, d0
100033dc:	693b      	ldr	r3, [r7, #16]
100033de:	005b      	lsls	r3, r3, #1
100033e0:	687a      	ldr	r2, [r7, #4]
100033e2:	18d4      	adds	r4, r2, r3
100033e4:	f7fd fa8a 	bl	100008fc <__aeabi_d2iz>
100033e8:	4603      	mov	r3, r0
100033ea:	b21b      	sxth	r3, r3
100033ec:	8023      	strh	r3, [r4, #0]
100033ee:	e026      	b.n	1000343e <v_QuantizeIntputs_int+0x2f6>
			}
			else
			{
				((int16_t*)quant_input)[i] = (int16_t)round((input[i] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
100033f0:	693b      	ldr	r3, [r7, #16]
100033f2:	009b      	lsls	r3, r3, #2
100033f4:	683a      	ldr	r2, [r7, #0]
100033f6:	4413      	add	r3, r2
100033f8:	edd3 6a00 	vldr	s13, [r3]
100033fc:	4b19      	ldr	r3, [pc, #100]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
100033fe:	681b      	ldr	r3, [r3, #0]
10003400:	edd3 7a00 	vldr	s15, [r3]
10003404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
10003408:	4b16      	ldr	r3, [pc, #88]	; (10003464 <v_QuantizeIntputs_int+0x31c>)
1000340a:	69db      	ldr	r3, [r3, #28]
1000340c:	edd3 7a00 	vldr	s15, [r3]
10003410:	ee77 7a27 	vadd.f32	s15, s14, s15
10003414:	ee17 0a90 	vmov	r0, s15
10003418:	f7fc ff7e 	bl	10000318 <__aeabi_f2d>
1000341c:	4602      	mov	r2, r0
1000341e:	460b      	mov	r3, r1
10003420:	ec43 2b10 	vmov	d0, r2, r3
10003424:	f008 f844 	bl	1000b4b0 <round>
10003428:	ec51 0b10 	vmov	r0, r1, d0
1000342c:	693b      	ldr	r3, [r7, #16]
1000342e:	005b      	lsls	r3, r3, #1
10003430:	687a      	ldr	r2, [r7, #4]
10003432:	18d4      	adds	r4, r2, r3
10003434:	f7fd fa62 	bl	100008fc <__aeabi_d2iz>
10003438:	4603      	mov	r3, r0
1000343a:	b21b      	sxth	r3, r3
1000343c:	8023      	strh	r3, [r4, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
1000343e:	693b      	ldr	r3, [r7, #16]
10003440:	3301      	adds	r3, #1
10003442:	613b      	str	r3, [r7, #16]
10003444:	4b05      	ldr	r3, [pc, #20]	; (1000345c <v_QuantizeIntputs_int+0x314>)
10003446:	889b      	ldrh	r3, [r3, #4]
10003448:	b29b      	uxth	r3, r3
1000344a:	461a      	mov	r2, r3
1000344c:	693b      	ldr	r3, [r7, #16]
1000344e:	4293      	cmp	r3, r2
10003450:	f4ff af64 	bcc.w	1000331c <v_QuantizeIntputs_int+0x1d4>
			}
		}
		break;
10003454:	e161      	b.n	1000371a <v_QuantizeIntputs_int+0x5d2>

	case 8:
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
10003456:	2300      	movs	r3, #0
10003458:	60fb      	str	r3, [r7, #12]
1000345a:	e096      	b.n	1000358a <v_QuantizeIntputs_int+0x442>
1000345c:	20000200 	.word	0x20000200
10003460:	20000278 	.word	0x20000278
10003464:	20000254 	.word	0x20000254
		{

			// Saturation Protection
			if (input[i] >= xDistribution.func_max[0])
10003468:	68fb      	ldr	r3, [r7, #12]
1000346a:	009b      	lsls	r3, r3, #2
1000346c:	683a      	ldr	r2, [r7, #0]
1000346e:	4413      	add	r3, r2
10003470:	ed93 7a00 	vldr	s14, [r3]
10003474:	4bab      	ldr	r3, [pc, #684]	; (10003724 <v_QuantizeIntputs_int+0x5dc>)
10003476:	695b      	ldr	r3, [r3, #20]
10003478:	edd3 7a00 	vldr	s15, [r3]
1000347c:	eeb4 7ae7 	vcmpe.f32	s14, s15
10003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10003484:	db24      	blt.n	100034d0 <v_QuantizeIntputs_int+0x388>
			{
				((int8_t*)quant_input)[i] = (int8_t)round((xDistribution.func_max[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
10003486:	4ba7      	ldr	r3, [pc, #668]	; (10003724 <v_QuantizeIntputs_int+0x5dc>)
10003488:	695b      	ldr	r3, [r3, #20]
1000348a:	edd3 6a00 	vldr	s13, [r3]
1000348e:	4ba6      	ldr	r3, [pc, #664]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
10003490:	681b      	ldr	r3, [r3, #0]
10003492:	edd3 7a00 	vldr	s15, [r3]
10003496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
1000349a:	4ba3      	ldr	r3, [pc, #652]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
1000349c:	69db      	ldr	r3, [r3, #28]
1000349e:	edd3 7a00 	vldr	s15, [r3]
100034a2:	ee77 7a27 	vadd.f32	s15, s14, s15
100034a6:	ee17 0a90 	vmov	r0, s15
100034aa:	f7fc ff35 	bl	10000318 <__aeabi_f2d>
100034ae:	4602      	mov	r2, r0
100034b0:	460b      	mov	r3, r1
100034b2:	ec43 2b10 	vmov	d0, r2, r3
100034b6:	f007 fffb 	bl	1000b4b0 <round>
100034ba:	ec51 0b10 	vmov	r0, r1, d0
100034be:	687a      	ldr	r2, [r7, #4]
100034c0:	68fb      	ldr	r3, [r7, #12]
100034c2:	18d4      	adds	r4, r2, r3
100034c4:	f7fd fa1a 	bl	100008fc <__aeabi_d2iz>
100034c8:	4603      	mov	r3, r0
100034ca:	b25b      	sxtb	r3, r3
100034cc:	7023      	strb	r3, [r4, #0]
100034ce:	e059      	b.n	10003584 <v_QuantizeIntputs_int+0x43c>
			}
			else if (input[i] <= xDistribution.func_min[0])
100034d0:	68fb      	ldr	r3, [r7, #12]
100034d2:	009b      	lsls	r3, r3, #2
100034d4:	683a      	ldr	r2, [r7, #0]
100034d6:	4413      	add	r3, r2
100034d8:	ed93 7a00 	vldr	s14, [r3]
100034dc:	4b91      	ldr	r3, [pc, #580]	; (10003724 <v_QuantizeIntputs_int+0x5dc>)
100034de:	691b      	ldr	r3, [r3, #16]
100034e0:	edd3 7a00 	vldr	s15, [r3]
100034e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
100034e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100034ec:	d824      	bhi.n	10003538 <v_QuantizeIntputs_int+0x3f0>
			{
				((int8_t*)quant_input)[i] = (int8_t)round((xDistribution.func_min[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
100034ee:	4b8d      	ldr	r3, [pc, #564]	; (10003724 <v_QuantizeIntputs_int+0x5dc>)
100034f0:	691b      	ldr	r3, [r3, #16]
100034f2:	edd3 6a00 	vldr	s13, [r3]
100034f6:	4b8c      	ldr	r3, [pc, #560]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
100034f8:	681b      	ldr	r3, [r3, #0]
100034fa:	edd3 7a00 	vldr	s15, [r3]
100034fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
10003502:	4b89      	ldr	r3, [pc, #548]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
10003504:	69db      	ldr	r3, [r3, #28]
10003506:	edd3 7a00 	vldr	s15, [r3]
1000350a:	ee77 7a27 	vadd.f32	s15, s14, s15
1000350e:	ee17 0a90 	vmov	r0, s15
10003512:	f7fc ff01 	bl	10000318 <__aeabi_f2d>
10003516:	4602      	mov	r2, r0
10003518:	460b      	mov	r3, r1
1000351a:	ec43 2b10 	vmov	d0, r2, r3
1000351e:	f007 ffc7 	bl	1000b4b0 <round>
10003522:	ec51 0b10 	vmov	r0, r1, d0
10003526:	687a      	ldr	r2, [r7, #4]
10003528:	68fb      	ldr	r3, [r7, #12]
1000352a:	18d4      	adds	r4, r2, r3
1000352c:	f7fd f9e6 	bl	100008fc <__aeabi_d2iz>
10003530:	4603      	mov	r3, r0
10003532:	b25b      	sxtb	r3, r3
10003534:	7023      	strb	r3, [r4, #0]
10003536:	e025      	b.n	10003584 <v_QuantizeIntputs_int+0x43c>
			}
			else
			{
				((int8_t*)quant_input)[i] = (int8_t)round((input[i] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]);
10003538:	68fb      	ldr	r3, [r7, #12]
1000353a:	009b      	lsls	r3, r3, #2
1000353c:	683a      	ldr	r2, [r7, #0]
1000353e:	4413      	add	r3, r2
10003540:	edd3 6a00 	vldr	s13, [r3]
10003544:	4b78      	ldr	r3, [pc, #480]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
10003546:	681b      	ldr	r3, [r3, #0]
10003548:	edd3 7a00 	vldr	s15, [r3]
1000354c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
10003550:	4b75      	ldr	r3, [pc, #468]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
10003552:	69db      	ldr	r3, [r3, #28]
10003554:	edd3 7a00 	vldr	s15, [r3]
10003558:	ee77 7a27 	vadd.f32	s15, s14, s15
1000355c:	ee17 0a90 	vmov	r0, s15
10003560:	f7fc feda 	bl	10000318 <__aeabi_f2d>
10003564:	4602      	mov	r2, r0
10003566:	460b      	mov	r3, r1
10003568:	ec43 2b10 	vmov	d0, r2, r3
1000356c:	f007 ffa0 	bl	1000b4b0 <round>
10003570:	ec51 0b10 	vmov	r0, r1, d0
10003574:	687a      	ldr	r2, [r7, #4]
10003576:	68fb      	ldr	r3, [r7, #12]
10003578:	18d4      	adds	r4, r2, r3
1000357a:	f7fd f9bf 	bl	100008fc <__aeabi_d2iz>
1000357e:	4603      	mov	r3, r0
10003580:	b25b      	sxtb	r3, r3
10003582:	7023      	strb	r3, [r4, #0]
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
10003584:	68fb      	ldr	r3, [r7, #12]
10003586:	3301      	adds	r3, #1
10003588:	60fb      	str	r3, [r7, #12]
1000358a:	4b68      	ldr	r3, [pc, #416]	; (1000372c <v_QuantizeIntputs_int+0x5e4>)
1000358c:	889b      	ldrh	r3, [r3, #4]
1000358e:	b29b      	uxth	r3, r3
10003590:	461a      	mov	r2, r3
10003592:	68fb      	ldr	r3, [r7, #12]
10003594:	4293      	cmp	r3, r2
10003596:	f4ff af67 	bcc.w	10003468 <v_QuantizeIntputs_int+0x320>
			}
		}
		break;
1000359a:	e0be      	b.n	1000371a <v_QuantizeIntputs_int+0x5d2>

	case 4:
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
1000359c:	2300      	movs	r3, #0
1000359e:	60bb      	str	r3, [r7, #8]
100035a0:	e0b1      	b.n	10003706 <v_QuantizeIntputs_int+0x5be>
		{
			// Saturation Protection
			if (input[i] >= xDistribution.func_max[0])
100035a2:	68bb      	ldr	r3, [r7, #8]
100035a4:	009b      	lsls	r3, r3, #2
100035a6:	683a      	ldr	r2, [r7, #0]
100035a8:	4413      	add	r3, r2
100035aa:	ed93 7a00 	vldr	s14, [r3]
100035ae:	4b5d      	ldr	r3, [pc, #372]	; (10003724 <v_QuantizeIntputs_int+0x5dc>)
100035b0:	695b      	ldr	r3, [r3, #20]
100035b2:	edd3 7a00 	vldr	s15, [r3]
100035b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
100035ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100035be:	db2f      	blt.n	10003620 <v_QuantizeIntputs_int+0x4d8>
			{
				v_MountByte_4bits(&((int8_t*)quant_input)[i / 2], (int8_t)round((xDistribution.func_max[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]), i % 2);
100035c0:	68bb      	ldr	r3, [r7, #8]
100035c2:	085b      	lsrs	r3, r3, #1
100035c4:	687a      	ldr	r2, [r7, #4]
100035c6:	18d4      	adds	r4, r2, r3
100035c8:	4b56      	ldr	r3, [pc, #344]	; (10003724 <v_QuantizeIntputs_int+0x5dc>)
100035ca:	695b      	ldr	r3, [r3, #20]
100035cc:	edd3 6a00 	vldr	s13, [r3]
100035d0:	4b55      	ldr	r3, [pc, #340]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
100035d2:	681b      	ldr	r3, [r3, #0]
100035d4:	edd3 7a00 	vldr	s15, [r3]
100035d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
100035dc:	4b52      	ldr	r3, [pc, #328]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
100035de:	69db      	ldr	r3, [r3, #28]
100035e0:	edd3 7a00 	vldr	s15, [r3]
100035e4:	ee77 7a27 	vadd.f32	s15, s14, s15
100035e8:	ee17 0a90 	vmov	r0, s15
100035ec:	f7fc fe94 	bl	10000318 <__aeabi_f2d>
100035f0:	4602      	mov	r2, r0
100035f2:	460b      	mov	r3, r1
100035f4:	ec43 2b10 	vmov	d0, r2, r3
100035f8:	f007 ff5a 	bl	1000b4b0 <round>
100035fc:	ec53 2b10 	vmov	r2, r3, d0
10003600:	4610      	mov	r0, r2
10003602:	4619      	mov	r1, r3
10003604:	f7fd f97a 	bl	100008fc <__aeabi_d2iz>
10003608:	4603      	mov	r3, r0
1000360a:	b259      	sxtb	r1, r3
1000360c:	68bb      	ldr	r3, [r7, #8]
1000360e:	b25b      	sxtb	r3, r3
10003610:	f003 0301 	and.w	r3, r3, #1
10003614:	b25b      	sxtb	r3, r3
10003616:	461a      	mov	r2, r3
10003618:	4620      	mov	r0, r4
1000361a:	f000 fac5 	bl	10003ba8 <v_MountByte_4bits>
1000361e:	e06f      	b.n	10003700 <v_QuantizeIntputs_int+0x5b8>
			}
			else if (input[i] <= xDistribution.func_min[0])
10003620:	68bb      	ldr	r3, [r7, #8]
10003622:	009b      	lsls	r3, r3, #2
10003624:	683a      	ldr	r2, [r7, #0]
10003626:	4413      	add	r3, r2
10003628:	ed93 7a00 	vldr	s14, [r3]
1000362c:	4b3d      	ldr	r3, [pc, #244]	; (10003724 <v_QuantizeIntputs_int+0x5dc>)
1000362e:	691b      	ldr	r3, [r3, #16]
10003630:	edd3 7a00 	vldr	s15, [r3]
10003634:	eeb4 7ae7 	vcmpe.f32	s14, s15
10003638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000363c:	d82f      	bhi.n	1000369e <v_QuantizeIntputs_int+0x556>
			{
				v_MountByte_4bits(&((int8_t*)quant_input)[i / 2], (int8_t)round((xDistribution.func_min[0] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]), i % 2);
1000363e:	68bb      	ldr	r3, [r7, #8]
10003640:	085b      	lsrs	r3, r3, #1
10003642:	687a      	ldr	r2, [r7, #4]
10003644:	18d4      	adds	r4, r2, r3
10003646:	4b37      	ldr	r3, [pc, #220]	; (10003724 <v_QuantizeIntputs_int+0x5dc>)
10003648:	691b      	ldr	r3, [r3, #16]
1000364a:	edd3 6a00 	vldr	s13, [r3]
1000364e:	4b36      	ldr	r3, [pc, #216]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
10003650:	681b      	ldr	r3, [r3, #0]
10003652:	edd3 7a00 	vldr	s15, [r3]
10003656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
1000365a:	4b33      	ldr	r3, [pc, #204]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
1000365c:	69db      	ldr	r3, [r3, #28]
1000365e:	edd3 7a00 	vldr	s15, [r3]
10003662:	ee77 7a27 	vadd.f32	s15, s14, s15
10003666:	ee17 0a90 	vmov	r0, s15
1000366a:	f7fc fe55 	bl	10000318 <__aeabi_f2d>
1000366e:	4602      	mov	r2, r0
10003670:	460b      	mov	r3, r1
10003672:	ec43 2b10 	vmov	d0, r2, r3
10003676:	f007 ff1b 	bl	1000b4b0 <round>
1000367a:	ec53 2b10 	vmov	r2, r3, d0
1000367e:	4610      	mov	r0, r2
10003680:	4619      	mov	r1, r3
10003682:	f7fd f93b 	bl	100008fc <__aeabi_d2iz>
10003686:	4603      	mov	r3, r0
10003688:	b259      	sxtb	r1, r3
1000368a:	68bb      	ldr	r3, [r7, #8]
1000368c:	b25b      	sxtb	r3, r3
1000368e:	f003 0301 	and.w	r3, r3, #1
10003692:	b25b      	sxtb	r3, r3
10003694:	461a      	mov	r2, r3
10003696:	4620      	mov	r0, r4
10003698:	f000 fa86 	bl	10003ba8 <v_MountByte_4bits>
1000369c:	e030      	b.n	10003700 <v_QuantizeIntputs_int+0x5b8>
			}
			else
			{
				v_MountByte_4bits(&((int8_t*)quant_input)[i / 2], (int8_t)round((input[i] / xQuantizedVal.Sy[0]) + xQuantizedVal.Zy[0]), i % 2);
1000369e:	68bb      	ldr	r3, [r7, #8]
100036a0:	085b      	lsrs	r3, r3, #1
100036a2:	687a      	ldr	r2, [r7, #4]
100036a4:	18d4      	adds	r4, r2, r3
100036a6:	68bb      	ldr	r3, [r7, #8]
100036a8:	009b      	lsls	r3, r3, #2
100036aa:	683a      	ldr	r2, [r7, #0]
100036ac:	4413      	add	r3, r2
100036ae:	edd3 6a00 	vldr	s13, [r3]
100036b2:	4b1d      	ldr	r3, [pc, #116]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
100036b4:	681b      	ldr	r3, [r3, #0]
100036b6:	edd3 7a00 	vldr	s15, [r3]
100036ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
100036be:	4b1a      	ldr	r3, [pc, #104]	; (10003728 <v_QuantizeIntputs_int+0x5e0>)
100036c0:	69db      	ldr	r3, [r3, #28]
100036c2:	edd3 7a00 	vldr	s15, [r3]
100036c6:	ee77 7a27 	vadd.f32	s15, s14, s15
100036ca:	ee17 0a90 	vmov	r0, s15
100036ce:	f7fc fe23 	bl	10000318 <__aeabi_f2d>
100036d2:	4602      	mov	r2, r0
100036d4:	460b      	mov	r3, r1
100036d6:	ec43 2b10 	vmov	d0, r2, r3
100036da:	f007 fee9 	bl	1000b4b0 <round>
100036de:	ec53 2b10 	vmov	r2, r3, d0
100036e2:	4610      	mov	r0, r2
100036e4:	4619      	mov	r1, r3
100036e6:	f7fd f909 	bl	100008fc <__aeabi_d2iz>
100036ea:	4603      	mov	r3, r0
100036ec:	b259      	sxtb	r1, r3
100036ee:	68bb      	ldr	r3, [r7, #8]
100036f0:	b25b      	sxtb	r3, r3
100036f2:	f003 0301 	and.w	r3, r3, #1
100036f6:	b25b      	sxtb	r3, r3
100036f8:	461a      	mov	r2, r3
100036fa:	4620      	mov	r0, r4
100036fc:	f000 fa54 	bl	10003ba8 <v_MountByte_4bits>
		for (size_t i = 0; i < xNetParam.NonLayer[0]; i++)
10003700:	68bb      	ldr	r3, [r7, #8]
10003702:	3301      	adds	r3, #1
10003704:	60bb      	str	r3, [r7, #8]
10003706:	4b09      	ldr	r3, [pc, #36]	; (1000372c <v_QuantizeIntputs_int+0x5e4>)
10003708:	889b      	ldrh	r3, [r3, #4]
1000370a:	b29b      	uxth	r3, r3
1000370c:	461a      	mov	r2, r3
1000370e:	68bb      	ldr	r3, [r7, #8]
10003710:	4293      	cmp	r3, r2
10003712:	f4ff af46 	bcc.w	100035a2 <v_QuantizeIntputs_int+0x45a>
			}
		}
		break;
10003716:	e000      	b.n	1000371a <v_QuantizeIntputs_int+0x5d2>

	default:
		break;
10003718:	bf00      	nop
	}
}
1000371a:	bf00      	nop
1000371c:	371c      	adds	r7, #28
1000371e:	46bd      	mov	sp, r7
10003720:	bd90      	pop	{r4, r7, pc}
10003722:	bf00      	nop
10003724:	20000278 	.word	0x20000278
10003728:	20000254 	.word	0x20000254
1000372c:	20000200 	.word	0x20000200

10003730 <v_ProcessForwardPropNN_int>:
//	in		result, xnetparam, input, wbptr			(result, network hyperparameters struct,float pointer, float pointer)
//	out		none
//	obs.:	to adapt the function, change float to int....
//**************************************************
void v_ProcessForwardPropNN_int(void* ZPtr, void* FuncPtr, void* input)
{
10003730:	b580      	push	{r7, lr}
10003732:	b088      	sub	sp, #32
10003734:	af00      	add	r7, sp, #0
10003736:	60f8      	str	r0, [r7, #12]
10003738:	60b9      	str	r1, [r7, #8]
1000373a:	607a      	str	r2, [r7, #4]
	uint16_t	i;
	uint32_t	neurons = 0;
1000373c:	2300      	movs	r3, #0
1000373e:	61bb      	str	r3, [r7, #24]
	uint32_t	aux_index = 0;
10003740:	2300      	movs	r3, #0
10003742:	617b      	str	r3, [r7, #20]

	switch (xNetParam.xVarPrecision.precision)
10003744:	4b87      	ldr	r3, [pc, #540]	; (10003964 <v_ProcessForwardPropNN_int+0x234>)
10003746:	785b      	ldrb	r3, [r3, #1]
10003748:	b2db      	uxtb	r3, r3
1000374a:	3b04      	subs	r3, #4
1000374c:	2b1c      	cmp	r3, #28
1000374e:	f200 81c2 	bhi.w	10003ad6 <v_ProcessForwardPropNN_int+0x3a6>
10003752:	a201      	add	r2, pc, #4	; (adr r2, 10003758 <v_ProcessForwardPropNN_int+0x28>)
10003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10003758:	10003a13 	.word	0x10003a13
1000375c:	10003ad7 	.word	0x10003ad7
10003760:	10003ad7 	.word	0x10003ad7
10003764:	10003ad7 	.word	0x10003ad7
10003768:	10003955 	.word	0x10003955
1000376c:	10003ad7 	.word	0x10003ad7
10003770:	10003ad7 	.word	0x10003ad7
10003774:	10003ad7 	.word	0x10003ad7
10003778:	10003ad7 	.word	0x10003ad7
1000377c:	10003ad7 	.word	0x10003ad7
10003780:	10003ad7 	.word	0x10003ad7
10003784:	10003ad7 	.word	0x10003ad7
10003788:	10003891 	.word	0x10003891
1000378c:	10003ad7 	.word	0x10003ad7
10003790:	10003ad7 	.word	0x10003ad7
10003794:	10003ad7 	.word	0x10003ad7
10003798:	10003ad7 	.word	0x10003ad7
1000379c:	10003ad7 	.word	0x10003ad7
100037a0:	10003ad7 	.word	0x10003ad7
100037a4:	10003ad7 	.word	0x10003ad7
100037a8:	10003ad7 	.word	0x10003ad7
100037ac:	10003ad7 	.word	0x10003ad7
100037b0:	10003ad7 	.word	0x10003ad7
100037b4:	10003ad7 	.word	0x10003ad7
100037b8:	10003ad7 	.word	0x10003ad7
100037bc:	10003ad7 	.word	0x10003ad7
100037c0:	10003ad7 	.word	0x10003ad7
100037c4:	10003ad7 	.word	0x10003ad7
100037c8:	100037cd 	.word	0x100037cd
	{
	case 32:
		v_QuantizeIntputs_int(&((int32_t*)FuncPtr)[0], (float*)input);
100037cc:	6879      	ldr	r1, [r7, #4]
100037ce:	68b8      	ldr	r0, [r7, #8]
100037d0:	f7ff fcba 	bl	10003148 <v_QuantizeIntputs_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
100037d4:	2301      	movs	r3, #1
100037d6:	83fb      	strh	r3, [r7, #30]
100037d8:	e029      	b.n	1000382e <v_ProcessForwardPropNN_int+0xfe>
		{
			aux_index = neurons;
100037da:	69bb      	ldr	r3, [r7, #24]
100037dc:	617b      	str	r3, [r7, #20]
			neurons += xNetParam.NonLayer[i - 1];
100037de:	8bfb      	ldrh	r3, [r7, #30]
100037e0:	3b01      	subs	r3, #1
100037e2:	4a60      	ldr	r2, [pc, #384]	; (10003964 <v_ProcessForwardPropNN_int+0x234>)
100037e4:	005b      	lsls	r3, r3, #1
100037e6:	4413      	add	r3, r2
100037e8:	889b      	ldrh	r3, [r3, #4]
100037ea:	b29b      	uxth	r3, r3
100037ec:	461a      	mov	r2, r3
100037ee:	69bb      	ldr	r3, [r7, #24]
100037f0:	4413      	add	r3, r2
100037f2:	61bb      	str	r3, [r7, #24]
			v_MacForwardProp_int(&((int32_t*)ZPtr)[neurons], i, &((int32_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);		//	calculate [z = w*f + b]
100037f4:	69bb      	ldr	r3, [r7, #24]
100037f6:	009b      	lsls	r3, r3, #2
100037f8:	68fa      	ldr	r2, [r7, #12]
100037fa:	18d0      	adds	r0, r2, r3
100037fc:	8bfb      	ldrh	r3, [r7, #30]
100037fe:	b2d9      	uxtb	r1, r3
10003800:	697b      	ldr	r3, [r7, #20]
10003802:	009b      	lsls	r3, r3, #2
10003804:	68ba      	ldr	r2, [r7, #8]
10003806:	441a      	add	r2, r3
10003808:	4b57      	ldr	r3, [pc, #348]	; (10003968 <v_ProcessForwardPropNN_int+0x238>)
1000380a:	6a1b      	ldr	r3, [r3, #32]
1000380c:	f7fe fa64 	bl	10001cd8 <v_MacForwardProp_int>
			v_ReLUActiv_int(&((int32_t*)ZPtr)[neurons], i, &((int32_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
10003810:	69bb      	ldr	r3, [r7, #24]
10003812:	009b      	lsls	r3, r3, #2
10003814:	68fa      	ldr	r2, [r7, #12]
10003816:	18d0      	adds	r0, r2, r3
10003818:	69bb      	ldr	r3, [r7, #24]
1000381a:	009b      	lsls	r3, r3, #2
1000381c:	68ba      	ldr	r2, [r7, #8]
1000381e:	441a      	add	r2, r3
10003820:	8bfb      	ldrh	r3, [r7, #30]
10003822:	4619      	mov	r1, r3
10003824:	f7fe ffda 	bl	100027dc <v_ReLUActiv_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
10003828:	8bfb      	ldrh	r3, [r7, #30]
1000382a:	3301      	adds	r3, #1
1000382c:	83fb      	strh	r3, [r7, #30]
1000382e:	8bfa      	ldrh	r2, [r7, #30]
10003830:	4b4c      	ldr	r3, [pc, #304]	; (10003964 <v_ProcessForwardPropNN_int+0x234>)
10003832:	885b      	ldrh	r3, [r3, #2]
10003834:	b29b      	uxth	r3, r3
10003836:	3b01      	subs	r3, #1
10003838:	429a      	cmp	r2, r3
1000383a:	dbce      	blt.n	100037da <v_ProcessForwardPropNN_int+0xaa>
		}
		aux_index = neurons;
1000383c:	69bb      	ldr	r3, [r7, #24]
1000383e:	617b      	str	r3, [r7, #20]
		neurons += xNetParam.NonLayer[xNetParam.Layers - 2];
10003840:	4b48      	ldr	r3, [pc, #288]	; (10003964 <v_ProcessForwardPropNN_int+0x234>)
10003842:	885b      	ldrh	r3, [r3, #2]
10003844:	b29b      	uxth	r3, r3
10003846:	3b02      	subs	r3, #2
10003848:	4a46      	ldr	r2, [pc, #280]	; (10003964 <v_ProcessForwardPropNN_int+0x234>)
1000384a:	005b      	lsls	r3, r3, #1
1000384c:	4413      	add	r3, r2
1000384e:	889b      	ldrh	r3, [r3, #4]
10003850:	b29b      	uxth	r3, r3
10003852:	461a      	mov	r2, r3
10003854:	69bb      	ldr	r3, [r7, #24]
10003856:	4413      	add	r3, r2
10003858:	61bb      	str	r3, [r7, #24]
		v_MacForwardProp_int(&((int32_t*)ZPtr)[neurons], i, &((int32_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);			//	calculate [z = w*f + b]
1000385a:	69bb      	ldr	r3, [r7, #24]
1000385c:	009b      	lsls	r3, r3, #2
1000385e:	68fa      	ldr	r2, [r7, #12]
10003860:	18d0      	adds	r0, r2, r3
10003862:	8bfb      	ldrh	r3, [r7, #30]
10003864:	b2d9      	uxtb	r1, r3
10003866:	697b      	ldr	r3, [r7, #20]
10003868:	009b      	lsls	r3, r3, #2
1000386a:	68ba      	ldr	r2, [r7, #8]
1000386c:	441a      	add	r2, r3
1000386e:	4b3e      	ldr	r3, [pc, #248]	; (10003968 <v_ProcessForwardPropNN_int+0x238>)
10003870:	6a1b      	ldr	r3, [r3, #32]
10003872:	f7fe fa31 	bl	10001cd8 <v_MacForwardProp_int>
		v_LinearActiv_int(&((int32_t*)ZPtr)[neurons], i, &((int32_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
10003876:	69bb      	ldr	r3, [r7, #24]
10003878:	009b      	lsls	r3, r3, #2
1000387a:	68fa      	ldr	r2, [r7, #12]
1000387c:	18d0      	adds	r0, r2, r3
1000387e:	69bb      	ldr	r3, [r7, #24]
10003880:	009b      	lsls	r3, r3, #2
10003882:	68ba      	ldr	r2, [r7, #8]
10003884:	441a      	add	r2, r3
10003886:	8bfb      	ldrh	r3, [r7, #30]
10003888:	4619      	mov	r1, r3
1000388a:	f7ff fa85 	bl	10002d98 <v_LinearActiv_int>
		break;
1000388e:	e123      	b.n	10003ad8 <v_ProcessForwardPropNN_int+0x3a8>

	case 16:
		v_QuantizeIntputs_int(&((int16_t*)FuncPtr)[0], (float*)input);
10003890:	6879      	ldr	r1, [r7, #4]
10003892:	68b8      	ldr	r0, [r7, #8]
10003894:	f7ff fc58 	bl	10003148 <v_QuantizeIntputs_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
10003898:	2301      	movs	r3, #1
1000389a:	83fb      	strh	r3, [r7, #30]
1000389c:	e029      	b.n	100038f2 <v_ProcessForwardPropNN_int+0x1c2>
		{
			aux_index = neurons;
1000389e:	69bb      	ldr	r3, [r7, #24]
100038a0:	617b      	str	r3, [r7, #20]
			neurons += xNetParam.NonLayer[i - 1];
100038a2:	8bfb      	ldrh	r3, [r7, #30]
100038a4:	3b01      	subs	r3, #1
100038a6:	4a2f      	ldr	r2, [pc, #188]	; (10003964 <v_ProcessForwardPropNN_int+0x234>)
100038a8:	005b      	lsls	r3, r3, #1
100038aa:	4413      	add	r3, r2
100038ac:	889b      	ldrh	r3, [r3, #4]
100038ae:	b29b      	uxth	r3, r3
100038b0:	461a      	mov	r2, r3
100038b2:	69bb      	ldr	r3, [r7, #24]
100038b4:	4413      	add	r3, r2
100038b6:	61bb      	str	r3, [r7, #24]
			v_MacForwardProp_int(&((int16_t*)ZPtr)[neurons], i, &((int16_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);		//	calculate [z = w*f + b]
100038b8:	69bb      	ldr	r3, [r7, #24]
100038ba:	005b      	lsls	r3, r3, #1
100038bc:	68fa      	ldr	r2, [r7, #12]
100038be:	18d0      	adds	r0, r2, r3
100038c0:	8bfb      	ldrh	r3, [r7, #30]
100038c2:	b2d9      	uxtb	r1, r3
100038c4:	697b      	ldr	r3, [r7, #20]
100038c6:	005b      	lsls	r3, r3, #1
100038c8:	68ba      	ldr	r2, [r7, #8]
100038ca:	441a      	add	r2, r3
100038cc:	4b26      	ldr	r3, [pc, #152]	; (10003968 <v_ProcessForwardPropNN_int+0x238>)
100038ce:	6a1b      	ldr	r3, [r3, #32]
100038d0:	f7fe fa02 	bl	10001cd8 <v_MacForwardProp_int>
			v_ReLUActiv_int(&((int16_t*)ZPtr)[neurons], i, &((int16_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
100038d4:	69bb      	ldr	r3, [r7, #24]
100038d6:	005b      	lsls	r3, r3, #1
100038d8:	68fa      	ldr	r2, [r7, #12]
100038da:	18d0      	adds	r0, r2, r3
100038dc:	69bb      	ldr	r3, [r7, #24]
100038de:	005b      	lsls	r3, r3, #1
100038e0:	68ba      	ldr	r2, [r7, #8]
100038e2:	441a      	add	r2, r3
100038e4:	8bfb      	ldrh	r3, [r7, #30]
100038e6:	4619      	mov	r1, r3
100038e8:	f7fe ff78 	bl	100027dc <v_ReLUActiv_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
100038ec:	8bfb      	ldrh	r3, [r7, #30]
100038ee:	3301      	adds	r3, #1
100038f0:	83fb      	strh	r3, [r7, #30]
100038f2:	8bfa      	ldrh	r2, [r7, #30]
100038f4:	4b1b      	ldr	r3, [pc, #108]	; (10003964 <v_ProcessForwardPropNN_int+0x234>)
100038f6:	885b      	ldrh	r3, [r3, #2]
100038f8:	b29b      	uxth	r3, r3
100038fa:	3b01      	subs	r3, #1
100038fc:	429a      	cmp	r2, r3
100038fe:	dbce      	blt.n	1000389e <v_ProcessForwardPropNN_int+0x16e>
		}
		aux_index = neurons;
10003900:	69bb      	ldr	r3, [r7, #24]
10003902:	617b      	str	r3, [r7, #20]
		neurons += xNetParam.NonLayer[xNetParam.Layers - 2];
10003904:	4b17      	ldr	r3, [pc, #92]	; (10003964 <v_ProcessForwardPropNN_int+0x234>)
10003906:	885b      	ldrh	r3, [r3, #2]
10003908:	b29b      	uxth	r3, r3
1000390a:	3b02      	subs	r3, #2
1000390c:	4a15      	ldr	r2, [pc, #84]	; (10003964 <v_ProcessForwardPropNN_int+0x234>)
1000390e:	005b      	lsls	r3, r3, #1
10003910:	4413      	add	r3, r2
10003912:	889b      	ldrh	r3, [r3, #4]
10003914:	b29b      	uxth	r3, r3
10003916:	461a      	mov	r2, r3
10003918:	69bb      	ldr	r3, [r7, #24]
1000391a:	4413      	add	r3, r2
1000391c:	61bb      	str	r3, [r7, #24]
		v_MacForwardProp_int(&((int16_t*)ZPtr)[neurons], i, &((int16_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);			//	calculate [z = w*f + b]
1000391e:	69bb      	ldr	r3, [r7, #24]
10003920:	005b      	lsls	r3, r3, #1
10003922:	68fa      	ldr	r2, [r7, #12]
10003924:	18d0      	adds	r0, r2, r3
10003926:	8bfb      	ldrh	r3, [r7, #30]
10003928:	b2d9      	uxtb	r1, r3
1000392a:	697b      	ldr	r3, [r7, #20]
1000392c:	005b      	lsls	r3, r3, #1
1000392e:	68ba      	ldr	r2, [r7, #8]
10003930:	441a      	add	r2, r3
10003932:	4b0d      	ldr	r3, [pc, #52]	; (10003968 <v_ProcessForwardPropNN_int+0x238>)
10003934:	6a1b      	ldr	r3, [r3, #32]
10003936:	f7fe f9cf 	bl	10001cd8 <v_MacForwardProp_int>
		v_LinearActiv_int(&((int16_t*)ZPtr)[neurons], i, &((int16_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
1000393a:	69bb      	ldr	r3, [r7, #24]
1000393c:	005b      	lsls	r3, r3, #1
1000393e:	68fa      	ldr	r2, [r7, #12]
10003940:	18d0      	adds	r0, r2, r3
10003942:	69bb      	ldr	r3, [r7, #24]
10003944:	005b      	lsls	r3, r3, #1
10003946:	68ba      	ldr	r2, [r7, #8]
10003948:	441a      	add	r2, r3
1000394a:	8bfb      	ldrh	r3, [r7, #30]
1000394c:	4619      	mov	r1, r3
1000394e:	f7ff fa23 	bl	10002d98 <v_LinearActiv_int>
		break;
10003952:	e0c1      	b.n	10003ad8 <v_ProcessForwardPropNN_int+0x3a8>

	case 8:
		v_QuantizeIntputs_int(&((int8_t*)FuncPtr)[0], (float*)input);
10003954:	6879      	ldr	r1, [r7, #4]
10003956:	68b8      	ldr	r0, [r7, #8]
10003958:	f7ff fbf6 	bl	10003148 <v_QuantizeIntputs_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
1000395c:	2301      	movs	r3, #1
1000395e:	83fb      	strh	r3, [r7, #30]
10003960:	e02a      	b.n	100039b8 <v_ProcessForwardPropNN_int+0x288>
10003962:	bf00      	nop
10003964:	20000200 	.word	0x20000200
10003968:	20000254 	.word	0x20000254
		{
			aux_index = neurons;
1000396c:	69bb      	ldr	r3, [r7, #24]
1000396e:	617b      	str	r3, [r7, #20]
			neurons += xNetParam.NonLayer[i - 1];
10003970:	8bfb      	ldrh	r3, [r7, #30]
10003972:	3b01      	subs	r3, #1
10003974:	4a5a      	ldr	r2, [pc, #360]	; (10003ae0 <v_ProcessForwardPropNN_int+0x3b0>)
10003976:	005b      	lsls	r3, r3, #1
10003978:	4413      	add	r3, r2
1000397a:	889b      	ldrh	r3, [r3, #4]
1000397c:	b29b      	uxth	r3, r3
1000397e:	461a      	mov	r2, r3
10003980:	69bb      	ldr	r3, [r7, #24]
10003982:	4413      	add	r3, r2
10003984:	61bb      	str	r3, [r7, #24]
			v_MacForwardProp_int(&((int8_t*)ZPtr)[neurons], i, &((int8_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);		//	calculate [z = w*f + b]
10003986:	68fa      	ldr	r2, [r7, #12]
10003988:	69bb      	ldr	r3, [r7, #24]
1000398a:	18d0      	adds	r0, r2, r3
1000398c:	8bfb      	ldrh	r3, [r7, #30]
1000398e:	b2d9      	uxtb	r1, r3
10003990:	68ba      	ldr	r2, [r7, #8]
10003992:	697b      	ldr	r3, [r7, #20]
10003994:	441a      	add	r2, r3
10003996:	4b53      	ldr	r3, [pc, #332]	; (10003ae4 <v_ProcessForwardPropNN_int+0x3b4>)
10003998:	6a1b      	ldr	r3, [r3, #32]
1000399a:	f7fe f99d 	bl	10001cd8 <v_MacForwardProp_int>
			v_ReLUActiv_int(&((int8_t*)ZPtr)[neurons], i, &((int8_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
1000399e:	68fa      	ldr	r2, [r7, #12]
100039a0:	69bb      	ldr	r3, [r7, #24]
100039a2:	18d0      	adds	r0, r2, r3
100039a4:	68ba      	ldr	r2, [r7, #8]
100039a6:	69bb      	ldr	r3, [r7, #24]
100039a8:	441a      	add	r2, r3
100039aa:	8bfb      	ldrh	r3, [r7, #30]
100039ac:	4619      	mov	r1, r3
100039ae:	f7fe ff15 	bl	100027dc <v_ReLUActiv_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
100039b2:	8bfb      	ldrh	r3, [r7, #30]
100039b4:	3301      	adds	r3, #1
100039b6:	83fb      	strh	r3, [r7, #30]
100039b8:	8bfa      	ldrh	r2, [r7, #30]
100039ba:	4b49      	ldr	r3, [pc, #292]	; (10003ae0 <v_ProcessForwardPropNN_int+0x3b0>)
100039bc:	885b      	ldrh	r3, [r3, #2]
100039be:	b29b      	uxth	r3, r3
100039c0:	3b01      	subs	r3, #1
100039c2:	429a      	cmp	r2, r3
100039c4:	dbd2      	blt.n	1000396c <v_ProcessForwardPropNN_int+0x23c>
		}
		aux_index = neurons;
100039c6:	69bb      	ldr	r3, [r7, #24]
100039c8:	617b      	str	r3, [r7, #20]
		neurons += xNetParam.NonLayer[xNetParam.Layers - 2];
100039ca:	4b45      	ldr	r3, [pc, #276]	; (10003ae0 <v_ProcessForwardPropNN_int+0x3b0>)
100039cc:	885b      	ldrh	r3, [r3, #2]
100039ce:	b29b      	uxth	r3, r3
100039d0:	3b02      	subs	r3, #2
100039d2:	4a43      	ldr	r2, [pc, #268]	; (10003ae0 <v_ProcessForwardPropNN_int+0x3b0>)
100039d4:	005b      	lsls	r3, r3, #1
100039d6:	4413      	add	r3, r2
100039d8:	889b      	ldrh	r3, [r3, #4]
100039da:	b29b      	uxth	r3, r3
100039dc:	461a      	mov	r2, r3
100039de:	69bb      	ldr	r3, [r7, #24]
100039e0:	4413      	add	r3, r2
100039e2:	61bb      	str	r3, [r7, #24]
		v_MacForwardProp_int(&((int8_t*)ZPtr)[neurons], i, &((int8_t*)FuncPtr)[aux_index], xQuantizedVal.WBPtr);			//	calculate [z = w*f + b]
100039e4:	68fa      	ldr	r2, [r7, #12]
100039e6:	69bb      	ldr	r3, [r7, #24]
100039e8:	18d0      	adds	r0, r2, r3
100039ea:	8bfb      	ldrh	r3, [r7, #30]
100039ec:	b2d9      	uxtb	r1, r3
100039ee:	68ba      	ldr	r2, [r7, #8]
100039f0:	697b      	ldr	r3, [r7, #20]
100039f2:	441a      	add	r2, r3
100039f4:	4b3b      	ldr	r3, [pc, #236]	; (10003ae4 <v_ProcessForwardPropNN_int+0x3b4>)
100039f6:	6a1b      	ldr	r3, [r3, #32]
100039f8:	f7fe f96e 	bl	10001cd8 <v_MacForwardProp_int>
		v_LinearActiv_int(&((int8_t*)ZPtr)[neurons], i, &((int8_t*)FuncPtr)[neurons]);									//	calculate [f = activ(z)]
100039fc:	68fa      	ldr	r2, [r7, #12]
100039fe:	69bb      	ldr	r3, [r7, #24]
10003a00:	18d0      	adds	r0, r2, r3
10003a02:	68ba      	ldr	r2, [r7, #8]
10003a04:	69bb      	ldr	r3, [r7, #24]
10003a06:	441a      	add	r2, r3
10003a08:	8bfb      	ldrh	r3, [r7, #30]
10003a0a:	4619      	mov	r1, r3
10003a0c:	f7ff f9c4 	bl	10002d98 <v_LinearActiv_int>

		break;
10003a10:	e062      	b.n	10003ad8 <v_ProcessForwardPropNN_int+0x3a8>

	case 4:
		v_QuantizeIntputs_int(&((int8_t*)FuncPtr)[0], (float*)input);
10003a12:	6879      	ldr	r1, [r7, #4]
10003a14:	68b8      	ldr	r0, [r7, #8]
10003a16:	f7ff fb97 	bl	10003148 <v_QuantizeIntputs_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
10003a1a:	2301      	movs	r3, #1
10003a1c:	83fb      	strh	r3, [r7, #30]
10003a1e:	e029      	b.n	10003a74 <v_ProcessForwardPropNN_int+0x344>
		{
			aux_index = neurons;
10003a20:	69bb      	ldr	r3, [r7, #24]
10003a22:	617b      	str	r3, [r7, #20]
			neurons += xNetParam.NonLayer[i - 1];
10003a24:	8bfb      	ldrh	r3, [r7, #30]
10003a26:	3b01      	subs	r3, #1
10003a28:	4a2d      	ldr	r2, [pc, #180]	; (10003ae0 <v_ProcessForwardPropNN_int+0x3b0>)
10003a2a:	005b      	lsls	r3, r3, #1
10003a2c:	4413      	add	r3, r2
10003a2e:	889b      	ldrh	r3, [r3, #4]
10003a30:	b29b      	uxth	r3, r3
10003a32:	461a      	mov	r2, r3
10003a34:	69bb      	ldr	r3, [r7, #24]
10003a36:	4413      	add	r3, r2
10003a38:	61bb      	str	r3, [r7, #24]
			v_MacForwardProp_int(&((int8_t*)ZPtr)[neurons / 2], i, &((int8_t*)FuncPtr)[aux_index / 2], xQuantizedVal.WBPtr);		//	calculate [z = w*f + b]
10003a3a:	69bb      	ldr	r3, [r7, #24]
10003a3c:	085b      	lsrs	r3, r3, #1
10003a3e:	68fa      	ldr	r2, [r7, #12]
10003a40:	18d0      	adds	r0, r2, r3
10003a42:	8bfb      	ldrh	r3, [r7, #30]
10003a44:	b2d9      	uxtb	r1, r3
10003a46:	697b      	ldr	r3, [r7, #20]
10003a48:	085b      	lsrs	r3, r3, #1
10003a4a:	68ba      	ldr	r2, [r7, #8]
10003a4c:	441a      	add	r2, r3
10003a4e:	4b25      	ldr	r3, [pc, #148]	; (10003ae4 <v_ProcessForwardPropNN_int+0x3b4>)
10003a50:	6a1b      	ldr	r3, [r3, #32]
10003a52:	f7fe f941 	bl	10001cd8 <v_MacForwardProp_int>
			v_ReLUActiv_int(&((int8_t*)ZPtr)[neurons / 2], i, &((int8_t*)FuncPtr)[neurons / 2]);									//	calculate [f = activ(z)]
10003a56:	69bb      	ldr	r3, [r7, #24]
10003a58:	085b      	lsrs	r3, r3, #1
10003a5a:	68fa      	ldr	r2, [r7, #12]
10003a5c:	18d0      	adds	r0, r2, r3
10003a5e:	69bb      	ldr	r3, [r7, #24]
10003a60:	085b      	lsrs	r3, r3, #1
10003a62:	68ba      	ldr	r2, [r7, #8]
10003a64:	441a      	add	r2, r3
10003a66:	8bfb      	ldrh	r3, [r7, #30]
10003a68:	4619      	mov	r1, r3
10003a6a:	f7fe feb7 	bl	100027dc <v_ReLUActiv_int>
		for (i = 1; i < (xNetParam.Layers - 1); i++)
10003a6e:	8bfb      	ldrh	r3, [r7, #30]
10003a70:	3301      	adds	r3, #1
10003a72:	83fb      	strh	r3, [r7, #30]
10003a74:	8bfa      	ldrh	r2, [r7, #30]
10003a76:	4b1a      	ldr	r3, [pc, #104]	; (10003ae0 <v_ProcessForwardPropNN_int+0x3b0>)
10003a78:	885b      	ldrh	r3, [r3, #2]
10003a7a:	b29b      	uxth	r3, r3
10003a7c:	3b01      	subs	r3, #1
10003a7e:	429a      	cmp	r2, r3
10003a80:	dbce      	blt.n	10003a20 <v_ProcessForwardPropNN_int+0x2f0>
		}
		aux_index = neurons;
10003a82:	69bb      	ldr	r3, [r7, #24]
10003a84:	617b      	str	r3, [r7, #20]
		neurons += xNetParam.NonLayer[xNetParam.Layers - 2];
10003a86:	4b16      	ldr	r3, [pc, #88]	; (10003ae0 <v_ProcessForwardPropNN_int+0x3b0>)
10003a88:	885b      	ldrh	r3, [r3, #2]
10003a8a:	b29b      	uxth	r3, r3
10003a8c:	3b02      	subs	r3, #2
10003a8e:	4a14      	ldr	r2, [pc, #80]	; (10003ae0 <v_ProcessForwardPropNN_int+0x3b0>)
10003a90:	005b      	lsls	r3, r3, #1
10003a92:	4413      	add	r3, r2
10003a94:	889b      	ldrh	r3, [r3, #4]
10003a96:	b29b      	uxth	r3, r3
10003a98:	461a      	mov	r2, r3
10003a9a:	69bb      	ldr	r3, [r7, #24]
10003a9c:	4413      	add	r3, r2
10003a9e:	61bb      	str	r3, [r7, #24]
		v_MacForwardProp_int(&((int8_t*)ZPtr)[neurons / 2], i, &((int8_t*)FuncPtr)[aux_index / 2], xQuantizedVal.WBPtr);			//	calculate [z = w*f + b]
10003aa0:	69bb      	ldr	r3, [r7, #24]
10003aa2:	085b      	lsrs	r3, r3, #1
10003aa4:	68fa      	ldr	r2, [r7, #12]
10003aa6:	18d0      	adds	r0, r2, r3
10003aa8:	8bfb      	ldrh	r3, [r7, #30]
10003aaa:	b2d9      	uxtb	r1, r3
10003aac:	697b      	ldr	r3, [r7, #20]
10003aae:	085b      	lsrs	r3, r3, #1
10003ab0:	68ba      	ldr	r2, [r7, #8]
10003ab2:	441a      	add	r2, r3
10003ab4:	4b0b      	ldr	r3, [pc, #44]	; (10003ae4 <v_ProcessForwardPropNN_int+0x3b4>)
10003ab6:	6a1b      	ldr	r3, [r3, #32]
10003ab8:	f7fe f90e 	bl	10001cd8 <v_MacForwardProp_int>
		v_LinearActiv_int(&((int8_t*)ZPtr)[neurons / 2], i, &((int8_t*)FuncPtr)[neurons / 2]);									//	calculate [f = activ(z)]
10003abc:	69bb      	ldr	r3, [r7, #24]
10003abe:	085b      	lsrs	r3, r3, #1
10003ac0:	68fa      	ldr	r2, [r7, #12]
10003ac2:	18d0      	adds	r0, r2, r3
10003ac4:	69bb      	ldr	r3, [r7, #24]
10003ac6:	085b      	lsrs	r3, r3, #1
10003ac8:	68ba      	ldr	r2, [r7, #8]
10003aca:	441a      	add	r2, r3
10003acc:	8bfb      	ldrh	r3, [r7, #30]
10003ace:	4619      	mov	r1, r3
10003ad0:	f7ff f962 	bl	10002d98 <v_LinearActiv_int>

		break;
10003ad4:	e000      	b.n	10003ad8 <v_ProcessForwardPropNN_int+0x3a8>

	default:
		break;
10003ad6:	bf00      	nop
	}
}
10003ad8:	bf00      	nop
10003ada:	3720      	adds	r7, #32
10003adc:	46bd      	mov	sp, r7
10003ade:	bd80      	pop	{r7, pc}
10003ae0:	20000200 	.word	0x20000200
10003ae4:	20000254 	.word	0x20000254

10003ae8 <u32_GetIndex>:
//	@param[in]		uint8_t		layer			-> (Layer)
//	@param[in]		bool		weightbias		-> (bool to determine whether weights or bias will be chosen: weight = false; bias = true;)
//	@param[out]		uint32_t	index			-> (Index)
//**************************************************
uint32_t u32_GetIndex(netparam_t	xNetParam, uint16_t	layer, uint16_t row, bool	weightbias)	//weight	=	false; bias	=	true;
{
10003ae8:	b084      	sub	sp, #16
10003aea:	b480      	push	{r7}
10003aec:	b083      	sub	sp, #12
10003aee:	af00      	add	r7, sp, #0
10003af0:	f107 0c10 	add.w	ip, r7, #16
10003af4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	index = 0;
10003af8:	2300      	movs	r3, #0
10003afa:	607b      	str	r3, [r7, #4]

	for (size_t i = 1; i < layer; i++)
10003afc:	2301      	movs	r3, #1
10003afe:	603b      	str	r3, [r7, #0]
10003b00:	e016      	b.n	10003b30 <u32_GetIndex+0x48>
	{
		index += (1 + xNetParam.NonLayer[i - 1]) * xNetParam.NonLayer[i];
10003b02:	683b      	ldr	r3, [r7, #0]
10003b04:	3b01      	subs	r3, #1
10003b06:	005b      	lsls	r3, r3, #1
10003b08:	f107 0210 	add.w	r2, r7, #16
10003b0c:	4413      	add	r3, r2
10003b0e:	889b      	ldrh	r3, [r3, #4]
10003b10:	1c5a      	adds	r2, r3, #1
10003b12:	683b      	ldr	r3, [r7, #0]
10003b14:	005b      	lsls	r3, r3, #1
10003b16:	f107 0110 	add.w	r1, r7, #16
10003b1a:	440b      	add	r3, r1
10003b1c:	889b      	ldrh	r3, [r3, #4]
10003b1e:	fb03 f302 	mul.w	r3, r3, r2
10003b22:	461a      	mov	r2, r3
10003b24:	687b      	ldr	r3, [r7, #4]
10003b26:	4413      	add	r3, r2
10003b28:	607b      	str	r3, [r7, #4]
	for (size_t i = 1; i < layer; i++)
10003b2a:	683b      	ldr	r3, [r7, #0]
10003b2c:	3301      	adds	r3, #1
10003b2e:	603b      	str	r3, [r7, #0]
10003b30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
10003b34:	683a      	ldr	r2, [r7, #0]
10003b36:	429a      	cmp	r2, r3
10003b38:	d3e3      	bcc.n	10003b02 <u32_GetIndex+0x1a>
	}
	if (weightbias == true)
10003b3a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
10003b3e:	2b00      	cmp	r3, #0
10003b40:	d019      	beq.n	10003b76 <u32_GetIndex+0x8e>
	{
		index += row + (1 + xNetParam.NonLayer[layer - 1]) * xNetParam.NonLayer[layer];
10003b42:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
10003b46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
10003b4a:	3b01      	subs	r3, #1
10003b4c:	005b      	lsls	r3, r3, #1
10003b4e:	f107 0110 	add.w	r1, r7, #16
10003b52:	440b      	add	r3, r1
10003b54:	889b      	ldrh	r3, [r3, #4]
10003b56:	1c59      	adds	r1, r3, #1
10003b58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
10003b5c:	005b      	lsls	r3, r3, #1
10003b5e:	f107 0010 	add.w	r0, r7, #16
10003b62:	4403      	add	r3, r0
10003b64:	889b      	ldrh	r3, [r3, #4]
10003b66:	fb03 f301 	mul.w	r3, r3, r1
10003b6a:	4413      	add	r3, r2
10003b6c:	461a      	mov	r2, r3
10003b6e:	687b      	ldr	r3, [r7, #4]
10003b70:	4413      	add	r3, r2
10003b72:	607b      	str	r3, [r7, #4]
10003b74:	e010      	b.n	10003b98 <u32_GetIndex+0xb0>
	}
	else
	{
		index += row * (1 + xNetParam.NonLayer[layer - 1]);
10003b76:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
10003b7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
10003b7e:	3b01      	subs	r3, #1
10003b80:	005b      	lsls	r3, r3, #1
10003b82:	f107 0110 	add.w	r1, r7, #16
10003b86:	440b      	add	r3, r1
10003b88:	889b      	ldrh	r3, [r3, #4]
10003b8a:	3301      	adds	r3, #1
10003b8c:	fb03 f302 	mul.w	r3, r3, r2
10003b90:	461a      	mov	r2, r3
10003b92:	687b      	ldr	r3, [r7, #4]
10003b94:	4413      	add	r3, r2
10003b96:	607b      	str	r3, [r7, #4]
	}
	return index;
10003b98:	687b      	ldr	r3, [r7, #4]
}
10003b9a:	4618      	mov	r0, r3
10003b9c:	370c      	adds	r7, #12
10003b9e:	46bd      	mov	sp, r7
10003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
10003ba4:	b004      	add	sp, #16
10003ba6:	4770      	bx	lr

10003ba8 <v_MountByte_4bits>:

void v_MountByte_4bits(int8_t* OldVar_8bits, int8_t NewVar_4bits, int8_t LowHigh)
{
10003ba8:	b480      	push	{r7}
10003baa:	b083      	sub	sp, #12
10003bac:	af00      	add	r7, sp, #0
10003bae:	6078      	str	r0, [r7, #4]
10003bb0:	460b      	mov	r3, r1
10003bb2:	70fb      	strb	r3, [r7, #3]
10003bb4:	4613      	mov	r3, r2
10003bb6:	70bb      	strb	r3, [r7, #2]
	if (LowHigh == 0)
10003bb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
10003bbc:	2b00      	cmp	r3, #0
10003bbe:	d10e      	bne.n	10003bde <v_MountByte_4bits+0x36>
	{
		*OldVar_8bits = (*OldVar_8bits & (0xf0)) | (NewVar_4bits & (0x0f));
10003bc0:	687b      	ldr	r3, [r7, #4]
10003bc2:	f993 3000 	ldrsb.w	r3, [r3]
10003bc6:	f023 030f 	bic.w	r3, r3, #15
10003bca:	b25a      	sxtb	r2, r3
10003bcc:	78fb      	ldrb	r3, [r7, #3]
10003bce:	f003 030f 	and.w	r3, r3, #15
10003bd2:	b25b      	sxtb	r3, r3
10003bd4:	4313      	orrs	r3, r2
10003bd6:	b25a      	sxtb	r2, r3
10003bd8:	687b      	ldr	r3, [r7, #4]
10003bda:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*OldVar_8bits = ((NewVar_4bits & (0x0f)) << 4) | (*OldVar_8bits & (0x0f));
	}
}
10003bdc:	e00c      	b.n	10003bf8 <v_MountByte_4bits+0x50>
		*OldVar_8bits = ((NewVar_4bits & (0x0f)) << 4) | (*OldVar_8bits & (0x0f));
10003bde:	78fb      	ldrb	r3, [r7, #3]
10003be0:	011b      	lsls	r3, r3, #4
10003be2:	b25a      	sxtb	r2, r3
10003be4:	687b      	ldr	r3, [r7, #4]
10003be6:	f993 3000 	ldrsb.w	r3, [r3]
10003bea:	f003 030f 	and.w	r3, r3, #15
10003bee:	b25b      	sxtb	r3, r3
10003bf0:	4313      	orrs	r3, r2
10003bf2:	b25a      	sxtb	r2, r3
10003bf4:	687b      	ldr	r3, [r7, #4]
10003bf6:	701a      	strb	r2, [r3, #0]
}
10003bf8:	bf00      	nop
10003bfa:	370c      	adds	r7, #12
10003bfc:	46bd      	mov	sp, r7
10003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
10003c02:	4770      	bx	lr

10003c04 <v_GetByte_4bits>:

int8_t v_GetByte_4bits(int8_t Var_8bits, int8_t LowHigh)
{
10003c04:	b480      	push	{r7}
10003c06:	b083      	sub	sp, #12
10003c08:	af00      	add	r7, sp, #0
10003c0a:	4603      	mov	r3, r0
10003c0c:	460a      	mov	r2, r1
10003c0e:	71fb      	strb	r3, [r7, #7]
10003c10:	4613      	mov	r3, r2
10003c12:	71bb      	strb	r3, [r7, #6]
	if (LowHigh == 0)
10003c14:	f997 3006 	ldrsb.w	r3, [r7, #6]
10003c18:	2b00      	cmp	r3, #0
10003c1a:	d10f      	bne.n	10003c3c <v_GetByte_4bits+0x38>
	{
		// 2nd Complement Adjustment for 4bit to 8bit transposition
		if ((Var_8bits & (1 << 3)))
10003c1c:	79fb      	ldrb	r3, [r7, #7]
10003c1e:	f003 0308 	and.w	r3, r3, #8
10003c22:	2b00      	cmp	r3, #0
10003c24:	d005      	beq.n	10003c32 <v_GetByte_4bits+0x2e>
		{
			return ((0xf0) | (Var_8bits & (0x0f)));
10003c26:	79fb      	ldrb	r3, [r7, #7]
10003c28:	f063 030f 	orn	r3, r3, #15
10003c2c:	b2db      	uxtb	r3, r3
10003c2e:	b25b      	sxtb	r3, r3
10003c30:	e017      	b.n	10003c62 <v_GetByte_4bits+0x5e>
		}
		else
		{
			return (Var_8bits & (0x0f));
10003c32:	79fb      	ldrb	r3, [r7, #7]
10003c34:	f003 030f 	and.w	r3, r3, #15
10003c38:	b25b      	sxtb	r3, r3
10003c3a:	e012      	b.n	10003c62 <v_GetByte_4bits+0x5e>
		}
	}
	else
	{
		// 2nd Complement Adjustment for 4bit to 8bit transposition
		if ((Var_8bits & (1 << 7)))
10003c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
10003c40:	2b00      	cmp	r3, #0
10003c42:	da07      	bge.n	10003c54 <v_GetByte_4bits+0x50>
		{
			return ((0xf0) | ((Var_8bits & (0xf0)) >> 4));
10003c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
10003c48:	111b      	asrs	r3, r3, #4
10003c4a:	b25b      	sxtb	r3, r3
10003c4c:	f063 030f 	orn	r3, r3, #15
10003c50:	b25b      	sxtb	r3, r3
10003c52:	e006      	b.n	10003c62 <v_GetByte_4bits+0x5e>
		}
		else
		{
			return ((Var_8bits & (0xf0)) >> 4);
10003c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
10003c58:	111b      	asrs	r3, r3, #4
10003c5a:	b25b      	sxtb	r3, r3
10003c5c:	f003 030f 	and.w	r3, r3, #15
10003c60:	b25b      	sxtb	r3, r3
		}
	}
10003c62:	4618      	mov	r0, r3
10003c64:	370c      	adds	r7, #12
10003c66:	46bd      	mov	sp, r7
10003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
10003c6c:	4770      	bx	lr
	...

10003c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10003c70:	b5b0      	push	{r4, r5, r7, lr}
10003c72:	b0d2      	sub	sp, #328	; 0x148
10003c74:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10003c76:	f000 fbfd 	bl	10004474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
10003c7a:	f000 fa35 	bl	100040e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10003c7e:	f000 fadd 	bl	1000423c <MX_GPIO_Init>
  MX_RTC_Init();
10003c82:	f000 fab5 	bl	100041f0 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
10003c86:	f006 f985 	bl	10009f94 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
  int i;
  netparam_t xNetParam;

  DataSet_t xDataSet = {.x_test = NULL, .y_test = NULL};
10003c8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
10003c8e:	2200      	movs	r2, #0
10003c90:	601a      	str	r2, [r3, #0]
10003c92:	605a      	str	r2, [r3, #4]
10003c94:	609a      	str	r2, [r3, #8]
10003c96:	60da      	str	r2, [r3, #12]
10003c98:	611a      	str	r2, [r3, #16]
10003c9a:	615a      	str	r2, [r3, #20]
  float* WBPtr = NULL;
10003c9c:	2300      	movs	r3, #0
10003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c

  distribution_t xDistribution;
  quantizedval_t xQuantizedVal;


  float* f_ZPtr = NULL;
10003ca0:	2300      	movs	r3, #0
10003ca2:	60fb      	str	r3, [r7, #12]
  float* f_FuncPtr = NULL;
10003ca4:	2300      	movs	r3, #0
10003ca6:	60bb      	str	r3, [r7, #8]

  void* int_FuncPtr = NULL;
10003ca8:	2300      	movs	r3, #0
10003caa:	607b      	str	r3, [r7, #4]
  void* int_ZPtr = NULL;
10003cac:	2300      	movs	r3, #0
10003cae:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(b_Get_flagrun() == true)
10003cb0:	f006 f9a0 	bl	10009ff4 <b_Get_flagrun>
10003cb4:	4603      	mov	r3, r0
10003cb6:	2b00      	cmp	r3, #0
10003cb8:	f000 8213 	beq.w	100040e2 <main+0x472>
	  {
		  v_Clear_flagrun();
10003cbc:	f006 f9a6 	bl	1000a00c <v_Clear_flagrun>

		  test_index = ui_Get_testindex();
10003cc0:	f006 f9b0 	bl	1000a024 <ui_Get_testindex>
10003cc4:	4603      	mov	r3, r0
10003cc6:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
		  test_size = ui_Get_testsize();
10003cca:	f006 f9b7 	bl	1000a03c <ui_Get_testsize>
10003cce:	4603      	mov	r3, r0
10003cd0:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
		  flag_model = ui_Get_flagmodel();
10003cd4:	f006 f9be 	bl	1000a054 <ui_Get_flagmodel>
10003cd8:	4603      	mov	r3, r0
10003cda:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf


		  switch(flag_model)
10003cde:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
10003ce2:	3b01      	subs	r3, #1
10003ce4:	2b0f      	cmp	r3, #15
10003ce6:	d8e3      	bhi.n	10003cb0 <main+0x40>
10003ce8:	a201      	add	r2, pc, #4	; (adr r2, 10003cf0 <main+0x80>)
10003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10003cee:	bf00      	nop
10003cf0:	10003d31 	.word	0x10003d31
10003cf4:	10003dcb 	.word	0x10003dcb
10003cf8:	10003cb1 	.word	0x10003cb1
10003cfc:	10003e91 	.word	0x10003e91
10003d00:	10003cb1 	.word	0x10003cb1
10003d04:	10003cb1 	.word	0x10003cb1
10003d08:	10003cb1 	.word	0x10003cb1
10003d0c:	10003f57 	.word	0x10003f57
10003d10:	10003cb1 	.word	0x10003cb1
10003d14:	10003cb1 	.word	0x10003cb1
10003d18:	10003cb1 	.word	0x10003cb1
10003d1c:	10003cb1 	.word	0x10003cb1
10003d20:	10003cb1 	.word	0x10003cb1
10003d24:	10003cb1 	.word	0x10003cb1
10003d28:	10003cb1 	.word	0x10003cb1
10003d2c:	1000401d 	.word	0x1000401d
		  {
		  case FLAGMODEL_FLOAT:
			  v_LoadFloatModel(&xNetParam, &WBPtr);
10003d30:	f107 024c 	add.w	r2, r7, #76	; 0x4c
10003d34:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003d38:	4611      	mov	r1, r2
10003d3a:	4618      	mov	r0, r3
10003d3c:	f7fd f96a 	bl	10001014 <v_LoadFloatModel>
			  v_FloatSetParameters(xNetParam);
10003d40:	4668      	mov	r0, sp
10003d42:	f107 0378 	add.w	r3, r7, #120	; 0x78
10003d46:	2244      	movs	r2, #68	; 0x44
10003d48:	4619      	mov	r1, r3
10003d4a:	f007 f94b 	bl	1000afe4 <memcpy>
10003d4e:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
10003d54:	f7fd fb82 	bl	1000145c <v_FloatSetParameters>
			  v_float_SetPtr(WBPtr);
10003d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10003d5a:	4618      	mov	r0, r3
10003d5c:	f7fd fb96 	bl	1000148c <v_float_SetPtr>
			  v_DynamicAllocForwardProp(&f_ZPtr, &f_FuncPtr);
10003d60:	f107 0208 	add.w	r2, r7, #8
10003d64:	f107 030c 	add.w	r3, r7, #12
10003d68:	4611      	mov	r1, r2
10003d6a:	4618      	mov	r0, r3
10003d6c:	f7fd fb9e 	bl	100014ac <v_DynamicAllocForwardProp>
			  while(1)
			  {
				  for(i = 0; i < test_size; i++)
10003d70:	2300      	movs	r3, #0
10003d72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10003d76:	e021      	b.n	10003dbc <main+0x14c>
				  {
					  v_LoadTestDataNum(&xDataSet, xNetParam, (test_index+i));
10003d78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
10003d7c:	b29a      	uxth	r2, r3
10003d7e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
10003d82:	4413      	add	r3, r2
10003d84:	b29b      	uxth	r3, r3
10003d86:	f107 0450 	add.w	r4, r7, #80	; 0x50
10003d8a:	9312      	str	r3, [sp, #72]	; 0x48
10003d8c:	4668      	mov	r0, sp
10003d8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
10003d92:	2248      	movs	r2, #72	; 0x48
10003d94:	4619      	mov	r1, r3
10003d96:	f007 f925 	bl	1000afe4 <memcpy>
10003d9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
10003da0:	4620      	mov	r0, r4
10003da2:	f7fd faef 	bl	10001384 <v_LoadTestDataNum>
					  v_ProcessForwardPropNN_FP32(f_ZPtr, f_FuncPtr, xDataSet.x_test);
10003da6:	68fb      	ldr	r3, [r7, #12]
10003da8:	68b9      	ldr	r1, [r7, #8]
10003daa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10003dac:	4618      	mov	r0, r3
10003dae:	f7fd fd5b 	bl	10001868 <v_ProcessForwardPropNN_FP32>
				  for(i = 0; i < test_size; i++)
10003db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
10003db6:	3301      	adds	r3, #1
10003db8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10003dbc:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
10003dc0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
10003dc4:	429a      	cmp	r2, r3
10003dc6:	dbd7      	blt.n	10003d78 <main+0x108>
10003dc8:	e7d2      	b.n	10003d70 <main+0x100>
				  }
			  }
			  break;
		  case FLAGMODEL_INT4:
			  v_DynamicAllocForwardProp_int(&int_ZPtr, &int_FuncPtr);
10003dca:	1d3a      	adds	r2, r7, #4
10003dcc:	463b      	mov	r3, r7
10003dce:	4611      	mov	r1, r2
10003dd0:	4618      	mov	r0, r3
10003dd2:	f7fd fef5 	bl	10001bc0 <v_DynamicAllocForwardProp_int>
			  v_LoadIntModel(&xNetParam, &xDistribution, &xQuantizedVal);
10003dd6:	f107 0210 	add.w	r2, r7, #16
10003dda:	f107 0134 	add.w	r1, r7, #52	; 0x34
10003dde:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003de2:	4618      	mov	r0, r3
10003de4:	f7fd f972 	bl	100010cc <v_LoadIntModel>
			  xNetParam.xVarPrecision.precision = 4;
10003de8:	2304      	movs	r3, #4
10003dea:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			  v_SetQuantNetParameters(xNetParam, xQuantizedVal, xDistribution);
10003dee:	ad1a      	add	r5, sp, #104	; 0x68
10003df0:	f107 0434 	add.w	r4, r7, #52	; 0x34
10003df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10003df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10003df8:	e894 0003 	ldmia.w	r4, {r0, r1}
10003dfc:	e885 0003 	stmia.w	r5, {r0, r1}
10003e00:	ad11      	add	r5, sp, #68	; 0x44
10003e02:	f107 0410 	add.w	r4, r7, #16
10003e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10003e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10003e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10003e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10003e0e:	6823      	ldr	r3, [r4, #0]
10003e10:	602b      	str	r3, [r5, #0]
10003e12:	4668      	mov	r0, sp
10003e14:	f107 0378 	add.w	r3, r7, #120	; 0x78
10003e18:	2244      	movs	r2, #68	; 0x44
10003e1a:	4619      	mov	r1, r3
10003e1c:	f007 f8e2 	bl	1000afe4 <memcpy>
10003e20:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003e24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
10003e26:	f7fd fe9b 	bl	10001b60 <v_SetQuantNetParameters>
			  while(1)
			  {
				  for(i = 0; i < test_size; i++)
10003e2a:	2300      	movs	r3, #0
10003e2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10003e30:	e027      	b.n	10003e82 <main+0x212>
				  {
					  v_LoadTestDataNum(&xDataSet, xNetParam, (test_index+i));
10003e32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
10003e36:	b29a      	uxth	r2, r3
10003e38:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
10003e3c:	4413      	add	r3, r2
10003e3e:	b29b      	uxth	r3, r3
10003e40:	f107 0450 	add.w	r4, r7, #80	; 0x50
10003e44:	9312      	str	r3, [sp, #72]	; 0x48
10003e46:	4668      	mov	r0, sp
10003e48:	f107 0374 	add.w	r3, r7, #116	; 0x74
10003e4c:	2248      	movs	r2, #72	; 0x48
10003e4e:	4619      	mov	r1, r3
10003e50:	f007 f8c8 	bl	1000afe4 <memcpy>
10003e54:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003e58:	cb0e      	ldmia	r3, {r1, r2, r3}
10003e5a:	4620      	mov	r0, r4
10003e5c:	f7fd fa92 	bl	10001384 <v_LoadTestDataNum>
					  v_QuantizeIntputs_int(&((int8_t*)int_FuncPtr)[0], (float*)xDataSet.x_test);
10003e60:	687b      	ldr	r3, [r7, #4]
10003e62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10003e64:	4611      	mov	r1, r2
10003e66:	4618      	mov	r0, r3
10003e68:	f7ff f96e 	bl	10003148 <v_QuantizeIntputs_int>
					  v_ProcessForwardPropNN_int(int_ZPtr, int_FuncPtr, xDataSet.x_test);
10003e6c:	683b      	ldr	r3, [r7, #0]
10003e6e:	6879      	ldr	r1, [r7, #4]
10003e70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10003e72:	4618      	mov	r0, r3
10003e74:	f7ff fc5c 	bl	10003730 <v_ProcessForwardPropNN_int>
				  for(i = 0; i < test_size; i++)
10003e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
10003e7c:	3301      	adds	r3, #1
10003e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10003e82:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
10003e86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
10003e8a:	429a      	cmp	r2, r3
10003e8c:	dbd1      	blt.n	10003e32 <main+0x1c2>
10003e8e:	e7cc      	b.n	10003e2a <main+0x1ba>
				  }
			  }
			  break;
		  case FLAGMODEL_INT8:
			  v_DynamicAllocForwardProp_int(&int_ZPtr, &int_FuncPtr);
10003e90:	1d3a      	adds	r2, r7, #4
10003e92:	463b      	mov	r3, r7
10003e94:	4611      	mov	r1, r2
10003e96:	4618      	mov	r0, r3
10003e98:	f7fd fe92 	bl	10001bc0 <v_DynamicAllocForwardProp_int>
			  v_LoadIntModel(&xNetParam, &xDistribution, &xQuantizedVal);
10003e9c:	f107 0210 	add.w	r2, r7, #16
10003ea0:	f107 0134 	add.w	r1, r7, #52	; 0x34
10003ea4:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003ea8:	4618      	mov	r0, r3
10003eaa:	f7fd f90f 	bl	100010cc <v_LoadIntModel>
			  xNetParam.xVarPrecision.precision = 8;
10003eae:	2308      	movs	r3, #8
10003eb0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			  v_SetQuantNetParameters(xNetParam, xQuantizedVal, xDistribution);
10003eb4:	ad1a      	add	r5, sp, #104	; 0x68
10003eb6:	f107 0434 	add.w	r4, r7, #52	; 0x34
10003eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10003ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10003ebe:	e894 0003 	ldmia.w	r4, {r0, r1}
10003ec2:	e885 0003 	stmia.w	r5, {r0, r1}
10003ec6:	ad11      	add	r5, sp, #68	; 0x44
10003ec8:	f107 0410 	add.w	r4, r7, #16
10003ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10003ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10003ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10003ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10003ed4:	6823      	ldr	r3, [r4, #0]
10003ed6:	602b      	str	r3, [r5, #0]
10003ed8:	4668      	mov	r0, sp
10003eda:	f107 0378 	add.w	r3, r7, #120	; 0x78
10003ede:	2244      	movs	r2, #68	; 0x44
10003ee0:	4619      	mov	r1, r3
10003ee2:	f007 f87f 	bl	1000afe4 <memcpy>
10003ee6:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
10003eec:	f7fd fe38 	bl	10001b60 <v_SetQuantNetParameters>
			  while(1)
			  {
				  for(i = 0; i < test_size; i++)
10003ef0:	2300      	movs	r3, #0
10003ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10003ef6:	e027      	b.n	10003f48 <main+0x2d8>
				  {
					  v_LoadTestDataNum(&xDataSet, xNetParam, (test_index+i));
10003ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
10003efc:	b29a      	uxth	r2, r3
10003efe:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
10003f02:	4413      	add	r3, r2
10003f04:	b29b      	uxth	r3, r3
10003f06:	f107 0450 	add.w	r4, r7, #80	; 0x50
10003f0a:	9312      	str	r3, [sp, #72]	; 0x48
10003f0c:	4668      	mov	r0, sp
10003f0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
10003f12:	2248      	movs	r2, #72	; 0x48
10003f14:	4619      	mov	r1, r3
10003f16:	f007 f865 	bl	1000afe4 <memcpy>
10003f1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
10003f20:	4620      	mov	r0, r4
10003f22:	f7fd fa2f 	bl	10001384 <v_LoadTestDataNum>
					  v_QuantizeIntputs_int(&((int8_t*)int_FuncPtr)[0], (float*)xDataSet.x_test);
10003f26:	687b      	ldr	r3, [r7, #4]
10003f28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10003f2a:	4611      	mov	r1, r2
10003f2c:	4618      	mov	r0, r3
10003f2e:	f7ff f90b 	bl	10003148 <v_QuantizeIntputs_int>
					  v_ProcessForwardPropNN_int(int_ZPtr, int_FuncPtr, xDataSet.x_test);
10003f32:	683b      	ldr	r3, [r7, #0]
10003f34:	6879      	ldr	r1, [r7, #4]
10003f36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10003f38:	4618      	mov	r0, r3
10003f3a:	f7ff fbf9 	bl	10003730 <v_ProcessForwardPropNN_int>
				  for(i = 0; i < test_size; i++)
10003f3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
10003f42:	3301      	adds	r3, #1
10003f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10003f48:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
10003f4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
10003f50:	429a      	cmp	r2, r3
10003f52:	dbd1      	blt.n	10003ef8 <main+0x288>
10003f54:	e7cc      	b.n	10003ef0 <main+0x280>
				  }
			  }
			  break;
		  case FLAGMODEL_INT16:
			  v_DynamicAllocForwardProp_int(&int_ZPtr, &int_FuncPtr);
10003f56:	1d3a      	adds	r2, r7, #4
10003f58:	463b      	mov	r3, r7
10003f5a:	4611      	mov	r1, r2
10003f5c:	4618      	mov	r0, r3
10003f5e:	f7fd fe2f 	bl	10001bc0 <v_DynamicAllocForwardProp_int>
			  v_LoadIntModel(&xNetParam, &xDistribution, &xQuantizedVal);
10003f62:	f107 0210 	add.w	r2, r7, #16
10003f66:	f107 0134 	add.w	r1, r7, #52	; 0x34
10003f6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003f6e:	4618      	mov	r0, r3
10003f70:	f7fd f8ac 	bl	100010cc <v_LoadIntModel>
			  xNetParam.xVarPrecision.precision = 16;
10003f74:	2310      	movs	r3, #16
10003f76:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			  v_SetQuantNetParameters(xNetParam, xQuantizedVal, xDistribution);
10003f7a:	ad1a      	add	r5, sp, #104	; 0x68
10003f7c:	f107 0434 	add.w	r4, r7, #52	; 0x34
10003f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10003f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10003f84:	e894 0003 	ldmia.w	r4, {r0, r1}
10003f88:	e885 0003 	stmia.w	r5, {r0, r1}
10003f8c:	ad11      	add	r5, sp, #68	; 0x44
10003f8e:	f107 0410 	add.w	r4, r7, #16
10003f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10003f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10003f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10003f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10003f9a:	6823      	ldr	r3, [r4, #0]
10003f9c:	602b      	str	r3, [r5, #0]
10003f9e:	4668      	mov	r0, sp
10003fa0:	f107 0378 	add.w	r3, r7, #120	; 0x78
10003fa4:	2244      	movs	r2, #68	; 0x44
10003fa6:	4619      	mov	r1, r3
10003fa8:	f007 f81c 	bl	1000afe4 <memcpy>
10003fac:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
10003fb2:	f7fd fdd5 	bl	10001b60 <v_SetQuantNetParameters>
			  for(i = 0; i < test_size; i++)
10003fb6:	2300      	movs	r3, #0
10003fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10003fbc:	e027      	b.n	1000400e <main+0x39e>
			  {
				  v_LoadTestDataNum(&xDataSet, xNetParam, (test_index+i));
10003fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
10003fc2:	b29a      	uxth	r2, r3
10003fc4:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
10003fc8:	4413      	add	r3, r2
10003fca:	b29b      	uxth	r3, r3
10003fcc:	f107 0450 	add.w	r4, r7, #80	; 0x50
10003fd0:	9312      	str	r3, [sp, #72]	; 0x48
10003fd2:	4668      	mov	r0, sp
10003fd4:	f107 0374 	add.w	r3, r7, #116	; 0x74
10003fd8:	2248      	movs	r2, #72	; 0x48
10003fda:	4619      	mov	r1, r3
10003fdc:	f007 f802 	bl	1000afe4 <memcpy>
10003fe0:	f107 0368 	add.w	r3, r7, #104	; 0x68
10003fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
10003fe6:	4620      	mov	r0, r4
10003fe8:	f7fd f9cc 	bl	10001384 <v_LoadTestDataNum>
				  v_QuantizeIntputs_int(&((int16_t*)int_FuncPtr)[0], (float*)xDataSet.x_test);
10003fec:	687b      	ldr	r3, [r7, #4]
10003fee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10003ff0:	4611      	mov	r1, r2
10003ff2:	4618      	mov	r0, r3
10003ff4:	f7ff f8a8 	bl	10003148 <v_QuantizeIntputs_int>
				  v_ProcessForwardPropNN_int(int_ZPtr, int_FuncPtr, xDataSet.x_test);
10003ff8:	683b      	ldr	r3, [r7, #0]
10003ffa:	6879      	ldr	r1, [r7, #4]
10003ffc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10003ffe:	4618      	mov	r0, r3
10004000:	f7ff fb96 	bl	10003730 <v_ProcessForwardPropNN_int>
			  for(i = 0; i < test_size; i++)
10004004:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
10004008:	3301      	adds	r3, #1
1000400a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
1000400e:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
10004012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
10004016:	429a      	cmp	r2, r3
10004018:	dbd1      	blt.n	10003fbe <main+0x34e>
			  }
			  break;
1000401a:	e063      	b.n	100040e4 <main+0x474>
		  case FLAGMODEL_INT32:
			v_DynamicAllocForwardProp_int(&int_ZPtr, &int_FuncPtr);
1000401c:	1d3a      	adds	r2, r7, #4
1000401e:	463b      	mov	r3, r7
10004020:	4611      	mov	r1, r2
10004022:	4618      	mov	r0, r3
10004024:	f7fd fdcc 	bl	10001bc0 <v_DynamicAllocForwardProp_int>
			v_LoadIntModel(&xNetParam, &xDistribution, &xQuantizedVal);
10004028:	f107 0210 	add.w	r2, r7, #16
1000402c:	f107 0134 	add.w	r1, r7, #52	; 0x34
10004030:	f107 0368 	add.w	r3, r7, #104	; 0x68
10004034:	4618      	mov	r0, r3
10004036:	f7fd f849 	bl	100010cc <v_LoadIntModel>
			xNetParam.xVarPrecision.precision = 32;
1000403a:	2320      	movs	r3, #32
1000403c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			v_SetQuantNetParameters(xNetParam, xQuantizedVal, xDistribution);
10004040:	ad1a      	add	r5, sp, #104	; 0x68
10004042:	f107 0434 	add.w	r4, r7, #52	; 0x34
10004046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10004048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1000404a:	e894 0003 	ldmia.w	r4, {r0, r1}
1000404e:	e885 0003 	stmia.w	r5, {r0, r1}
10004052:	ad11      	add	r5, sp, #68	; 0x44
10004054:	f107 0410 	add.w	r4, r7, #16
10004058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1000405a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1000405c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1000405e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10004060:	6823      	ldr	r3, [r4, #0]
10004062:	602b      	str	r3, [r5, #0]
10004064:	4668      	mov	r0, sp
10004066:	f107 0378 	add.w	r3, r7, #120	; 0x78
1000406a:	2244      	movs	r2, #68	; 0x44
1000406c:	4619      	mov	r1, r3
1000406e:	f006 ffb9 	bl	1000afe4 <memcpy>
10004072:	f107 0368 	add.w	r3, r7, #104	; 0x68
10004076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
10004078:	f7fd fd72 	bl	10001b60 <v_SetQuantNetParameters>
			  while(1)
			 {
				  for(i = 0; i < test_size; i++)
1000407c:	2300      	movs	r3, #0
1000407e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
10004082:	e027      	b.n	100040d4 <main+0x464>
				  {
					  v_LoadTestDataNum(&xDataSet, xNetParam, (test_index+i));
10004084:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
10004088:	b29a      	uxth	r2, r3
1000408a:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
1000408e:	4413      	add	r3, r2
10004090:	b29b      	uxth	r3, r3
10004092:	f107 0450 	add.w	r4, r7, #80	; 0x50
10004096:	9312      	str	r3, [sp, #72]	; 0x48
10004098:	4668      	mov	r0, sp
1000409a:	f107 0374 	add.w	r3, r7, #116	; 0x74
1000409e:	2248      	movs	r2, #72	; 0x48
100040a0:	4619      	mov	r1, r3
100040a2:	f006 ff9f 	bl	1000afe4 <memcpy>
100040a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
100040aa:	cb0e      	ldmia	r3, {r1, r2, r3}
100040ac:	4620      	mov	r0, r4
100040ae:	f7fd f969 	bl	10001384 <v_LoadTestDataNum>
					  v_QuantizeIntputs_int(&((int32_t*)int_FuncPtr)[0], (float*)xDataSet.x_test);
100040b2:	687b      	ldr	r3, [r7, #4]
100040b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
100040b6:	4611      	mov	r1, r2
100040b8:	4618      	mov	r0, r3
100040ba:	f7ff f845 	bl	10003148 <v_QuantizeIntputs_int>
					  v_ProcessForwardPropNN_int(int_ZPtr, int_FuncPtr, xDataSet.x_test);
100040be:	683b      	ldr	r3, [r7, #0]
100040c0:	6879      	ldr	r1, [r7, #4]
100040c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
100040c4:	4618      	mov	r0, r3
100040c6:	f7ff fb33 	bl	10003730 <v_ProcessForwardPropNN_int>
				  for(i = 0; i < test_size; i++)
100040ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
100040ce:	3301      	adds	r3, #1
100040d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
100040d4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
100040d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
100040dc:	429a      	cmp	r2, r3
100040de:	dbd1      	blt.n	10004084 <main+0x414>
100040e0:	e7cc      	b.n	1000407c <main+0x40c>
			  }
			  break;
		  }


	  }
100040e2:	bf00      	nop
	  if(b_Get_flagrun() == true)
100040e4:	e5e4      	b.n	10003cb0 <main+0x40>
100040e6:	bf00      	nop

100040e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100040e8:	b580      	push	{r7, lr}
100040ea:	b098      	sub	sp, #96	; 0x60
100040ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100040ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
100040f2:	2230      	movs	r2, #48	; 0x30
100040f4:	2100      	movs	r1, #0
100040f6:	4618      	mov	r0, r3
100040f8:	f006 ff82 	bl	1000b000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100040fc:	f107 031c 	add.w	r3, r7, #28
10004100:	2200      	movs	r2, #0
10004102:	601a      	str	r2, [r3, #0]
10004104:	605a      	str	r2, [r3, #4]
10004106:	609a      	str	r2, [r3, #8]
10004108:	60da      	str	r2, [r3, #12]
1000410a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
1000410c:	f107 030c 	add.w	r3, r7, #12
10004110:	2200      	movs	r2, #0
10004112:	601a      	str	r2, [r3, #0]
10004114:	605a      	str	r2, [r3, #4]
10004116:	609a      	str	r2, [r3, #8]
10004118:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
1000411a:	2300      	movs	r3, #0
1000411c:	60bb      	str	r3, [r7, #8]
1000411e:	4b32      	ldr	r3, [pc, #200]	; (100041e8 <SystemClock_Config+0x100>)
10004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004122:	4a31      	ldr	r2, [pc, #196]	; (100041e8 <SystemClock_Config+0x100>)
10004124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
10004128:	6413      	str	r3, [r2, #64]	; 0x40
1000412a:	4b2f      	ldr	r3, [pc, #188]	; (100041e8 <SystemClock_Config+0x100>)
1000412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000412e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10004132:	60bb      	str	r3, [r7, #8]
10004134:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
10004136:	2300      	movs	r3, #0
10004138:	607b      	str	r3, [r7, #4]
1000413a:	4b2c      	ldr	r3, [pc, #176]	; (100041ec <SystemClock_Config+0x104>)
1000413c:	681b      	ldr	r3, [r3, #0]
1000413e:	4a2b      	ldr	r2, [pc, #172]	; (100041ec <SystemClock_Config+0x104>)
10004140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
10004144:	6013      	str	r3, [r2, #0]
10004146:	4b29      	ldr	r3, [pc, #164]	; (100041ec <SystemClock_Config+0x104>)
10004148:	681b      	ldr	r3, [r3, #0]
1000414a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
1000414e:	607b      	str	r3, [r7, #4]
10004150:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
10004152:	2309      	movs	r3, #9
10004154:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10004156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
1000415a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
1000415c:	2301      	movs	r3, #1
1000415e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
10004160:	2302      	movs	r3, #2
10004162:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
10004164:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
10004168:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
1000416a:	2304      	movs	r3, #4
1000416c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
1000416e:	23a8      	movs	r3, #168	; 0xa8
10004170:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
10004172:	2302      	movs	r3, #2
10004174:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
10004176:	2307      	movs	r3, #7
10004178:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
1000417a:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000417e:	4618      	mov	r0, r3
10004180:	f002 f918 	bl	100063b4 <HAL_RCC_OscConfig>
10004184:	4603      	mov	r3, r0
10004186:	2b00      	cmp	r3, #0
10004188:	d001      	beq.n	1000418e <SystemClock_Config+0xa6>
  {
    Error_Handler();
1000418a:	f000 f87f 	bl	1000428c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
1000418e:	230f      	movs	r3, #15
10004190:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
10004192:	2302      	movs	r3, #2
10004194:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
10004196:	2300      	movs	r3, #0
10004198:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
1000419a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
1000419e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
100041a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
100041a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
100041a6:	f107 031c 	add.w	r3, r7, #28
100041aa:	2105      	movs	r1, #5
100041ac:	4618      	mov	r0, r3
100041ae:	f002 fb79 	bl	100068a4 <HAL_RCC_ClockConfig>
100041b2:	4603      	mov	r3, r0
100041b4:	2b00      	cmp	r3, #0
100041b6:	d001      	beq.n	100041bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
100041b8:	f000 f868 	bl	1000428c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
100041bc:	2302      	movs	r3, #2
100041be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
100041c0:	f44f 7300 	mov.w	r3, #512	; 0x200
100041c4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100041c6:	f107 030c 	add.w	r3, r7, #12
100041ca:	4618      	mov	r0, r3
100041cc:	f002 fd66 	bl	10006c9c <HAL_RCCEx_PeriphCLKConfig>
100041d0:	4603      	mov	r3, r0
100041d2:	2b00      	cmp	r3, #0
100041d4:	d001      	beq.n	100041da <SystemClock_Config+0xf2>
  {
    Error_Handler();
100041d6:	f000 f859 	bl	1000428c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
100041da:	f002 fc49 	bl	10006a70 <HAL_RCC_EnableCSS>
}
100041de:	bf00      	nop
100041e0:	3760      	adds	r7, #96	; 0x60
100041e2:	46bd      	mov	sp, r7
100041e4:	bd80      	pop	{r7, pc}
100041e6:	bf00      	nop
100041e8:	40023800 	.word	0x40023800
100041ec:	40007000 	.word	0x40007000

100041f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
100041f0:	b580      	push	{r7, lr}
100041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
100041f4:	4b0f      	ldr	r3, [pc, #60]	; (10004234 <MX_RTC_Init+0x44>)
100041f6:	4a10      	ldr	r2, [pc, #64]	; (10004238 <MX_RTC_Init+0x48>)
100041f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
100041fa:	4b0e      	ldr	r3, [pc, #56]	; (10004234 <MX_RTC_Init+0x44>)
100041fc:	2200      	movs	r2, #0
100041fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
10004200:	4b0c      	ldr	r3, [pc, #48]	; (10004234 <MX_RTC_Init+0x44>)
10004202:	227f      	movs	r2, #127	; 0x7f
10004204:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
10004206:	4b0b      	ldr	r3, [pc, #44]	; (10004234 <MX_RTC_Init+0x44>)
10004208:	22ff      	movs	r2, #255	; 0xff
1000420a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
1000420c:	4b09      	ldr	r3, [pc, #36]	; (10004234 <MX_RTC_Init+0x44>)
1000420e:	2200      	movs	r2, #0
10004210:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
10004212:	4b08      	ldr	r3, [pc, #32]	; (10004234 <MX_RTC_Init+0x44>)
10004214:	2200      	movs	r2, #0
10004216:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
10004218:	4b06      	ldr	r3, [pc, #24]	; (10004234 <MX_RTC_Init+0x44>)
1000421a:	2200      	movs	r2, #0
1000421c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
1000421e:	4805      	ldr	r0, [pc, #20]	; (10004234 <MX_RTC_Init+0x44>)
10004220:	f002 fe1e 	bl	10006e60 <HAL_RTC_Init>
10004224:	4603      	mov	r3, r0
10004226:	2b00      	cmp	r3, #0
10004228:	d001      	beq.n	1000422e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
1000422a:	f000 f82f 	bl	1000428c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
1000422e:	bf00      	nop
10004230:	bd80      	pop	{r7, pc}
10004232:	bf00      	nop
10004234:	20000544 	.word	0x20000544
10004238:	40002800 	.word	0x40002800

1000423c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
1000423c:	b480      	push	{r7}
1000423e:	b083      	sub	sp, #12
10004240:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
10004242:	2300      	movs	r3, #0
10004244:	607b      	str	r3, [r7, #4]
10004246:	4b10      	ldr	r3, [pc, #64]	; (10004288 <MX_GPIO_Init+0x4c>)
10004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000424a:	4a0f      	ldr	r2, [pc, #60]	; (10004288 <MX_GPIO_Init+0x4c>)
1000424c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10004250:	6313      	str	r3, [r2, #48]	; 0x30
10004252:	4b0d      	ldr	r3, [pc, #52]	; (10004288 <MX_GPIO_Init+0x4c>)
10004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
1000425a:	607b      	str	r3, [r7, #4]
1000425c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
1000425e:	2300      	movs	r3, #0
10004260:	603b      	str	r3, [r7, #0]
10004262:	4b09      	ldr	r3, [pc, #36]	; (10004288 <MX_GPIO_Init+0x4c>)
10004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004266:	4a08      	ldr	r2, [pc, #32]	; (10004288 <MX_GPIO_Init+0x4c>)
10004268:	f043 0301 	orr.w	r3, r3, #1
1000426c:	6313      	str	r3, [r2, #48]	; 0x30
1000426e:	4b06      	ldr	r3, [pc, #24]	; (10004288 <MX_GPIO_Init+0x4c>)
10004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004272:	f003 0301 	and.w	r3, r3, #1
10004276:	603b      	str	r3, [r7, #0]
10004278:	683b      	ldr	r3, [r7, #0]

}
1000427a:	bf00      	nop
1000427c:	370c      	adds	r7, #12
1000427e:	46bd      	mov	sp, r7
10004280:	f85d 7b04 	ldr.w	r7, [sp], #4
10004284:	4770      	bx	lr
10004286:	bf00      	nop
10004288:	40023800 	.word	0x40023800

1000428c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
1000428c:	b480      	push	{r7}
1000428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
10004290:	bf00      	nop
10004292:	46bd      	mov	sp, r7
10004294:	f85d 7b04 	ldr.w	r7, [sp], #4
10004298:	4770      	bx	lr
	...

1000429c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
1000429c:	b480      	push	{r7}
1000429e:	b083      	sub	sp, #12
100042a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
100042a2:	2300      	movs	r3, #0
100042a4:	607b      	str	r3, [r7, #4]
100042a6:	4b10      	ldr	r3, [pc, #64]	; (100042e8 <HAL_MspInit+0x4c>)
100042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100042aa:	4a0f      	ldr	r2, [pc, #60]	; (100042e8 <HAL_MspInit+0x4c>)
100042ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
100042b0:	6453      	str	r3, [r2, #68]	; 0x44
100042b2:	4b0d      	ldr	r3, [pc, #52]	; (100042e8 <HAL_MspInit+0x4c>)
100042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100042b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
100042ba:	607b      	str	r3, [r7, #4]
100042bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
100042be:	2300      	movs	r3, #0
100042c0:	603b      	str	r3, [r7, #0]
100042c2:	4b09      	ldr	r3, [pc, #36]	; (100042e8 <HAL_MspInit+0x4c>)
100042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100042c6:	4a08      	ldr	r2, [pc, #32]	; (100042e8 <HAL_MspInit+0x4c>)
100042c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
100042cc:	6413      	str	r3, [r2, #64]	; 0x40
100042ce:	4b06      	ldr	r3, [pc, #24]	; (100042e8 <HAL_MspInit+0x4c>)
100042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
100042d6:	603b      	str	r3, [r7, #0]
100042d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100042da:	bf00      	nop
100042dc:	370c      	adds	r7, #12
100042de:	46bd      	mov	sp, r7
100042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
100042e4:	4770      	bx	lr
100042e6:	bf00      	nop
100042e8:	40023800 	.word	0x40023800

100042ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
100042ec:	b480      	push	{r7}
100042ee:	b083      	sub	sp, #12
100042f0:	af00      	add	r7, sp, #0
100042f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
100042f4:	687b      	ldr	r3, [r7, #4]
100042f6:	681b      	ldr	r3, [r3, #0]
100042f8:	4a05      	ldr	r2, [pc, #20]	; (10004310 <HAL_RTC_MspInit+0x24>)
100042fa:	4293      	cmp	r3, r2
100042fc:	d102      	bne.n	10004304 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
100042fe:	4b05      	ldr	r3, [pc, #20]	; (10004314 <HAL_RTC_MspInit+0x28>)
10004300:	2201      	movs	r2, #1
10004302:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
10004304:	bf00      	nop
10004306:	370c      	adds	r7, #12
10004308:	46bd      	mov	sp, r7
1000430a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000430e:	4770      	bx	lr
10004310:	40002800 	.word	0x40002800
10004314:	42470e3c 	.word	0x42470e3c

10004318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10004318:	b580      	push	{r7, lr}
1000431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
1000431c:	f002 fca2 	bl	10006c64 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
10004320:	bf00      	nop
10004322:	bd80      	pop	{r7, pc}

10004324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10004324:	b480      	push	{r7}
10004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10004328:	e7fe      	b.n	10004328 <HardFault_Handler+0x4>

1000432a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
1000432a:	b480      	push	{r7}
1000432c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
1000432e:	e7fe      	b.n	1000432e <MemManage_Handler+0x4>

10004330 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10004330:	b480      	push	{r7}
10004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10004334:	e7fe      	b.n	10004334 <BusFault_Handler+0x4>

10004336 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10004336:	b480      	push	{r7}
10004338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
1000433a:	e7fe      	b.n	1000433a <UsageFault_Handler+0x4>

1000433c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
1000433c:	b480      	push	{r7}
1000433e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10004340:	bf00      	nop
10004342:	46bd      	mov	sp, r7
10004344:	f85d 7b04 	ldr.w	r7, [sp], #4
10004348:	4770      	bx	lr

1000434a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
1000434a:	b480      	push	{r7}
1000434c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
1000434e:	bf00      	nop
10004350:	46bd      	mov	sp, r7
10004352:	f85d 7b04 	ldr.w	r7, [sp], #4
10004356:	4770      	bx	lr

10004358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10004358:	b480      	push	{r7}
1000435a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1000435c:	bf00      	nop
1000435e:	46bd      	mov	sp, r7
10004360:	f85d 7b04 	ldr.w	r7, [sp], #4
10004364:	4770      	bx	lr

10004366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10004366:	b580      	push	{r7, lr}
10004368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
1000436a:	f000 f8d5 	bl	10004518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
1000436e:	bf00      	nop
10004370:	bd80      	pop	{r7, pc}
	...

10004374 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
10004374:	b580      	push	{r7, lr}
10004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
10004378:	4802      	ldr	r0, [pc, #8]	; (10004384 <OTG_FS_IRQHandler+0x10>)
1000437a:	f000 ffe7 	bl	1000534c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
1000437e:	bf00      	nop
10004380:	bd80      	pop	{r7, pc}
10004382:	bf00      	nop
10004384:	20001a58 	.word	0x20001a58

10004388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10004388:	b580      	push	{r7, lr}
1000438a:	b086      	sub	sp, #24
1000438c:	af00      	add	r7, sp, #0
1000438e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10004390:	4a14      	ldr	r2, [pc, #80]	; (100043e4 <_sbrk+0x5c>)
10004392:	4b15      	ldr	r3, [pc, #84]	; (100043e8 <_sbrk+0x60>)
10004394:	1ad3      	subs	r3, r2, r3
10004396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10004398:	697b      	ldr	r3, [r7, #20]
1000439a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
1000439c:	4b13      	ldr	r3, [pc, #76]	; (100043ec <_sbrk+0x64>)
1000439e:	681b      	ldr	r3, [r3, #0]
100043a0:	2b00      	cmp	r3, #0
100043a2:	d102      	bne.n	100043aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
100043a4:	4b11      	ldr	r3, [pc, #68]	; (100043ec <_sbrk+0x64>)
100043a6:	4a12      	ldr	r2, [pc, #72]	; (100043f0 <_sbrk+0x68>)
100043a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
100043aa:	4b10      	ldr	r3, [pc, #64]	; (100043ec <_sbrk+0x64>)
100043ac:	681a      	ldr	r2, [r3, #0]
100043ae:	687b      	ldr	r3, [r7, #4]
100043b0:	4413      	add	r3, r2
100043b2:	693a      	ldr	r2, [r7, #16]
100043b4:	429a      	cmp	r2, r3
100043b6:	d207      	bcs.n	100043c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
100043b8:	f006 fdc0 	bl	1000af3c <__errno>
100043bc:	4603      	mov	r3, r0
100043be:	220c      	movs	r2, #12
100043c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100043c2:	f04f 33ff 	mov.w	r3, #4294967295
100043c6:	e009      	b.n	100043dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
100043c8:	4b08      	ldr	r3, [pc, #32]	; (100043ec <_sbrk+0x64>)
100043ca:	681b      	ldr	r3, [r3, #0]
100043cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
100043ce:	4b07      	ldr	r3, [pc, #28]	; (100043ec <_sbrk+0x64>)
100043d0:	681a      	ldr	r2, [r3, #0]
100043d2:	687b      	ldr	r3, [r7, #4]
100043d4:	4413      	add	r3, r2
100043d6:	4a05      	ldr	r2, [pc, #20]	; (100043ec <_sbrk+0x64>)
100043d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
100043da:	68fb      	ldr	r3, [r7, #12]
}
100043dc:	4618      	mov	r0, r3
100043de:	3718      	adds	r7, #24
100043e0:	46bd      	mov	sp, r7
100043e2:	bd80      	pop	{r7, pc}
100043e4:	20020000 	.word	0x20020000
100043e8:	00000400 	.word	0x00000400
100043ec:	20000290 	.word	0x20000290
100043f0:	20001e70 	.word	0x20001e70

100043f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
100043f4:	b480      	push	{r7}
100043f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
100043f8:	4b08      	ldr	r3, [pc, #32]	; (1000441c <SystemInit+0x28>)
100043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100043fe:	4a07      	ldr	r2, [pc, #28]	; (1000441c <SystemInit+0x28>)
10004400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10004404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
10004408:	4b04      	ldr	r3, [pc, #16]	; (1000441c <SystemInit+0x28>)
1000440a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
1000440e:	609a      	str	r2, [r3, #8]
#endif
}
10004410:	bf00      	nop
10004412:	46bd      	mov	sp, r7
10004414:	f85d 7b04 	ldr.w	r7, [sp], #4
10004418:	4770      	bx	lr
1000441a:	bf00      	nop
1000441c:	e000ed00 	.word	0xe000ed00

10004420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
10004420:	f8df d034 	ldr.w	sp, [pc, #52]	; 10004458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
10004424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10004426:	e003      	b.n	10004430 <LoopCopyDataInit>

10004428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10004428:	4b0c      	ldr	r3, [pc, #48]	; (1000445c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
1000442a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000442c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000442e:	3104      	adds	r1, #4

10004430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
10004430:	480b      	ldr	r0, [pc, #44]	; (10004460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
10004432:	4b0c      	ldr	r3, [pc, #48]	; (10004464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
10004434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10004436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10004438:	d3f6      	bcc.n	10004428 <CopyDataInit>
  ldr  r2, =_sbss
1000443a:	4a0b      	ldr	r2, [pc, #44]	; (10004468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
1000443c:	e002      	b.n	10004444 <LoopFillZerobss>

1000443e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
1000443e:	2300      	movs	r3, #0
  str  r3, [r2], #4
10004440:	f842 3b04 	str.w	r3, [r2], #4

10004444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
10004444:	4b09      	ldr	r3, [pc, #36]	; (1000446c <LoopFillZerobss+0x28>)
  cmp  r2, r3
10004446:	429a      	cmp	r2, r3
  bcc  FillZerobss
10004448:	d3f9      	bcc.n	1000443e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
1000444a:	f7ff ffd3 	bl	100043f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
1000444e:	f006 fd7b 	bl	1000af48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
10004452:	f7ff fc0d 	bl	10003c70 <main>
  bx  lr    
10004456:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
10004458:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
1000445c:	0800b95c 	.word	0x0800b95c
  ldr  r0, =_sdata
10004460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
10004464:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
10004468:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
1000446c:	20001e70 	.word	0x20001e70

10004470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10004470:	e7fe      	b.n	10004470 <ADC_IRQHandler>
	...

10004474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10004474:	b580      	push	{r7, lr}
10004476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
10004478:	4b0e      	ldr	r3, [pc, #56]	; (100044b4 <HAL_Init+0x40>)
1000447a:	681b      	ldr	r3, [r3, #0]
1000447c:	4a0d      	ldr	r2, [pc, #52]	; (100044b4 <HAL_Init+0x40>)
1000447e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
10004482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
10004484:	4b0b      	ldr	r3, [pc, #44]	; (100044b4 <HAL_Init+0x40>)
10004486:	681b      	ldr	r3, [r3, #0]
10004488:	4a0a      	ldr	r2, [pc, #40]	; (100044b4 <HAL_Init+0x40>)
1000448a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1000448e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
10004490:	4b08      	ldr	r3, [pc, #32]	; (100044b4 <HAL_Init+0x40>)
10004492:	681b      	ldr	r3, [r3, #0]
10004494:	4a07      	ldr	r2, [pc, #28]	; (100044b4 <HAL_Init+0x40>)
10004496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000449a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
1000449c:	2003      	movs	r0, #3
1000449e:	f000 f94f 	bl	10004740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
100044a2:	2000      	movs	r0, #0
100044a4:	f000 f808 	bl	100044b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
100044a8:	f7ff fef8 	bl	1000429c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
100044ac:	2300      	movs	r3, #0
}
100044ae:	4618      	mov	r0, r3
100044b0:	bd80      	pop	{r7, pc}
100044b2:	bf00      	nop
100044b4:	40023c00 	.word	0x40023c00

100044b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100044b8:	b580      	push	{r7, lr}
100044ba:	b082      	sub	sp, #8
100044bc:	af00      	add	r7, sp, #0
100044be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
100044c0:	4b12      	ldr	r3, [pc, #72]	; (1000450c <HAL_InitTick+0x54>)
100044c2:	681a      	ldr	r2, [r3, #0]
100044c4:	4b12      	ldr	r3, [pc, #72]	; (10004510 <HAL_InitTick+0x58>)
100044c6:	781b      	ldrb	r3, [r3, #0]
100044c8:	4619      	mov	r1, r3
100044ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
100044ce:	fbb3 f3f1 	udiv	r3, r3, r1
100044d2:	fbb2 f3f3 	udiv	r3, r2, r3
100044d6:	4618      	mov	r0, r3
100044d8:	f000 f967 	bl	100047aa <HAL_SYSTICK_Config>
100044dc:	4603      	mov	r3, r0
100044de:	2b00      	cmp	r3, #0
100044e0:	d001      	beq.n	100044e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
100044e2:	2301      	movs	r3, #1
100044e4:	e00e      	b.n	10004504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100044e6:	687b      	ldr	r3, [r7, #4]
100044e8:	2b0f      	cmp	r3, #15
100044ea:	d80a      	bhi.n	10004502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100044ec:	2200      	movs	r2, #0
100044ee:	6879      	ldr	r1, [r7, #4]
100044f0:	f04f 30ff 	mov.w	r0, #4294967295
100044f4:	f000 f92f 	bl	10004756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100044f8:	4a06      	ldr	r2, [pc, #24]	; (10004514 <HAL_InitTick+0x5c>)
100044fa:	687b      	ldr	r3, [r7, #4]
100044fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
100044fe:	2300      	movs	r3, #0
10004500:	e000      	b.n	10004504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
10004502:	2301      	movs	r3, #1
}
10004504:	4618      	mov	r0, r3
10004506:	3708      	adds	r7, #8
10004508:	46bd      	mov	sp, r7
1000450a:	bd80      	pop	{r7, pc}
1000450c:	20000000 	.word	0x20000000
10004510:	20000008 	.word	0x20000008
10004514:	20000004 	.word	0x20000004

10004518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10004518:	b480      	push	{r7}
1000451a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
1000451c:	4b06      	ldr	r3, [pc, #24]	; (10004538 <HAL_IncTick+0x20>)
1000451e:	781b      	ldrb	r3, [r3, #0]
10004520:	461a      	mov	r2, r3
10004522:	4b06      	ldr	r3, [pc, #24]	; (1000453c <HAL_IncTick+0x24>)
10004524:	681b      	ldr	r3, [r3, #0]
10004526:	4413      	add	r3, r2
10004528:	4a04      	ldr	r2, [pc, #16]	; (1000453c <HAL_IncTick+0x24>)
1000452a:	6013      	str	r3, [r2, #0]
}
1000452c:	bf00      	nop
1000452e:	46bd      	mov	sp, r7
10004530:	f85d 7b04 	ldr.w	r7, [sp], #4
10004534:	4770      	bx	lr
10004536:	bf00      	nop
10004538:	20000008 	.word	0x20000008
1000453c:	20000564 	.word	0x20000564

10004540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10004540:	b480      	push	{r7}
10004542:	af00      	add	r7, sp, #0
  return uwTick;
10004544:	4b03      	ldr	r3, [pc, #12]	; (10004554 <HAL_GetTick+0x14>)
10004546:	681b      	ldr	r3, [r3, #0]
}
10004548:	4618      	mov	r0, r3
1000454a:	46bd      	mov	sp, r7
1000454c:	f85d 7b04 	ldr.w	r7, [sp], #4
10004550:	4770      	bx	lr
10004552:	bf00      	nop
10004554:	20000564 	.word	0x20000564

10004558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10004558:	b580      	push	{r7, lr}
1000455a:	b084      	sub	sp, #16
1000455c:	af00      	add	r7, sp, #0
1000455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10004560:	f7ff ffee 	bl	10004540 <HAL_GetTick>
10004564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10004566:	687b      	ldr	r3, [r7, #4]
10004568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
1000456a:	68fb      	ldr	r3, [r7, #12]
1000456c:	f1b3 3fff 	cmp.w	r3, #4294967295
10004570:	d005      	beq.n	1000457e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10004572:	4b0a      	ldr	r3, [pc, #40]	; (1000459c <HAL_Delay+0x44>)
10004574:	781b      	ldrb	r3, [r3, #0]
10004576:	461a      	mov	r2, r3
10004578:	68fb      	ldr	r3, [r7, #12]
1000457a:	4413      	add	r3, r2
1000457c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
1000457e:	bf00      	nop
10004580:	f7ff ffde 	bl	10004540 <HAL_GetTick>
10004584:	4602      	mov	r2, r0
10004586:	68bb      	ldr	r3, [r7, #8]
10004588:	1ad3      	subs	r3, r2, r3
1000458a:	68fa      	ldr	r2, [r7, #12]
1000458c:	429a      	cmp	r2, r3
1000458e:	d8f7      	bhi.n	10004580 <HAL_Delay+0x28>
  {
  }
}
10004590:	bf00      	nop
10004592:	bf00      	nop
10004594:	3710      	adds	r7, #16
10004596:	46bd      	mov	sp, r7
10004598:	bd80      	pop	{r7, pc}
1000459a:	bf00      	nop
1000459c:	20000008 	.word	0x20000008

100045a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100045a0:	b480      	push	{r7}
100045a2:	b085      	sub	sp, #20
100045a4:	af00      	add	r7, sp, #0
100045a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
100045a8:	687b      	ldr	r3, [r7, #4]
100045aa:	f003 0307 	and.w	r3, r3, #7
100045ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
100045b0:	4b0c      	ldr	r3, [pc, #48]	; (100045e4 <__NVIC_SetPriorityGrouping+0x44>)
100045b2:	68db      	ldr	r3, [r3, #12]
100045b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
100045b6:	68ba      	ldr	r2, [r7, #8]
100045b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
100045bc:	4013      	ands	r3, r2
100045be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
100045c0:	68fb      	ldr	r3, [r7, #12]
100045c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100045c4:	68bb      	ldr	r3, [r7, #8]
100045c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
100045c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
100045cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
100045d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
100045d2:	4a04      	ldr	r2, [pc, #16]	; (100045e4 <__NVIC_SetPriorityGrouping+0x44>)
100045d4:	68bb      	ldr	r3, [r7, #8]
100045d6:	60d3      	str	r3, [r2, #12]
}
100045d8:	bf00      	nop
100045da:	3714      	adds	r7, #20
100045dc:	46bd      	mov	sp, r7
100045de:	f85d 7b04 	ldr.w	r7, [sp], #4
100045e2:	4770      	bx	lr
100045e4:	e000ed00 	.word	0xe000ed00

100045e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100045e8:	b480      	push	{r7}
100045ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100045ec:	4b04      	ldr	r3, [pc, #16]	; (10004600 <__NVIC_GetPriorityGrouping+0x18>)
100045ee:	68db      	ldr	r3, [r3, #12]
100045f0:	0a1b      	lsrs	r3, r3, #8
100045f2:	f003 0307 	and.w	r3, r3, #7
}
100045f6:	4618      	mov	r0, r3
100045f8:	46bd      	mov	sp, r7
100045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100045fe:	4770      	bx	lr
10004600:	e000ed00 	.word	0xe000ed00

10004604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004604:	b480      	push	{r7}
10004606:	b083      	sub	sp, #12
10004608:	af00      	add	r7, sp, #0
1000460a:	4603      	mov	r3, r0
1000460c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
1000460e:	f997 3007 	ldrsb.w	r3, [r7, #7]
10004612:	2b00      	cmp	r3, #0
10004614:	db0b      	blt.n	1000462e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10004616:	79fb      	ldrb	r3, [r7, #7]
10004618:	f003 021f 	and.w	r2, r3, #31
1000461c:	4907      	ldr	r1, [pc, #28]	; (1000463c <__NVIC_EnableIRQ+0x38>)
1000461e:	f997 3007 	ldrsb.w	r3, [r7, #7]
10004622:	095b      	lsrs	r3, r3, #5
10004624:	2001      	movs	r0, #1
10004626:	fa00 f202 	lsl.w	r2, r0, r2
1000462a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
1000462e:	bf00      	nop
10004630:	370c      	adds	r7, #12
10004632:	46bd      	mov	sp, r7
10004634:	f85d 7b04 	ldr.w	r7, [sp], #4
10004638:	4770      	bx	lr
1000463a:	bf00      	nop
1000463c:	e000e100 	.word	0xe000e100

10004640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10004640:	b480      	push	{r7}
10004642:	b083      	sub	sp, #12
10004644:	af00      	add	r7, sp, #0
10004646:	4603      	mov	r3, r0
10004648:	6039      	str	r1, [r7, #0]
1000464a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
1000464c:	f997 3007 	ldrsb.w	r3, [r7, #7]
10004650:	2b00      	cmp	r3, #0
10004652:	db0a      	blt.n	1000466a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10004654:	683b      	ldr	r3, [r7, #0]
10004656:	b2da      	uxtb	r2, r3
10004658:	490c      	ldr	r1, [pc, #48]	; (1000468c <__NVIC_SetPriority+0x4c>)
1000465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
1000465e:	0112      	lsls	r2, r2, #4
10004660:	b2d2      	uxtb	r2, r2
10004662:	440b      	add	r3, r1
10004664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10004668:	e00a      	b.n	10004680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1000466a:	683b      	ldr	r3, [r7, #0]
1000466c:	b2da      	uxtb	r2, r3
1000466e:	4908      	ldr	r1, [pc, #32]	; (10004690 <__NVIC_SetPriority+0x50>)
10004670:	79fb      	ldrb	r3, [r7, #7]
10004672:	f003 030f 	and.w	r3, r3, #15
10004676:	3b04      	subs	r3, #4
10004678:	0112      	lsls	r2, r2, #4
1000467a:	b2d2      	uxtb	r2, r2
1000467c:	440b      	add	r3, r1
1000467e:	761a      	strb	r2, [r3, #24]
}
10004680:	bf00      	nop
10004682:	370c      	adds	r7, #12
10004684:	46bd      	mov	sp, r7
10004686:	f85d 7b04 	ldr.w	r7, [sp], #4
1000468a:	4770      	bx	lr
1000468c:	e000e100 	.word	0xe000e100
10004690:	e000ed00 	.word	0xe000ed00

10004694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10004694:	b480      	push	{r7}
10004696:	b089      	sub	sp, #36	; 0x24
10004698:	af00      	add	r7, sp, #0
1000469a:	60f8      	str	r0, [r7, #12]
1000469c:	60b9      	str	r1, [r7, #8]
1000469e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
100046a0:	68fb      	ldr	r3, [r7, #12]
100046a2:	f003 0307 	and.w	r3, r3, #7
100046a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
100046a8:	69fb      	ldr	r3, [r7, #28]
100046aa:	f1c3 0307 	rsb	r3, r3, #7
100046ae:	2b04      	cmp	r3, #4
100046b0:	bf28      	it	cs
100046b2:	2304      	movcs	r3, #4
100046b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
100046b6:	69fb      	ldr	r3, [r7, #28]
100046b8:	3304      	adds	r3, #4
100046ba:	2b06      	cmp	r3, #6
100046bc:	d902      	bls.n	100046c4 <NVIC_EncodePriority+0x30>
100046be:	69fb      	ldr	r3, [r7, #28]
100046c0:	3b03      	subs	r3, #3
100046c2:	e000      	b.n	100046c6 <NVIC_EncodePriority+0x32>
100046c4:	2300      	movs	r3, #0
100046c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100046c8:	f04f 32ff 	mov.w	r2, #4294967295
100046cc:	69bb      	ldr	r3, [r7, #24]
100046ce:	fa02 f303 	lsl.w	r3, r2, r3
100046d2:	43da      	mvns	r2, r3
100046d4:	68bb      	ldr	r3, [r7, #8]
100046d6:	401a      	ands	r2, r3
100046d8:	697b      	ldr	r3, [r7, #20]
100046da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
100046dc:	f04f 31ff 	mov.w	r1, #4294967295
100046e0:	697b      	ldr	r3, [r7, #20]
100046e2:	fa01 f303 	lsl.w	r3, r1, r3
100046e6:	43d9      	mvns	r1, r3
100046e8:	687b      	ldr	r3, [r7, #4]
100046ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100046ec:	4313      	orrs	r3, r2
         );
}
100046ee:	4618      	mov	r0, r3
100046f0:	3724      	adds	r7, #36	; 0x24
100046f2:	46bd      	mov	sp, r7
100046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
100046f8:	4770      	bx	lr
	...

100046fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100046fc:	b580      	push	{r7, lr}
100046fe:	b082      	sub	sp, #8
10004700:	af00      	add	r7, sp, #0
10004702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10004704:	687b      	ldr	r3, [r7, #4]
10004706:	3b01      	subs	r3, #1
10004708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1000470c:	d301      	bcc.n	10004712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1000470e:	2301      	movs	r3, #1
10004710:	e00f      	b.n	10004732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10004712:	4a0a      	ldr	r2, [pc, #40]	; (1000473c <SysTick_Config+0x40>)
10004714:	687b      	ldr	r3, [r7, #4]
10004716:	3b01      	subs	r3, #1
10004718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
1000471a:	210f      	movs	r1, #15
1000471c:	f04f 30ff 	mov.w	r0, #4294967295
10004720:	f7ff ff8e 	bl	10004640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10004724:	4b05      	ldr	r3, [pc, #20]	; (1000473c <SysTick_Config+0x40>)
10004726:	2200      	movs	r2, #0
10004728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1000472a:	4b04      	ldr	r3, [pc, #16]	; (1000473c <SysTick_Config+0x40>)
1000472c:	2207      	movs	r2, #7
1000472e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10004730:	2300      	movs	r3, #0
}
10004732:	4618      	mov	r0, r3
10004734:	3708      	adds	r7, #8
10004736:	46bd      	mov	sp, r7
10004738:	bd80      	pop	{r7, pc}
1000473a:	bf00      	nop
1000473c:	e000e010 	.word	0xe000e010

10004740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10004740:	b580      	push	{r7, lr}
10004742:	b082      	sub	sp, #8
10004744:	af00      	add	r7, sp, #0
10004746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10004748:	6878      	ldr	r0, [r7, #4]
1000474a:	f7ff ff29 	bl	100045a0 <__NVIC_SetPriorityGrouping>
}
1000474e:	bf00      	nop
10004750:	3708      	adds	r7, #8
10004752:	46bd      	mov	sp, r7
10004754:	bd80      	pop	{r7, pc}

10004756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
10004756:	b580      	push	{r7, lr}
10004758:	b086      	sub	sp, #24
1000475a:	af00      	add	r7, sp, #0
1000475c:	4603      	mov	r3, r0
1000475e:	60b9      	str	r1, [r7, #8]
10004760:	607a      	str	r2, [r7, #4]
10004762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
10004764:	2300      	movs	r3, #0
10004766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
10004768:	f7ff ff3e 	bl	100045e8 <__NVIC_GetPriorityGrouping>
1000476c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
1000476e:	687a      	ldr	r2, [r7, #4]
10004770:	68b9      	ldr	r1, [r7, #8]
10004772:	6978      	ldr	r0, [r7, #20]
10004774:	f7ff ff8e 	bl	10004694 <NVIC_EncodePriority>
10004778:	4602      	mov	r2, r0
1000477a:	f997 300f 	ldrsb.w	r3, [r7, #15]
1000477e:	4611      	mov	r1, r2
10004780:	4618      	mov	r0, r3
10004782:	f7ff ff5d 	bl	10004640 <__NVIC_SetPriority>
}
10004786:	bf00      	nop
10004788:	3718      	adds	r7, #24
1000478a:	46bd      	mov	sp, r7
1000478c:	bd80      	pop	{r7, pc}

1000478e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000478e:	b580      	push	{r7, lr}
10004790:	b082      	sub	sp, #8
10004792:	af00      	add	r7, sp, #0
10004794:	4603      	mov	r3, r0
10004796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10004798:	f997 3007 	ldrsb.w	r3, [r7, #7]
1000479c:	4618      	mov	r0, r3
1000479e:	f7ff ff31 	bl	10004604 <__NVIC_EnableIRQ>
}
100047a2:	bf00      	nop
100047a4:	3708      	adds	r7, #8
100047a6:	46bd      	mov	sp, r7
100047a8:	bd80      	pop	{r7, pc}

100047aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
100047aa:	b580      	push	{r7, lr}
100047ac:	b082      	sub	sp, #8
100047ae:	af00      	add	r7, sp, #0
100047b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
100047b2:	6878      	ldr	r0, [r7, #4]
100047b4:	f7ff ffa2 	bl	100046fc <SysTick_Config>
100047b8:	4603      	mov	r3, r0
}
100047ba:	4618      	mov	r0, r3
100047bc:	3708      	adds	r7, #8
100047be:	46bd      	mov	sp, r7
100047c0:	bd80      	pop	{r7, pc}
	...

100047c4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
100047c4:	b580      	push	{r7, lr}
100047c6:	b086      	sub	sp, #24
100047c8:	af00      	add	r7, sp, #0
100047ca:	60f8      	str	r0, [r7, #12]
100047cc:	60b9      	str	r1, [r7, #8]
100047ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
100047d2:	2301      	movs	r3, #1
100047d4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
100047d6:	4b23      	ldr	r3, [pc, #140]	; (10004864 <HAL_FLASH_Program+0xa0>)
100047d8:	7e1b      	ldrb	r3, [r3, #24]
100047da:	2b01      	cmp	r3, #1
100047dc:	d101      	bne.n	100047e2 <HAL_FLASH_Program+0x1e>
100047de:	2302      	movs	r3, #2
100047e0:	e03b      	b.n	1000485a <HAL_FLASH_Program+0x96>
100047e2:	4b20      	ldr	r3, [pc, #128]	; (10004864 <HAL_FLASH_Program+0xa0>)
100047e4:	2201      	movs	r2, #1
100047e6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
100047e8:	f24c 3050 	movw	r0, #50000	; 0xc350
100047ec:	f000 f870 	bl	100048d0 <FLASH_WaitForLastOperation>
100047f0:	4603      	mov	r3, r0
100047f2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
100047f4:	7dfb      	ldrb	r3, [r7, #23]
100047f6:	2b00      	cmp	r3, #0
100047f8:	d12b      	bne.n	10004852 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
100047fa:	68fb      	ldr	r3, [r7, #12]
100047fc:	2b00      	cmp	r3, #0
100047fe:	d105      	bne.n	1000480c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
10004800:	783b      	ldrb	r3, [r7, #0]
10004802:	4619      	mov	r1, r3
10004804:	68b8      	ldr	r0, [r7, #8]
10004806:	f000 f91b 	bl	10004a40 <FLASH_Program_Byte>
1000480a:	e016      	b.n	1000483a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
1000480c:	68fb      	ldr	r3, [r7, #12]
1000480e:	2b01      	cmp	r3, #1
10004810:	d105      	bne.n	1000481e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
10004812:	883b      	ldrh	r3, [r7, #0]
10004814:	4619      	mov	r1, r3
10004816:	68b8      	ldr	r0, [r7, #8]
10004818:	f000 f8ee 	bl	100049f8 <FLASH_Program_HalfWord>
1000481c:	e00d      	b.n	1000483a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
1000481e:	68fb      	ldr	r3, [r7, #12]
10004820:	2b02      	cmp	r3, #2
10004822:	d105      	bne.n	10004830 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
10004824:	683b      	ldr	r3, [r7, #0]
10004826:	4619      	mov	r1, r3
10004828:	68b8      	ldr	r0, [r7, #8]
1000482a:	f000 f8c3 	bl	100049b4 <FLASH_Program_Word>
1000482e:	e004      	b.n	1000483a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
10004830:	e9d7 2300 	ldrd	r2, r3, [r7]
10004834:	68b8      	ldr	r0, [r7, #8]
10004836:	f000 f88b 	bl	10004950 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
1000483a:	f24c 3050 	movw	r0, #50000	; 0xc350
1000483e:	f000 f847 	bl	100048d0 <FLASH_WaitForLastOperation>
10004842:	4603      	mov	r3, r0
10004844:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
10004846:	4b08      	ldr	r3, [pc, #32]	; (10004868 <HAL_FLASH_Program+0xa4>)
10004848:	691b      	ldr	r3, [r3, #16]
1000484a:	4a07      	ldr	r2, [pc, #28]	; (10004868 <HAL_FLASH_Program+0xa4>)
1000484c:	f023 0301 	bic.w	r3, r3, #1
10004850:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10004852:	4b04      	ldr	r3, [pc, #16]	; (10004864 <HAL_FLASH_Program+0xa0>)
10004854:	2200      	movs	r2, #0
10004856:	761a      	strb	r2, [r3, #24]
  
  return status;
10004858:	7dfb      	ldrb	r3, [r7, #23]
}
1000485a:	4618      	mov	r0, r3
1000485c:	3718      	adds	r7, #24
1000485e:	46bd      	mov	sp, r7
10004860:	bd80      	pop	{r7, pc}
10004862:	bf00      	nop
10004864:	20000568 	.word	0x20000568
10004868:	40023c00 	.word	0x40023c00

1000486c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
1000486c:	b480      	push	{r7}
1000486e:	b083      	sub	sp, #12
10004870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
10004872:	2300      	movs	r3, #0
10004874:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
10004876:	4b0b      	ldr	r3, [pc, #44]	; (100048a4 <HAL_FLASH_Unlock+0x38>)
10004878:	691b      	ldr	r3, [r3, #16]
1000487a:	2b00      	cmp	r3, #0
1000487c:	da0b      	bge.n	10004896 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
1000487e:	4b09      	ldr	r3, [pc, #36]	; (100048a4 <HAL_FLASH_Unlock+0x38>)
10004880:	4a09      	ldr	r2, [pc, #36]	; (100048a8 <HAL_FLASH_Unlock+0x3c>)
10004882:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
10004884:	4b07      	ldr	r3, [pc, #28]	; (100048a4 <HAL_FLASH_Unlock+0x38>)
10004886:	4a09      	ldr	r2, [pc, #36]	; (100048ac <HAL_FLASH_Unlock+0x40>)
10004888:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
1000488a:	4b06      	ldr	r3, [pc, #24]	; (100048a4 <HAL_FLASH_Unlock+0x38>)
1000488c:	691b      	ldr	r3, [r3, #16]
1000488e:	2b00      	cmp	r3, #0
10004890:	da01      	bge.n	10004896 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
10004892:	2301      	movs	r3, #1
10004894:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
10004896:	79fb      	ldrb	r3, [r7, #7]
}
10004898:	4618      	mov	r0, r3
1000489a:	370c      	adds	r7, #12
1000489c:	46bd      	mov	sp, r7
1000489e:	f85d 7b04 	ldr.w	r7, [sp], #4
100048a2:	4770      	bx	lr
100048a4:	40023c00 	.word	0x40023c00
100048a8:	45670123 	.word	0x45670123
100048ac:	cdef89ab 	.word	0xcdef89ab

100048b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
100048b0:	b480      	push	{r7}
100048b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
100048b4:	4b05      	ldr	r3, [pc, #20]	; (100048cc <HAL_FLASH_Lock+0x1c>)
100048b6:	691b      	ldr	r3, [r3, #16]
100048b8:	4a04      	ldr	r2, [pc, #16]	; (100048cc <HAL_FLASH_Lock+0x1c>)
100048ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
100048be:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
100048c0:	2300      	movs	r3, #0
}
100048c2:	4618      	mov	r0, r3
100048c4:	46bd      	mov	sp, r7
100048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
100048ca:	4770      	bx	lr
100048cc:	40023c00 	.word	0x40023c00

100048d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
100048d0:	b580      	push	{r7, lr}
100048d2:	b084      	sub	sp, #16
100048d4:	af00      	add	r7, sp, #0
100048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
100048d8:	2300      	movs	r3, #0
100048da:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
100048dc:	4b1a      	ldr	r3, [pc, #104]	; (10004948 <FLASH_WaitForLastOperation+0x78>)
100048de:	2200      	movs	r2, #0
100048e0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
100048e2:	f7ff fe2d 	bl	10004540 <HAL_GetTick>
100048e6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
100048e8:	e010      	b.n	1000490c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
100048ea:	687b      	ldr	r3, [r7, #4]
100048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
100048f0:	d00c      	beq.n	1000490c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
100048f2:	687b      	ldr	r3, [r7, #4]
100048f4:	2b00      	cmp	r3, #0
100048f6:	d007      	beq.n	10004908 <FLASH_WaitForLastOperation+0x38>
100048f8:	f7ff fe22 	bl	10004540 <HAL_GetTick>
100048fc:	4602      	mov	r2, r0
100048fe:	68fb      	ldr	r3, [r7, #12]
10004900:	1ad3      	subs	r3, r2, r3
10004902:	687a      	ldr	r2, [r7, #4]
10004904:	429a      	cmp	r2, r3
10004906:	d201      	bcs.n	1000490c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
10004908:	2303      	movs	r3, #3
1000490a:	e019      	b.n	10004940 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
1000490c:	4b0f      	ldr	r3, [pc, #60]	; (1000494c <FLASH_WaitForLastOperation+0x7c>)
1000490e:	68db      	ldr	r3, [r3, #12]
10004910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10004914:	2b00      	cmp	r3, #0
10004916:	d1e8      	bne.n	100048ea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
10004918:	4b0c      	ldr	r3, [pc, #48]	; (1000494c <FLASH_WaitForLastOperation+0x7c>)
1000491a:	68db      	ldr	r3, [r3, #12]
1000491c:	f003 0301 	and.w	r3, r3, #1
10004920:	2b00      	cmp	r3, #0
10004922:	d002      	beq.n	1000492a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
10004924:	4b09      	ldr	r3, [pc, #36]	; (1000494c <FLASH_WaitForLastOperation+0x7c>)
10004926:	2201      	movs	r2, #1
10004928:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
1000492a:	4b08      	ldr	r3, [pc, #32]	; (1000494c <FLASH_WaitForLastOperation+0x7c>)
1000492c:	68db      	ldr	r3, [r3, #12]
1000492e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
10004932:	2b00      	cmp	r3, #0
10004934:	d003      	beq.n	1000493e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
10004936:	f000 f8a5 	bl	10004a84 <FLASH_SetErrorCode>
    return HAL_ERROR;
1000493a:	2301      	movs	r3, #1
1000493c:	e000      	b.n	10004940 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
1000493e:	2300      	movs	r3, #0
  
}  
10004940:	4618      	mov	r0, r3
10004942:	3710      	adds	r7, #16
10004944:	46bd      	mov	sp, r7
10004946:	bd80      	pop	{r7, pc}
10004948:	20000568 	.word	0x20000568
1000494c:	40023c00 	.word	0x40023c00

10004950 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
10004950:	b480      	push	{r7}
10004952:	b085      	sub	sp, #20
10004954:	af00      	add	r7, sp, #0
10004956:	60f8      	str	r0, [r7, #12]
10004958:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
1000495c:	4b14      	ldr	r3, [pc, #80]	; (100049b0 <FLASH_Program_DoubleWord+0x60>)
1000495e:	691b      	ldr	r3, [r3, #16]
10004960:	4a13      	ldr	r2, [pc, #76]	; (100049b0 <FLASH_Program_DoubleWord+0x60>)
10004962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10004966:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
10004968:	4b11      	ldr	r3, [pc, #68]	; (100049b0 <FLASH_Program_DoubleWord+0x60>)
1000496a:	691b      	ldr	r3, [r3, #16]
1000496c:	4a10      	ldr	r2, [pc, #64]	; (100049b0 <FLASH_Program_DoubleWord+0x60>)
1000496e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
10004972:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
10004974:	4b0e      	ldr	r3, [pc, #56]	; (100049b0 <FLASH_Program_DoubleWord+0x60>)
10004976:	691b      	ldr	r3, [r3, #16]
10004978:	4a0d      	ldr	r2, [pc, #52]	; (100049b0 <FLASH_Program_DoubleWord+0x60>)
1000497a:	f043 0301 	orr.w	r3, r3, #1
1000497e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
10004980:	68fb      	ldr	r3, [r7, #12]
10004982:	683a      	ldr	r2, [r7, #0]
10004984:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
10004986:	f3bf 8f6f 	isb	sy
}
1000498a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
1000498c:	e9d7 0100 	ldrd	r0, r1, [r7]
10004990:	f04f 0200 	mov.w	r2, #0
10004994:	f04f 0300 	mov.w	r3, #0
10004998:	000a      	movs	r2, r1
1000499a:	2300      	movs	r3, #0
1000499c:	68f9      	ldr	r1, [r7, #12]
1000499e:	3104      	adds	r1, #4
100049a0:	4613      	mov	r3, r2
100049a2:	600b      	str	r3, [r1, #0]
}
100049a4:	bf00      	nop
100049a6:	3714      	adds	r7, #20
100049a8:	46bd      	mov	sp, r7
100049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
100049ae:	4770      	bx	lr
100049b0:	40023c00 	.word	0x40023c00

100049b4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
100049b4:	b480      	push	{r7}
100049b6:	b083      	sub	sp, #12
100049b8:	af00      	add	r7, sp, #0
100049ba:	6078      	str	r0, [r7, #4]
100049bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
100049be:	4b0d      	ldr	r3, [pc, #52]	; (100049f4 <FLASH_Program_Word+0x40>)
100049c0:	691b      	ldr	r3, [r3, #16]
100049c2:	4a0c      	ldr	r2, [pc, #48]	; (100049f4 <FLASH_Program_Word+0x40>)
100049c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
100049c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
100049ca:	4b0a      	ldr	r3, [pc, #40]	; (100049f4 <FLASH_Program_Word+0x40>)
100049cc:	691b      	ldr	r3, [r3, #16]
100049ce:	4a09      	ldr	r2, [pc, #36]	; (100049f4 <FLASH_Program_Word+0x40>)
100049d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
100049d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
100049d6:	4b07      	ldr	r3, [pc, #28]	; (100049f4 <FLASH_Program_Word+0x40>)
100049d8:	691b      	ldr	r3, [r3, #16]
100049da:	4a06      	ldr	r2, [pc, #24]	; (100049f4 <FLASH_Program_Word+0x40>)
100049dc:	f043 0301 	orr.w	r3, r3, #1
100049e0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
100049e2:	687b      	ldr	r3, [r7, #4]
100049e4:	683a      	ldr	r2, [r7, #0]
100049e6:	601a      	str	r2, [r3, #0]
}
100049e8:	bf00      	nop
100049ea:	370c      	adds	r7, #12
100049ec:	46bd      	mov	sp, r7
100049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
100049f2:	4770      	bx	lr
100049f4:	40023c00 	.word	0x40023c00

100049f8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
100049f8:	b480      	push	{r7}
100049fa:	b083      	sub	sp, #12
100049fc:	af00      	add	r7, sp, #0
100049fe:	6078      	str	r0, [r7, #4]
10004a00:	460b      	mov	r3, r1
10004a02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
10004a04:	4b0d      	ldr	r3, [pc, #52]	; (10004a3c <FLASH_Program_HalfWord+0x44>)
10004a06:	691b      	ldr	r3, [r3, #16]
10004a08:	4a0c      	ldr	r2, [pc, #48]	; (10004a3c <FLASH_Program_HalfWord+0x44>)
10004a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10004a0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
10004a10:	4b0a      	ldr	r3, [pc, #40]	; (10004a3c <FLASH_Program_HalfWord+0x44>)
10004a12:	691b      	ldr	r3, [r3, #16]
10004a14:	4a09      	ldr	r2, [pc, #36]	; (10004a3c <FLASH_Program_HalfWord+0x44>)
10004a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10004a1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
10004a1c:	4b07      	ldr	r3, [pc, #28]	; (10004a3c <FLASH_Program_HalfWord+0x44>)
10004a1e:	691b      	ldr	r3, [r3, #16]
10004a20:	4a06      	ldr	r2, [pc, #24]	; (10004a3c <FLASH_Program_HalfWord+0x44>)
10004a22:	f043 0301 	orr.w	r3, r3, #1
10004a26:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
10004a28:	687b      	ldr	r3, [r7, #4]
10004a2a:	887a      	ldrh	r2, [r7, #2]
10004a2c:	801a      	strh	r2, [r3, #0]
}
10004a2e:	bf00      	nop
10004a30:	370c      	adds	r7, #12
10004a32:	46bd      	mov	sp, r7
10004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
10004a38:	4770      	bx	lr
10004a3a:	bf00      	nop
10004a3c:	40023c00 	.word	0x40023c00

10004a40 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
10004a40:	b480      	push	{r7}
10004a42:	b083      	sub	sp, #12
10004a44:	af00      	add	r7, sp, #0
10004a46:	6078      	str	r0, [r7, #4]
10004a48:	460b      	mov	r3, r1
10004a4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
10004a4c:	4b0c      	ldr	r3, [pc, #48]	; (10004a80 <FLASH_Program_Byte+0x40>)
10004a4e:	691b      	ldr	r3, [r3, #16]
10004a50:	4a0b      	ldr	r2, [pc, #44]	; (10004a80 <FLASH_Program_Byte+0x40>)
10004a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10004a56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
10004a58:	4b09      	ldr	r3, [pc, #36]	; (10004a80 <FLASH_Program_Byte+0x40>)
10004a5a:	4a09      	ldr	r2, [pc, #36]	; (10004a80 <FLASH_Program_Byte+0x40>)
10004a5c:	691b      	ldr	r3, [r3, #16]
10004a5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
10004a60:	4b07      	ldr	r3, [pc, #28]	; (10004a80 <FLASH_Program_Byte+0x40>)
10004a62:	691b      	ldr	r3, [r3, #16]
10004a64:	4a06      	ldr	r2, [pc, #24]	; (10004a80 <FLASH_Program_Byte+0x40>)
10004a66:	f043 0301 	orr.w	r3, r3, #1
10004a6a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
10004a6c:	687b      	ldr	r3, [r7, #4]
10004a6e:	78fa      	ldrb	r2, [r7, #3]
10004a70:	701a      	strb	r2, [r3, #0]
}
10004a72:	bf00      	nop
10004a74:	370c      	adds	r7, #12
10004a76:	46bd      	mov	sp, r7
10004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
10004a7c:	4770      	bx	lr
10004a7e:	bf00      	nop
10004a80:	40023c00 	.word	0x40023c00

10004a84 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
10004a84:	b480      	push	{r7}
10004a86:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
10004a88:	4b27      	ldr	r3, [pc, #156]	; (10004b28 <FLASH_SetErrorCode+0xa4>)
10004a8a:	68db      	ldr	r3, [r3, #12]
10004a8c:	f003 0310 	and.w	r3, r3, #16
10004a90:	2b00      	cmp	r3, #0
10004a92:	d008      	beq.n	10004aa6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
10004a94:	4b25      	ldr	r3, [pc, #148]	; (10004b2c <FLASH_SetErrorCode+0xa8>)
10004a96:	69db      	ldr	r3, [r3, #28]
10004a98:	f043 0310 	orr.w	r3, r3, #16
10004a9c:	4a23      	ldr	r2, [pc, #140]	; (10004b2c <FLASH_SetErrorCode+0xa8>)
10004a9e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
10004aa0:	4b21      	ldr	r3, [pc, #132]	; (10004b28 <FLASH_SetErrorCode+0xa4>)
10004aa2:	2210      	movs	r2, #16
10004aa4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
10004aa6:	4b20      	ldr	r3, [pc, #128]	; (10004b28 <FLASH_SetErrorCode+0xa4>)
10004aa8:	68db      	ldr	r3, [r3, #12]
10004aaa:	f003 0320 	and.w	r3, r3, #32
10004aae:	2b00      	cmp	r3, #0
10004ab0:	d008      	beq.n	10004ac4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
10004ab2:	4b1e      	ldr	r3, [pc, #120]	; (10004b2c <FLASH_SetErrorCode+0xa8>)
10004ab4:	69db      	ldr	r3, [r3, #28]
10004ab6:	f043 0308 	orr.w	r3, r3, #8
10004aba:	4a1c      	ldr	r2, [pc, #112]	; (10004b2c <FLASH_SetErrorCode+0xa8>)
10004abc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
10004abe:	4b1a      	ldr	r3, [pc, #104]	; (10004b28 <FLASH_SetErrorCode+0xa4>)
10004ac0:	2220      	movs	r2, #32
10004ac2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
10004ac4:	4b18      	ldr	r3, [pc, #96]	; (10004b28 <FLASH_SetErrorCode+0xa4>)
10004ac6:	68db      	ldr	r3, [r3, #12]
10004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
10004acc:	2b00      	cmp	r3, #0
10004ace:	d008      	beq.n	10004ae2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
10004ad0:	4b16      	ldr	r3, [pc, #88]	; (10004b2c <FLASH_SetErrorCode+0xa8>)
10004ad2:	69db      	ldr	r3, [r3, #28]
10004ad4:	f043 0304 	orr.w	r3, r3, #4
10004ad8:	4a14      	ldr	r2, [pc, #80]	; (10004b2c <FLASH_SetErrorCode+0xa8>)
10004ada:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
10004adc:	4b12      	ldr	r3, [pc, #72]	; (10004b28 <FLASH_SetErrorCode+0xa4>)
10004ade:	2240      	movs	r2, #64	; 0x40
10004ae0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
10004ae2:	4b11      	ldr	r3, [pc, #68]	; (10004b28 <FLASH_SetErrorCode+0xa4>)
10004ae4:	68db      	ldr	r3, [r3, #12]
10004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
10004aea:	2b00      	cmp	r3, #0
10004aec:	d008      	beq.n	10004b00 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
10004aee:	4b0f      	ldr	r3, [pc, #60]	; (10004b2c <FLASH_SetErrorCode+0xa8>)
10004af0:	69db      	ldr	r3, [r3, #28]
10004af2:	f043 0302 	orr.w	r3, r3, #2
10004af6:	4a0d      	ldr	r2, [pc, #52]	; (10004b2c <FLASH_SetErrorCode+0xa8>)
10004af8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
10004afa:	4b0b      	ldr	r3, [pc, #44]	; (10004b28 <FLASH_SetErrorCode+0xa4>)
10004afc:	2280      	movs	r2, #128	; 0x80
10004afe:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
10004b00:	4b09      	ldr	r3, [pc, #36]	; (10004b28 <FLASH_SetErrorCode+0xa4>)
10004b02:	68db      	ldr	r3, [r3, #12]
10004b04:	f003 0302 	and.w	r3, r3, #2
10004b08:	2b00      	cmp	r3, #0
10004b0a:	d008      	beq.n	10004b1e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
10004b0c:	4b07      	ldr	r3, [pc, #28]	; (10004b2c <FLASH_SetErrorCode+0xa8>)
10004b0e:	69db      	ldr	r3, [r3, #28]
10004b10:	f043 0320 	orr.w	r3, r3, #32
10004b14:	4a05      	ldr	r2, [pc, #20]	; (10004b2c <FLASH_SetErrorCode+0xa8>)
10004b16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
10004b18:	4b03      	ldr	r3, [pc, #12]	; (10004b28 <FLASH_SetErrorCode+0xa4>)
10004b1a:	2202      	movs	r2, #2
10004b1c:	60da      	str	r2, [r3, #12]
  }
}
10004b1e:	bf00      	nop
10004b20:	46bd      	mov	sp, r7
10004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
10004b26:	4770      	bx	lr
10004b28:	40023c00 	.word	0x40023c00
10004b2c:	20000568 	.word	0x20000568

10004b30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
10004b30:	b580      	push	{r7, lr}
10004b32:	b084      	sub	sp, #16
10004b34:	af00      	add	r7, sp, #0
10004b36:	6078      	str	r0, [r7, #4]
10004b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
10004b3a:	2301      	movs	r3, #1
10004b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
10004b3e:	2300      	movs	r3, #0
10004b40:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
10004b42:	4b31      	ldr	r3, [pc, #196]	; (10004c08 <HAL_FLASHEx_Erase+0xd8>)
10004b44:	7e1b      	ldrb	r3, [r3, #24]
10004b46:	2b01      	cmp	r3, #1
10004b48:	d101      	bne.n	10004b4e <HAL_FLASHEx_Erase+0x1e>
10004b4a:	2302      	movs	r3, #2
10004b4c:	e058      	b.n	10004c00 <HAL_FLASHEx_Erase+0xd0>
10004b4e:	4b2e      	ldr	r3, [pc, #184]	; (10004c08 <HAL_FLASHEx_Erase+0xd8>)
10004b50:	2201      	movs	r2, #1
10004b52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
10004b54:	f24c 3050 	movw	r0, #50000	; 0xc350
10004b58:	f7ff feba 	bl	100048d0 <FLASH_WaitForLastOperation>
10004b5c:	4603      	mov	r3, r0
10004b5e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
10004b60:	7bfb      	ldrb	r3, [r7, #15]
10004b62:	2b00      	cmp	r3, #0
10004b64:	d148      	bne.n	10004bf8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
10004b66:	683b      	ldr	r3, [r7, #0]
10004b68:	f04f 32ff 	mov.w	r2, #4294967295
10004b6c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
10004b6e:	687b      	ldr	r3, [r7, #4]
10004b70:	681b      	ldr	r3, [r3, #0]
10004b72:	2b01      	cmp	r3, #1
10004b74:	d115      	bne.n	10004ba2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
10004b76:	687b      	ldr	r3, [r7, #4]
10004b78:	691b      	ldr	r3, [r3, #16]
10004b7a:	b2da      	uxtb	r2, r3
10004b7c:	687b      	ldr	r3, [r7, #4]
10004b7e:	685b      	ldr	r3, [r3, #4]
10004b80:	4619      	mov	r1, r3
10004b82:	4610      	mov	r0, r2
10004b84:	f000 f844 	bl	10004c10 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
10004b88:	f24c 3050 	movw	r0, #50000	; 0xc350
10004b8c:	f7ff fea0 	bl	100048d0 <FLASH_WaitForLastOperation>
10004b90:	4603      	mov	r3, r0
10004b92:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
10004b94:	4b1d      	ldr	r3, [pc, #116]	; (10004c0c <HAL_FLASHEx_Erase+0xdc>)
10004b96:	691b      	ldr	r3, [r3, #16]
10004b98:	4a1c      	ldr	r2, [pc, #112]	; (10004c0c <HAL_FLASHEx_Erase+0xdc>)
10004b9a:	f023 0304 	bic.w	r3, r3, #4
10004b9e:	6113      	str	r3, [r2, #16]
10004ba0:	e028      	b.n	10004bf4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
10004ba2:	687b      	ldr	r3, [r7, #4]
10004ba4:	689b      	ldr	r3, [r3, #8]
10004ba6:	60bb      	str	r3, [r7, #8]
10004ba8:	e01c      	b.n	10004be4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
10004baa:	687b      	ldr	r3, [r7, #4]
10004bac:	691b      	ldr	r3, [r3, #16]
10004bae:	b2db      	uxtb	r3, r3
10004bb0:	4619      	mov	r1, r3
10004bb2:	68b8      	ldr	r0, [r7, #8]
10004bb4:	f000 f850 	bl	10004c58 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
10004bb8:	f24c 3050 	movw	r0, #50000	; 0xc350
10004bbc:	f7ff fe88 	bl	100048d0 <FLASH_WaitForLastOperation>
10004bc0:	4603      	mov	r3, r0
10004bc2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
10004bc4:	4b11      	ldr	r3, [pc, #68]	; (10004c0c <HAL_FLASHEx_Erase+0xdc>)
10004bc6:	691b      	ldr	r3, [r3, #16]
10004bc8:	4a10      	ldr	r2, [pc, #64]	; (10004c0c <HAL_FLASHEx_Erase+0xdc>)
10004bca:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
10004bce:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
10004bd0:	7bfb      	ldrb	r3, [r7, #15]
10004bd2:	2b00      	cmp	r3, #0
10004bd4:	d003      	beq.n	10004bde <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
10004bd6:	683b      	ldr	r3, [r7, #0]
10004bd8:	68ba      	ldr	r2, [r7, #8]
10004bda:	601a      	str	r2, [r3, #0]
          break;
10004bdc:	e00a      	b.n	10004bf4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
10004bde:	68bb      	ldr	r3, [r7, #8]
10004be0:	3301      	adds	r3, #1
10004be2:	60bb      	str	r3, [r7, #8]
10004be4:	687b      	ldr	r3, [r7, #4]
10004be6:	68da      	ldr	r2, [r3, #12]
10004be8:	687b      	ldr	r3, [r7, #4]
10004bea:	689b      	ldr	r3, [r3, #8]
10004bec:	4413      	add	r3, r2
10004bee:	68ba      	ldr	r2, [r7, #8]
10004bf0:	429a      	cmp	r2, r3
10004bf2:	d3da      	bcc.n	10004baa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
10004bf4:	f000 f878 	bl	10004ce8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10004bf8:	4b03      	ldr	r3, [pc, #12]	; (10004c08 <HAL_FLASHEx_Erase+0xd8>)
10004bfa:	2200      	movs	r2, #0
10004bfc:	761a      	strb	r2, [r3, #24]

  return status;
10004bfe:	7bfb      	ldrb	r3, [r7, #15]
}
10004c00:	4618      	mov	r0, r3
10004c02:	3710      	adds	r7, #16
10004c04:	46bd      	mov	sp, r7
10004c06:	bd80      	pop	{r7, pc}
10004c08:	20000568 	.word	0x20000568
10004c0c:	40023c00 	.word	0x40023c00

10004c10 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
10004c10:	b480      	push	{r7}
10004c12:	b083      	sub	sp, #12
10004c14:	af00      	add	r7, sp, #0
10004c16:	4603      	mov	r3, r0
10004c18:	6039      	str	r1, [r7, #0]
10004c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
10004c1c:	4b0d      	ldr	r3, [pc, #52]	; (10004c54 <FLASH_MassErase+0x44>)
10004c1e:	691b      	ldr	r3, [r3, #16]
10004c20:	4a0c      	ldr	r2, [pc, #48]	; (10004c54 <FLASH_MassErase+0x44>)
10004c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10004c26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
10004c28:	4b0a      	ldr	r3, [pc, #40]	; (10004c54 <FLASH_MassErase+0x44>)
10004c2a:	691b      	ldr	r3, [r3, #16]
10004c2c:	4a09      	ldr	r2, [pc, #36]	; (10004c54 <FLASH_MassErase+0x44>)
10004c2e:	f043 0304 	orr.w	r3, r3, #4
10004c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
10004c34:	4b07      	ldr	r3, [pc, #28]	; (10004c54 <FLASH_MassErase+0x44>)
10004c36:	691a      	ldr	r2, [r3, #16]
10004c38:	79fb      	ldrb	r3, [r7, #7]
10004c3a:	021b      	lsls	r3, r3, #8
10004c3c:	4313      	orrs	r3, r2
10004c3e:	4a05      	ldr	r2, [pc, #20]	; (10004c54 <FLASH_MassErase+0x44>)
10004c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10004c44:	6113      	str	r3, [r2, #16]
}
10004c46:	bf00      	nop
10004c48:	370c      	adds	r7, #12
10004c4a:	46bd      	mov	sp, r7
10004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
10004c50:	4770      	bx	lr
10004c52:	bf00      	nop
10004c54:	40023c00 	.word	0x40023c00

10004c58 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
10004c58:	b480      	push	{r7}
10004c5a:	b085      	sub	sp, #20
10004c5c:	af00      	add	r7, sp, #0
10004c5e:	6078      	str	r0, [r7, #4]
10004c60:	460b      	mov	r3, r1
10004c62:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
10004c64:	2300      	movs	r3, #0
10004c66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
10004c68:	78fb      	ldrb	r3, [r7, #3]
10004c6a:	2b00      	cmp	r3, #0
10004c6c:	d102      	bne.n	10004c74 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
10004c6e:	2300      	movs	r3, #0
10004c70:	60fb      	str	r3, [r7, #12]
10004c72:	e010      	b.n	10004c96 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
10004c74:	78fb      	ldrb	r3, [r7, #3]
10004c76:	2b01      	cmp	r3, #1
10004c78:	d103      	bne.n	10004c82 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
10004c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
10004c7e:	60fb      	str	r3, [r7, #12]
10004c80:	e009      	b.n	10004c96 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
10004c82:	78fb      	ldrb	r3, [r7, #3]
10004c84:	2b02      	cmp	r3, #2
10004c86:	d103      	bne.n	10004c90 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
10004c88:	f44f 7300 	mov.w	r3, #512	; 0x200
10004c8c:	60fb      	str	r3, [r7, #12]
10004c8e:	e002      	b.n	10004c96 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
10004c90:	f44f 7340 	mov.w	r3, #768	; 0x300
10004c94:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
10004c96:	4b13      	ldr	r3, [pc, #76]	; (10004ce4 <FLASH_Erase_Sector+0x8c>)
10004c98:	691b      	ldr	r3, [r3, #16]
10004c9a:	4a12      	ldr	r2, [pc, #72]	; (10004ce4 <FLASH_Erase_Sector+0x8c>)
10004c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10004ca0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
10004ca2:	4b10      	ldr	r3, [pc, #64]	; (10004ce4 <FLASH_Erase_Sector+0x8c>)
10004ca4:	691a      	ldr	r2, [r3, #16]
10004ca6:	490f      	ldr	r1, [pc, #60]	; (10004ce4 <FLASH_Erase_Sector+0x8c>)
10004ca8:	68fb      	ldr	r3, [r7, #12]
10004caa:	4313      	orrs	r3, r2
10004cac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
10004cae:	4b0d      	ldr	r3, [pc, #52]	; (10004ce4 <FLASH_Erase_Sector+0x8c>)
10004cb0:	691b      	ldr	r3, [r3, #16]
10004cb2:	4a0c      	ldr	r2, [pc, #48]	; (10004ce4 <FLASH_Erase_Sector+0x8c>)
10004cb4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10004cb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
10004cba:	4b0a      	ldr	r3, [pc, #40]	; (10004ce4 <FLASH_Erase_Sector+0x8c>)
10004cbc:	691a      	ldr	r2, [r3, #16]
10004cbe:	687b      	ldr	r3, [r7, #4]
10004cc0:	00db      	lsls	r3, r3, #3
10004cc2:	4313      	orrs	r3, r2
10004cc4:	4a07      	ldr	r2, [pc, #28]	; (10004ce4 <FLASH_Erase_Sector+0x8c>)
10004cc6:	f043 0302 	orr.w	r3, r3, #2
10004cca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
10004ccc:	4b05      	ldr	r3, [pc, #20]	; (10004ce4 <FLASH_Erase_Sector+0x8c>)
10004cce:	691b      	ldr	r3, [r3, #16]
10004cd0:	4a04      	ldr	r2, [pc, #16]	; (10004ce4 <FLASH_Erase_Sector+0x8c>)
10004cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10004cd6:	6113      	str	r3, [r2, #16]
}
10004cd8:	bf00      	nop
10004cda:	3714      	adds	r7, #20
10004cdc:	46bd      	mov	sp, r7
10004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
10004ce2:	4770      	bx	lr
10004ce4:	40023c00 	.word	0x40023c00

10004ce8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
10004ce8:	b480      	push	{r7}
10004cea:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
10004cec:	4b20      	ldr	r3, [pc, #128]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004cee:	681b      	ldr	r3, [r3, #0]
10004cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
10004cf4:	2b00      	cmp	r3, #0
10004cf6:	d017      	beq.n	10004d28 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
10004cf8:	4b1d      	ldr	r3, [pc, #116]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004cfa:	681b      	ldr	r3, [r3, #0]
10004cfc:	4a1c      	ldr	r2, [pc, #112]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004cfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
10004d02:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
10004d04:	4b1a      	ldr	r3, [pc, #104]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d06:	681b      	ldr	r3, [r3, #0]
10004d08:	4a19      	ldr	r2, [pc, #100]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
10004d0e:	6013      	str	r3, [r2, #0]
10004d10:	4b17      	ldr	r3, [pc, #92]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d12:	681b      	ldr	r3, [r3, #0]
10004d14:	4a16      	ldr	r2, [pc, #88]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
10004d1a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
10004d1c:	4b14      	ldr	r3, [pc, #80]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d1e:	681b      	ldr	r3, [r3, #0]
10004d20:	4a13      	ldr	r2, [pc, #76]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
10004d26:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
10004d28:	4b11      	ldr	r3, [pc, #68]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d2a:	681b      	ldr	r3, [r3, #0]
10004d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
10004d30:	2b00      	cmp	r3, #0
10004d32:	d017      	beq.n	10004d64 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
10004d34:	4b0e      	ldr	r3, [pc, #56]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d36:	681b      	ldr	r3, [r3, #0]
10004d38:	4a0d      	ldr	r2, [pc, #52]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
10004d3e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
10004d40:	4b0b      	ldr	r3, [pc, #44]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d42:	681b      	ldr	r3, [r3, #0]
10004d44:	4a0a      	ldr	r2, [pc, #40]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
10004d4a:	6013      	str	r3, [r2, #0]
10004d4c:	4b08      	ldr	r3, [pc, #32]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d4e:	681b      	ldr	r3, [r3, #0]
10004d50:	4a07      	ldr	r2, [pc, #28]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
10004d56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
10004d58:	4b05      	ldr	r3, [pc, #20]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d5a:	681b      	ldr	r3, [r3, #0]
10004d5c:	4a04      	ldr	r2, [pc, #16]	; (10004d70 <FLASH_FlushCaches+0x88>)
10004d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10004d62:	6013      	str	r3, [r2, #0]
  }
}
10004d64:	bf00      	nop
10004d66:	46bd      	mov	sp, r7
10004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
10004d6c:	4770      	bx	lr
10004d6e:	bf00      	nop
10004d70:	40023c00 	.word	0x40023c00

10004d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10004d74:	b480      	push	{r7}
10004d76:	b089      	sub	sp, #36	; 0x24
10004d78:	af00      	add	r7, sp, #0
10004d7a:	6078      	str	r0, [r7, #4]
10004d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
10004d7e:	2300      	movs	r3, #0
10004d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
10004d82:	2300      	movs	r3, #0
10004d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
10004d86:	2300      	movs	r3, #0
10004d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
10004d8a:	2300      	movs	r3, #0
10004d8c:	61fb      	str	r3, [r7, #28]
10004d8e:	e16b      	b.n	10005068 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
10004d90:	2201      	movs	r2, #1
10004d92:	69fb      	ldr	r3, [r7, #28]
10004d94:	fa02 f303 	lsl.w	r3, r2, r3
10004d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
10004d9a:	683b      	ldr	r3, [r7, #0]
10004d9c:	681b      	ldr	r3, [r3, #0]
10004d9e:	697a      	ldr	r2, [r7, #20]
10004da0:	4013      	ands	r3, r2
10004da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
10004da4:	693a      	ldr	r2, [r7, #16]
10004da6:	697b      	ldr	r3, [r7, #20]
10004da8:	429a      	cmp	r2, r3
10004daa:	f040 815a 	bne.w	10005062 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
10004dae:	683b      	ldr	r3, [r7, #0]
10004db0:	685b      	ldr	r3, [r3, #4]
10004db2:	f003 0303 	and.w	r3, r3, #3
10004db6:	2b01      	cmp	r3, #1
10004db8:	d005      	beq.n	10004dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
10004dba:	683b      	ldr	r3, [r7, #0]
10004dbc:	685b      	ldr	r3, [r3, #4]
10004dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
10004dc2:	2b02      	cmp	r3, #2
10004dc4:	d130      	bne.n	10004e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
10004dc6:	687b      	ldr	r3, [r7, #4]
10004dc8:	689b      	ldr	r3, [r3, #8]
10004dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
10004dcc:	69fb      	ldr	r3, [r7, #28]
10004dce:	005b      	lsls	r3, r3, #1
10004dd0:	2203      	movs	r2, #3
10004dd2:	fa02 f303 	lsl.w	r3, r2, r3
10004dd6:	43db      	mvns	r3, r3
10004dd8:	69ba      	ldr	r2, [r7, #24]
10004dda:	4013      	ands	r3, r2
10004ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
10004dde:	683b      	ldr	r3, [r7, #0]
10004de0:	68da      	ldr	r2, [r3, #12]
10004de2:	69fb      	ldr	r3, [r7, #28]
10004de4:	005b      	lsls	r3, r3, #1
10004de6:	fa02 f303 	lsl.w	r3, r2, r3
10004dea:	69ba      	ldr	r2, [r7, #24]
10004dec:	4313      	orrs	r3, r2
10004dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10004df0:	687b      	ldr	r3, [r7, #4]
10004df2:	69ba      	ldr	r2, [r7, #24]
10004df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10004df6:	687b      	ldr	r3, [r7, #4]
10004df8:	685b      	ldr	r3, [r3, #4]
10004dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
10004dfc:	2201      	movs	r2, #1
10004dfe:	69fb      	ldr	r3, [r7, #28]
10004e00:	fa02 f303 	lsl.w	r3, r2, r3
10004e04:	43db      	mvns	r3, r3
10004e06:	69ba      	ldr	r2, [r7, #24]
10004e08:	4013      	ands	r3, r2
10004e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
10004e0c:	683b      	ldr	r3, [r7, #0]
10004e0e:	685b      	ldr	r3, [r3, #4]
10004e10:	091b      	lsrs	r3, r3, #4
10004e12:	f003 0201 	and.w	r2, r3, #1
10004e16:	69fb      	ldr	r3, [r7, #28]
10004e18:	fa02 f303 	lsl.w	r3, r2, r3
10004e1c:	69ba      	ldr	r2, [r7, #24]
10004e1e:	4313      	orrs	r3, r2
10004e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10004e22:	687b      	ldr	r3, [r7, #4]
10004e24:	69ba      	ldr	r2, [r7, #24]
10004e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10004e28:	683b      	ldr	r3, [r7, #0]
10004e2a:	685b      	ldr	r3, [r3, #4]
10004e2c:	f003 0303 	and.w	r3, r3, #3
10004e30:	2b03      	cmp	r3, #3
10004e32:	d017      	beq.n	10004e64 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
10004e34:	687b      	ldr	r3, [r7, #4]
10004e36:	68db      	ldr	r3, [r3, #12]
10004e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
10004e3a:	69fb      	ldr	r3, [r7, #28]
10004e3c:	005b      	lsls	r3, r3, #1
10004e3e:	2203      	movs	r2, #3
10004e40:	fa02 f303 	lsl.w	r3, r2, r3
10004e44:	43db      	mvns	r3, r3
10004e46:	69ba      	ldr	r2, [r7, #24]
10004e48:	4013      	ands	r3, r2
10004e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10004e4c:	683b      	ldr	r3, [r7, #0]
10004e4e:	689a      	ldr	r2, [r3, #8]
10004e50:	69fb      	ldr	r3, [r7, #28]
10004e52:	005b      	lsls	r3, r3, #1
10004e54:	fa02 f303 	lsl.w	r3, r2, r3
10004e58:	69ba      	ldr	r2, [r7, #24]
10004e5a:	4313      	orrs	r3, r2
10004e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
10004e5e:	687b      	ldr	r3, [r7, #4]
10004e60:	69ba      	ldr	r2, [r7, #24]
10004e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
10004e64:	683b      	ldr	r3, [r7, #0]
10004e66:	685b      	ldr	r3, [r3, #4]
10004e68:	f003 0303 	and.w	r3, r3, #3
10004e6c:	2b02      	cmp	r3, #2
10004e6e:	d123      	bne.n	10004eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
10004e70:	69fb      	ldr	r3, [r7, #28]
10004e72:	08da      	lsrs	r2, r3, #3
10004e74:	687b      	ldr	r3, [r7, #4]
10004e76:	3208      	adds	r2, #8
10004e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10004e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
10004e7e:	69fb      	ldr	r3, [r7, #28]
10004e80:	f003 0307 	and.w	r3, r3, #7
10004e84:	009b      	lsls	r3, r3, #2
10004e86:	220f      	movs	r2, #15
10004e88:	fa02 f303 	lsl.w	r3, r2, r3
10004e8c:	43db      	mvns	r3, r3
10004e8e:	69ba      	ldr	r2, [r7, #24]
10004e90:	4013      	ands	r3, r2
10004e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
10004e94:	683b      	ldr	r3, [r7, #0]
10004e96:	691a      	ldr	r2, [r3, #16]
10004e98:	69fb      	ldr	r3, [r7, #28]
10004e9a:	f003 0307 	and.w	r3, r3, #7
10004e9e:	009b      	lsls	r3, r3, #2
10004ea0:	fa02 f303 	lsl.w	r3, r2, r3
10004ea4:	69ba      	ldr	r2, [r7, #24]
10004ea6:	4313      	orrs	r3, r2
10004ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
10004eaa:	69fb      	ldr	r3, [r7, #28]
10004eac:	08da      	lsrs	r2, r3, #3
10004eae:	687b      	ldr	r3, [r7, #4]
10004eb0:	3208      	adds	r2, #8
10004eb2:	69b9      	ldr	r1, [r7, #24]
10004eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10004eb8:	687b      	ldr	r3, [r7, #4]
10004eba:	681b      	ldr	r3, [r3, #0]
10004ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
10004ebe:	69fb      	ldr	r3, [r7, #28]
10004ec0:	005b      	lsls	r3, r3, #1
10004ec2:	2203      	movs	r2, #3
10004ec4:	fa02 f303 	lsl.w	r3, r2, r3
10004ec8:	43db      	mvns	r3, r3
10004eca:	69ba      	ldr	r2, [r7, #24]
10004ecc:	4013      	ands	r3, r2
10004ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
10004ed0:	683b      	ldr	r3, [r7, #0]
10004ed2:	685b      	ldr	r3, [r3, #4]
10004ed4:	f003 0203 	and.w	r2, r3, #3
10004ed8:	69fb      	ldr	r3, [r7, #28]
10004eda:	005b      	lsls	r3, r3, #1
10004edc:	fa02 f303 	lsl.w	r3, r2, r3
10004ee0:	69ba      	ldr	r2, [r7, #24]
10004ee2:	4313      	orrs	r3, r2
10004ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10004ee6:	687b      	ldr	r3, [r7, #4]
10004ee8:	69ba      	ldr	r2, [r7, #24]
10004eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10004eec:	683b      	ldr	r3, [r7, #0]
10004eee:	685b      	ldr	r3, [r3, #4]
10004ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10004ef4:	2b00      	cmp	r3, #0
10004ef6:	f000 80b4 	beq.w	10005062 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
10004efa:	2300      	movs	r3, #0
10004efc:	60fb      	str	r3, [r7, #12]
10004efe:	4b60      	ldr	r3, [pc, #384]	; (10005080 <HAL_GPIO_Init+0x30c>)
10004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10004f02:	4a5f      	ldr	r2, [pc, #380]	; (10005080 <HAL_GPIO_Init+0x30c>)
10004f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
10004f08:	6453      	str	r3, [r2, #68]	; 0x44
10004f0a:	4b5d      	ldr	r3, [pc, #372]	; (10005080 <HAL_GPIO_Init+0x30c>)
10004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10004f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
10004f12:	60fb      	str	r3, [r7, #12]
10004f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
10004f16:	4a5b      	ldr	r2, [pc, #364]	; (10005084 <HAL_GPIO_Init+0x310>)
10004f18:	69fb      	ldr	r3, [r7, #28]
10004f1a:	089b      	lsrs	r3, r3, #2
10004f1c:	3302      	adds	r3, #2
10004f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10004f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
10004f24:	69fb      	ldr	r3, [r7, #28]
10004f26:	f003 0303 	and.w	r3, r3, #3
10004f2a:	009b      	lsls	r3, r3, #2
10004f2c:	220f      	movs	r2, #15
10004f2e:	fa02 f303 	lsl.w	r3, r2, r3
10004f32:	43db      	mvns	r3, r3
10004f34:	69ba      	ldr	r2, [r7, #24]
10004f36:	4013      	ands	r3, r2
10004f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
10004f3a:	687b      	ldr	r3, [r7, #4]
10004f3c:	4a52      	ldr	r2, [pc, #328]	; (10005088 <HAL_GPIO_Init+0x314>)
10004f3e:	4293      	cmp	r3, r2
10004f40:	d02b      	beq.n	10004f9a <HAL_GPIO_Init+0x226>
10004f42:	687b      	ldr	r3, [r7, #4]
10004f44:	4a51      	ldr	r2, [pc, #324]	; (1000508c <HAL_GPIO_Init+0x318>)
10004f46:	4293      	cmp	r3, r2
10004f48:	d025      	beq.n	10004f96 <HAL_GPIO_Init+0x222>
10004f4a:	687b      	ldr	r3, [r7, #4]
10004f4c:	4a50      	ldr	r2, [pc, #320]	; (10005090 <HAL_GPIO_Init+0x31c>)
10004f4e:	4293      	cmp	r3, r2
10004f50:	d01f      	beq.n	10004f92 <HAL_GPIO_Init+0x21e>
10004f52:	687b      	ldr	r3, [r7, #4]
10004f54:	4a4f      	ldr	r2, [pc, #316]	; (10005094 <HAL_GPIO_Init+0x320>)
10004f56:	4293      	cmp	r3, r2
10004f58:	d019      	beq.n	10004f8e <HAL_GPIO_Init+0x21a>
10004f5a:	687b      	ldr	r3, [r7, #4]
10004f5c:	4a4e      	ldr	r2, [pc, #312]	; (10005098 <HAL_GPIO_Init+0x324>)
10004f5e:	4293      	cmp	r3, r2
10004f60:	d013      	beq.n	10004f8a <HAL_GPIO_Init+0x216>
10004f62:	687b      	ldr	r3, [r7, #4]
10004f64:	4a4d      	ldr	r2, [pc, #308]	; (1000509c <HAL_GPIO_Init+0x328>)
10004f66:	4293      	cmp	r3, r2
10004f68:	d00d      	beq.n	10004f86 <HAL_GPIO_Init+0x212>
10004f6a:	687b      	ldr	r3, [r7, #4]
10004f6c:	4a4c      	ldr	r2, [pc, #304]	; (100050a0 <HAL_GPIO_Init+0x32c>)
10004f6e:	4293      	cmp	r3, r2
10004f70:	d007      	beq.n	10004f82 <HAL_GPIO_Init+0x20e>
10004f72:	687b      	ldr	r3, [r7, #4]
10004f74:	4a4b      	ldr	r2, [pc, #300]	; (100050a4 <HAL_GPIO_Init+0x330>)
10004f76:	4293      	cmp	r3, r2
10004f78:	d101      	bne.n	10004f7e <HAL_GPIO_Init+0x20a>
10004f7a:	2307      	movs	r3, #7
10004f7c:	e00e      	b.n	10004f9c <HAL_GPIO_Init+0x228>
10004f7e:	2308      	movs	r3, #8
10004f80:	e00c      	b.n	10004f9c <HAL_GPIO_Init+0x228>
10004f82:	2306      	movs	r3, #6
10004f84:	e00a      	b.n	10004f9c <HAL_GPIO_Init+0x228>
10004f86:	2305      	movs	r3, #5
10004f88:	e008      	b.n	10004f9c <HAL_GPIO_Init+0x228>
10004f8a:	2304      	movs	r3, #4
10004f8c:	e006      	b.n	10004f9c <HAL_GPIO_Init+0x228>
10004f8e:	2303      	movs	r3, #3
10004f90:	e004      	b.n	10004f9c <HAL_GPIO_Init+0x228>
10004f92:	2302      	movs	r3, #2
10004f94:	e002      	b.n	10004f9c <HAL_GPIO_Init+0x228>
10004f96:	2301      	movs	r3, #1
10004f98:	e000      	b.n	10004f9c <HAL_GPIO_Init+0x228>
10004f9a:	2300      	movs	r3, #0
10004f9c:	69fa      	ldr	r2, [r7, #28]
10004f9e:	f002 0203 	and.w	r2, r2, #3
10004fa2:	0092      	lsls	r2, r2, #2
10004fa4:	4093      	lsls	r3, r2
10004fa6:	69ba      	ldr	r2, [r7, #24]
10004fa8:	4313      	orrs	r3, r2
10004faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
10004fac:	4935      	ldr	r1, [pc, #212]	; (10005084 <HAL_GPIO_Init+0x310>)
10004fae:	69fb      	ldr	r3, [r7, #28]
10004fb0:	089b      	lsrs	r3, r3, #2
10004fb2:	3302      	adds	r3, #2
10004fb4:	69ba      	ldr	r2, [r7, #24]
10004fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
10004fba:	4b3b      	ldr	r3, [pc, #236]	; (100050a8 <HAL_GPIO_Init+0x334>)
10004fbc:	681b      	ldr	r3, [r3, #0]
10004fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10004fc0:	693b      	ldr	r3, [r7, #16]
10004fc2:	43db      	mvns	r3, r3
10004fc4:	69ba      	ldr	r2, [r7, #24]
10004fc6:	4013      	ands	r3, r2
10004fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10004fca:	683b      	ldr	r3, [r7, #0]
10004fcc:	685b      	ldr	r3, [r3, #4]
10004fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10004fd2:	2b00      	cmp	r3, #0
10004fd4:	d003      	beq.n	10004fde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
10004fd6:	69ba      	ldr	r2, [r7, #24]
10004fd8:	693b      	ldr	r3, [r7, #16]
10004fda:	4313      	orrs	r3, r2
10004fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
10004fde:	4a32      	ldr	r2, [pc, #200]	; (100050a8 <HAL_GPIO_Init+0x334>)
10004fe0:	69bb      	ldr	r3, [r7, #24]
10004fe2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
10004fe4:	4b30      	ldr	r3, [pc, #192]	; (100050a8 <HAL_GPIO_Init+0x334>)
10004fe6:	685b      	ldr	r3, [r3, #4]
10004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10004fea:	693b      	ldr	r3, [r7, #16]
10004fec:	43db      	mvns	r3, r3
10004fee:	69ba      	ldr	r2, [r7, #24]
10004ff0:	4013      	ands	r3, r2
10004ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10004ff4:	683b      	ldr	r3, [r7, #0]
10004ff6:	685b      	ldr	r3, [r3, #4]
10004ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10004ffc:	2b00      	cmp	r3, #0
10004ffe:	d003      	beq.n	10005008 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
10005000:	69ba      	ldr	r2, [r7, #24]
10005002:	693b      	ldr	r3, [r7, #16]
10005004:	4313      	orrs	r3, r2
10005006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
10005008:	4a27      	ldr	r2, [pc, #156]	; (100050a8 <HAL_GPIO_Init+0x334>)
1000500a:	69bb      	ldr	r3, [r7, #24]
1000500c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
1000500e:	4b26      	ldr	r3, [pc, #152]	; (100050a8 <HAL_GPIO_Init+0x334>)
10005010:	689b      	ldr	r3, [r3, #8]
10005012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10005014:	693b      	ldr	r3, [r7, #16]
10005016:	43db      	mvns	r3, r3
10005018:	69ba      	ldr	r2, [r7, #24]
1000501a:	4013      	ands	r3, r2
1000501c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
1000501e:	683b      	ldr	r3, [r7, #0]
10005020:	685b      	ldr	r3, [r3, #4]
10005022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10005026:	2b00      	cmp	r3, #0
10005028:	d003      	beq.n	10005032 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
1000502a:	69ba      	ldr	r2, [r7, #24]
1000502c:	693b      	ldr	r3, [r7, #16]
1000502e:	4313      	orrs	r3, r2
10005030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
10005032:	4a1d      	ldr	r2, [pc, #116]	; (100050a8 <HAL_GPIO_Init+0x334>)
10005034:	69bb      	ldr	r3, [r7, #24]
10005036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
10005038:	4b1b      	ldr	r3, [pc, #108]	; (100050a8 <HAL_GPIO_Init+0x334>)
1000503a:	68db      	ldr	r3, [r3, #12]
1000503c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000503e:	693b      	ldr	r3, [r7, #16]
10005040:	43db      	mvns	r3, r3
10005042:	69ba      	ldr	r2, [r7, #24]
10005044:	4013      	ands	r3, r2
10005046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10005048:	683b      	ldr	r3, [r7, #0]
1000504a:	685b      	ldr	r3, [r3, #4]
1000504c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10005050:	2b00      	cmp	r3, #0
10005052:	d003      	beq.n	1000505c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
10005054:	69ba      	ldr	r2, [r7, #24]
10005056:	693b      	ldr	r3, [r7, #16]
10005058:	4313      	orrs	r3, r2
1000505a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
1000505c:	4a12      	ldr	r2, [pc, #72]	; (100050a8 <HAL_GPIO_Init+0x334>)
1000505e:	69bb      	ldr	r3, [r7, #24]
10005060:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
10005062:	69fb      	ldr	r3, [r7, #28]
10005064:	3301      	adds	r3, #1
10005066:	61fb      	str	r3, [r7, #28]
10005068:	69fb      	ldr	r3, [r7, #28]
1000506a:	2b0f      	cmp	r3, #15
1000506c:	f67f ae90 	bls.w	10004d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
10005070:	bf00      	nop
10005072:	bf00      	nop
10005074:	3724      	adds	r7, #36	; 0x24
10005076:	46bd      	mov	sp, r7
10005078:	f85d 7b04 	ldr.w	r7, [sp], #4
1000507c:	4770      	bx	lr
1000507e:	bf00      	nop
10005080:	40023800 	.word	0x40023800
10005084:	40013800 	.word	0x40013800
10005088:	40020000 	.word	0x40020000
1000508c:	40020400 	.word	0x40020400
10005090:	40020800 	.word	0x40020800
10005094:	40020c00 	.word	0x40020c00
10005098:	40021000 	.word	0x40021000
1000509c:	40021400 	.word	0x40021400
100050a0:	40021800 	.word	0x40021800
100050a4:	40021c00 	.word	0x40021c00
100050a8:	40013c00 	.word	0x40013c00

100050ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
100050ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100050ae:	b08f      	sub	sp, #60	; 0x3c
100050b0:	af0a      	add	r7, sp, #40	; 0x28
100050b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
100050b4:	687b      	ldr	r3, [r7, #4]
100050b6:	2b00      	cmp	r3, #0
100050b8:	d101      	bne.n	100050be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
100050ba:	2301      	movs	r3, #1
100050bc:	e10f      	b.n	100052de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
100050be:	687b      	ldr	r3, [r7, #4]
100050c0:	681b      	ldr	r3, [r3, #0]
100050c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
100050c4:	687b      	ldr	r3, [r7, #4]
100050c6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
100050ca:	b2db      	uxtb	r3, r3
100050cc:	2b00      	cmp	r3, #0
100050ce:	d106      	bne.n	100050de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
100050d0:	687b      	ldr	r3, [r7, #4]
100050d2:	2200      	movs	r2, #0
100050d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
100050d8:	6878      	ldr	r0, [r7, #4]
100050da:	f005 fc17 	bl	1000a90c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
100050de:	687b      	ldr	r3, [r7, #4]
100050e0:	2203      	movs	r2, #3
100050e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
100050e6:	68bb      	ldr	r3, [r7, #8]
100050e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100050ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
100050ee:	2b00      	cmp	r3, #0
100050f0:	d102      	bne.n	100050f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
100050f2:	687b      	ldr	r3, [r7, #4]
100050f4:	2200      	movs	r2, #0
100050f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
100050f8:	687b      	ldr	r3, [r7, #4]
100050fa:	681b      	ldr	r3, [r3, #0]
100050fc:	4618      	mov	r0, r3
100050fe:	f002 f8a8 	bl	10007252 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
10005102:	687b      	ldr	r3, [r7, #4]
10005104:	681b      	ldr	r3, [r3, #0]
10005106:	603b      	str	r3, [r7, #0]
10005108:	687e      	ldr	r6, [r7, #4]
1000510a:	466d      	mov	r5, sp
1000510c:	f106 0410 	add.w	r4, r6, #16
10005110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10005112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10005114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10005116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10005118:	e894 0003 	ldmia.w	r4, {r0, r1}
1000511c:	e885 0003 	stmia.w	r5, {r0, r1}
10005120:	1d33      	adds	r3, r6, #4
10005122:	cb0e      	ldmia	r3, {r1, r2, r3}
10005124:	6838      	ldr	r0, [r7, #0]
10005126:	f001 ff80 	bl	1000702a <USB_CoreInit>
1000512a:	4603      	mov	r3, r0
1000512c:	2b00      	cmp	r3, #0
1000512e:	d005      	beq.n	1000513c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
10005130:	687b      	ldr	r3, [r7, #4]
10005132:	2202      	movs	r2, #2
10005134:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
10005138:	2301      	movs	r3, #1
1000513a:	e0d0      	b.n	100052de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
1000513c:	687b      	ldr	r3, [r7, #4]
1000513e:	681b      	ldr	r3, [r3, #0]
10005140:	2100      	movs	r1, #0
10005142:	4618      	mov	r0, r3
10005144:	f002 f896 	bl	10007274 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
10005148:	2300      	movs	r3, #0
1000514a:	73fb      	strb	r3, [r7, #15]
1000514c:	e04a      	b.n	100051e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
1000514e:	7bfa      	ldrb	r2, [r7, #15]
10005150:	6879      	ldr	r1, [r7, #4]
10005152:	4613      	mov	r3, r2
10005154:	00db      	lsls	r3, r3, #3
10005156:	1a9b      	subs	r3, r3, r2
10005158:	009b      	lsls	r3, r3, #2
1000515a:	440b      	add	r3, r1
1000515c:	333d      	adds	r3, #61	; 0x3d
1000515e:	2201      	movs	r2, #1
10005160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
10005162:	7bfa      	ldrb	r2, [r7, #15]
10005164:	6879      	ldr	r1, [r7, #4]
10005166:	4613      	mov	r3, r2
10005168:	00db      	lsls	r3, r3, #3
1000516a:	1a9b      	subs	r3, r3, r2
1000516c:	009b      	lsls	r3, r3, #2
1000516e:	440b      	add	r3, r1
10005170:	333c      	adds	r3, #60	; 0x3c
10005172:	7bfa      	ldrb	r2, [r7, #15]
10005174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
10005176:	7bfa      	ldrb	r2, [r7, #15]
10005178:	7bfb      	ldrb	r3, [r7, #15]
1000517a:	b298      	uxth	r0, r3
1000517c:	6879      	ldr	r1, [r7, #4]
1000517e:	4613      	mov	r3, r2
10005180:	00db      	lsls	r3, r3, #3
10005182:	1a9b      	subs	r3, r3, r2
10005184:	009b      	lsls	r3, r3, #2
10005186:	440b      	add	r3, r1
10005188:	3342      	adds	r3, #66	; 0x42
1000518a:	4602      	mov	r2, r0
1000518c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
1000518e:	7bfa      	ldrb	r2, [r7, #15]
10005190:	6879      	ldr	r1, [r7, #4]
10005192:	4613      	mov	r3, r2
10005194:	00db      	lsls	r3, r3, #3
10005196:	1a9b      	subs	r3, r3, r2
10005198:	009b      	lsls	r3, r3, #2
1000519a:	440b      	add	r3, r1
1000519c:	333f      	adds	r3, #63	; 0x3f
1000519e:	2200      	movs	r2, #0
100051a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
100051a2:	7bfa      	ldrb	r2, [r7, #15]
100051a4:	6879      	ldr	r1, [r7, #4]
100051a6:	4613      	mov	r3, r2
100051a8:	00db      	lsls	r3, r3, #3
100051aa:	1a9b      	subs	r3, r3, r2
100051ac:	009b      	lsls	r3, r3, #2
100051ae:	440b      	add	r3, r1
100051b0:	3344      	adds	r3, #68	; 0x44
100051b2:	2200      	movs	r2, #0
100051b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
100051b6:	7bfa      	ldrb	r2, [r7, #15]
100051b8:	6879      	ldr	r1, [r7, #4]
100051ba:	4613      	mov	r3, r2
100051bc:	00db      	lsls	r3, r3, #3
100051be:	1a9b      	subs	r3, r3, r2
100051c0:	009b      	lsls	r3, r3, #2
100051c2:	440b      	add	r3, r1
100051c4:	3348      	adds	r3, #72	; 0x48
100051c6:	2200      	movs	r2, #0
100051c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
100051ca:	7bfa      	ldrb	r2, [r7, #15]
100051cc:	6879      	ldr	r1, [r7, #4]
100051ce:	4613      	mov	r3, r2
100051d0:	00db      	lsls	r3, r3, #3
100051d2:	1a9b      	subs	r3, r3, r2
100051d4:	009b      	lsls	r3, r3, #2
100051d6:	440b      	add	r3, r1
100051d8:	3350      	adds	r3, #80	; 0x50
100051da:	2200      	movs	r2, #0
100051dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
100051de:	7bfb      	ldrb	r3, [r7, #15]
100051e0:	3301      	adds	r3, #1
100051e2:	73fb      	strb	r3, [r7, #15]
100051e4:	7bfa      	ldrb	r2, [r7, #15]
100051e6:	687b      	ldr	r3, [r7, #4]
100051e8:	685b      	ldr	r3, [r3, #4]
100051ea:	429a      	cmp	r2, r3
100051ec:	d3af      	bcc.n	1000514e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
100051ee:	2300      	movs	r3, #0
100051f0:	73fb      	strb	r3, [r7, #15]
100051f2:	e044      	b.n	1000527e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
100051f4:	7bfa      	ldrb	r2, [r7, #15]
100051f6:	6879      	ldr	r1, [r7, #4]
100051f8:	4613      	mov	r3, r2
100051fa:	00db      	lsls	r3, r3, #3
100051fc:	1a9b      	subs	r3, r3, r2
100051fe:	009b      	lsls	r3, r3, #2
10005200:	440b      	add	r3, r1
10005202:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
10005206:	2200      	movs	r2, #0
10005208:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
1000520a:	7bfa      	ldrb	r2, [r7, #15]
1000520c:	6879      	ldr	r1, [r7, #4]
1000520e:	4613      	mov	r3, r2
10005210:	00db      	lsls	r3, r3, #3
10005212:	1a9b      	subs	r3, r3, r2
10005214:	009b      	lsls	r3, r3, #2
10005216:	440b      	add	r3, r1
10005218:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
1000521c:	7bfa      	ldrb	r2, [r7, #15]
1000521e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
10005220:	7bfa      	ldrb	r2, [r7, #15]
10005222:	6879      	ldr	r1, [r7, #4]
10005224:	4613      	mov	r3, r2
10005226:	00db      	lsls	r3, r3, #3
10005228:	1a9b      	subs	r3, r3, r2
1000522a:	009b      	lsls	r3, r3, #2
1000522c:	440b      	add	r3, r1
1000522e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
10005232:	2200      	movs	r2, #0
10005234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
10005236:	7bfa      	ldrb	r2, [r7, #15]
10005238:	6879      	ldr	r1, [r7, #4]
1000523a:	4613      	mov	r3, r2
1000523c:	00db      	lsls	r3, r3, #3
1000523e:	1a9b      	subs	r3, r3, r2
10005240:	009b      	lsls	r3, r3, #2
10005242:	440b      	add	r3, r1
10005244:	f503 7301 	add.w	r3, r3, #516	; 0x204
10005248:	2200      	movs	r2, #0
1000524a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
1000524c:	7bfa      	ldrb	r2, [r7, #15]
1000524e:	6879      	ldr	r1, [r7, #4]
10005250:	4613      	mov	r3, r2
10005252:	00db      	lsls	r3, r3, #3
10005254:	1a9b      	subs	r3, r3, r2
10005256:	009b      	lsls	r3, r3, #2
10005258:	440b      	add	r3, r1
1000525a:	f503 7302 	add.w	r3, r3, #520	; 0x208
1000525e:	2200      	movs	r2, #0
10005260:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
10005262:	7bfa      	ldrb	r2, [r7, #15]
10005264:	6879      	ldr	r1, [r7, #4]
10005266:	4613      	mov	r3, r2
10005268:	00db      	lsls	r3, r3, #3
1000526a:	1a9b      	subs	r3, r3, r2
1000526c:	009b      	lsls	r3, r3, #2
1000526e:	440b      	add	r3, r1
10005270:	f503 7304 	add.w	r3, r3, #528	; 0x210
10005274:	2200      	movs	r2, #0
10005276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
10005278:	7bfb      	ldrb	r3, [r7, #15]
1000527a:	3301      	adds	r3, #1
1000527c:	73fb      	strb	r3, [r7, #15]
1000527e:	7bfa      	ldrb	r2, [r7, #15]
10005280:	687b      	ldr	r3, [r7, #4]
10005282:	685b      	ldr	r3, [r3, #4]
10005284:	429a      	cmp	r2, r3
10005286:	d3b5      	bcc.n	100051f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
10005288:	687b      	ldr	r3, [r7, #4]
1000528a:	681b      	ldr	r3, [r3, #0]
1000528c:	603b      	str	r3, [r7, #0]
1000528e:	687e      	ldr	r6, [r7, #4]
10005290:	466d      	mov	r5, sp
10005292:	f106 0410 	add.w	r4, r6, #16
10005296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10005298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1000529a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1000529c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1000529e:	e894 0003 	ldmia.w	r4, {r0, r1}
100052a2:	e885 0003 	stmia.w	r5, {r0, r1}
100052a6:	1d33      	adds	r3, r6, #4
100052a8:	cb0e      	ldmia	r3, {r1, r2, r3}
100052aa:	6838      	ldr	r0, [r7, #0]
100052ac:	f002 f80c 	bl	100072c8 <USB_DevInit>
100052b0:	4603      	mov	r3, r0
100052b2:	2b00      	cmp	r3, #0
100052b4:	d005      	beq.n	100052c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
100052b6:	687b      	ldr	r3, [r7, #4]
100052b8:	2202      	movs	r2, #2
100052ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
100052be:	2301      	movs	r3, #1
100052c0:	e00d      	b.n	100052de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
100052c2:	687b      	ldr	r3, [r7, #4]
100052c4:	2200      	movs	r2, #0
100052c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
100052ca:	687b      	ldr	r3, [r7, #4]
100052cc:	2201      	movs	r2, #1
100052ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
100052d2:	687b      	ldr	r3, [r7, #4]
100052d4:	681b      	ldr	r3, [r3, #0]
100052d6:	4618      	mov	r0, r3
100052d8:	f003 f854 	bl	10008384 <USB_DevDisconnect>

  return HAL_OK;
100052dc:	2300      	movs	r3, #0
}
100052de:	4618      	mov	r0, r3
100052e0:	3714      	adds	r7, #20
100052e2:	46bd      	mov	sp, r7
100052e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

100052e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
100052e6:	b580      	push	{r7, lr}
100052e8:	b084      	sub	sp, #16
100052ea:	af00      	add	r7, sp, #0
100052ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
100052ee:	687b      	ldr	r3, [r7, #4]
100052f0:	681b      	ldr	r3, [r3, #0]
100052f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
100052f4:	687b      	ldr	r3, [r7, #4]
100052f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
100052fa:	2b01      	cmp	r3, #1
100052fc:	d101      	bne.n	10005302 <HAL_PCD_Start+0x1c>
100052fe:	2302      	movs	r3, #2
10005300:	e020      	b.n	10005344 <HAL_PCD_Start+0x5e>
10005302:	687b      	ldr	r3, [r7, #4]
10005304:	2201      	movs	r2, #1
10005306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
1000530a:	687b      	ldr	r3, [r7, #4]
1000530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000530e:	2b01      	cmp	r3, #1
10005310:	d109      	bne.n	10005326 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
10005312:	687b      	ldr	r3, [r7, #4]
10005314:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
10005316:	2b01      	cmp	r3, #1
10005318:	d005      	beq.n	10005326 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
1000531a:	68fb      	ldr	r3, [r7, #12]
1000531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000531e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
10005322:	68fb      	ldr	r3, [r7, #12]
10005324:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
10005326:	687b      	ldr	r3, [r7, #4]
10005328:	681b      	ldr	r3, [r3, #0]
1000532a:	4618      	mov	r0, r3
1000532c:	f001 ff80 	bl	10007230 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
10005330:	687b      	ldr	r3, [r7, #4]
10005332:	681b      	ldr	r3, [r3, #0]
10005334:	4618      	mov	r0, r3
10005336:	f003 f804 	bl	10008342 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
1000533a:	687b      	ldr	r3, [r7, #4]
1000533c:	2200      	movs	r2, #0
1000533e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
10005342:	2300      	movs	r3, #0
}
10005344:	4618      	mov	r0, r3
10005346:	3710      	adds	r7, #16
10005348:	46bd      	mov	sp, r7
1000534a:	bd80      	pop	{r7, pc}

1000534c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
1000534c:	b590      	push	{r4, r7, lr}
1000534e:	b08d      	sub	sp, #52	; 0x34
10005350:	af00      	add	r7, sp, #0
10005352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
10005354:	687b      	ldr	r3, [r7, #4]
10005356:	681b      	ldr	r3, [r3, #0]
10005358:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
1000535a:	6a3b      	ldr	r3, [r7, #32]
1000535c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
1000535e:	687b      	ldr	r3, [r7, #4]
10005360:	681b      	ldr	r3, [r3, #0]
10005362:	4618      	mov	r0, r3
10005364:	f003 f8c2 	bl	100084ec <USB_GetMode>
10005368:	4603      	mov	r3, r0
1000536a:	2b00      	cmp	r3, #0
1000536c:	f040 839d 	bne.w	10005aaa <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
10005370:	687b      	ldr	r3, [r7, #4]
10005372:	681b      	ldr	r3, [r3, #0]
10005374:	4618      	mov	r0, r3
10005376:	f003 f826 	bl	100083c6 <USB_ReadInterrupts>
1000537a:	4603      	mov	r3, r0
1000537c:	2b00      	cmp	r3, #0
1000537e:	f000 8393 	beq.w	10005aa8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
10005382:	687b      	ldr	r3, [r7, #4]
10005384:	681b      	ldr	r3, [r3, #0]
10005386:	4618      	mov	r0, r3
10005388:	f003 f81d 	bl	100083c6 <USB_ReadInterrupts>
1000538c:	4603      	mov	r3, r0
1000538e:	f003 0302 	and.w	r3, r3, #2
10005392:	2b02      	cmp	r3, #2
10005394:	d107      	bne.n	100053a6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
10005396:	687b      	ldr	r3, [r7, #4]
10005398:	681b      	ldr	r3, [r3, #0]
1000539a:	695a      	ldr	r2, [r3, #20]
1000539c:	687b      	ldr	r3, [r7, #4]
1000539e:	681b      	ldr	r3, [r3, #0]
100053a0:	f002 0202 	and.w	r2, r2, #2
100053a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
100053a6:	687b      	ldr	r3, [r7, #4]
100053a8:	681b      	ldr	r3, [r3, #0]
100053aa:	4618      	mov	r0, r3
100053ac:	f003 f80b 	bl	100083c6 <USB_ReadInterrupts>
100053b0:	4603      	mov	r3, r0
100053b2:	f003 0310 	and.w	r3, r3, #16
100053b6:	2b10      	cmp	r3, #16
100053b8:	d161      	bne.n	1000547e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
100053ba:	687b      	ldr	r3, [r7, #4]
100053bc:	681b      	ldr	r3, [r3, #0]
100053be:	699a      	ldr	r2, [r3, #24]
100053c0:	687b      	ldr	r3, [r7, #4]
100053c2:	681b      	ldr	r3, [r3, #0]
100053c4:	f022 0210 	bic.w	r2, r2, #16
100053c8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
100053ca:	6a3b      	ldr	r3, [r7, #32]
100053cc:	6a1b      	ldr	r3, [r3, #32]
100053ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
100053d0:	69bb      	ldr	r3, [r7, #24]
100053d2:	f003 020f 	and.w	r2, r3, #15
100053d6:	4613      	mov	r3, r2
100053d8:	00db      	lsls	r3, r3, #3
100053da:	1a9b      	subs	r3, r3, r2
100053dc:	009b      	lsls	r3, r3, #2
100053de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
100053e2:	687a      	ldr	r2, [r7, #4]
100053e4:	4413      	add	r3, r2
100053e6:	3304      	adds	r3, #4
100053e8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
100053ea:	69bb      	ldr	r3, [r7, #24]
100053ec:	0c5b      	lsrs	r3, r3, #17
100053ee:	f003 030f 	and.w	r3, r3, #15
100053f2:	2b02      	cmp	r3, #2
100053f4:	d124      	bne.n	10005440 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
100053f6:	69ba      	ldr	r2, [r7, #24]
100053f8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
100053fc:	4013      	ands	r3, r2
100053fe:	2b00      	cmp	r3, #0
10005400:	d035      	beq.n	1000546e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
10005402:	697b      	ldr	r3, [r7, #20]
10005404:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
10005406:	69bb      	ldr	r3, [r7, #24]
10005408:	091b      	lsrs	r3, r3, #4
1000540a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
1000540c:	f3c3 030a 	ubfx	r3, r3, #0, #11
10005410:	b29b      	uxth	r3, r3
10005412:	461a      	mov	r2, r3
10005414:	6a38      	ldr	r0, [r7, #32]
10005416:	f002 fe71 	bl	100080fc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
1000541a:	697b      	ldr	r3, [r7, #20]
1000541c:	68da      	ldr	r2, [r3, #12]
1000541e:	69bb      	ldr	r3, [r7, #24]
10005420:	091b      	lsrs	r3, r3, #4
10005422:	f3c3 030a 	ubfx	r3, r3, #0, #11
10005426:	441a      	add	r2, r3
10005428:	697b      	ldr	r3, [r7, #20]
1000542a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
1000542c:	697b      	ldr	r3, [r7, #20]
1000542e:	699a      	ldr	r2, [r3, #24]
10005430:	69bb      	ldr	r3, [r7, #24]
10005432:	091b      	lsrs	r3, r3, #4
10005434:	f3c3 030a 	ubfx	r3, r3, #0, #11
10005438:	441a      	add	r2, r3
1000543a:	697b      	ldr	r3, [r7, #20]
1000543c:	619a      	str	r2, [r3, #24]
1000543e:	e016      	b.n	1000546e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
10005440:	69bb      	ldr	r3, [r7, #24]
10005442:	0c5b      	lsrs	r3, r3, #17
10005444:	f003 030f 	and.w	r3, r3, #15
10005448:	2b06      	cmp	r3, #6
1000544a:	d110      	bne.n	1000546e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
1000544c:	687b      	ldr	r3, [r7, #4]
1000544e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
10005452:	2208      	movs	r2, #8
10005454:	4619      	mov	r1, r3
10005456:	6a38      	ldr	r0, [r7, #32]
10005458:	f002 fe50 	bl	100080fc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
1000545c:	697b      	ldr	r3, [r7, #20]
1000545e:	699a      	ldr	r2, [r3, #24]
10005460:	69bb      	ldr	r3, [r7, #24]
10005462:	091b      	lsrs	r3, r3, #4
10005464:	f3c3 030a 	ubfx	r3, r3, #0, #11
10005468:	441a      	add	r2, r3
1000546a:	697b      	ldr	r3, [r7, #20]
1000546c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
1000546e:	687b      	ldr	r3, [r7, #4]
10005470:	681b      	ldr	r3, [r3, #0]
10005472:	699a      	ldr	r2, [r3, #24]
10005474:	687b      	ldr	r3, [r7, #4]
10005476:	681b      	ldr	r3, [r3, #0]
10005478:	f042 0210 	orr.w	r2, r2, #16
1000547c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
1000547e:	687b      	ldr	r3, [r7, #4]
10005480:	681b      	ldr	r3, [r3, #0]
10005482:	4618      	mov	r0, r3
10005484:	f002 ff9f 	bl	100083c6 <USB_ReadInterrupts>
10005488:	4603      	mov	r3, r0
1000548a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
1000548e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
10005492:	d16e      	bne.n	10005572 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
10005494:	2300      	movs	r3, #0
10005496:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
10005498:	687b      	ldr	r3, [r7, #4]
1000549a:	681b      	ldr	r3, [r3, #0]
1000549c:	4618      	mov	r0, r3
1000549e:	f002 ffa5 	bl	100083ec <USB_ReadDevAllOutEpInterrupt>
100054a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
100054a4:	e062      	b.n	1000556c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
100054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
100054a8:	f003 0301 	and.w	r3, r3, #1
100054ac:	2b00      	cmp	r3, #0
100054ae:	d057      	beq.n	10005560 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
100054b0:	687b      	ldr	r3, [r7, #4]
100054b2:	681b      	ldr	r3, [r3, #0]
100054b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100054b6:	b2d2      	uxtb	r2, r2
100054b8:	4611      	mov	r1, r2
100054ba:	4618      	mov	r0, r3
100054bc:	f002 ffca 	bl	10008454 <USB_ReadDevOutEPInterrupt>
100054c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
100054c2:	693b      	ldr	r3, [r7, #16]
100054c4:	f003 0301 	and.w	r3, r3, #1
100054c8:	2b00      	cmp	r3, #0
100054ca:	d00c      	beq.n	100054e6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
100054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100054ce:	015a      	lsls	r2, r3, #5
100054d0:	69fb      	ldr	r3, [r7, #28]
100054d2:	4413      	add	r3, r2
100054d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100054d8:	461a      	mov	r2, r3
100054da:	2301      	movs	r3, #1
100054dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
100054de:	6a79      	ldr	r1, [r7, #36]	; 0x24
100054e0:	6878      	ldr	r0, [r7, #4]
100054e2:	f000 fdb1 	bl	10006048 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
100054e6:	693b      	ldr	r3, [r7, #16]
100054e8:	f003 0308 	and.w	r3, r3, #8
100054ec:	2b00      	cmp	r3, #0
100054ee:	d00c      	beq.n	1000550a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
100054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100054f2:	015a      	lsls	r2, r3, #5
100054f4:	69fb      	ldr	r3, [r7, #28]
100054f6:	4413      	add	r3, r2
100054f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100054fc:	461a      	mov	r2, r3
100054fe:	2308      	movs	r3, #8
10005500:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
10005502:	6a79      	ldr	r1, [r7, #36]	; 0x24
10005504:	6878      	ldr	r0, [r7, #4]
10005506:	f000 feab 	bl	10006260 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
1000550a:	693b      	ldr	r3, [r7, #16]
1000550c:	f003 0310 	and.w	r3, r3, #16
10005510:	2b00      	cmp	r3, #0
10005512:	d008      	beq.n	10005526 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
10005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005516:	015a      	lsls	r2, r3, #5
10005518:	69fb      	ldr	r3, [r7, #28]
1000551a:	4413      	add	r3, r2
1000551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10005520:	461a      	mov	r2, r3
10005522:	2310      	movs	r3, #16
10005524:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
10005526:	693b      	ldr	r3, [r7, #16]
10005528:	f003 0320 	and.w	r3, r3, #32
1000552c:	2b00      	cmp	r3, #0
1000552e:	d008      	beq.n	10005542 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
10005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005532:	015a      	lsls	r2, r3, #5
10005534:	69fb      	ldr	r3, [r7, #28]
10005536:	4413      	add	r3, r2
10005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
1000553c:	461a      	mov	r2, r3
1000553e:	2320      	movs	r3, #32
10005540:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
10005542:	693b      	ldr	r3, [r7, #16]
10005544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
10005548:	2b00      	cmp	r3, #0
1000554a:	d009      	beq.n	10005560 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
1000554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000554e:	015a      	lsls	r2, r3, #5
10005550:	69fb      	ldr	r3, [r7, #28]
10005552:	4413      	add	r3, r2
10005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10005558:	461a      	mov	r2, r3
1000555a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1000555e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
10005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005562:	3301      	adds	r3, #1
10005564:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
10005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005568:	085b      	lsrs	r3, r3, #1
1000556a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
1000556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000556e:	2b00      	cmp	r3, #0
10005570:	d199      	bne.n	100054a6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
10005572:	687b      	ldr	r3, [r7, #4]
10005574:	681b      	ldr	r3, [r3, #0]
10005576:	4618      	mov	r0, r3
10005578:	f002 ff25 	bl	100083c6 <USB_ReadInterrupts>
1000557c:	4603      	mov	r3, r0
1000557e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
10005582:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
10005586:	f040 80c0 	bne.w	1000570a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
1000558a:	687b      	ldr	r3, [r7, #4]
1000558c:	681b      	ldr	r3, [r3, #0]
1000558e:	4618      	mov	r0, r3
10005590:	f002 ff46 	bl	10008420 <USB_ReadDevAllInEpInterrupt>
10005594:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
10005596:	2300      	movs	r3, #0
10005598:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
1000559a:	e0b2      	b.n	10005702 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
1000559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000559e:	f003 0301 	and.w	r3, r3, #1
100055a2:	2b00      	cmp	r3, #0
100055a4:	f000 80a7 	beq.w	100056f6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
100055a8:	687b      	ldr	r3, [r7, #4]
100055aa:	681b      	ldr	r3, [r3, #0]
100055ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100055ae:	b2d2      	uxtb	r2, r2
100055b0:	4611      	mov	r1, r2
100055b2:	4618      	mov	r0, r3
100055b4:	f002 ff6c 	bl	10008490 <USB_ReadDevInEPInterrupt>
100055b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
100055ba:	693b      	ldr	r3, [r7, #16]
100055bc:	f003 0301 	and.w	r3, r3, #1
100055c0:	2b00      	cmp	r3, #0
100055c2:	d057      	beq.n	10005674 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
100055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100055c6:	f003 030f 	and.w	r3, r3, #15
100055ca:	2201      	movs	r2, #1
100055cc:	fa02 f303 	lsl.w	r3, r2, r3
100055d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
100055d2:	69fb      	ldr	r3, [r7, #28]
100055d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100055d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100055da:	68fb      	ldr	r3, [r7, #12]
100055dc:	43db      	mvns	r3, r3
100055de:	69f9      	ldr	r1, [r7, #28]
100055e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
100055e4:	4013      	ands	r3, r2
100055e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
100055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100055ea:	015a      	lsls	r2, r3, #5
100055ec:	69fb      	ldr	r3, [r7, #28]
100055ee:	4413      	add	r3, r2
100055f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100055f4:	461a      	mov	r2, r3
100055f6:	2301      	movs	r3, #1
100055f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
100055fa:	687b      	ldr	r3, [r7, #4]
100055fc:	691b      	ldr	r3, [r3, #16]
100055fe:	2b01      	cmp	r3, #1
10005600:	d132      	bne.n	10005668 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
10005602:	6879      	ldr	r1, [r7, #4]
10005604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005606:	4613      	mov	r3, r2
10005608:	00db      	lsls	r3, r3, #3
1000560a:	1a9b      	subs	r3, r3, r2
1000560c:	009b      	lsls	r3, r3, #2
1000560e:	440b      	add	r3, r1
10005610:	3348      	adds	r3, #72	; 0x48
10005612:	6819      	ldr	r1, [r3, #0]
10005614:	6878      	ldr	r0, [r7, #4]
10005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005618:	4613      	mov	r3, r2
1000561a:	00db      	lsls	r3, r3, #3
1000561c:	1a9b      	subs	r3, r3, r2
1000561e:	009b      	lsls	r3, r3, #2
10005620:	4403      	add	r3, r0
10005622:	3344      	adds	r3, #68	; 0x44
10005624:	681b      	ldr	r3, [r3, #0]
10005626:	4419      	add	r1, r3
10005628:	6878      	ldr	r0, [r7, #4]
1000562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000562c:	4613      	mov	r3, r2
1000562e:	00db      	lsls	r3, r3, #3
10005630:	1a9b      	subs	r3, r3, r2
10005632:	009b      	lsls	r3, r3, #2
10005634:	4403      	add	r3, r0
10005636:	3348      	adds	r3, #72	; 0x48
10005638:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
1000563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000563c:	2b00      	cmp	r3, #0
1000563e:	d113      	bne.n	10005668 <HAL_PCD_IRQHandler+0x31c>
10005640:	6879      	ldr	r1, [r7, #4]
10005642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005644:	4613      	mov	r3, r2
10005646:	00db      	lsls	r3, r3, #3
10005648:	1a9b      	subs	r3, r3, r2
1000564a:	009b      	lsls	r3, r3, #2
1000564c:	440b      	add	r3, r1
1000564e:	3350      	adds	r3, #80	; 0x50
10005650:	681b      	ldr	r3, [r3, #0]
10005652:	2b00      	cmp	r3, #0
10005654:	d108      	bne.n	10005668 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
10005656:	687b      	ldr	r3, [r7, #4]
10005658:	6818      	ldr	r0, [r3, #0]
1000565a:	687b      	ldr	r3, [r7, #4]
1000565c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
10005660:	461a      	mov	r2, r3
10005662:	2101      	movs	r1, #1
10005664:	f002 ff74 	bl	10008550 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
10005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000566a:	b2db      	uxtb	r3, r3
1000566c:	4619      	mov	r1, r3
1000566e:	6878      	ldr	r0, [r7, #4]
10005670:	f005 f9cd 	bl	1000aa0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
10005674:	693b      	ldr	r3, [r7, #16]
10005676:	f003 0308 	and.w	r3, r3, #8
1000567a:	2b00      	cmp	r3, #0
1000567c:	d008      	beq.n	10005690 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
1000567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005680:	015a      	lsls	r2, r3, #5
10005682:	69fb      	ldr	r3, [r7, #28]
10005684:	4413      	add	r3, r2
10005686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
1000568a:	461a      	mov	r2, r3
1000568c:	2308      	movs	r3, #8
1000568e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
10005690:	693b      	ldr	r3, [r7, #16]
10005692:	f003 0310 	and.w	r3, r3, #16
10005696:	2b00      	cmp	r3, #0
10005698:	d008      	beq.n	100056ac <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
1000569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000569c:	015a      	lsls	r2, r3, #5
1000569e:	69fb      	ldr	r3, [r7, #28]
100056a0:	4413      	add	r3, r2
100056a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100056a6:	461a      	mov	r2, r3
100056a8:	2310      	movs	r3, #16
100056aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
100056ac:	693b      	ldr	r3, [r7, #16]
100056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
100056b2:	2b00      	cmp	r3, #0
100056b4:	d008      	beq.n	100056c8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
100056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100056b8:	015a      	lsls	r2, r3, #5
100056ba:	69fb      	ldr	r3, [r7, #28]
100056bc:	4413      	add	r3, r2
100056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100056c2:	461a      	mov	r2, r3
100056c4:	2340      	movs	r3, #64	; 0x40
100056c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
100056c8:	693b      	ldr	r3, [r7, #16]
100056ca:	f003 0302 	and.w	r3, r3, #2
100056ce:	2b00      	cmp	r3, #0
100056d0:	d008      	beq.n	100056e4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
100056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100056d4:	015a      	lsls	r2, r3, #5
100056d6:	69fb      	ldr	r3, [r7, #28]
100056d8:	4413      	add	r3, r2
100056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100056de:	461a      	mov	r2, r3
100056e0:	2302      	movs	r3, #2
100056e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
100056e4:	693b      	ldr	r3, [r7, #16]
100056e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
100056ea:	2b00      	cmp	r3, #0
100056ec:	d003      	beq.n	100056f6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
100056ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
100056f0:	6878      	ldr	r0, [r7, #4]
100056f2:	f000 fc1b 	bl	10005f2c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
100056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100056f8:	3301      	adds	r3, #1
100056fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
100056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
100056fe:	085b      	lsrs	r3, r3, #1
10005700:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
10005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005704:	2b00      	cmp	r3, #0
10005706:	f47f af49 	bne.w	1000559c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
1000570a:	687b      	ldr	r3, [r7, #4]
1000570c:	681b      	ldr	r3, [r3, #0]
1000570e:	4618      	mov	r0, r3
10005710:	f002 fe59 	bl	100083c6 <USB_ReadInterrupts>
10005714:	4603      	mov	r3, r0
10005716:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000571a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000571e:	d122      	bne.n	10005766 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
10005720:	69fb      	ldr	r3, [r7, #28]
10005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10005726:	685b      	ldr	r3, [r3, #4]
10005728:	69fa      	ldr	r2, [r7, #28]
1000572a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1000572e:	f023 0301 	bic.w	r3, r3, #1
10005732:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
10005734:	687b      	ldr	r3, [r7, #4]
10005736:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
1000573a:	2b01      	cmp	r3, #1
1000573c:	d108      	bne.n	10005750 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
1000573e:	687b      	ldr	r3, [r7, #4]
10005740:	2200      	movs	r2, #0
10005742:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
10005746:	2100      	movs	r1, #0
10005748:	6878      	ldr	r0, [r7, #4]
1000574a:	f000 fe27 	bl	1000639c <HAL_PCDEx_LPM_Callback>
1000574e:	e002      	b.n	10005756 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
10005750:	6878      	ldr	r0, [r7, #4]
10005752:	f005 f9d3 	bl	1000aafc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
10005756:	687b      	ldr	r3, [r7, #4]
10005758:	681b      	ldr	r3, [r3, #0]
1000575a:	695a      	ldr	r2, [r3, #20]
1000575c:	687b      	ldr	r3, [r7, #4]
1000575e:	681b      	ldr	r3, [r3, #0]
10005760:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
10005764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
10005766:	687b      	ldr	r3, [r7, #4]
10005768:	681b      	ldr	r3, [r3, #0]
1000576a:	4618      	mov	r0, r3
1000576c:	f002 fe2b 	bl	100083c6 <USB_ReadInterrupts>
10005770:	4603      	mov	r3, r0
10005772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
10005776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1000577a:	d112      	bne.n	100057a2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
1000577c:	69fb      	ldr	r3, [r7, #28]
1000577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10005782:	689b      	ldr	r3, [r3, #8]
10005784:	f003 0301 	and.w	r3, r3, #1
10005788:	2b01      	cmp	r3, #1
1000578a:	d102      	bne.n	10005792 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
1000578c:	6878      	ldr	r0, [r7, #4]
1000578e:	f005 f98f 	bl	1000aab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
10005792:	687b      	ldr	r3, [r7, #4]
10005794:	681b      	ldr	r3, [r3, #0]
10005796:	695a      	ldr	r2, [r3, #20]
10005798:	687b      	ldr	r3, [r7, #4]
1000579a:	681b      	ldr	r3, [r3, #0]
1000579c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
100057a0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
100057a2:	687b      	ldr	r3, [r7, #4]
100057a4:	681b      	ldr	r3, [r3, #0]
100057a6:	4618      	mov	r0, r3
100057a8:	f002 fe0d 	bl	100083c6 <USB_ReadInterrupts>
100057ac:	4603      	mov	r3, r0
100057ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
100057b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
100057b6:	f040 80c7 	bne.w	10005948 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
100057ba:	69fb      	ldr	r3, [r7, #28]
100057bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100057c0:	685b      	ldr	r3, [r3, #4]
100057c2:	69fa      	ldr	r2, [r7, #28]
100057c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
100057c8:	f023 0301 	bic.w	r3, r3, #1
100057cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
100057ce:	687b      	ldr	r3, [r7, #4]
100057d0:	681b      	ldr	r3, [r3, #0]
100057d2:	2110      	movs	r1, #16
100057d4:	4618      	mov	r0, r3
100057d6:	f001 fedb 	bl	10007590 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
100057da:	2300      	movs	r3, #0
100057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
100057de:	e056      	b.n	1000588e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
100057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100057e2:	015a      	lsls	r2, r3, #5
100057e4:	69fb      	ldr	r3, [r7, #28]
100057e6:	4413      	add	r3, r2
100057e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100057ec:	461a      	mov	r2, r3
100057ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
100057f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
100057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100057f6:	015a      	lsls	r2, r3, #5
100057f8:	69fb      	ldr	r3, [r7, #28]
100057fa:	4413      	add	r3, r2
100057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10005800:	681b      	ldr	r3, [r3, #0]
10005802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10005804:	0151      	lsls	r1, r2, #5
10005806:	69fa      	ldr	r2, [r7, #28]
10005808:	440a      	add	r2, r1
1000580a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
1000580e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
10005812:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
10005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005816:	015a      	lsls	r2, r3, #5
10005818:	69fb      	ldr	r3, [r7, #28]
1000581a:	4413      	add	r3, r2
1000581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10005820:	681b      	ldr	r3, [r3, #0]
10005822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10005824:	0151      	lsls	r1, r2, #5
10005826:	69fa      	ldr	r2, [r7, #28]
10005828:	440a      	add	r2, r1
1000582a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
1000582e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
10005832:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
10005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005836:	015a      	lsls	r2, r3, #5
10005838:	69fb      	ldr	r3, [r7, #28]
1000583a:	4413      	add	r3, r2
1000583c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10005840:	461a      	mov	r2, r3
10005842:	f64f 337f 	movw	r3, #64383	; 0xfb7f
10005846:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
10005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000584a:	015a      	lsls	r2, r3, #5
1000584c:	69fb      	ldr	r3, [r7, #28]
1000584e:	4413      	add	r3, r2
10005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10005854:	681b      	ldr	r3, [r3, #0]
10005856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10005858:	0151      	lsls	r1, r2, #5
1000585a:	69fa      	ldr	r2, [r7, #28]
1000585c:	440a      	add	r2, r1
1000585e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10005862:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
10005866:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
10005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000586a:	015a      	lsls	r2, r3, #5
1000586c:	69fb      	ldr	r3, [r7, #28]
1000586e:	4413      	add	r3, r2
10005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10005874:	681b      	ldr	r3, [r3, #0]
10005876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10005878:	0151      	lsls	r1, r2, #5
1000587a:	69fa      	ldr	r2, [r7, #28]
1000587c:	440a      	add	r2, r1
1000587e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10005882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
10005886:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
10005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000588a:	3301      	adds	r3, #1
1000588c:	62fb      	str	r3, [r7, #44]	; 0x2c
1000588e:	687b      	ldr	r3, [r7, #4]
10005890:	685b      	ldr	r3, [r3, #4]
10005892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10005894:	429a      	cmp	r2, r3
10005896:	d3a3      	bcc.n	100057e0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
10005898:	69fb      	ldr	r3, [r7, #28]
1000589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1000589e:	69db      	ldr	r3, [r3, #28]
100058a0:	69fa      	ldr	r2, [r7, #28]
100058a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
100058a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
100058aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
100058ac:	687b      	ldr	r3, [r7, #4]
100058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100058b0:	2b00      	cmp	r3, #0
100058b2:	d016      	beq.n	100058e2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
100058b4:	69fb      	ldr	r3, [r7, #28]
100058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100058ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
100058be:	69fa      	ldr	r2, [r7, #28]
100058c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
100058c4:	f043 030b 	orr.w	r3, r3, #11
100058c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
100058cc:	69fb      	ldr	r3, [r7, #28]
100058ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100058d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100058d4:	69fa      	ldr	r2, [r7, #28]
100058d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
100058da:	f043 030b 	orr.w	r3, r3, #11
100058de:	6453      	str	r3, [r2, #68]	; 0x44
100058e0:	e015      	b.n	1000590e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
100058e2:	69fb      	ldr	r3, [r7, #28]
100058e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100058e8:	695b      	ldr	r3, [r3, #20]
100058ea:	69fa      	ldr	r2, [r7, #28]
100058ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
100058f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
100058f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
100058f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
100058fa:	69fb      	ldr	r3, [r7, #28]
100058fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10005900:	691b      	ldr	r3, [r3, #16]
10005902:	69fa      	ldr	r2, [r7, #28]
10005904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
10005908:	f043 030b 	orr.w	r3, r3, #11
1000590c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
1000590e:	69fb      	ldr	r3, [r7, #28]
10005910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10005914:	681b      	ldr	r3, [r3, #0]
10005916:	69fa      	ldr	r2, [r7, #28]
10005918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1000591c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
10005920:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
10005922:	687b      	ldr	r3, [r7, #4]
10005924:	6818      	ldr	r0, [r3, #0]
10005926:	687b      	ldr	r3, [r7, #4]
10005928:	691b      	ldr	r3, [r3, #16]
1000592a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
1000592c:	687b      	ldr	r3, [r7, #4]
1000592e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
10005932:	461a      	mov	r2, r3
10005934:	f002 fe0c 	bl	10008550 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
10005938:	687b      	ldr	r3, [r7, #4]
1000593a:	681b      	ldr	r3, [r3, #0]
1000593c:	695a      	ldr	r2, [r3, #20]
1000593e:	687b      	ldr	r3, [r7, #4]
10005940:	681b      	ldr	r3, [r3, #0]
10005942:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
10005946:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
10005948:	687b      	ldr	r3, [r7, #4]
1000594a:	681b      	ldr	r3, [r3, #0]
1000594c:	4618      	mov	r0, r3
1000594e:	f002 fd3a 	bl	100083c6 <USB_ReadInterrupts>
10005952:	4603      	mov	r3, r0
10005954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
10005958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
1000595c:	d124      	bne.n	100059a8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
1000595e:	687b      	ldr	r3, [r7, #4]
10005960:	681b      	ldr	r3, [r3, #0]
10005962:	4618      	mov	r0, r3
10005964:	f002 fdd0 	bl	10008508 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
10005968:	687b      	ldr	r3, [r7, #4]
1000596a:	681b      	ldr	r3, [r3, #0]
1000596c:	4618      	mov	r0, r3
1000596e:	f001 fe70 	bl	10007652 <USB_GetDevSpeed>
10005972:	4603      	mov	r3, r0
10005974:	461a      	mov	r2, r3
10005976:	687b      	ldr	r3, [r7, #4]
10005978:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
1000597a:	687b      	ldr	r3, [r7, #4]
1000597c:	681c      	ldr	r4, [r3, #0]
1000597e:	f001 f965 	bl	10006c4c <HAL_RCC_GetHCLKFreq>
10005982:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
10005984:	687b      	ldr	r3, [r7, #4]
10005986:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
10005988:	b2db      	uxtb	r3, r3
1000598a:	461a      	mov	r2, r3
1000598c:	4620      	mov	r0, r4
1000598e:	f001 fbad 	bl	100070ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
10005992:	6878      	ldr	r0, [r7, #4]
10005994:	f005 f863 	bl	1000aa5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
10005998:	687b      	ldr	r3, [r7, #4]
1000599a:	681b      	ldr	r3, [r3, #0]
1000599c:	695a      	ldr	r2, [r3, #20]
1000599e:	687b      	ldr	r3, [r7, #4]
100059a0:	681b      	ldr	r3, [r3, #0]
100059a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
100059a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
100059a8:	687b      	ldr	r3, [r7, #4]
100059aa:	681b      	ldr	r3, [r3, #0]
100059ac:	4618      	mov	r0, r3
100059ae:	f002 fd0a 	bl	100083c6 <USB_ReadInterrupts>
100059b2:	4603      	mov	r3, r0
100059b4:	f003 0308 	and.w	r3, r3, #8
100059b8:	2b08      	cmp	r3, #8
100059ba:	d10a      	bne.n	100059d2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
100059bc:	6878      	ldr	r0, [r7, #4]
100059be:	f005 f840 	bl	1000aa42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
100059c2:	687b      	ldr	r3, [r7, #4]
100059c4:	681b      	ldr	r3, [r3, #0]
100059c6:	695a      	ldr	r2, [r3, #20]
100059c8:	687b      	ldr	r3, [r7, #4]
100059ca:	681b      	ldr	r3, [r3, #0]
100059cc:	f002 0208 	and.w	r2, r2, #8
100059d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
100059d2:	687b      	ldr	r3, [r7, #4]
100059d4:	681b      	ldr	r3, [r3, #0]
100059d6:	4618      	mov	r0, r3
100059d8:	f002 fcf5 	bl	100083c6 <USB_ReadInterrupts>
100059dc:	4603      	mov	r3, r0
100059de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
100059e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
100059e6:	d10f      	bne.n	10005a08 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
100059e8:	2300      	movs	r3, #0
100059ea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
100059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100059ee:	b2db      	uxtb	r3, r3
100059f0:	4619      	mov	r1, r3
100059f2:	6878      	ldr	r0, [r7, #4]
100059f4:	f005 f8a2 	bl	1000ab3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
100059f8:	687b      	ldr	r3, [r7, #4]
100059fa:	681b      	ldr	r3, [r3, #0]
100059fc:	695a      	ldr	r2, [r3, #20]
100059fe:	687b      	ldr	r3, [r7, #4]
10005a00:	681b      	ldr	r3, [r3, #0]
10005a02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
10005a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
10005a08:	687b      	ldr	r3, [r7, #4]
10005a0a:	681b      	ldr	r3, [r3, #0]
10005a0c:	4618      	mov	r0, r3
10005a0e:	f002 fcda 	bl	100083c6 <USB_ReadInterrupts>
10005a12:	4603      	mov	r3, r0
10005a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10005a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10005a1c:	d10f      	bne.n	10005a3e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
10005a1e:	2300      	movs	r3, #0
10005a20:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
10005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005a24:	b2db      	uxtb	r3, r3
10005a26:	4619      	mov	r1, r3
10005a28:	6878      	ldr	r0, [r7, #4]
10005a2a:	f005 f875 	bl	1000ab18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
10005a2e:	687b      	ldr	r3, [r7, #4]
10005a30:	681b      	ldr	r3, [r3, #0]
10005a32:	695a      	ldr	r2, [r3, #20]
10005a34:	687b      	ldr	r3, [r7, #4]
10005a36:	681b      	ldr	r3, [r3, #0]
10005a38:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
10005a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
10005a3e:	687b      	ldr	r3, [r7, #4]
10005a40:	681b      	ldr	r3, [r3, #0]
10005a42:	4618      	mov	r0, r3
10005a44:	f002 fcbf 	bl	100083c6 <USB_ReadInterrupts>
10005a48:	4603      	mov	r3, r0
10005a4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
10005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
10005a52:	d10a      	bne.n	10005a6a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
10005a54:	6878      	ldr	r0, [r7, #4]
10005a56:	f005 f883 	bl	1000ab60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
10005a5a:	687b      	ldr	r3, [r7, #4]
10005a5c:	681b      	ldr	r3, [r3, #0]
10005a5e:	695a      	ldr	r2, [r3, #20]
10005a60:	687b      	ldr	r3, [r7, #4]
10005a62:	681b      	ldr	r3, [r3, #0]
10005a64:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
10005a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
10005a6a:	687b      	ldr	r3, [r7, #4]
10005a6c:	681b      	ldr	r3, [r3, #0]
10005a6e:	4618      	mov	r0, r3
10005a70:	f002 fca9 	bl	100083c6 <USB_ReadInterrupts>
10005a74:	4603      	mov	r3, r0
10005a76:	f003 0304 	and.w	r3, r3, #4
10005a7a:	2b04      	cmp	r3, #4
10005a7c:	d115      	bne.n	10005aaa <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
10005a7e:	687b      	ldr	r3, [r7, #4]
10005a80:	681b      	ldr	r3, [r3, #0]
10005a82:	685b      	ldr	r3, [r3, #4]
10005a84:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
10005a86:	69bb      	ldr	r3, [r7, #24]
10005a88:	f003 0304 	and.w	r3, r3, #4
10005a8c:	2b00      	cmp	r3, #0
10005a8e:	d002      	beq.n	10005a96 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
10005a90:	6878      	ldr	r0, [r7, #4]
10005a92:	f005 f873 	bl	1000ab7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
10005a96:	687b      	ldr	r3, [r7, #4]
10005a98:	681b      	ldr	r3, [r3, #0]
10005a9a:	6859      	ldr	r1, [r3, #4]
10005a9c:	687b      	ldr	r3, [r7, #4]
10005a9e:	681b      	ldr	r3, [r3, #0]
10005aa0:	69ba      	ldr	r2, [r7, #24]
10005aa2:	430a      	orrs	r2, r1
10005aa4:	605a      	str	r2, [r3, #4]
10005aa6:	e000      	b.n	10005aaa <HAL_PCD_IRQHandler+0x75e>
      return;
10005aa8:	bf00      	nop
    }
  }
}
10005aaa:	3734      	adds	r7, #52	; 0x34
10005aac:	46bd      	mov	sp, r7
10005aae:	bd90      	pop	{r4, r7, pc}

10005ab0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
10005ab0:	b580      	push	{r7, lr}
10005ab2:	b082      	sub	sp, #8
10005ab4:	af00      	add	r7, sp, #0
10005ab6:	6078      	str	r0, [r7, #4]
10005ab8:	460b      	mov	r3, r1
10005aba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
10005abc:	687b      	ldr	r3, [r7, #4]
10005abe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
10005ac2:	2b01      	cmp	r3, #1
10005ac4:	d101      	bne.n	10005aca <HAL_PCD_SetAddress+0x1a>
10005ac6:	2302      	movs	r3, #2
10005ac8:	e013      	b.n	10005af2 <HAL_PCD_SetAddress+0x42>
10005aca:	687b      	ldr	r3, [r7, #4]
10005acc:	2201      	movs	r2, #1
10005ace:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
10005ad2:	687b      	ldr	r3, [r7, #4]
10005ad4:	78fa      	ldrb	r2, [r7, #3]
10005ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
10005ada:	687b      	ldr	r3, [r7, #4]
10005adc:	681b      	ldr	r3, [r3, #0]
10005ade:	78fa      	ldrb	r2, [r7, #3]
10005ae0:	4611      	mov	r1, r2
10005ae2:	4618      	mov	r0, r3
10005ae4:	f002 fc07 	bl	100082f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
10005ae8:	687b      	ldr	r3, [r7, #4]
10005aea:	2200      	movs	r2, #0
10005aec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
10005af0:	2300      	movs	r3, #0
}
10005af2:	4618      	mov	r0, r3
10005af4:	3708      	adds	r7, #8
10005af6:	46bd      	mov	sp, r7
10005af8:	bd80      	pop	{r7, pc}

10005afa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
10005afa:	b580      	push	{r7, lr}
10005afc:	b084      	sub	sp, #16
10005afe:	af00      	add	r7, sp, #0
10005b00:	6078      	str	r0, [r7, #4]
10005b02:	4608      	mov	r0, r1
10005b04:	4611      	mov	r1, r2
10005b06:	461a      	mov	r2, r3
10005b08:	4603      	mov	r3, r0
10005b0a:	70fb      	strb	r3, [r7, #3]
10005b0c:	460b      	mov	r3, r1
10005b0e:	803b      	strh	r3, [r7, #0]
10005b10:	4613      	mov	r3, r2
10005b12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
10005b14:	2300      	movs	r3, #0
10005b16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
10005b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
10005b1c:	2b00      	cmp	r3, #0
10005b1e:	da0f      	bge.n	10005b40 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
10005b20:	78fb      	ldrb	r3, [r7, #3]
10005b22:	f003 020f 	and.w	r2, r3, #15
10005b26:	4613      	mov	r3, r2
10005b28:	00db      	lsls	r3, r3, #3
10005b2a:	1a9b      	subs	r3, r3, r2
10005b2c:	009b      	lsls	r3, r3, #2
10005b2e:	3338      	adds	r3, #56	; 0x38
10005b30:	687a      	ldr	r2, [r7, #4]
10005b32:	4413      	add	r3, r2
10005b34:	3304      	adds	r3, #4
10005b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
10005b38:	68fb      	ldr	r3, [r7, #12]
10005b3a:	2201      	movs	r2, #1
10005b3c:	705a      	strb	r2, [r3, #1]
10005b3e:	e00f      	b.n	10005b60 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
10005b40:	78fb      	ldrb	r3, [r7, #3]
10005b42:	f003 020f 	and.w	r2, r3, #15
10005b46:	4613      	mov	r3, r2
10005b48:	00db      	lsls	r3, r3, #3
10005b4a:	1a9b      	subs	r3, r3, r2
10005b4c:	009b      	lsls	r3, r3, #2
10005b4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
10005b52:	687a      	ldr	r2, [r7, #4]
10005b54:	4413      	add	r3, r2
10005b56:	3304      	adds	r3, #4
10005b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
10005b5a:	68fb      	ldr	r3, [r7, #12]
10005b5c:	2200      	movs	r2, #0
10005b5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
10005b60:	78fb      	ldrb	r3, [r7, #3]
10005b62:	f003 030f 	and.w	r3, r3, #15
10005b66:	b2da      	uxtb	r2, r3
10005b68:	68fb      	ldr	r3, [r7, #12]
10005b6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
10005b6c:	883a      	ldrh	r2, [r7, #0]
10005b6e:	68fb      	ldr	r3, [r7, #12]
10005b70:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
10005b72:	68fb      	ldr	r3, [r7, #12]
10005b74:	78ba      	ldrb	r2, [r7, #2]
10005b76:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
10005b78:	68fb      	ldr	r3, [r7, #12]
10005b7a:	785b      	ldrb	r3, [r3, #1]
10005b7c:	2b00      	cmp	r3, #0
10005b7e:	d004      	beq.n	10005b8a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
10005b80:	68fb      	ldr	r3, [r7, #12]
10005b82:	781b      	ldrb	r3, [r3, #0]
10005b84:	b29a      	uxth	r2, r3
10005b86:	68fb      	ldr	r3, [r7, #12]
10005b88:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
10005b8a:	78bb      	ldrb	r3, [r7, #2]
10005b8c:	2b02      	cmp	r3, #2
10005b8e:	d102      	bne.n	10005b96 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
10005b90:	68fb      	ldr	r3, [r7, #12]
10005b92:	2200      	movs	r2, #0
10005b94:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
10005b96:	687b      	ldr	r3, [r7, #4]
10005b98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
10005b9c:	2b01      	cmp	r3, #1
10005b9e:	d101      	bne.n	10005ba4 <HAL_PCD_EP_Open+0xaa>
10005ba0:	2302      	movs	r3, #2
10005ba2:	e00e      	b.n	10005bc2 <HAL_PCD_EP_Open+0xc8>
10005ba4:	687b      	ldr	r3, [r7, #4]
10005ba6:	2201      	movs	r2, #1
10005ba8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
10005bac:	687b      	ldr	r3, [r7, #4]
10005bae:	681b      	ldr	r3, [r3, #0]
10005bb0:	68f9      	ldr	r1, [r7, #12]
10005bb2:	4618      	mov	r0, r3
10005bb4:	f001 fd72 	bl	1000769c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
10005bb8:	687b      	ldr	r3, [r7, #4]
10005bba:	2200      	movs	r2, #0
10005bbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
10005bc0:	7afb      	ldrb	r3, [r7, #11]
}
10005bc2:	4618      	mov	r0, r3
10005bc4:	3710      	adds	r7, #16
10005bc6:	46bd      	mov	sp, r7
10005bc8:	bd80      	pop	{r7, pc}

10005bca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
10005bca:	b580      	push	{r7, lr}
10005bcc:	b084      	sub	sp, #16
10005bce:	af00      	add	r7, sp, #0
10005bd0:	6078      	str	r0, [r7, #4]
10005bd2:	460b      	mov	r3, r1
10005bd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
10005bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
10005bda:	2b00      	cmp	r3, #0
10005bdc:	da0f      	bge.n	10005bfe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
10005bde:	78fb      	ldrb	r3, [r7, #3]
10005be0:	f003 020f 	and.w	r2, r3, #15
10005be4:	4613      	mov	r3, r2
10005be6:	00db      	lsls	r3, r3, #3
10005be8:	1a9b      	subs	r3, r3, r2
10005bea:	009b      	lsls	r3, r3, #2
10005bec:	3338      	adds	r3, #56	; 0x38
10005bee:	687a      	ldr	r2, [r7, #4]
10005bf0:	4413      	add	r3, r2
10005bf2:	3304      	adds	r3, #4
10005bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
10005bf6:	68fb      	ldr	r3, [r7, #12]
10005bf8:	2201      	movs	r2, #1
10005bfa:	705a      	strb	r2, [r3, #1]
10005bfc:	e00f      	b.n	10005c1e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
10005bfe:	78fb      	ldrb	r3, [r7, #3]
10005c00:	f003 020f 	and.w	r2, r3, #15
10005c04:	4613      	mov	r3, r2
10005c06:	00db      	lsls	r3, r3, #3
10005c08:	1a9b      	subs	r3, r3, r2
10005c0a:	009b      	lsls	r3, r3, #2
10005c0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
10005c10:	687a      	ldr	r2, [r7, #4]
10005c12:	4413      	add	r3, r2
10005c14:	3304      	adds	r3, #4
10005c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
10005c18:	68fb      	ldr	r3, [r7, #12]
10005c1a:	2200      	movs	r2, #0
10005c1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
10005c1e:	78fb      	ldrb	r3, [r7, #3]
10005c20:	f003 030f 	and.w	r3, r3, #15
10005c24:	b2da      	uxtb	r2, r3
10005c26:	68fb      	ldr	r3, [r7, #12]
10005c28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
10005c2a:	687b      	ldr	r3, [r7, #4]
10005c2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
10005c30:	2b01      	cmp	r3, #1
10005c32:	d101      	bne.n	10005c38 <HAL_PCD_EP_Close+0x6e>
10005c34:	2302      	movs	r3, #2
10005c36:	e00e      	b.n	10005c56 <HAL_PCD_EP_Close+0x8c>
10005c38:	687b      	ldr	r3, [r7, #4]
10005c3a:	2201      	movs	r2, #1
10005c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
10005c40:	687b      	ldr	r3, [r7, #4]
10005c42:	681b      	ldr	r3, [r3, #0]
10005c44:	68f9      	ldr	r1, [r7, #12]
10005c46:	4618      	mov	r0, r3
10005c48:	f001 fdb0 	bl	100077ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
10005c4c:	687b      	ldr	r3, [r7, #4]
10005c4e:	2200      	movs	r2, #0
10005c50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
10005c54:	2300      	movs	r3, #0
}
10005c56:	4618      	mov	r0, r3
10005c58:	3710      	adds	r7, #16
10005c5a:	46bd      	mov	sp, r7
10005c5c:	bd80      	pop	{r7, pc}

10005c5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
10005c5e:	b580      	push	{r7, lr}
10005c60:	b086      	sub	sp, #24
10005c62:	af00      	add	r7, sp, #0
10005c64:	60f8      	str	r0, [r7, #12]
10005c66:	607a      	str	r2, [r7, #4]
10005c68:	603b      	str	r3, [r7, #0]
10005c6a:	460b      	mov	r3, r1
10005c6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
10005c6e:	7afb      	ldrb	r3, [r7, #11]
10005c70:	f003 020f 	and.w	r2, r3, #15
10005c74:	4613      	mov	r3, r2
10005c76:	00db      	lsls	r3, r3, #3
10005c78:	1a9b      	subs	r3, r3, r2
10005c7a:	009b      	lsls	r3, r3, #2
10005c7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
10005c80:	68fa      	ldr	r2, [r7, #12]
10005c82:	4413      	add	r3, r2
10005c84:	3304      	adds	r3, #4
10005c86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
10005c88:	697b      	ldr	r3, [r7, #20]
10005c8a:	687a      	ldr	r2, [r7, #4]
10005c8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
10005c8e:	697b      	ldr	r3, [r7, #20]
10005c90:	683a      	ldr	r2, [r7, #0]
10005c92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
10005c94:	697b      	ldr	r3, [r7, #20]
10005c96:	2200      	movs	r2, #0
10005c98:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
10005c9a:	697b      	ldr	r3, [r7, #20]
10005c9c:	2200      	movs	r2, #0
10005c9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
10005ca0:	7afb      	ldrb	r3, [r7, #11]
10005ca2:	f003 030f 	and.w	r3, r3, #15
10005ca6:	b2da      	uxtb	r2, r3
10005ca8:	697b      	ldr	r3, [r7, #20]
10005caa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
10005cac:	68fb      	ldr	r3, [r7, #12]
10005cae:	691b      	ldr	r3, [r3, #16]
10005cb0:	2b01      	cmp	r3, #1
10005cb2:	d102      	bne.n	10005cba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
10005cb4:	687a      	ldr	r2, [r7, #4]
10005cb6:	697b      	ldr	r3, [r7, #20]
10005cb8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
10005cba:	7afb      	ldrb	r3, [r7, #11]
10005cbc:	f003 030f 	and.w	r3, r3, #15
10005cc0:	2b00      	cmp	r3, #0
10005cc2:	d109      	bne.n	10005cd8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
10005cc4:	68fb      	ldr	r3, [r7, #12]
10005cc6:	6818      	ldr	r0, [r3, #0]
10005cc8:	68fb      	ldr	r3, [r7, #12]
10005cca:	691b      	ldr	r3, [r3, #16]
10005ccc:	b2db      	uxtb	r3, r3
10005cce:	461a      	mov	r2, r3
10005cd0:	6979      	ldr	r1, [r7, #20]
10005cd2:	f002 f88b 	bl	10007dec <USB_EP0StartXfer>
10005cd6:	e008      	b.n	10005cea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
10005cd8:	68fb      	ldr	r3, [r7, #12]
10005cda:	6818      	ldr	r0, [r3, #0]
10005cdc:	68fb      	ldr	r3, [r7, #12]
10005cde:	691b      	ldr	r3, [r3, #16]
10005ce0:	b2db      	uxtb	r3, r3
10005ce2:	461a      	mov	r2, r3
10005ce4:	6979      	ldr	r1, [r7, #20]
10005ce6:	f001 fe3d 	bl	10007964 <USB_EPStartXfer>
  }

  return HAL_OK;
10005cea:	2300      	movs	r3, #0
}
10005cec:	4618      	mov	r0, r3
10005cee:	3718      	adds	r7, #24
10005cf0:	46bd      	mov	sp, r7
10005cf2:	bd80      	pop	{r7, pc}

10005cf4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
10005cf4:	b480      	push	{r7}
10005cf6:	b083      	sub	sp, #12
10005cf8:	af00      	add	r7, sp, #0
10005cfa:	6078      	str	r0, [r7, #4]
10005cfc:	460b      	mov	r3, r1
10005cfe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
10005d00:	78fb      	ldrb	r3, [r7, #3]
10005d02:	f003 020f 	and.w	r2, r3, #15
10005d06:	6879      	ldr	r1, [r7, #4]
10005d08:	4613      	mov	r3, r2
10005d0a:	00db      	lsls	r3, r3, #3
10005d0c:	1a9b      	subs	r3, r3, r2
10005d0e:	009b      	lsls	r3, r3, #2
10005d10:	440b      	add	r3, r1
10005d12:	f503 7305 	add.w	r3, r3, #532	; 0x214
10005d16:	681b      	ldr	r3, [r3, #0]
}
10005d18:	4618      	mov	r0, r3
10005d1a:	370c      	adds	r7, #12
10005d1c:	46bd      	mov	sp, r7
10005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
10005d22:	4770      	bx	lr

10005d24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
10005d24:	b580      	push	{r7, lr}
10005d26:	b086      	sub	sp, #24
10005d28:	af00      	add	r7, sp, #0
10005d2a:	60f8      	str	r0, [r7, #12]
10005d2c:	607a      	str	r2, [r7, #4]
10005d2e:	603b      	str	r3, [r7, #0]
10005d30:	460b      	mov	r3, r1
10005d32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
10005d34:	7afb      	ldrb	r3, [r7, #11]
10005d36:	f003 020f 	and.w	r2, r3, #15
10005d3a:	4613      	mov	r3, r2
10005d3c:	00db      	lsls	r3, r3, #3
10005d3e:	1a9b      	subs	r3, r3, r2
10005d40:	009b      	lsls	r3, r3, #2
10005d42:	3338      	adds	r3, #56	; 0x38
10005d44:	68fa      	ldr	r2, [r7, #12]
10005d46:	4413      	add	r3, r2
10005d48:	3304      	adds	r3, #4
10005d4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
10005d4c:	697b      	ldr	r3, [r7, #20]
10005d4e:	687a      	ldr	r2, [r7, #4]
10005d50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
10005d52:	697b      	ldr	r3, [r7, #20]
10005d54:	683a      	ldr	r2, [r7, #0]
10005d56:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
10005d58:	697b      	ldr	r3, [r7, #20]
10005d5a:	2200      	movs	r2, #0
10005d5c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
10005d5e:	697b      	ldr	r3, [r7, #20]
10005d60:	2201      	movs	r2, #1
10005d62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
10005d64:	7afb      	ldrb	r3, [r7, #11]
10005d66:	f003 030f 	and.w	r3, r3, #15
10005d6a:	b2da      	uxtb	r2, r3
10005d6c:	697b      	ldr	r3, [r7, #20]
10005d6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
10005d70:	68fb      	ldr	r3, [r7, #12]
10005d72:	691b      	ldr	r3, [r3, #16]
10005d74:	2b01      	cmp	r3, #1
10005d76:	d102      	bne.n	10005d7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
10005d78:	687a      	ldr	r2, [r7, #4]
10005d7a:	697b      	ldr	r3, [r7, #20]
10005d7c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
10005d7e:	7afb      	ldrb	r3, [r7, #11]
10005d80:	f003 030f 	and.w	r3, r3, #15
10005d84:	2b00      	cmp	r3, #0
10005d86:	d109      	bne.n	10005d9c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
10005d88:	68fb      	ldr	r3, [r7, #12]
10005d8a:	6818      	ldr	r0, [r3, #0]
10005d8c:	68fb      	ldr	r3, [r7, #12]
10005d8e:	691b      	ldr	r3, [r3, #16]
10005d90:	b2db      	uxtb	r3, r3
10005d92:	461a      	mov	r2, r3
10005d94:	6979      	ldr	r1, [r7, #20]
10005d96:	f002 f829 	bl	10007dec <USB_EP0StartXfer>
10005d9a:	e008      	b.n	10005dae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
10005d9c:	68fb      	ldr	r3, [r7, #12]
10005d9e:	6818      	ldr	r0, [r3, #0]
10005da0:	68fb      	ldr	r3, [r7, #12]
10005da2:	691b      	ldr	r3, [r3, #16]
10005da4:	b2db      	uxtb	r3, r3
10005da6:	461a      	mov	r2, r3
10005da8:	6979      	ldr	r1, [r7, #20]
10005daa:	f001 fddb 	bl	10007964 <USB_EPStartXfer>
  }

  return HAL_OK;
10005dae:	2300      	movs	r3, #0
}
10005db0:	4618      	mov	r0, r3
10005db2:	3718      	adds	r7, #24
10005db4:	46bd      	mov	sp, r7
10005db6:	bd80      	pop	{r7, pc}

10005db8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
10005db8:	b580      	push	{r7, lr}
10005dba:	b084      	sub	sp, #16
10005dbc:	af00      	add	r7, sp, #0
10005dbe:	6078      	str	r0, [r7, #4]
10005dc0:	460b      	mov	r3, r1
10005dc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
10005dc4:	78fb      	ldrb	r3, [r7, #3]
10005dc6:	f003 020f 	and.w	r2, r3, #15
10005dca:	687b      	ldr	r3, [r7, #4]
10005dcc:	685b      	ldr	r3, [r3, #4]
10005dce:	429a      	cmp	r2, r3
10005dd0:	d901      	bls.n	10005dd6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
10005dd2:	2301      	movs	r3, #1
10005dd4:	e050      	b.n	10005e78 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
10005dd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
10005dda:	2b00      	cmp	r3, #0
10005ddc:	da0f      	bge.n	10005dfe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
10005dde:	78fb      	ldrb	r3, [r7, #3]
10005de0:	f003 020f 	and.w	r2, r3, #15
10005de4:	4613      	mov	r3, r2
10005de6:	00db      	lsls	r3, r3, #3
10005de8:	1a9b      	subs	r3, r3, r2
10005dea:	009b      	lsls	r3, r3, #2
10005dec:	3338      	adds	r3, #56	; 0x38
10005dee:	687a      	ldr	r2, [r7, #4]
10005df0:	4413      	add	r3, r2
10005df2:	3304      	adds	r3, #4
10005df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
10005df6:	68fb      	ldr	r3, [r7, #12]
10005df8:	2201      	movs	r2, #1
10005dfa:	705a      	strb	r2, [r3, #1]
10005dfc:	e00d      	b.n	10005e1a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
10005dfe:	78fa      	ldrb	r2, [r7, #3]
10005e00:	4613      	mov	r3, r2
10005e02:	00db      	lsls	r3, r3, #3
10005e04:	1a9b      	subs	r3, r3, r2
10005e06:	009b      	lsls	r3, r3, #2
10005e08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
10005e0c:	687a      	ldr	r2, [r7, #4]
10005e0e:	4413      	add	r3, r2
10005e10:	3304      	adds	r3, #4
10005e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
10005e14:	68fb      	ldr	r3, [r7, #12]
10005e16:	2200      	movs	r2, #0
10005e18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
10005e1a:	68fb      	ldr	r3, [r7, #12]
10005e1c:	2201      	movs	r2, #1
10005e1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
10005e20:	78fb      	ldrb	r3, [r7, #3]
10005e22:	f003 030f 	and.w	r3, r3, #15
10005e26:	b2da      	uxtb	r2, r3
10005e28:	68fb      	ldr	r3, [r7, #12]
10005e2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
10005e2c:	687b      	ldr	r3, [r7, #4]
10005e2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
10005e32:	2b01      	cmp	r3, #1
10005e34:	d101      	bne.n	10005e3a <HAL_PCD_EP_SetStall+0x82>
10005e36:	2302      	movs	r3, #2
10005e38:	e01e      	b.n	10005e78 <HAL_PCD_EP_SetStall+0xc0>
10005e3a:	687b      	ldr	r3, [r7, #4]
10005e3c:	2201      	movs	r2, #1
10005e3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
10005e42:	687b      	ldr	r3, [r7, #4]
10005e44:	681b      	ldr	r3, [r3, #0]
10005e46:	68f9      	ldr	r1, [r7, #12]
10005e48:	4618      	mov	r0, r3
10005e4a:	f002 f980 	bl	1000814e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
10005e4e:	78fb      	ldrb	r3, [r7, #3]
10005e50:	f003 030f 	and.w	r3, r3, #15
10005e54:	2b00      	cmp	r3, #0
10005e56:	d10a      	bne.n	10005e6e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
10005e58:	687b      	ldr	r3, [r7, #4]
10005e5a:	6818      	ldr	r0, [r3, #0]
10005e5c:	687b      	ldr	r3, [r7, #4]
10005e5e:	691b      	ldr	r3, [r3, #16]
10005e60:	b2d9      	uxtb	r1, r3
10005e62:	687b      	ldr	r3, [r7, #4]
10005e64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
10005e68:	461a      	mov	r2, r3
10005e6a:	f002 fb71 	bl	10008550 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
10005e6e:	687b      	ldr	r3, [r7, #4]
10005e70:	2200      	movs	r2, #0
10005e72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
10005e76:	2300      	movs	r3, #0
}
10005e78:	4618      	mov	r0, r3
10005e7a:	3710      	adds	r7, #16
10005e7c:	46bd      	mov	sp, r7
10005e7e:	bd80      	pop	{r7, pc}

10005e80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
10005e80:	b580      	push	{r7, lr}
10005e82:	b084      	sub	sp, #16
10005e84:	af00      	add	r7, sp, #0
10005e86:	6078      	str	r0, [r7, #4]
10005e88:	460b      	mov	r3, r1
10005e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
10005e8c:	78fb      	ldrb	r3, [r7, #3]
10005e8e:	f003 020f 	and.w	r2, r3, #15
10005e92:	687b      	ldr	r3, [r7, #4]
10005e94:	685b      	ldr	r3, [r3, #4]
10005e96:	429a      	cmp	r2, r3
10005e98:	d901      	bls.n	10005e9e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
10005e9a:	2301      	movs	r3, #1
10005e9c:	e042      	b.n	10005f24 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
10005e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
10005ea2:	2b00      	cmp	r3, #0
10005ea4:	da0f      	bge.n	10005ec6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
10005ea6:	78fb      	ldrb	r3, [r7, #3]
10005ea8:	f003 020f 	and.w	r2, r3, #15
10005eac:	4613      	mov	r3, r2
10005eae:	00db      	lsls	r3, r3, #3
10005eb0:	1a9b      	subs	r3, r3, r2
10005eb2:	009b      	lsls	r3, r3, #2
10005eb4:	3338      	adds	r3, #56	; 0x38
10005eb6:	687a      	ldr	r2, [r7, #4]
10005eb8:	4413      	add	r3, r2
10005eba:	3304      	adds	r3, #4
10005ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
10005ebe:	68fb      	ldr	r3, [r7, #12]
10005ec0:	2201      	movs	r2, #1
10005ec2:	705a      	strb	r2, [r3, #1]
10005ec4:	e00f      	b.n	10005ee6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
10005ec6:	78fb      	ldrb	r3, [r7, #3]
10005ec8:	f003 020f 	and.w	r2, r3, #15
10005ecc:	4613      	mov	r3, r2
10005ece:	00db      	lsls	r3, r3, #3
10005ed0:	1a9b      	subs	r3, r3, r2
10005ed2:	009b      	lsls	r3, r3, #2
10005ed4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
10005ed8:	687a      	ldr	r2, [r7, #4]
10005eda:	4413      	add	r3, r2
10005edc:	3304      	adds	r3, #4
10005ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
10005ee0:	68fb      	ldr	r3, [r7, #12]
10005ee2:	2200      	movs	r2, #0
10005ee4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
10005ee6:	68fb      	ldr	r3, [r7, #12]
10005ee8:	2200      	movs	r2, #0
10005eea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
10005eec:	78fb      	ldrb	r3, [r7, #3]
10005eee:	f003 030f 	and.w	r3, r3, #15
10005ef2:	b2da      	uxtb	r2, r3
10005ef4:	68fb      	ldr	r3, [r7, #12]
10005ef6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
10005ef8:	687b      	ldr	r3, [r7, #4]
10005efa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
10005efe:	2b01      	cmp	r3, #1
10005f00:	d101      	bne.n	10005f06 <HAL_PCD_EP_ClrStall+0x86>
10005f02:	2302      	movs	r3, #2
10005f04:	e00e      	b.n	10005f24 <HAL_PCD_EP_ClrStall+0xa4>
10005f06:	687b      	ldr	r3, [r7, #4]
10005f08:	2201      	movs	r2, #1
10005f0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
10005f0e:	687b      	ldr	r3, [r7, #4]
10005f10:	681b      	ldr	r3, [r3, #0]
10005f12:	68f9      	ldr	r1, [r7, #12]
10005f14:	4618      	mov	r0, r3
10005f16:	f002 f988 	bl	1000822a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
10005f1a:	687b      	ldr	r3, [r7, #4]
10005f1c:	2200      	movs	r2, #0
10005f1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
10005f22:	2300      	movs	r3, #0
}
10005f24:	4618      	mov	r0, r3
10005f26:	3710      	adds	r7, #16
10005f28:	46bd      	mov	sp, r7
10005f2a:	bd80      	pop	{r7, pc}

10005f2c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
10005f2c:	b580      	push	{r7, lr}
10005f2e:	b08a      	sub	sp, #40	; 0x28
10005f30:	af02      	add	r7, sp, #8
10005f32:	6078      	str	r0, [r7, #4]
10005f34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
10005f36:	687b      	ldr	r3, [r7, #4]
10005f38:	681b      	ldr	r3, [r3, #0]
10005f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
10005f3c:	697b      	ldr	r3, [r7, #20]
10005f3e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
10005f40:	683a      	ldr	r2, [r7, #0]
10005f42:	4613      	mov	r3, r2
10005f44:	00db      	lsls	r3, r3, #3
10005f46:	1a9b      	subs	r3, r3, r2
10005f48:	009b      	lsls	r3, r3, #2
10005f4a:	3338      	adds	r3, #56	; 0x38
10005f4c:	687a      	ldr	r2, [r7, #4]
10005f4e:	4413      	add	r3, r2
10005f50:	3304      	adds	r3, #4
10005f52:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
10005f54:	68fb      	ldr	r3, [r7, #12]
10005f56:	699a      	ldr	r2, [r3, #24]
10005f58:	68fb      	ldr	r3, [r7, #12]
10005f5a:	695b      	ldr	r3, [r3, #20]
10005f5c:	429a      	cmp	r2, r3
10005f5e:	d901      	bls.n	10005f64 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
10005f60:	2301      	movs	r3, #1
10005f62:	e06c      	b.n	1000603e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
10005f64:	68fb      	ldr	r3, [r7, #12]
10005f66:	695a      	ldr	r2, [r3, #20]
10005f68:	68fb      	ldr	r3, [r7, #12]
10005f6a:	699b      	ldr	r3, [r3, #24]
10005f6c:	1ad3      	subs	r3, r2, r3
10005f6e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
10005f70:	68fb      	ldr	r3, [r7, #12]
10005f72:	689b      	ldr	r3, [r3, #8]
10005f74:	69fa      	ldr	r2, [r7, #28]
10005f76:	429a      	cmp	r2, r3
10005f78:	d902      	bls.n	10005f80 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
10005f7a:	68fb      	ldr	r3, [r7, #12]
10005f7c:	689b      	ldr	r3, [r3, #8]
10005f7e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
10005f80:	69fb      	ldr	r3, [r7, #28]
10005f82:	3303      	adds	r3, #3
10005f84:	089b      	lsrs	r3, r3, #2
10005f86:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
10005f88:	e02b      	b.n	10005fe2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
10005f8a:	68fb      	ldr	r3, [r7, #12]
10005f8c:	695a      	ldr	r2, [r3, #20]
10005f8e:	68fb      	ldr	r3, [r7, #12]
10005f90:	699b      	ldr	r3, [r3, #24]
10005f92:	1ad3      	subs	r3, r2, r3
10005f94:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
10005f96:	68fb      	ldr	r3, [r7, #12]
10005f98:	689b      	ldr	r3, [r3, #8]
10005f9a:	69fa      	ldr	r2, [r7, #28]
10005f9c:	429a      	cmp	r2, r3
10005f9e:	d902      	bls.n	10005fa6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
10005fa0:	68fb      	ldr	r3, [r7, #12]
10005fa2:	689b      	ldr	r3, [r3, #8]
10005fa4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
10005fa6:	69fb      	ldr	r3, [r7, #28]
10005fa8:	3303      	adds	r3, #3
10005faa:	089b      	lsrs	r3, r3, #2
10005fac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
10005fae:	68fb      	ldr	r3, [r7, #12]
10005fb0:	68d9      	ldr	r1, [r3, #12]
10005fb2:	683b      	ldr	r3, [r7, #0]
10005fb4:	b2da      	uxtb	r2, r3
10005fb6:	69fb      	ldr	r3, [r7, #28]
10005fb8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
10005fba:	687b      	ldr	r3, [r7, #4]
10005fbc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
10005fbe:	b2db      	uxtb	r3, r3
10005fc0:	9300      	str	r3, [sp, #0]
10005fc2:	4603      	mov	r3, r0
10005fc4:	6978      	ldr	r0, [r7, #20]
10005fc6:	f002 f864 	bl	10008092 <USB_WritePacket>

    ep->xfer_buff  += len;
10005fca:	68fb      	ldr	r3, [r7, #12]
10005fcc:	68da      	ldr	r2, [r3, #12]
10005fce:	69fb      	ldr	r3, [r7, #28]
10005fd0:	441a      	add	r2, r3
10005fd2:	68fb      	ldr	r3, [r7, #12]
10005fd4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
10005fd6:	68fb      	ldr	r3, [r7, #12]
10005fd8:	699a      	ldr	r2, [r3, #24]
10005fda:	69fb      	ldr	r3, [r7, #28]
10005fdc:	441a      	add	r2, r3
10005fde:	68fb      	ldr	r3, [r7, #12]
10005fe0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
10005fe2:	683b      	ldr	r3, [r7, #0]
10005fe4:	015a      	lsls	r2, r3, #5
10005fe6:	693b      	ldr	r3, [r7, #16]
10005fe8:	4413      	add	r3, r2
10005fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10005fee:	699b      	ldr	r3, [r3, #24]
10005ff0:	b29b      	uxth	r3, r3
10005ff2:	69ba      	ldr	r2, [r7, #24]
10005ff4:	429a      	cmp	r2, r3
10005ff6:	d809      	bhi.n	1000600c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
10005ff8:	68fb      	ldr	r3, [r7, #12]
10005ffa:	699a      	ldr	r2, [r3, #24]
10005ffc:	68fb      	ldr	r3, [r7, #12]
10005ffe:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
10006000:	429a      	cmp	r2, r3
10006002:	d203      	bcs.n	1000600c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
10006004:	68fb      	ldr	r3, [r7, #12]
10006006:	695b      	ldr	r3, [r3, #20]
10006008:	2b00      	cmp	r3, #0
1000600a:	d1be      	bne.n	10005f8a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
1000600c:	68fb      	ldr	r3, [r7, #12]
1000600e:	695a      	ldr	r2, [r3, #20]
10006010:	68fb      	ldr	r3, [r7, #12]
10006012:	699b      	ldr	r3, [r3, #24]
10006014:	429a      	cmp	r2, r3
10006016:	d811      	bhi.n	1000603c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
10006018:	683b      	ldr	r3, [r7, #0]
1000601a:	f003 030f 	and.w	r3, r3, #15
1000601e:	2201      	movs	r2, #1
10006020:	fa02 f303 	lsl.w	r3, r2, r3
10006024:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
10006026:	693b      	ldr	r3, [r7, #16]
10006028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1000602c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000602e:	68bb      	ldr	r3, [r7, #8]
10006030:	43db      	mvns	r3, r3
10006032:	6939      	ldr	r1, [r7, #16]
10006034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
10006038:	4013      	ands	r3, r2
1000603a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
1000603c:	2300      	movs	r3, #0
}
1000603e:	4618      	mov	r0, r3
10006040:	3720      	adds	r7, #32
10006042:	46bd      	mov	sp, r7
10006044:	bd80      	pop	{r7, pc}
	...

10006048 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
10006048:	b580      	push	{r7, lr}
1000604a:	b086      	sub	sp, #24
1000604c:	af00      	add	r7, sp, #0
1000604e:	6078      	str	r0, [r7, #4]
10006050:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
10006052:	687b      	ldr	r3, [r7, #4]
10006054:	681b      	ldr	r3, [r3, #0]
10006056:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
10006058:	697b      	ldr	r3, [r7, #20]
1000605a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
1000605c:	697b      	ldr	r3, [r7, #20]
1000605e:	333c      	adds	r3, #60	; 0x3c
10006060:	3304      	adds	r3, #4
10006062:	681b      	ldr	r3, [r3, #0]
10006064:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
10006066:	683b      	ldr	r3, [r7, #0]
10006068:	015a      	lsls	r2, r3, #5
1000606a:	693b      	ldr	r3, [r7, #16]
1000606c:	4413      	add	r3, r2
1000606e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10006072:	689b      	ldr	r3, [r3, #8]
10006074:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
10006076:	687b      	ldr	r3, [r7, #4]
10006078:	691b      	ldr	r3, [r3, #16]
1000607a:	2b01      	cmp	r3, #1
1000607c:	f040 80a0 	bne.w	100061c0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
10006080:	68bb      	ldr	r3, [r7, #8]
10006082:	f003 0308 	and.w	r3, r3, #8
10006086:	2b00      	cmp	r3, #0
10006088:	d015      	beq.n	100060b6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
1000608a:	68fb      	ldr	r3, [r7, #12]
1000608c:	4a72      	ldr	r2, [pc, #456]	; (10006258 <PCD_EP_OutXfrComplete_int+0x210>)
1000608e:	4293      	cmp	r3, r2
10006090:	f240 80dd 	bls.w	1000624e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
10006094:	68bb      	ldr	r3, [r7, #8]
10006096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
1000609a:	2b00      	cmp	r3, #0
1000609c:	f000 80d7 	beq.w	1000624e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
100060a0:	683b      	ldr	r3, [r7, #0]
100060a2:	015a      	lsls	r2, r3, #5
100060a4:	693b      	ldr	r3, [r7, #16]
100060a6:	4413      	add	r3, r2
100060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100060ac:	461a      	mov	r2, r3
100060ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100060b2:	6093      	str	r3, [r2, #8]
100060b4:	e0cb      	b.n	1000624e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
100060b6:	68bb      	ldr	r3, [r7, #8]
100060b8:	f003 0320 	and.w	r3, r3, #32
100060bc:	2b00      	cmp	r3, #0
100060be:	d009      	beq.n	100060d4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
100060c0:	683b      	ldr	r3, [r7, #0]
100060c2:	015a      	lsls	r2, r3, #5
100060c4:	693b      	ldr	r3, [r7, #16]
100060c6:	4413      	add	r3, r2
100060c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100060cc:	461a      	mov	r2, r3
100060ce:	2320      	movs	r3, #32
100060d0:	6093      	str	r3, [r2, #8]
100060d2:	e0bc      	b.n	1000624e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
100060d4:	68bb      	ldr	r3, [r7, #8]
100060d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
100060da:	2b00      	cmp	r3, #0
100060dc:	f040 80b7 	bne.w	1000624e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
100060e0:	68fb      	ldr	r3, [r7, #12]
100060e2:	4a5d      	ldr	r2, [pc, #372]	; (10006258 <PCD_EP_OutXfrComplete_int+0x210>)
100060e4:	4293      	cmp	r3, r2
100060e6:	d90f      	bls.n	10006108 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
100060e8:	68bb      	ldr	r3, [r7, #8]
100060ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
100060ee:	2b00      	cmp	r3, #0
100060f0:	d00a      	beq.n	10006108 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
100060f2:	683b      	ldr	r3, [r7, #0]
100060f4:	015a      	lsls	r2, r3, #5
100060f6:	693b      	ldr	r3, [r7, #16]
100060f8:	4413      	add	r3, r2
100060fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100060fe:	461a      	mov	r2, r3
10006100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
10006104:	6093      	str	r3, [r2, #8]
10006106:	e0a2      	b.n	1000624e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
10006108:	6879      	ldr	r1, [r7, #4]
1000610a:	683a      	ldr	r2, [r7, #0]
1000610c:	4613      	mov	r3, r2
1000610e:	00db      	lsls	r3, r3, #3
10006110:	1a9b      	subs	r3, r3, r2
10006112:	009b      	lsls	r3, r3, #2
10006114:	440b      	add	r3, r1
10006116:	f503 7301 	add.w	r3, r3, #516	; 0x204
1000611a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
1000611c:	683b      	ldr	r3, [r7, #0]
1000611e:	0159      	lsls	r1, r3, #5
10006120:	693b      	ldr	r3, [r7, #16]
10006122:	440b      	add	r3, r1
10006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10006128:	691b      	ldr	r3, [r3, #16]
1000612a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
1000612e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
10006130:	6878      	ldr	r0, [r7, #4]
10006132:	683a      	ldr	r2, [r7, #0]
10006134:	4613      	mov	r3, r2
10006136:	00db      	lsls	r3, r3, #3
10006138:	1a9b      	subs	r3, r3, r2
1000613a:	009b      	lsls	r3, r3, #2
1000613c:	4403      	add	r3, r0
1000613e:	f503 7305 	add.w	r3, r3, #532	; 0x214
10006142:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
10006144:	6879      	ldr	r1, [r7, #4]
10006146:	683a      	ldr	r2, [r7, #0]
10006148:	4613      	mov	r3, r2
1000614a:	00db      	lsls	r3, r3, #3
1000614c:	1a9b      	subs	r3, r3, r2
1000614e:	009b      	lsls	r3, r3, #2
10006150:	440b      	add	r3, r1
10006152:	f503 7302 	add.w	r3, r3, #520	; 0x208
10006156:	6819      	ldr	r1, [r3, #0]
10006158:	6878      	ldr	r0, [r7, #4]
1000615a:	683a      	ldr	r2, [r7, #0]
1000615c:	4613      	mov	r3, r2
1000615e:	00db      	lsls	r3, r3, #3
10006160:	1a9b      	subs	r3, r3, r2
10006162:	009b      	lsls	r3, r3, #2
10006164:	4403      	add	r3, r0
10006166:	f503 7301 	add.w	r3, r3, #516	; 0x204
1000616a:	681b      	ldr	r3, [r3, #0]
1000616c:	4419      	add	r1, r3
1000616e:	6878      	ldr	r0, [r7, #4]
10006170:	683a      	ldr	r2, [r7, #0]
10006172:	4613      	mov	r3, r2
10006174:	00db      	lsls	r3, r3, #3
10006176:	1a9b      	subs	r3, r3, r2
10006178:	009b      	lsls	r3, r3, #2
1000617a:	4403      	add	r3, r0
1000617c:	f503 7302 	add.w	r3, r3, #520	; 0x208
10006180:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
10006182:	683b      	ldr	r3, [r7, #0]
10006184:	2b00      	cmp	r3, #0
10006186:	d114      	bne.n	100061b2 <PCD_EP_OutXfrComplete_int+0x16a>
10006188:	6879      	ldr	r1, [r7, #4]
1000618a:	683a      	ldr	r2, [r7, #0]
1000618c:	4613      	mov	r3, r2
1000618e:	00db      	lsls	r3, r3, #3
10006190:	1a9b      	subs	r3, r3, r2
10006192:	009b      	lsls	r3, r3, #2
10006194:	440b      	add	r3, r1
10006196:	f503 7304 	add.w	r3, r3, #528	; 0x210
1000619a:	681b      	ldr	r3, [r3, #0]
1000619c:	2b00      	cmp	r3, #0
1000619e:	d108      	bne.n	100061b2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
100061a0:	687b      	ldr	r3, [r7, #4]
100061a2:	6818      	ldr	r0, [r3, #0]
100061a4:	687b      	ldr	r3, [r7, #4]
100061a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
100061aa:	461a      	mov	r2, r3
100061ac:	2101      	movs	r1, #1
100061ae:	f002 f9cf 	bl	10008550 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
100061b2:	683b      	ldr	r3, [r7, #0]
100061b4:	b2db      	uxtb	r3, r3
100061b6:	4619      	mov	r1, r3
100061b8:	6878      	ldr	r0, [r7, #4]
100061ba:	f004 fc0d 	bl	1000a9d8 <HAL_PCD_DataOutStageCallback>
100061be:	e046      	b.n	1000624e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
100061c0:	68fb      	ldr	r3, [r7, #12]
100061c2:	4a26      	ldr	r2, [pc, #152]	; (1000625c <PCD_EP_OutXfrComplete_int+0x214>)
100061c4:	4293      	cmp	r3, r2
100061c6:	d124      	bne.n	10006212 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
100061c8:	68bb      	ldr	r3, [r7, #8]
100061ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
100061ce:	2b00      	cmp	r3, #0
100061d0:	d00a      	beq.n	100061e8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
100061d2:	683b      	ldr	r3, [r7, #0]
100061d4:	015a      	lsls	r2, r3, #5
100061d6:	693b      	ldr	r3, [r7, #16]
100061d8:	4413      	add	r3, r2
100061da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100061de:	461a      	mov	r2, r3
100061e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100061e4:	6093      	str	r3, [r2, #8]
100061e6:	e032      	b.n	1000624e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
100061e8:	68bb      	ldr	r3, [r7, #8]
100061ea:	f003 0320 	and.w	r3, r3, #32
100061ee:	2b00      	cmp	r3, #0
100061f0:	d008      	beq.n	10006204 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
100061f2:	683b      	ldr	r3, [r7, #0]
100061f4:	015a      	lsls	r2, r3, #5
100061f6:	693b      	ldr	r3, [r7, #16]
100061f8:	4413      	add	r3, r2
100061fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100061fe:	461a      	mov	r2, r3
10006200:	2320      	movs	r3, #32
10006202:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
10006204:	683b      	ldr	r3, [r7, #0]
10006206:	b2db      	uxtb	r3, r3
10006208:	4619      	mov	r1, r3
1000620a:	6878      	ldr	r0, [r7, #4]
1000620c:	f004 fbe4 	bl	1000a9d8 <HAL_PCD_DataOutStageCallback>
10006210:	e01d      	b.n	1000624e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
10006212:	683b      	ldr	r3, [r7, #0]
10006214:	2b00      	cmp	r3, #0
10006216:	d114      	bne.n	10006242 <PCD_EP_OutXfrComplete_int+0x1fa>
10006218:	6879      	ldr	r1, [r7, #4]
1000621a:	683a      	ldr	r2, [r7, #0]
1000621c:	4613      	mov	r3, r2
1000621e:	00db      	lsls	r3, r3, #3
10006220:	1a9b      	subs	r3, r3, r2
10006222:	009b      	lsls	r3, r3, #2
10006224:	440b      	add	r3, r1
10006226:	f503 7304 	add.w	r3, r3, #528	; 0x210
1000622a:	681b      	ldr	r3, [r3, #0]
1000622c:	2b00      	cmp	r3, #0
1000622e:	d108      	bne.n	10006242 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
10006230:	687b      	ldr	r3, [r7, #4]
10006232:	6818      	ldr	r0, [r3, #0]
10006234:	687b      	ldr	r3, [r7, #4]
10006236:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
1000623a:	461a      	mov	r2, r3
1000623c:	2100      	movs	r1, #0
1000623e:	f002 f987 	bl	10008550 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
10006242:	683b      	ldr	r3, [r7, #0]
10006244:	b2db      	uxtb	r3, r3
10006246:	4619      	mov	r1, r3
10006248:	6878      	ldr	r0, [r7, #4]
1000624a:	f004 fbc5 	bl	1000a9d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
1000624e:	2300      	movs	r3, #0
}
10006250:	4618      	mov	r0, r3
10006252:	3718      	adds	r7, #24
10006254:	46bd      	mov	sp, r7
10006256:	bd80      	pop	{r7, pc}
10006258:	4f54300a 	.word	0x4f54300a
1000625c:	4f54310a 	.word	0x4f54310a

10006260 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
10006260:	b580      	push	{r7, lr}
10006262:	b086      	sub	sp, #24
10006264:	af00      	add	r7, sp, #0
10006266:	6078      	str	r0, [r7, #4]
10006268:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
1000626a:	687b      	ldr	r3, [r7, #4]
1000626c:	681b      	ldr	r3, [r3, #0]
1000626e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
10006270:	697b      	ldr	r3, [r7, #20]
10006272:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
10006274:	697b      	ldr	r3, [r7, #20]
10006276:	333c      	adds	r3, #60	; 0x3c
10006278:	3304      	adds	r3, #4
1000627a:	681b      	ldr	r3, [r3, #0]
1000627c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
1000627e:	683b      	ldr	r3, [r7, #0]
10006280:	015a      	lsls	r2, r3, #5
10006282:	693b      	ldr	r3, [r7, #16]
10006284:	4413      	add	r3, r2
10006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
1000628a:	689b      	ldr	r3, [r3, #8]
1000628c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
1000628e:	68fb      	ldr	r3, [r7, #12]
10006290:	4a15      	ldr	r2, [pc, #84]	; (100062e8 <PCD_EP_OutSetupPacket_int+0x88>)
10006292:	4293      	cmp	r3, r2
10006294:	d90e      	bls.n	100062b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
10006296:	68bb      	ldr	r3, [r7, #8]
10006298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
1000629c:	2b00      	cmp	r3, #0
1000629e:	d009      	beq.n	100062b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
100062a0:	683b      	ldr	r3, [r7, #0]
100062a2:	015a      	lsls	r2, r3, #5
100062a4:	693b      	ldr	r3, [r7, #16]
100062a6:	4413      	add	r3, r2
100062a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100062ac:	461a      	mov	r2, r3
100062ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100062b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
100062b4:	6878      	ldr	r0, [r7, #4]
100062b6:	f004 fb7d 	bl	1000a9b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
100062ba:	68fb      	ldr	r3, [r7, #12]
100062bc:	4a0a      	ldr	r2, [pc, #40]	; (100062e8 <PCD_EP_OutSetupPacket_int+0x88>)
100062be:	4293      	cmp	r3, r2
100062c0:	d90c      	bls.n	100062dc <PCD_EP_OutSetupPacket_int+0x7c>
100062c2:	687b      	ldr	r3, [r7, #4]
100062c4:	691b      	ldr	r3, [r3, #16]
100062c6:	2b01      	cmp	r3, #1
100062c8:	d108      	bne.n	100062dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
100062ca:	687b      	ldr	r3, [r7, #4]
100062cc:	6818      	ldr	r0, [r3, #0]
100062ce:	687b      	ldr	r3, [r7, #4]
100062d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
100062d4:	461a      	mov	r2, r3
100062d6:	2101      	movs	r1, #1
100062d8:	f002 f93a 	bl	10008550 <USB_EP0_OutStart>
  }

  return HAL_OK;
100062dc:	2300      	movs	r3, #0
}
100062de:	4618      	mov	r0, r3
100062e0:	3718      	adds	r7, #24
100062e2:	46bd      	mov	sp, r7
100062e4:	bd80      	pop	{r7, pc}
100062e6:	bf00      	nop
100062e8:	4f54300a 	.word	0x4f54300a

100062ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
100062ec:	b480      	push	{r7}
100062ee:	b085      	sub	sp, #20
100062f0:	af00      	add	r7, sp, #0
100062f2:	6078      	str	r0, [r7, #4]
100062f4:	460b      	mov	r3, r1
100062f6:	70fb      	strb	r3, [r7, #3]
100062f8:	4613      	mov	r3, r2
100062fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
100062fc:	687b      	ldr	r3, [r7, #4]
100062fe:	681b      	ldr	r3, [r3, #0]
10006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006302:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
10006304:	78fb      	ldrb	r3, [r7, #3]
10006306:	2b00      	cmp	r3, #0
10006308:	d107      	bne.n	1000631a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
1000630a:	883b      	ldrh	r3, [r7, #0]
1000630c:	0419      	lsls	r1, r3, #16
1000630e:	687b      	ldr	r3, [r7, #4]
10006310:	681b      	ldr	r3, [r3, #0]
10006312:	68ba      	ldr	r2, [r7, #8]
10006314:	430a      	orrs	r2, r1
10006316:	629a      	str	r2, [r3, #40]	; 0x28
10006318:	e028      	b.n	1000636c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
1000631a:	687b      	ldr	r3, [r7, #4]
1000631c:	681b      	ldr	r3, [r3, #0]
1000631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006320:	0c1b      	lsrs	r3, r3, #16
10006322:	68ba      	ldr	r2, [r7, #8]
10006324:	4413      	add	r3, r2
10006326:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
10006328:	2300      	movs	r3, #0
1000632a:	73fb      	strb	r3, [r7, #15]
1000632c:	e00d      	b.n	1000634a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
1000632e:	687b      	ldr	r3, [r7, #4]
10006330:	681a      	ldr	r2, [r3, #0]
10006332:	7bfb      	ldrb	r3, [r7, #15]
10006334:	3340      	adds	r3, #64	; 0x40
10006336:	009b      	lsls	r3, r3, #2
10006338:	4413      	add	r3, r2
1000633a:	685b      	ldr	r3, [r3, #4]
1000633c:	0c1b      	lsrs	r3, r3, #16
1000633e:	68ba      	ldr	r2, [r7, #8]
10006340:	4413      	add	r3, r2
10006342:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
10006344:	7bfb      	ldrb	r3, [r7, #15]
10006346:	3301      	adds	r3, #1
10006348:	73fb      	strb	r3, [r7, #15]
1000634a:	7bfa      	ldrb	r2, [r7, #15]
1000634c:	78fb      	ldrb	r3, [r7, #3]
1000634e:	3b01      	subs	r3, #1
10006350:	429a      	cmp	r2, r3
10006352:	d3ec      	bcc.n	1000632e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
10006354:	883b      	ldrh	r3, [r7, #0]
10006356:	0418      	lsls	r0, r3, #16
10006358:	687b      	ldr	r3, [r7, #4]
1000635a:	6819      	ldr	r1, [r3, #0]
1000635c:	78fb      	ldrb	r3, [r7, #3]
1000635e:	3b01      	subs	r3, #1
10006360:	68ba      	ldr	r2, [r7, #8]
10006362:	4302      	orrs	r2, r0
10006364:	3340      	adds	r3, #64	; 0x40
10006366:	009b      	lsls	r3, r3, #2
10006368:	440b      	add	r3, r1
1000636a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
1000636c:	2300      	movs	r3, #0
}
1000636e:	4618      	mov	r0, r3
10006370:	3714      	adds	r7, #20
10006372:	46bd      	mov	sp, r7
10006374:	f85d 7b04 	ldr.w	r7, [sp], #4
10006378:	4770      	bx	lr

1000637a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
1000637a:	b480      	push	{r7}
1000637c:	b083      	sub	sp, #12
1000637e:	af00      	add	r7, sp, #0
10006380:	6078      	str	r0, [r7, #4]
10006382:	460b      	mov	r3, r1
10006384:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
10006386:	687b      	ldr	r3, [r7, #4]
10006388:	681b      	ldr	r3, [r3, #0]
1000638a:	887a      	ldrh	r2, [r7, #2]
1000638c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
1000638e:	2300      	movs	r3, #0
}
10006390:	4618      	mov	r0, r3
10006392:	370c      	adds	r7, #12
10006394:	46bd      	mov	sp, r7
10006396:	f85d 7b04 	ldr.w	r7, [sp], #4
1000639a:	4770      	bx	lr

1000639c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
1000639c:	b480      	push	{r7}
1000639e:	b083      	sub	sp, #12
100063a0:	af00      	add	r7, sp, #0
100063a2:	6078      	str	r0, [r7, #4]
100063a4:	460b      	mov	r3, r1
100063a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
100063a8:	bf00      	nop
100063aa:	370c      	adds	r7, #12
100063ac:	46bd      	mov	sp, r7
100063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
100063b2:	4770      	bx	lr

100063b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100063b4:	b580      	push	{r7, lr}
100063b6:	b086      	sub	sp, #24
100063b8:	af00      	add	r7, sp, #0
100063ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
100063bc:	687b      	ldr	r3, [r7, #4]
100063be:	2b00      	cmp	r3, #0
100063c0:	d101      	bne.n	100063c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
100063c2:	2301      	movs	r3, #1
100063c4:	e264      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
100063c6:	687b      	ldr	r3, [r7, #4]
100063c8:	681b      	ldr	r3, [r3, #0]
100063ca:	f003 0301 	and.w	r3, r3, #1
100063ce:	2b00      	cmp	r3, #0
100063d0:	d075      	beq.n	100064be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
100063d2:	4ba3      	ldr	r3, [pc, #652]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
100063d4:	689b      	ldr	r3, [r3, #8]
100063d6:	f003 030c 	and.w	r3, r3, #12
100063da:	2b04      	cmp	r3, #4
100063dc:	d00c      	beq.n	100063f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
100063de:	4ba0      	ldr	r3, [pc, #640]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
100063e0:	689b      	ldr	r3, [r3, #8]
100063e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
100063e6:	2b08      	cmp	r3, #8
100063e8:	d112      	bne.n	10006410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
100063ea:	4b9d      	ldr	r3, [pc, #628]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
100063ec:	685b      	ldr	r3, [r3, #4]
100063ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
100063f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
100063f6:	d10b      	bne.n	10006410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
100063f8:	4b99      	ldr	r3, [pc, #612]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
100063fa:	681b      	ldr	r3, [r3, #0]
100063fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10006400:	2b00      	cmp	r3, #0
10006402:	d05b      	beq.n	100064bc <HAL_RCC_OscConfig+0x108>
10006404:	687b      	ldr	r3, [r7, #4]
10006406:	685b      	ldr	r3, [r3, #4]
10006408:	2b00      	cmp	r3, #0
1000640a:	d157      	bne.n	100064bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
1000640c:	2301      	movs	r3, #1
1000640e:	e23f      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
10006410:	687b      	ldr	r3, [r7, #4]
10006412:	685b      	ldr	r3, [r3, #4]
10006414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10006418:	d106      	bne.n	10006428 <HAL_RCC_OscConfig+0x74>
1000641a:	4b91      	ldr	r3, [pc, #580]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
1000641c:	681b      	ldr	r3, [r3, #0]
1000641e:	4a90      	ldr	r2, [pc, #576]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10006424:	6013      	str	r3, [r2, #0]
10006426:	e01d      	b.n	10006464 <HAL_RCC_OscConfig+0xb0>
10006428:	687b      	ldr	r3, [r7, #4]
1000642a:	685b      	ldr	r3, [r3, #4]
1000642c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
10006430:	d10c      	bne.n	1000644c <HAL_RCC_OscConfig+0x98>
10006432:	4b8b      	ldr	r3, [pc, #556]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006434:	681b      	ldr	r3, [r3, #0]
10006436:	4a8a      	ldr	r2, [pc, #552]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
1000643c:	6013      	str	r3, [r2, #0]
1000643e:	4b88      	ldr	r3, [pc, #544]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006440:	681b      	ldr	r3, [r3, #0]
10006442:	4a87      	ldr	r2, [pc, #540]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10006448:	6013      	str	r3, [r2, #0]
1000644a:	e00b      	b.n	10006464 <HAL_RCC_OscConfig+0xb0>
1000644c:	4b84      	ldr	r3, [pc, #528]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
1000644e:	681b      	ldr	r3, [r3, #0]
10006450:	4a83      	ldr	r2, [pc, #524]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10006456:	6013      	str	r3, [r2, #0]
10006458:	4b81      	ldr	r3, [pc, #516]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
1000645a:	681b      	ldr	r3, [r3, #0]
1000645c:	4a80      	ldr	r2, [pc, #512]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
1000645e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
10006462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
10006464:	687b      	ldr	r3, [r7, #4]
10006466:	685b      	ldr	r3, [r3, #4]
10006468:	2b00      	cmp	r3, #0
1000646a:	d013      	beq.n	10006494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
1000646c:	f7fe f868 	bl	10004540 <HAL_GetTick>
10006470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10006472:	e008      	b.n	10006486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
10006474:	f7fe f864 	bl	10004540 <HAL_GetTick>
10006478:	4602      	mov	r2, r0
1000647a:	693b      	ldr	r3, [r7, #16]
1000647c:	1ad3      	subs	r3, r2, r3
1000647e:	2b64      	cmp	r3, #100	; 0x64
10006480:	d901      	bls.n	10006486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
10006482:	2303      	movs	r3, #3
10006484:	e204      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10006486:	4b76      	ldr	r3, [pc, #472]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006488:	681b      	ldr	r3, [r3, #0]
1000648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
1000648e:	2b00      	cmp	r3, #0
10006490:	d0f0      	beq.n	10006474 <HAL_RCC_OscConfig+0xc0>
10006492:	e014      	b.n	100064be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
10006494:	f7fe f854 	bl	10004540 <HAL_GetTick>
10006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
1000649a:	e008      	b.n	100064ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
1000649c:	f7fe f850 	bl	10004540 <HAL_GetTick>
100064a0:	4602      	mov	r2, r0
100064a2:	693b      	ldr	r3, [r7, #16]
100064a4:	1ad3      	subs	r3, r2, r3
100064a6:	2b64      	cmp	r3, #100	; 0x64
100064a8:	d901      	bls.n	100064ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
100064aa:	2303      	movs	r3, #3
100064ac:	e1f0      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100064ae:	4b6c      	ldr	r3, [pc, #432]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
100064b0:	681b      	ldr	r3, [r3, #0]
100064b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
100064b6:	2b00      	cmp	r3, #0
100064b8:	d1f0      	bne.n	1000649c <HAL_RCC_OscConfig+0xe8>
100064ba:	e000      	b.n	100064be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
100064bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100064be:	687b      	ldr	r3, [r7, #4]
100064c0:	681b      	ldr	r3, [r3, #0]
100064c2:	f003 0302 	and.w	r3, r3, #2
100064c6:	2b00      	cmp	r3, #0
100064c8:	d063      	beq.n	10006592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
100064ca:	4b65      	ldr	r3, [pc, #404]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
100064cc:	689b      	ldr	r3, [r3, #8]
100064ce:	f003 030c 	and.w	r3, r3, #12
100064d2:	2b00      	cmp	r3, #0
100064d4:	d00b      	beq.n	100064ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
100064d6:	4b62      	ldr	r3, [pc, #392]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
100064d8:	689b      	ldr	r3, [r3, #8]
100064da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
100064de:	2b08      	cmp	r3, #8
100064e0:	d11c      	bne.n	1000651c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
100064e2:	4b5f      	ldr	r3, [pc, #380]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
100064e4:	685b      	ldr	r3, [r3, #4]
100064e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
100064ea:	2b00      	cmp	r3, #0
100064ec:	d116      	bne.n	1000651c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100064ee:	4b5c      	ldr	r3, [pc, #368]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
100064f0:	681b      	ldr	r3, [r3, #0]
100064f2:	f003 0302 	and.w	r3, r3, #2
100064f6:	2b00      	cmp	r3, #0
100064f8:	d005      	beq.n	10006506 <HAL_RCC_OscConfig+0x152>
100064fa:	687b      	ldr	r3, [r7, #4]
100064fc:	68db      	ldr	r3, [r3, #12]
100064fe:	2b01      	cmp	r3, #1
10006500:	d001      	beq.n	10006506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
10006502:	2301      	movs	r3, #1
10006504:	e1c4      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10006506:	4b56      	ldr	r3, [pc, #344]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006508:	681b      	ldr	r3, [r3, #0]
1000650a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
1000650e:	687b      	ldr	r3, [r7, #4]
10006510:	691b      	ldr	r3, [r3, #16]
10006512:	00db      	lsls	r3, r3, #3
10006514:	4952      	ldr	r1, [pc, #328]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006516:	4313      	orrs	r3, r2
10006518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000651a:	e03a      	b.n	10006592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
1000651c:	687b      	ldr	r3, [r7, #4]
1000651e:	68db      	ldr	r3, [r3, #12]
10006520:	2b00      	cmp	r3, #0
10006522:	d020      	beq.n	10006566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10006524:	4b4f      	ldr	r3, [pc, #316]	; (10006664 <HAL_RCC_OscConfig+0x2b0>)
10006526:	2201      	movs	r2, #1
10006528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000652a:	f7fe f809 	bl	10004540 <HAL_GetTick>
1000652e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10006530:	e008      	b.n	10006544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
10006532:	f7fe f805 	bl	10004540 <HAL_GetTick>
10006536:	4602      	mov	r2, r0
10006538:	693b      	ldr	r3, [r7, #16]
1000653a:	1ad3      	subs	r3, r2, r3
1000653c:	2b02      	cmp	r3, #2
1000653e:	d901      	bls.n	10006544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
10006540:	2303      	movs	r3, #3
10006542:	e1a5      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10006544:	4b46      	ldr	r3, [pc, #280]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006546:	681b      	ldr	r3, [r3, #0]
10006548:	f003 0302 	and.w	r3, r3, #2
1000654c:	2b00      	cmp	r3, #0
1000654e:	d0f0      	beq.n	10006532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10006550:	4b43      	ldr	r3, [pc, #268]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006552:	681b      	ldr	r3, [r3, #0]
10006554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
10006558:	687b      	ldr	r3, [r7, #4]
1000655a:	691b      	ldr	r3, [r3, #16]
1000655c:	00db      	lsls	r3, r3, #3
1000655e:	4940      	ldr	r1, [pc, #256]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006560:	4313      	orrs	r3, r2
10006562:	600b      	str	r3, [r1, #0]
10006564:	e015      	b.n	10006592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10006566:	4b3f      	ldr	r3, [pc, #252]	; (10006664 <HAL_RCC_OscConfig+0x2b0>)
10006568:	2200      	movs	r2, #0
1000656a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000656c:	f7fd ffe8 	bl	10004540 <HAL_GetTick>
10006570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10006572:	e008      	b.n	10006586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
10006574:	f7fd ffe4 	bl	10004540 <HAL_GetTick>
10006578:	4602      	mov	r2, r0
1000657a:	693b      	ldr	r3, [r7, #16]
1000657c:	1ad3      	subs	r3, r2, r3
1000657e:	2b02      	cmp	r3, #2
10006580:	d901      	bls.n	10006586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
10006582:	2303      	movs	r3, #3
10006584:	e184      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10006586:	4b36      	ldr	r3, [pc, #216]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006588:	681b      	ldr	r3, [r3, #0]
1000658a:	f003 0302 	and.w	r3, r3, #2
1000658e:	2b00      	cmp	r3, #0
10006590:	d1f0      	bne.n	10006574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10006592:	687b      	ldr	r3, [r7, #4]
10006594:	681b      	ldr	r3, [r3, #0]
10006596:	f003 0308 	and.w	r3, r3, #8
1000659a:	2b00      	cmp	r3, #0
1000659c:	d030      	beq.n	10006600 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
1000659e:	687b      	ldr	r3, [r7, #4]
100065a0:	695b      	ldr	r3, [r3, #20]
100065a2:	2b00      	cmp	r3, #0
100065a4:	d016      	beq.n	100065d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
100065a6:	4b30      	ldr	r3, [pc, #192]	; (10006668 <HAL_RCC_OscConfig+0x2b4>)
100065a8:	2201      	movs	r2, #1
100065aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100065ac:	f7fd ffc8 	bl	10004540 <HAL_GetTick>
100065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100065b2:	e008      	b.n	100065c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
100065b4:	f7fd ffc4 	bl	10004540 <HAL_GetTick>
100065b8:	4602      	mov	r2, r0
100065ba:	693b      	ldr	r3, [r7, #16]
100065bc:	1ad3      	subs	r3, r2, r3
100065be:	2b02      	cmp	r3, #2
100065c0:	d901      	bls.n	100065c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
100065c2:	2303      	movs	r3, #3
100065c4:	e164      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100065c6:	4b26      	ldr	r3, [pc, #152]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
100065c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100065ca:	f003 0302 	and.w	r3, r3, #2
100065ce:	2b00      	cmp	r3, #0
100065d0:	d0f0      	beq.n	100065b4 <HAL_RCC_OscConfig+0x200>
100065d2:	e015      	b.n	10006600 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
100065d4:	4b24      	ldr	r3, [pc, #144]	; (10006668 <HAL_RCC_OscConfig+0x2b4>)
100065d6:	2200      	movs	r2, #0
100065d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
100065da:	f7fd ffb1 	bl	10004540 <HAL_GetTick>
100065de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100065e0:	e008      	b.n	100065f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
100065e2:	f7fd ffad 	bl	10004540 <HAL_GetTick>
100065e6:	4602      	mov	r2, r0
100065e8:	693b      	ldr	r3, [r7, #16]
100065ea:	1ad3      	subs	r3, r2, r3
100065ec:	2b02      	cmp	r3, #2
100065ee:	d901      	bls.n	100065f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
100065f0:	2303      	movs	r3, #3
100065f2:	e14d      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100065f4:	4b1a      	ldr	r3, [pc, #104]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
100065f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100065f8:	f003 0302 	and.w	r3, r3, #2
100065fc:	2b00      	cmp	r3, #0
100065fe:	d1f0      	bne.n	100065e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10006600:	687b      	ldr	r3, [r7, #4]
10006602:	681b      	ldr	r3, [r3, #0]
10006604:	f003 0304 	and.w	r3, r3, #4
10006608:	2b00      	cmp	r3, #0
1000660a:	f000 80a0 	beq.w	1000674e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
1000660e:	2300      	movs	r3, #0
10006610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
10006612:	4b13      	ldr	r3, [pc, #76]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10006616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
1000661a:	2b00      	cmp	r3, #0
1000661c:	d10f      	bne.n	1000663e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
1000661e:	2300      	movs	r3, #0
10006620:	60bb      	str	r3, [r7, #8]
10006622:	4b0f      	ldr	r3, [pc, #60]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10006626:	4a0e      	ldr	r2, [pc, #56]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
1000662c:	6413      	str	r3, [r2, #64]	; 0x40
1000662e:	4b0c      	ldr	r3, [pc, #48]	; (10006660 <HAL_RCC_OscConfig+0x2ac>)
10006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10006632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10006636:	60bb      	str	r3, [r7, #8]
10006638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
1000663a:	2301      	movs	r3, #1
1000663c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
1000663e:	4b0b      	ldr	r3, [pc, #44]	; (1000666c <HAL_RCC_OscConfig+0x2b8>)
10006640:	681b      	ldr	r3, [r3, #0]
10006642:	f403 7380 	and.w	r3, r3, #256	; 0x100
10006646:	2b00      	cmp	r3, #0
10006648:	d121      	bne.n	1000668e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
1000664a:	4b08      	ldr	r3, [pc, #32]	; (1000666c <HAL_RCC_OscConfig+0x2b8>)
1000664c:	681b      	ldr	r3, [r3, #0]
1000664e:	4a07      	ldr	r2, [pc, #28]	; (1000666c <HAL_RCC_OscConfig+0x2b8>)
10006650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10006654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
10006656:	f7fd ff73 	bl	10004540 <HAL_GetTick>
1000665a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
1000665c:	e011      	b.n	10006682 <HAL_RCC_OscConfig+0x2ce>
1000665e:	bf00      	nop
10006660:	40023800 	.word	0x40023800
10006664:	42470000 	.word	0x42470000
10006668:	42470e80 	.word	0x42470e80
1000666c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
10006670:	f7fd ff66 	bl	10004540 <HAL_GetTick>
10006674:	4602      	mov	r2, r0
10006676:	693b      	ldr	r3, [r7, #16]
10006678:	1ad3      	subs	r3, r2, r3
1000667a:	2b02      	cmp	r3, #2
1000667c:	d901      	bls.n	10006682 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
1000667e:	2303      	movs	r3, #3
10006680:	e106      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
10006682:	4b85      	ldr	r3, [pc, #532]	; (10006898 <HAL_RCC_OscConfig+0x4e4>)
10006684:	681b      	ldr	r3, [r3, #0]
10006686:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000668a:	2b00      	cmp	r3, #0
1000668c:	d0f0      	beq.n	10006670 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
1000668e:	687b      	ldr	r3, [r7, #4]
10006690:	689b      	ldr	r3, [r3, #8]
10006692:	2b01      	cmp	r3, #1
10006694:	d106      	bne.n	100066a4 <HAL_RCC_OscConfig+0x2f0>
10006696:	4b81      	ldr	r3, [pc, #516]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
10006698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1000669a:	4a80      	ldr	r2, [pc, #512]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
1000669c:	f043 0301 	orr.w	r3, r3, #1
100066a0:	6713      	str	r3, [r2, #112]	; 0x70
100066a2:	e01c      	b.n	100066de <HAL_RCC_OscConfig+0x32a>
100066a4:	687b      	ldr	r3, [r7, #4]
100066a6:	689b      	ldr	r3, [r3, #8]
100066a8:	2b05      	cmp	r3, #5
100066aa:	d10c      	bne.n	100066c6 <HAL_RCC_OscConfig+0x312>
100066ac:	4b7b      	ldr	r3, [pc, #492]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
100066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100066b0:	4a7a      	ldr	r2, [pc, #488]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
100066b2:	f043 0304 	orr.w	r3, r3, #4
100066b6:	6713      	str	r3, [r2, #112]	; 0x70
100066b8:	4b78      	ldr	r3, [pc, #480]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
100066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100066bc:	4a77      	ldr	r2, [pc, #476]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
100066be:	f043 0301 	orr.w	r3, r3, #1
100066c2:	6713      	str	r3, [r2, #112]	; 0x70
100066c4:	e00b      	b.n	100066de <HAL_RCC_OscConfig+0x32a>
100066c6:	4b75      	ldr	r3, [pc, #468]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
100066c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100066ca:	4a74      	ldr	r2, [pc, #464]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
100066cc:	f023 0301 	bic.w	r3, r3, #1
100066d0:	6713      	str	r3, [r2, #112]	; 0x70
100066d2:	4b72      	ldr	r3, [pc, #456]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
100066d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100066d6:	4a71      	ldr	r2, [pc, #452]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
100066d8:	f023 0304 	bic.w	r3, r3, #4
100066dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
100066de:	687b      	ldr	r3, [r7, #4]
100066e0:	689b      	ldr	r3, [r3, #8]
100066e2:	2b00      	cmp	r3, #0
100066e4:	d015      	beq.n	10006712 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100066e6:	f7fd ff2b 	bl	10004540 <HAL_GetTick>
100066ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100066ec:	e00a      	b.n	10006704 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
100066ee:	f7fd ff27 	bl	10004540 <HAL_GetTick>
100066f2:	4602      	mov	r2, r0
100066f4:	693b      	ldr	r3, [r7, #16]
100066f6:	1ad3      	subs	r3, r2, r3
100066f8:	f241 3288 	movw	r2, #5000	; 0x1388
100066fc:	4293      	cmp	r3, r2
100066fe:	d901      	bls.n	10006704 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
10006700:	2303      	movs	r3, #3
10006702:	e0c5      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10006704:	4b65      	ldr	r3, [pc, #404]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
10006706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10006708:	f003 0302 	and.w	r3, r3, #2
1000670c:	2b00      	cmp	r3, #0
1000670e:	d0ee      	beq.n	100066ee <HAL_RCC_OscConfig+0x33a>
10006710:	e014      	b.n	1000673c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
10006712:	f7fd ff15 	bl	10004540 <HAL_GetTick>
10006716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10006718:	e00a      	b.n	10006730 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
1000671a:	f7fd ff11 	bl	10004540 <HAL_GetTick>
1000671e:	4602      	mov	r2, r0
10006720:	693b      	ldr	r3, [r7, #16]
10006722:	1ad3      	subs	r3, r2, r3
10006724:	f241 3288 	movw	r2, #5000	; 0x1388
10006728:	4293      	cmp	r3, r2
1000672a:	d901      	bls.n	10006730 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
1000672c:	2303      	movs	r3, #3
1000672e:	e0af      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10006730:	4b5a      	ldr	r3, [pc, #360]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
10006732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10006734:	f003 0302 	and.w	r3, r3, #2
10006738:	2b00      	cmp	r3, #0
1000673a:	d1ee      	bne.n	1000671a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
1000673c:	7dfb      	ldrb	r3, [r7, #23]
1000673e:	2b01      	cmp	r3, #1
10006740:	d105      	bne.n	1000674e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
10006742:	4b56      	ldr	r3, [pc, #344]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
10006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10006746:	4a55      	ldr	r2, [pc, #340]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
10006748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
1000674c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
1000674e:	687b      	ldr	r3, [r7, #4]
10006750:	699b      	ldr	r3, [r3, #24]
10006752:	2b00      	cmp	r3, #0
10006754:	f000 809b 	beq.w	1000688e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
10006758:	4b50      	ldr	r3, [pc, #320]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
1000675a:	689b      	ldr	r3, [r3, #8]
1000675c:	f003 030c 	and.w	r3, r3, #12
10006760:	2b08      	cmp	r3, #8
10006762:	d05c      	beq.n	1000681e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
10006764:	687b      	ldr	r3, [r7, #4]
10006766:	699b      	ldr	r3, [r3, #24]
10006768:	2b02      	cmp	r3, #2
1000676a:	d141      	bne.n	100067f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
1000676c:	4b4c      	ldr	r3, [pc, #304]	; (100068a0 <HAL_RCC_OscConfig+0x4ec>)
1000676e:	2200      	movs	r2, #0
10006770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
10006772:	f7fd fee5 	bl	10004540 <HAL_GetTick>
10006776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
10006778:	e008      	b.n	1000678c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
1000677a:	f7fd fee1 	bl	10004540 <HAL_GetTick>
1000677e:	4602      	mov	r2, r0
10006780:	693b      	ldr	r3, [r7, #16]
10006782:	1ad3      	subs	r3, r2, r3
10006784:	2b02      	cmp	r3, #2
10006786:	d901      	bls.n	1000678c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
10006788:	2303      	movs	r3, #3
1000678a:	e081      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
1000678c:	4b43      	ldr	r3, [pc, #268]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
1000678e:	681b      	ldr	r3, [r3, #0]
10006790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
10006794:	2b00      	cmp	r3, #0
10006796:	d1f0      	bne.n	1000677a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
10006798:	687b      	ldr	r3, [r7, #4]
1000679a:	69da      	ldr	r2, [r3, #28]
1000679c:	687b      	ldr	r3, [r7, #4]
1000679e:	6a1b      	ldr	r3, [r3, #32]
100067a0:	431a      	orrs	r2, r3
100067a2:	687b      	ldr	r3, [r7, #4]
100067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100067a6:	019b      	lsls	r3, r3, #6
100067a8:	431a      	orrs	r2, r3
100067aa:	687b      	ldr	r3, [r7, #4]
100067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100067ae:	085b      	lsrs	r3, r3, #1
100067b0:	3b01      	subs	r3, #1
100067b2:	041b      	lsls	r3, r3, #16
100067b4:	431a      	orrs	r2, r3
100067b6:	687b      	ldr	r3, [r7, #4]
100067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100067ba:	061b      	lsls	r3, r3, #24
100067bc:	4937      	ldr	r1, [pc, #220]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
100067be:	4313      	orrs	r3, r2
100067c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
100067c2:	4b37      	ldr	r3, [pc, #220]	; (100068a0 <HAL_RCC_OscConfig+0x4ec>)
100067c4:	2201      	movs	r2, #1
100067c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
100067c8:	f7fd feba 	bl	10004540 <HAL_GetTick>
100067cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
100067ce:	e008      	b.n	100067e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
100067d0:	f7fd feb6 	bl	10004540 <HAL_GetTick>
100067d4:	4602      	mov	r2, r0
100067d6:	693b      	ldr	r3, [r7, #16]
100067d8:	1ad3      	subs	r3, r2, r3
100067da:	2b02      	cmp	r3, #2
100067dc:	d901      	bls.n	100067e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
100067de:	2303      	movs	r3, #3
100067e0:	e056      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
100067e2:	4b2e      	ldr	r3, [pc, #184]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
100067e4:	681b      	ldr	r3, [r3, #0]
100067e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
100067ea:	2b00      	cmp	r3, #0
100067ec:	d0f0      	beq.n	100067d0 <HAL_RCC_OscConfig+0x41c>
100067ee:	e04e      	b.n	1000688e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
100067f0:	4b2b      	ldr	r3, [pc, #172]	; (100068a0 <HAL_RCC_OscConfig+0x4ec>)
100067f2:	2200      	movs	r2, #0
100067f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
100067f6:	f7fd fea3 	bl	10004540 <HAL_GetTick>
100067fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
100067fc:	e008      	b.n	10006810 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
100067fe:	f7fd fe9f 	bl	10004540 <HAL_GetTick>
10006802:	4602      	mov	r2, r0
10006804:	693b      	ldr	r3, [r7, #16]
10006806:	1ad3      	subs	r3, r2, r3
10006808:	2b02      	cmp	r3, #2
1000680a:	d901      	bls.n	10006810 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
1000680c:	2303      	movs	r3, #3
1000680e:	e03f      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
10006810:	4b22      	ldr	r3, [pc, #136]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
10006812:	681b      	ldr	r3, [r3, #0]
10006814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
10006818:	2b00      	cmp	r3, #0
1000681a:	d1f0      	bne.n	100067fe <HAL_RCC_OscConfig+0x44a>
1000681c:	e037      	b.n	1000688e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
1000681e:	687b      	ldr	r3, [r7, #4]
10006820:	699b      	ldr	r3, [r3, #24]
10006822:	2b01      	cmp	r3, #1
10006824:	d101      	bne.n	1000682a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
10006826:	2301      	movs	r3, #1
10006828:	e032      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
1000682a:	4b1c      	ldr	r3, [pc, #112]	; (1000689c <HAL_RCC_OscConfig+0x4e8>)
1000682c:	685b      	ldr	r3, [r3, #4]
1000682e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
10006830:	687b      	ldr	r3, [r7, #4]
10006832:	699b      	ldr	r3, [r3, #24]
10006834:	2b01      	cmp	r3, #1
10006836:	d028      	beq.n	1000688a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
10006838:	68fb      	ldr	r3, [r7, #12]
1000683a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
1000683e:	687b      	ldr	r3, [r7, #4]
10006840:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
10006842:	429a      	cmp	r2, r3
10006844:	d121      	bne.n	1000688a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
10006846:	68fb      	ldr	r3, [r7, #12]
10006848:	f003 023f 	and.w	r2, r3, #63	; 0x3f
1000684c:	687b      	ldr	r3, [r7, #4]
1000684e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
10006850:	429a      	cmp	r2, r3
10006852:	d11a      	bne.n	1000688a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
10006854:	68fa      	ldr	r2, [r7, #12]
10006856:	f647 73c0 	movw	r3, #32704	; 0x7fc0
1000685a:	4013      	ands	r3, r2
1000685c:	687a      	ldr	r2, [r7, #4]
1000685e:	6a52      	ldr	r2, [r2, #36]	; 0x24
10006860:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
10006862:	4293      	cmp	r3, r2
10006864:	d111      	bne.n	1000688a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
10006866:	68fb      	ldr	r3, [r7, #12]
10006868:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
1000686c:	687b      	ldr	r3, [r7, #4]
1000686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006870:	085b      	lsrs	r3, r3, #1
10006872:	3b01      	subs	r3, #1
10006874:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
10006876:	429a      	cmp	r2, r3
10006878:	d107      	bne.n	1000688a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
1000687a:	68fb      	ldr	r3, [r7, #12]
1000687c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
10006880:	687b      	ldr	r3, [r7, #4]
10006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10006884:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
10006886:	429a      	cmp	r2, r3
10006888:	d001      	beq.n	1000688e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
1000688a:	2301      	movs	r3, #1
1000688c:	e000      	b.n	10006890 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
1000688e:	2300      	movs	r3, #0
}
10006890:	4618      	mov	r0, r3
10006892:	3718      	adds	r7, #24
10006894:	46bd      	mov	sp, r7
10006896:	bd80      	pop	{r7, pc}
10006898:	40007000 	.word	0x40007000
1000689c:	40023800 	.word	0x40023800
100068a0:	42470060 	.word	0x42470060

100068a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
100068a4:	b580      	push	{r7, lr}
100068a6:	b084      	sub	sp, #16
100068a8:	af00      	add	r7, sp, #0
100068aa:	6078      	str	r0, [r7, #4]
100068ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
100068ae:	687b      	ldr	r3, [r7, #4]
100068b0:	2b00      	cmp	r3, #0
100068b2:	d101      	bne.n	100068b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
100068b4:	2301      	movs	r3, #1
100068b6:	e0cc      	b.n	10006a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
100068b8:	4b68      	ldr	r3, [pc, #416]	; (10006a5c <HAL_RCC_ClockConfig+0x1b8>)
100068ba:	681b      	ldr	r3, [r3, #0]
100068bc:	f003 0307 	and.w	r3, r3, #7
100068c0:	683a      	ldr	r2, [r7, #0]
100068c2:	429a      	cmp	r2, r3
100068c4:	d90c      	bls.n	100068e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
100068c6:	4b65      	ldr	r3, [pc, #404]	; (10006a5c <HAL_RCC_ClockConfig+0x1b8>)
100068c8:	683a      	ldr	r2, [r7, #0]
100068ca:	b2d2      	uxtb	r2, r2
100068cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
100068ce:	4b63      	ldr	r3, [pc, #396]	; (10006a5c <HAL_RCC_ClockConfig+0x1b8>)
100068d0:	681b      	ldr	r3, [r3, #0]
100068d2:	f003 0307 	and.w	r3, r3, #7
100068d6:	683a      	ldr	r2, [r7, #0]
100068d8:	429a      	cmp	r2, r3
100068da:	d001      	beq.n	100068e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
100068dc:	2301      	movs	r3, #1
100068de:	e0b8      	b.n	10006a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
100068e0:	687b      	ldr	r3, [r7, #4]
100068e2:	681b      	ldr	r3, [r3, #0]
100068e4:	f003 0302 	and.w	r3, r3, #2
100068e8:	2b00      	cmp	r3, #0
100068ea:	d020      	beq.n	1000692e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
100068ec:	687b      	ldr	r3, [r7, #4]
100068ee:	681b      	ldr	r3, [r3, #0]
100068f0:	f003 0304 	and.w	r3, r3, #4
100068f4:	2b00      	cmp	r3, #0
100068f6:	d005      	beq.n	10006904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
100068f8:	4b59      	ldr	r3, [pc, #356]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
100068fa:	689b      	ldr	r3, [r3, #8]
100068fc:	4a58      	ldr	r2, [pc, #352]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
100068fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
10006902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10006904:	687b      	ldr	r3, [r7, #4]
10006906:	681b      	ldr	r3, [r3, #0]
10006908:	f003 0308 	and.w	r3, r3, #8
1000690c:	2b00      	cmp	r3, #0
1000690e:	d005      	beq.n	1000691c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
10006910:	4b53      	ldr	r3, [pc, #332]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
10006912:	689b      	ldr	r3, [r3, #8]
10006914:	4a52      	ldr	r2, [pc, #328]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
10006916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
1000691a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
1000691c:	4b50      	ldr	r3, [pc, #320]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
1000691e:	689b      	ldr	r3, [r3, #8]
10006920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
10006924:	687b      	ldr	r3, [r7, #4]
10006926:	689b      	ldr	r3, [r3, #8]
10006928:	494d      	ldr	r1, [pc, #308]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
1000692a:	4313      	orrs	r3, r2
1000692c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
1000692e:	687b      	ldr	r3, [r7, #4]
10006930:	681b      	ldr	r3, [r3, #0]
10006932:	f003 0301 	and.w	r3, r3, #1
10006936:	2b00      	cmp	r3, #0
10006938:	d044      	beq.n	100069c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
1000693a:	687b      	ldr	r3, [r7, #4]
1000693c:	685b      	ldr	r3, [r3, #4]
1000693e:	2b01      	cmp	r3, #1
10006940:	d107      	bne.n	10006952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10006942:	4b47      	ldr	r3, [pc, #284]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
10006944:	681b      	ldr	r3, [r3, #0]
10006946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
1000694a:	2b00      	cmp	r3, #0
1000694c:	d119      	bne.n	10006982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
1000694e:	2301      	movs	r3, #1
10006950:	e07f      	b.n	10006a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
10006952:	687b      	ldr	r3, [r7, #4]
10006954:	685b      	ldr	r3, [r3, #4]
10006956:	2b02      	cmp	r3, #2
10006958:	d003      	beq.n	10006962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
1000695a:	687b      	ldr	r3, [r7, #4]
1000695c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
1000695e:	2b03      	cmp	r3, #3
10006960:	d107      	bne.n	10006972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
10006962:	4b3f      	ldr	r3, [pc, #252]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
10006964:	681b      	ldr	r3, [r3, #0]
10006966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
1000696a:	2b00      	cmp	r3, #0
1000696c:	d109      	bne.n	10006982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
1000696e:	2301      	movs	r3, #1
10006970:	e06f      	b.n	10006a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10006972:	4b3b      	ldr	r3, [pc, #236]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
10006974:	681b      	ldr	r3, [r3, #0]
10006976:	f003 0302 	and.w	r3, r3, #2
1000697a:	2b00      	cmp	r3, #0
1000697c:	d101      	bne.n	10006982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
1000697e:	2301      	movs	r3, #1
10006980:	e067      	b.n	10006a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
10006982:	4b37      	ldr	r3, [pc, #220]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
10006984:	689b      	ldr	r3, [r3, #8]
10006986:	f023 0203 	bic.w	r2, r3, #3
1000698a:	687b      	ldr	r3, [r7, #4]
1000698c:	685b      	ldr	r3, [r3, #4]
1000698e:	4934      	ldr	r1, [pc, #208]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
10006990:	4313      	orrs	r3, r2
10006992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
10006994:	f7fd fdd4 	bl	10004540 <HAL_GetTick>
10006998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
1000699a:	e00a      	b.n	100069b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000699c:	f7fd fdd0 	bl	10004540 <HAL_GetTick>
100069a0:	4602      	mov	r2, r0
100069a2:	68fb      	ldr	r3, [r7, #12]
100069a4:	1ad3      	subs	r3, r2, r3
100069a6:	f241 3288 	movw	r2, #5000	; 0x1388
100069aa:	4293      	cmp	r3, r2
100069ac:	d901      	bls.n	100069b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
100069ae:	2303      	movs	r3, #3
100069b0:	e04f      	b.n	10006a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
100069b2:	4b2b      	ldr	r3, [pc, #172]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
100069b4:	689b      	ldr	r3, [r3, #8]
100069b6:	f003 020c 	and.w	r2, r3, #12
100069ba:	687b      	ldr	r3, [r7, #4]
100069bc:	685b      	ldr	r3, [r3, #4]
100069be:	009b      	lsls	r3, r3, #2
100069c0:	429a      	cmp	r2, r3
100069c2:	d1eb      	bne.n	1000699c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
100069c4:	4b25      	ldr	r3, [pc, #148]	; (10006a5c <HAL_RCC_ClockConfig+0x1b8>)
100069c6:	681b      	ldr	r3, [r3, #0]
100069c8:	f003 0307 	and.w	r3, r3, #7
100069cc:	683a      	ldr	r2, [r7, #0]
100069ce:	429a      	cmp	r2, r3
100069d0:	d20c      	bcs.n	100069ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
100069d2:	4b22      	ldr	r3, [pc, #136]	; (10006a5c <HAL_RCC_ClockConfig+0x1b8>)
100069d4:	683a      	ldr	r2, [r7, #0]
100069d6:	b2d2      	uxtb	r2, r2
100069d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
100069da:	4b20      	ldr	r3, [pc, #128]	; (10006a5c <HAL_RCC_ClockConfig+0x1b8>)
100069dc:	681b      	ldr	r3, [r3, #0]
100069de:	f003 0307 	and.w	r3, r3, #7
100069e2:	683a      	ldr	r2, [r7, #0]
100069e4:	429a      	cmp	r2, r3
100069e6:	d001      	beq.n	100069ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
100069e8:	2301      	movs	r3, #1
100069ea:	e032      	b.n	10006a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
100069ec:	687b      	ldr	r3, [r7, #4]
100069ee:	681b      	ldr	r3, [r3, #0]
100069f0:	f003 0304 	and.w	r3, r3, #4
100069f4:	2b00      	cmp	r3, #0
100069f6:	d008      	beq.n	10006a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
100069f8:	4b19      	ldr	r3, [pc, #100]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
100069fa:	689b      	ldr	r3, [r3, #8]
100069fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
10006a00:	687b      	ldr	r3, [r7, #4]
10006a02:	68db      	ldr	r3, [r3, #12]
10006a04:	4916      	ldr	r1, [pc, #88]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
10006a06:	4313      	orrs	r3, r2
10006a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10006a0a:	687b      	ldr	r3, [r7, #4]
10006a0c:	681b      	ldr	r3, [r3, #0]
10006a0e:	f003 0308 	and.w	r3, r3, #8
10006a12:	2b00      	cmp	r3, #0
10006a14:	d009      	beq.n	10006a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
10006a16:	4b12      	ldr	r3, [pc, #72]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
10006a18:	689b      	ldr	r3, [r3, #8]
10006a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
10006a1e:	687b      	ldr	r3, [r7, #4]
10006a20:	691b      	ldr	r3, [r3, #16]
10006a22:	00db      	lsls	r3, r3, #3
10006a24:	490e      	ldr	r1, [pc, #56]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
10006a26:	4313      	orrs	r3, r2
10006a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
10006a2a:	f000 f82d 	bl	10006a88 <HAL_RCC_GetSysClockFreq>
10006a2e:	4602      	mov	r2, r0
10006a30:	4b0b      	ldr	r3, [pc, #44]	; (10006a60 <HAL_RCC_ClockConfig+0x1bc>)
10006a32:	689b      	ldr	r3, [r3, #8]
10006a34:	091b      	lsrs	r3, r3, #4
10006a36:	f003 030f 	and.w	r3, r3, #15
10006a3a:	490a      	ldr	r1, [pc, #40]	; (10006a64 <HAL_RCC_ClockConfig+0x1c0>)
10006a3c:	5ccb      	ldrb	r3, [r1, r3]
10006a3e:	fa22 f303 	lsr.w	r3, r2, r3
10006a42:	4a09      	ldr	r2, [pc, #36]	; (10006a68 <HAL_RCC_ClockConfig+0x1c4>)
10006a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
10006a46:	4b09      	ldr	r3, [pc, #36]	; (10006a6c <HAL_RCC_ClockConfig+0x1c8>)
10006a48:	681b      	ldr	r3, [r3, #0]
10006a4a:	4618      	mov	r0, r3
10006a4c:	f7fd fd34 	bl	100044b8 <HAL_InitTick>

  return HAL_OK;
10006a50:	2300      	movs	r3, #0
}
10006a52:	4618      	mov	r0, r3
10006a54:	3710      	adds	r7, #16
10006a56:	46bd      	mov	sp, r7
10006a58:	bd80      	pop	{r7, pc}
10006a5a:	bf00      	nop
10006a5c:	40023c00 	.word	0x40023c00
10006a60:	40023800 	.word	0x40023800
10006a64:	0800b814 	.word	0x0800b814
10006a68:	20000000 	.word	0x20000000
10006a6c:	20000004 	.word	0x20000004

10006a70 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
10006a70:	b480      	push	{r7}
10006a72:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
10006a74:	4b03      	ldr	r3, [pc, #12]	; (10006a84 <HAL_RCC_EnableCSS+0x14>)
10006a76:	2201      	movs	r2, #1
10006a78:	601a      	str	r2, [r3, #0]
}
10006a7a:	bf00      	nop
10006a7c:	46bd      	mov	sp, r7
10006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006a82:	4770      	bx	lr
10006a84:	4247004c 	.word	0x4247004c

10006a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
10006a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
10006a8c:	b084      	sub	sp, #16
10006a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
10006a90:	2300      	movs	r3, #0
10006a92:	607b      	str	r3, [r7, #4]
10006a94:	2300      	movs	r3, #0
10006a96:	60fb      	str	r3, [r7, #12]
10006a98:	2300      	movs	r3, #0
10006a9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
10006a9c:	2300      	movs	r3, #0
10006a9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
10006aa0:	4b67      	ldr	r3, [pc, #412]	; (10006c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
10006aa2:	689b      	ldr	r3, [r3, #8]
10006aa4:	f003 030c 	and.w	r3, r3, #12
10006aa8:	2b08      	cmp	r3, #8
10006aaa:	d00d      	beq.n	10006ac8 <HAL_RCC_GetSysClockFreq+0x40>
10006aac:	2b08      	cmp	r3, #8
10006aae:	f200 80bd 	bhi.w	10006c2c <HAL_RCC_GetSysClockFreq+0x1a4>
10006ab2:	2b00      	cmp	r3, #0
10006ab4:	d002      	beq.n	10006abc <HAL_RCC_GetSysClockFreq+0x34>
10006ab6:	2b04      	cmp	r3, #4
10006ab8:	d003      	beq.n	10006ac2 <HAL_RCC_GetSysClockFreq+0x3a>
10006aba:	e0b7      	b.n	10006c2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
10006abc:	4b61      	ldr	r3, [pc, #388]	; (10006c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
10006abe:	60bb      	str	r3, [r7, #8]
       break;
10006ac0:	e0b7      	b.n	10006c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
10006ac2:	4b61      	ldr	r3, [pc, #388]	; (10006c48 <HAL_RCC_GetSysClockFreq+0x1c0>)
10006ac4:	60bb      	str	r3, [r7, #8]
      break;
10006ac6:	e0b4      	b.n	10006c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
10006ac8:	4b5d      	ldr	r3, [pc, #372]	; (10006c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
10006aca:	685b      	ldr	r3, [r3, #4]
10006acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10006ad0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
10006ad2:	4b5b      	ldr	r3, [pc, #364]	; (10006c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
10006ad4:	685b      	ldr	r3, [r3, #4]
10006ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
10006ada:	2b00      	cmp	r3, #0
10006adc:	d04d      	beq.n	10006b7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
10006ade:	4b58      	ldr	r3, [pc, #352]	; (10006c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
10006ae0:	685b      	ldr	r3, [r3, #4]
10006ae2:	099b      	lsrs	r3, r3, #6
10006ae4:	461a      	mov	r2, r3
10006ae6:	f04f 0300 	mov.w	r3, #0
10006aea:	f240 10ff 	movw	r0, #511	; 0x1ff
10006aee:	f04f 0100 	mov.w	r1, #0
10006af2:	ea02 0800 	and.w	r8, r2, r0
10006af6:	ea03 0901 	and.w	r9, r3, r1
10006afa:	4640      	mov	r0, r8
10006afc:	4649      	mov	r1, r9
10006afe:	f04f 0200 	mov.w	r2, #0
10006b02:	f04f 0300 	mov.w	r3, #0
10006b06:	014b      	lsls	r3, r1, #5
10006b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
10006b0c:	0142      	lsls	r2, r0, #5
10006b0e:	4610      	mov	r0, r2
10006b10:	4619      	mov	r1, r3
10006b12:	ebb0 0008 	subs.w	r0, r0, r8
10006b16:	eb61 0109 	sbc.w	r1, r1, r9
10006b1a:	f04f 0200 	mov.w	r2, #0
10006b1e:	f04f 0300 	mov.w	r3, #0
10006b22:	018b      	lsls	r3, r1, #6
10006b24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
10006b28:	0182      	lsls	r2, r0, #6
10006b2a:	1a12      	subs	r2, r2, r0
10006b2c:	eb63 0301 	sbc.w	r3, r3, r1
10006b30:	f04f 0000 	mov.w	r0, #0
10006b34:	f04f 0100 	mov.w	r1, #0
10006b38:	00d9      	lsls	r1, r3, #3
10006b3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
10006b3e:	00d0      	lsls	r0, r2, #3
10006b40:	4602      	mov	r2, r0
10006b42:	460b      	mov	r3, r1
10006b44:	eb12 0208 	adds.w	r2, r2, r8
10006b48:	eb43 0309 	adc.w	r3, r3, r9
10006b4c:	f04f 0000 	mov.w	r0, #0
10006b50:	f04f 0100 	mov.w	r1, #0
10006b54:	0259      	lsls	r1, r3, #9
10006b56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
10006b5a:	0250      	lsls	r0, r2, #9
10006b5c:	4602      	mov	r2, r0
10006b5e:	460b      	mov	r3, r1
10006b60:	4610      	mov	r0, r2
10006b62:	4619      	mov	r1, r3
10006b64:	687b      	ldr	r3, [r7, #4]
10006b66:	461a      	mov	r2, r3
10006b68:	f04f 0300 	mov.w	r3, #0
10006b6c:	f7fa f86c 	bl	10000c48 <__aeabi_uldivmod>
10006b70:	4602      	mov	r2, r0
10006b72:	460b      	mov	r3, r1
10006b74:	4613      	mov	r3, r2
10006b76:	60fb      	str	r3, [r7, #12]
10006b78:	e04a      	b.n	10006c10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
10006b7a:	4b31      	ldr	r3, [pc, #196]	; (10006c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
10006b7c:	685b      	ldr	r3, [r3, #4]
10006b7e:	099b      	lsrs	r3, r3, #6
10006b80:	461a      	mov	r2, r3
10006b82:	f04f 0300 	mov.w	r3, #0
10006b86:	f240 10ff 	movw	r0, #511	; 0x1ff
10006b8a:	f04f 0100 	mov.w	r1, #0
10006b8e:	ea02 0400 	and.w	r4, r2, r0
10006b92:	ea03 0501 	and.w	r5, r3, r1
10006b96:	4620      	mov	r0, r4
10006b98:	4629      	mov	r1, r5
10006b9a:	f04f 0200 	mov.w	r2, #0
10006b9e:	f04f 0300 	mov.w	r3, #0
10006ba2:	014b      	lsls	r3, r1, #5
10006ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
10006ba8:	0142      	lsls	r2, r0, #5
10006baa:	4610      	mov	r0, r2
10006bac:	4619      	mov	r1, r3
10006bae:	1b00      	subs	r0, r0, r4
10006bb0:	eb61 0105 	sbc.w	r1, r1, r5
10006bb4:	f04f 0200 	mov.w	r2, #0
10006bb8:	f04f 0300 	mov.w	r3, #0
10006bbc:	018b      	lsls	r3, r1, #6
10006bbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
10006bc2:	0182      	lsls	r2, r0, #6
10006bc4:	1a12      	subs	r2, r2, r0
10006bc6:	eb63 0301 	sbc.w	r3, r3, r1
10006bca:	f04f 0000 	mov.w	r0, #0
10006bce:	f04f 0100 	mov.w	r1, #0
10006bd2:	00d9      	lsls	r1, r3, #3
10006bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
10006bd8:	00d0      	lsls	r0, r2, #3
10006bda:	4602      	mov	r2, r0
10006bdc:	460b      	mov	r3, r1
10006bde:	1912      	adds	r2, r2, r4
10006be0:	eb45 0303 	adc.w	r3, r5, r3
10006be4:	f04f 0000 	mov.w	r0, #0
10006be8:	f04f 0100 	mov.w	r1, #0
10006bec:	0299      	lsls	r1, r3, #10
10006bee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
10006bf2:	0290      	lsls	r0, r2, #10
10006bf4:	4602      	mov	r2, r0
10006bf6:	460b      	mov	r3, r1
10006bf8:	4610      	mov	r0, r2
10006bfa:	4619      	mov	r1, r3
10006bfc:	687b      	ldr	r3, [r7, #4]
10006bfe:	461a      	mov	r2, r3
10006c00:	f04f 0300 	mov.w	r3, #0
10006c04:	f7fa f820 	bl	10000c48 <__aeabi_uldivmod>
10006c08:	4602      	mov	r2, r0
10006c0a:	460b      	mov	r3, r1
10006c0c:	4613      	mov	r3, r2
10006c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
10006c10:	4b0b      	ldr	r3, [pc, #44]	; (10006c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
10006c12:	685b      	ldr	r3, [r3, #4]
10006c14:	0c1b      	lsrs	r3, r3, #16
10006c16:	f003 0303 	and.w	r3, r3, #3
10006c1a:	3301      	adds	r3, #1
10006c1c:	005b      	lsls	r3, r3, #1
10006c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
10006c20:	68fa      	ldr	r2, [r7, #12]
10006c22:	683b      	ldr	r3, [r7, #0]
10006c24:	fbb2 f3f3 	udiv	r3, r2, r3
10006c28:	60bb      	str	r3, [r7, #8]
      break;
10006c2a:	e002      	b.n	10006c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
10006c2c:	4b05      	ldr	r3, [pc, #20]	; (10006c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
10006c2e:	60bb      	str	r3, [r7, #8]
      break;
10006c30:	bf00      	nop
    }
  }
  return sysclockfreq;
10006c32:	68bb      	ldr	r3, [r7, #8]
}
10006c34:	4618      	mov	r0, r3
10006c36:	3710      	adds	r7, #16
10006c38:	46bd      	mov	sp, r7
10006c3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
10006c3e:	bf00      	nop
10006c40:	40023800 	.word	0x40023800
10006c44:	00f42400 	.word	0x00f42400
10006c48:	007a1200 	.word	0x007a1200

10006c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
10006c4c:	b480      	push	{r7}
10006c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10006c50:	4b03      	ldr	r3, [pc, #12]	; (10006c60 <HAL_RCC_GetHCLKFreq+0x14>)
10006c52:	681b      	ldr	r3, [r3, #0]
}
10006c54:	4618      	mov	r0, r3
10006c56:	46bd      	mov	sp, r7
10006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
10006c5c:	4770      	bx	lr
10006c5e:	bf00      	nop
10006c60:	20000000 	.word	0x20000000

10006c64 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
10006c64:	b580      	push	{r7, lr}
10006c66:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
10006c68:	4b06      	ldr	r3, [pc, #24]	; (10006c84 <HAL_RCC_NMI_IRQHandler+0x20>)
10006c6a:	68db      	ldr	r3, [r3, #12]
10006c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
10006c70:	2b80      	cmp	r3, #128	; 0x80
10006c72:	d104      	bne.n	10006c7e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
10006c74:	f000 f80a 	bl	10006c8c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
10006c78:	4b03      	ldr	r3, [pc, #12]	; (10006c88 <HAL_RCC_NMI_IRQHandler+0x24>)
10006c7a:	2280      	movs	r2, #128	; 0x80
10006c7c:	701a      	strb	r2, [r3, #0]
  }
}
10006c7e:	bf00      	nop
10006c80:	bd80      	pop	{r7, pc}
10006c82:	bf00      	nop
10006c84:	40023800 	.word	0x40023800
10006c88:	4002380e 	.word	0x4002380e

10006c8c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
10006c8c:	b480      	push	{r7}
10006c8e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
10006c90:	bf00      	nop
10006c92:	46bd      	mov	sp, r7
10006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
10006c98:	4770      	bx	lr
	...

10006c9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
10006c9c:	b580      	push	{r7, lr}
10006c9e:	b086      	sub	sp, #24
10006ca0:	af00      	add	r7, sp, #0
10006ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
10006ca4:	2300      	movs	r3, #0
10006ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
10006ca8:	2300      	movs	r3, #0
10006caa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
10006cac:	687b      	ldr	r3, [r7, #4]
10006cae:	681b      	ldr	r3, [r3, #0]
10006cb0:	f003 0301 	and.w	r3, r3, #1
10006cb4:	2b00      	cmp	r3, #0
10006cb6:	d105      	bne.n	10006cc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
10006cb8:	687b      	ldr	r3, [r7, #4]
10006cba:	681b      	ldr	r3, [r3, #0]
10006cbc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
10006cc0:	2b00      	cmp	r3, #0
10006cc2:	d035      	beq.n	10006d30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
10006cc4:	4b62      	ldr	r3, [pc, #392]	; (10006e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
10006cc6:	2200      	movs	r2, #0
10006cc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
10006cca:	f7fd fc39 	bl	10004540 <HAL_GetTick>
10006cce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
10006cd0:	e008      	b.n	10006ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
10006cd2:	f7fd fc35 	bl	10004540 <HAL_GetTick>
10006cd6:	4602      	mov	r2, r0
10006cd8:	697b      	ldr	r3, [r7, #20]
10006cda:	1ad3      	subs	r3, r2, r3
10006cdc:	2b02      	cmp	r3, #2
10006cde:	d901      	bls.n	10006ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
10006ce0:	2303      	movs	r3, #3
10006ce2:	e0b0      	b.n	10006e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
10006ce4:	4b5b      	ldr	r3, [pc, #364]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006ce6:	681b      	ldr	r3, [r3, #0]
10006ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
10006cec:	2b00      	cmp	r3, #0
10006cee:	d1f0      	bne.n	10006cd2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
10006cf0:	687b      	ldr	r3, [r7, #4]
10006cf2:	685b      	ldr	r3, [r3, #4]
10006cf4:	019a      	lsls	r2, r3, #6
10006cf6:	687b      	ldr	r3, [r7, #4]
10006cf8:	689b      	ldr	r3, [r3, #8]
10006cfa:	071b      	lsls	r3, r3, #28
10006cfc:	4955      	ldr	r1, [pc, #340]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006cfe:	4313      	orrs	r3, r2
10006d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
10006d04:	4b52      	ldr	r3, [pc, #328]	; (10006e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
10006d06:	2201      	movs	r2, #1
10006d08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
10006d0a:	f7fd fc19 	bl	10004540 <HAL_GetTick>
10006d0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
10006d10:	e008      	b.n	10006d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
10006d12:	f7fd fc15 	bl	10004540 <HAL_GetTick>
10006d16:	4602      	mov	r2, r0
10006d18:	697b      	ldr	r3, [r7, #20]
10006d1a:	1ad3      	subs	r3, r2, r3
10006d1c:	2b02      	cmp	r3, #2
10006d1e:	d901      	bls.n	10006d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
10006d20:	2303      	movs	r3, #3
10006d22:	e090      	b.n	10006e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
10006d24:	4b4b      	ldr	r3, [pc, #300]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006d26:	681b      	ldr	r3, [r3, #0]
10006d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
10006d2c:	2b00      	cmp	r3, #0
10006d2e:	d0f0      	beq.n	10006d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
10006d30:	687b      	ldr	r3, [r7, #4]
10006d32:	681b      	ldr	r3, [r3, #0]
10006d34:	f003 0302 	and.w	r3, r3, #2
10006d38:	2b00      	cmp	r3, #0
10006d3a:	f000 8083 	beq.w	10006e44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
10006d3e:	2300      	movs	r3, #0
10006d40:	60fb      	str	r3, [r7, #12]
10006d42:	4b44      	ldr	r3, [pc, #272]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10006d46:	4a43      	ldr	r2, [pc, #268]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
10006d4c:	6413      	str	r3, [r2, #64]	; 0x40
10006d4e:	4b41      	ldr	r3, [pc, #260]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10006d56:	60fb      	str	r3, [r7, #12]
10006d58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
10006d5a:	4b3f      	ldr	r3, [pc, #252]	; (10006e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
10006d5c:	681b      	ldr	r3, [r3, #0]
10006d5e:	4a3e      	ldr	r2, [pc, #248]	; (10006e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
10006d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10006d64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
10006d66:	f7fd fbeb 	bl	10004540 <HAL_GetTick>
10006d6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
10006d6c:	e008      	b.n	10006d80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
10006d6e:	f7fd fbe7 	bl	10004540 <HAL_GetTick>
10006d72:	4602      	mov	r2, r0
10006d74:	697b      	ldr	r3, [r7, #20]
10006d76:	1ad3      	subs	r3, r2, r3
10006d78:	2b02      	cmp	r3, #2
10006d7a:	d901      	bls.n	10006d80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
10006d7c:	2303      	movs	r3, #3
10006d7e:	e062      	b.n	10006e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
10006d80:	4b35      	ldr	r3, [pc, #212]	; (10006e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
10006d82:	681b      	ldr	r3, [r3, #0]
10006d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
10006d88:	2b00      	cmp	r3, #0
10006d8a:	d0f0      	beq.n	10006d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
10006d8c:	4b31      	ldr	r3, [pc, #196]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10006d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
10006d94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
10006d96:	693b      	ldr	r3, [r7, #16]
10006d98:	2b00      	cmp	r3, #0
10006d9a:	d02f      	beq.n	10006dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
10006d9c:	687b      	ldr	r3, [r7, #4]
10006d9e:	68db      	ldr	r3, [r3, #12]
10006da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
10006da4:	693a      	ldr	r2, [r7, #16]
10006da6:	429a      	cmp	r2, r3
10006da8:	d028      	beq.n	10006dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
10006daa:	4b2a      	ldr	r3, [pc, #168]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10006dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10006db2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
10006db4:	4b29      	ldr	r3, [pc, #164]	; (10006e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
10006db6:	2201      	movs	r2, #1
10006db8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
10006dba:	4b28      	ldr	r3, [pc, #160]	; (10006e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
10006dbc:	2200      	movs	r2, #0
10006dbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
10006dc0:	4a24      	ldr	r2, [pc, #144]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006dc2:	693b      	ldr	r3, [r7, #16]
10006dc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
10006dc6:	4b23      	ldr	r3, [pc, #140]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10006dca:	f003 0301 	and.w	r3, r3, #1
10006dce:	2b01      	cmp	r3, #1
10006dd0:	d114      	bne.n	10006dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
10006dd2:	f7fd fbb5 	bl	10004540 <HAL_GetTick>
10006dd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10006dd8:	e00a      	b.n	10006df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
10006dda:	f7fd fbb1 	bl	10004540 <HAL_GetTick>
10006dde:	4602      	mov	r2, r0
10006de0:	697b      	ldr	r3, [r7, #20]
10006de2:	1ad3      	subs	r3, r2, r3
10006de4:	f241 3288 	movw	r2, #5000	; 0x1388
10006de8:	4293      	cmp	r3, r2
10006dea:	d901      	bls.n	10006df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
10006dec:	2303      	movs	r3, #3
10006dee:	e02a      	b.n	10006e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10006df0:	4b18      	ldr	r3, [pc, #96]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10006df4:	f003 0302 	and.w	r3, r3, #2
10006df8:	2b00      	cmp	r3, #0
10006dfa:	d0ee      	beq.n	10006dda <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
10006dfc:	687b      	ldr	r3, [r7, #4]
10006dfe:	68db      	ldr	r3, [r3, #12]
10006e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
10006e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
10006e08:	d10d      	bne.n	10006e26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
10006e0a:	4b12      	ldr	r3, [pc, #72]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006e0c:	689b      	ldr	r3, [r3, #8]
10006e0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
10006e12:	687b      	ldr	r3, [r7, #4]
10006e14:	68db      	ldr	r3, [r3, #12]
10006e16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
10006e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10006e1e:	490d      	ldr	r1, [pc, #52]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006e20:	4313      	orrs	r3, r2
10006e22:	608b      	str	r3, [r1, #8]
10006e24:	e005      	b.n	10006e32 <HAL_RCCEx_PeriphCLKConfig+0x196>
10006e26:	4b0b      	ldr	r3, [pc, #44]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006e28:	689b      	ldr	r3, [r3, #8]
10006e2a:	4a0a      	ldr	r2, [pc, #40]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006e2c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
10006e30:	6093      	str	r3, [r2, #8]
10006e32:	4b08      	ldr	r3, [pc, #32]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006e34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
10006e36:	687b      	ldr	r3, [r7, #4]
10006e38:	68db      	ldr	r3, [r3, #12]
10006e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
10006e3e:	4905      	ldr	r1, [pc, #20]	; (10006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
10006e40:	4313      	orrs	r3, r2
10006e42:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
10006e44:	2300      	movs	r3, #0
}
10006e46:	4618      	mov	r0, r3
10006e48:	3718      	adds	r7, #24
10006e4a:	46bd      	mov	sp, r7
10006e4c:	bd80      	pop	{r7, pc}
10006e4e:	bf00      	nop
10006e50:	42470068 	.word	0x42470068
10006e54:	40023800 	.word	0x40023800
10006e58:	40007000 	.word	0x40007000
10006e5c:	42470e40 	.word	0x42470e40

10006e60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
10006e60:	b580      	push	{r7, lr}
10006e62:	b082      	sub	sp, #8
10006e64:	af00      	add	r7, sp, #0
10006e66:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
10006e68:	687b      	ldr	r3, [r7, #4]
10006e6a:	2b00      	cmp	r3, #0
10006e6c:	d101      	bne.n	10006e72 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
10006e6e:	2301      	movs	r3, #1
10006e70:	e083      	b.n	10006f7a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
10006e72:	687b      	ldr	r3, [r7, #4]
10006e74:	7f5b      	ldrb	r3, [r3, #29]
10006e76:	b2db      	uxtb	r3, r3
10006e78:	2b00      	cmp	r3, #0
10006e7a:	d105      	bne.n	10006e88 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
10006e7c:	687b      	ldr	r3, [r7, #4]
10006e7e:	2200      	movs	r2, #0
10006e80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
10006e82:	6878      	ldr	r0, [r7, #4]
10006e84:	f7fd fa32 	bl	100042ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
10006e88:	687b      	ldr	r3, [r7, #4]
10006e8a:	2202      	movs	r2, #2
10006e8c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
10006e8e:	687b      	ldr	r3, [r7, #4]
10006e90:	681b      	ldr	r3, [r3, #0]
10006e92:	22ca      	movs	r2, #202	; 0xca
10006e94:	625a      	str	r2, [r3, #36]	; 0x24
10006e96:	687b      	ldr	r3, [r7, #4]
10006e98:	681b      	ldr	r3, [r3, #0]
10006e9a:	2253      	movs	r2, #83	; 0x53
10006e9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
10006e9e:	6878      	ldr	r0, [r7, #4]
10006ea0:	f000 f897 	bl	10006fd2 <RTC_EnterInitMode>
10006ea4:	4603      	mov	r3, r0
10006ea6:	2b00      	cmp	r3, #0
10006ea8:	d008      	beq.n	10006ebc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
10006eaa:	687b      	ldr	r3, [r7, #4]
10006eac:	681b      	ldr	r3, [r3, #0]
10006eae:	22ff      	movs	r2, #255	; 0xff
10006eb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
10006eb2:	687b      	ldr	r3, [r7, #4]
10006eb4:	2204      	movs	r2, #4
10006eb6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
10006eb8:	2301      	movs	r3, #1
10006eba:	e05e      	b.n	10006f7a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
10006ebc:	687b      	ldr	r3, [r7, #4]
10006ebe:	681b      	ldr	r3, [r3, #0]
10006ec0:	689b      	ldr	r3, [r3, #8]
10006ec2:	687a      	ldr	r2, [r7, #4]
10006ec4:	6812      	ldr	r2, [r2, #0]
10006ec6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
10006eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
10006ece:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
10006ed0:	687b      	ldr	r3, [r7, #4]
10006ed2:	681b      	ldr	r3, [r3, #0]
10006ed4:	6899      	ldr	r1, [r3, #8]
10006ed6:	687b      	ldr	r3, [r7, #4]
10006ed8:	685a      	ldr	r2, [r3, #4]
10006eda:	687b      	ldr	r3, [r7, #4]
10006edc:	691b      	ldr	r3, [r3, #16]
10006ede:	431a      	orrs	r2, r3
10006ee0:	687b      	ldr	r3, [r7, #4]
10006ee2:	695b      	ldr	r3, [r3, #20]
10006ee4:	431a      	orrs	r2, r3
10006ee6:	687b      	ldr	r3, [r7, #4]
10006ee8:	681b      	ldr	r3, [r3, #0]
10006eea:	430a      	orrs	r2, r1
10006eec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
10006eee:	687b      	ldr	r3, [r7, #4]
10006ef0:	681b      	ldr	r3, [r3, #0]
10006ef2:	687a      	ldr	r2, [r7, #4]
10006ef4:	68d2      	ldr	r2, [r2, #12]
10006ef6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
10006ef8:	687b      	ldr	r3, [r7, #4]
10006efa:	681b      	ldr	r3, [r3, #0]
10006efc:	6919      	ldr	r1, [r3, #16]
10006efe:	687b      	ldr	r3, [r7, #4]
10006f00:	689b      	ldr	r3, [r3, #8]
10006f02:	041a      	lsls	r2, r3, #16
10006f04:	687b      	ldr	r3, [r7, #4]
10006f06:	681b      	ldr	r3, [r3, #0]
10006f08:	430a      	orrs	r2, r1
10006f0a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
10006f0c:	687b      	ldr	r3, [r7, #4]
10006f0e:	681b      	ldr	r3, [r3, #0]
10006f10:	68da      	ldr	r2, [r3, #12]
10006f12:	687b      	ldr	r3, [r7, #4]
10006f14:	681b      	ldr	r3, [r3, #0]
10006f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
10006f1a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
10006f1c:	687b      	ldr	r3, [r7, #4]
10006f1e:	681b      	ldr	r3, [r3, #0]
10006f20:	689b      	ldr	r3, [r3, #8]
10006f22:	f003 0320 	and.w	r3, r3, #32
10006f26:	2b00      	cmp	r3, #0
10006f28:	d10e      	bne.n	10006f48 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
10006f2a:	6878      	ldr	r0, [r7, #4]
10006f2c:	f000 f829 	bl	10006f82 <HAL_RTC_WaitForSynchro>
10006f30:	4603      	mov	r3, r0
10006f32:	2b00      	cmp	r3, #0
10006f34:	d008      	beq.n	10006f48 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
10006f36:	687b      	ldr	r3, [r7, #4]
10006f38:	681b      	ldr	r3, [r3, #0]
10006f3a:	22ff      	movs	r2, #255	; 0xff
10006f3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
10006f3e:	687b      	ldr	r3, [r7, #4]
10006f40:	2204      	movs	r2, #4
10006f42:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
10006f44:	2301      	movs	r3, #1
10006f46:	e018      	b.n	10006f7a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
10006f48:	687b      	ldr	r3, [r7, #4]
10006f4a:	681b      	ldr	r3, [r3, #0]
10006f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10006f4e:	687b      	ldr	r3, [r7, #4]
10006f50:	681b      	ldr	r3, [r3, #0]
10006f52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
10006f56:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
10006f58:	687b      	ldr	r3, [r7, #4]
10006f5a:	681b      	ldr	r3, [r3, #0]
10006f5c:	6c19      	ldr	r1, [r3, #64]	; 0x40
10006f5e:	687b      	ldr	r3, [r7, #4]
10006f60:	699a      	ldr	r2, [r3, #24]
10006f62:	687b      	ldr	r3, [r7, #4]
10006f64:	681b      	ldr	r3, [r3, #0]
10006f66:	430a      	orrs	r2, r1
10006f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
10006f6a:	687b      	ldr	r3, [r7, #4]
10006f6c:	681b      	ldr	r3, [r3, #0]
10006f6e:	22ff      	movs	r2, #255	; 0xff
10006f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
10006f72:	687b      	ldr	r3, [r7, #4]
10006f74:	2201      	movs	r2, #1
10006f76:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
10006f78:	2300      	movs	r3, #0
  }
}
10006f7a:	4618      	mov	r0, r3
10006f7c:	3708      	adds	r7, #8
10006f7e:	46bd      	mov	sp, r7
10006f80:	bd80      	pop	{r7, pc}

10006f82 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
10006f82:	b580      	push	{r7, lr}
10006f84:	b084      	sub	sp, #16
10006f86:	af00      	add	r7, sp, #0
10006f88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
10006f8a:	2300      	movs	r3, #0
10006f8c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
10006f8e:	687b      	ldr	r3, [r7, #4]
10006f90:	681b      	ldr	r3, [r3, #0]
10006f92:	68da      	ldr	r2, [r3, #12]
10006f94:	687b      	ldr	r3, [r7, #4]
10006f96:	681b      	ldr	r3, [r3, #0]
10006f98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
10006f9c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
10006f9e:	f7fd facf 	bl	10004540 <HAL_GetTick>
10006fa2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
10006fa4:	e009      	b.n	10006fba <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
10006fa6:	f7fd facb 	bl	10004540 <HAL_GetTick>
10006faa:	4602      	mov	r2, r0
10006fac:	68fb      	ldr	r3, [r7, #12]
10006fae:	1ad3      	subs	r3, r2, r3
10006fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10006fb4:	d901      	bls.n	10006fba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
10006fb6:	2303      	movs	r3, #3
10006fb8:	e007      	b.n	10006fca <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
10006fba:	687b      	ldr	r3, [r7, #4]
10006fbc:	681b      	ldr	r3, [r3, #0]
10006fbe:	68db      	ldr	r3, [r3, #12]
10006fc0:	f003 0320 	and.w	r3, r3, #32
10006fc4:	2b00      	cmp	r3, #0
10006fc6:	d0ee      	beq.n	10006fa6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
10006fc8:	2300      	movs	r3, #0
}
10006fca:	4618      	mov	r0, r3
10006fcc:	3710      	adds	r7, #16
10006fce:	46bd      	mov	sp, r7
10006fd0:	bd80      	pop	{r7, pc}

10006fd2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
10006fd2:	b580      	push	{r7, lr}
10006fd4:	b084      	sub	sp, #16
10006fd6:	af00      	add	r7, sp, #0
10006fd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
10006fda:	2300      	movs	r3, #0
10006fdc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
10006fde:	687b      	ldr	r3, [r7, #4]
10006fe0:	681b      	ldr	r3, [r3, #0]
10006fe2:	68db      	ldr	r3, [r3, #12]
10006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
10006fe8:	2b00      	cmp	r3, #0
10006fea:	d119      	bne.n	10007020 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
10006fec:	687b      	ldr	r3, [r7, #4]
10006fee:	681b      	ldr	r3, [r3, #0]
10006ff0:	f04f 32ff 	mov.w	r2, #4294967295
10006ff4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
10006ff6:	f7fd faa3 	bl	10004540 <HAL_GetTick>
10006ffa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
10006ffc:	e009      	b.n	10007012 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
10006ffe:	f7fd fa9f 	bl	10004540 <HAL_GetTick>
10007002:	4602      	mov	r2, r0
10007004:	68fb      	ldr	r3, [r7, #12]
10007006:	1ad3      	subs	r3, r2, r3
10007008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000700c:	d901      	bls.n	10007012 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
1000700e:	2303      	movs	r3, #3
10007010:	e007      	b.n	10007022 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
10007012:	687b      	ldr	r3, [r7, #4]
10007014:	681b      	ldr	r3, [r3, #0]
10007016:	68db      	ldr	r3, [r3, #12]
10007018:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000701c:	2b00      	cmp	r3, #0
1000701e:	d0ee      	beq.n	10006ffe <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
10007020:	2300      	movs	r3, #0
}
10007022:	4618      	mov	r0, r3
10007024:	3710      	adds	r7, #16
10007026:	46bd      	mov	sp, r7
10007028:	bd80      	pop	{r7, pc}

1000702a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
1000702a:	b084      	sub	sp, #16
1000702c:	b580      	push	{r7, lr}
1000702e:	b084      	sub	sp, #16
10007030:	af00      	add	r7, sp, #0
10007032:	6078      	str	r0, [r7, #4]
10007034:	f107 001c 	add.w	r0, r7, #28
10007038:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
1000703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000703e:	2b01      	cmp	r3, #1
10007040:	d122      	bne.n	10007088 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
10007042:	687b      	ldr	r3, [r7, #4]
10007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10007046:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
1000704a:	687b      	ldr	r3, [r7, #4]
1000704c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
1000704e:	687b      	ldr	r3, [r7, #4]
10007050:	68db      	ldr	r3, [r3, #12]
10007052:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
10007056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1000705a:	687a      	ldr	r2, [r7, #4]
1000705c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
1000705e:	687b      	ldr	r3, [r7, #4]
10007060:	68db      	ldr	r3, [r3, #12]
10007062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
10007066:	687b      	ldr	r3, [r7, #4]
10007068:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
1000706a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000706c:	2b01      	cmp	r3, #1
1000706e:	d105      	bne.n	1000707c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
10007070:	687b      	ldr	r3, [r7, #4]
10007072:	68db      	ldr	r3, [r3, #12]
10007074:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
10007078:	687b      	ldr	r3, [r7, #4]
1000707a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
1000707c:	6878      	ldr	r0, [r7, #4]
1000707e:	f001 fac5 	bl	1000860c <USB_CoreReset>
10007082:	4603      	mov	r3, r0
10007084:	73fb      	strb	r3, [r7, #15]
10007086:	e01a      	b.n	100070be <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
10007088:	687b      	ldr	r3, [r7, #4]
1000708a:	68db      	ldr	r3, [r3, #12]
1000708c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
10007090:	687b      	ldr	r3, [r7, #4]
10007092:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
10007094:	6878      	ldr	r0, [r7, #4]
10007096:	f001 fab9 	bl	1000860c <USB_CoreReset>
1000709a:	4603      	mov	r3, r0
1000709c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
1000709e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
100070a0:	2b00      	cmp	r3, #0
100070a2:	d106      	bne.n	100070b2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
100070a4:	687b      	ldr	r3, [r7, #4]
100070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100070a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
100070ac:	687b      	ldr	r3, [r7, #4]
100070ae:	639a      	str	r2, [r3, #56]	; 0x38
100070b0:	e005      	b.n	100070be <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
100070b2:	687b      	ldr	r3, [r7, #4]
100070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100070b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
100070ba:	687b      	ldr	r3, [r7, #4]
100070bc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
100070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
100070c0:	2b01      	cmp	r3, #1
100070c2:	d10b      	bne.n	100070dc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
100070c4:	687b      	ldr	r3, [r7, #4]
100070c6:	689b      	ldr	r3, [r3, #8]
100070c8:	f043 0206 	orr.w	r2, r3, #6
100070cc:	687b      	ldr	r3, [r7, #4]
100070ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
100070d0:	687b      	ldr	r3, [r7, #4]
100070d2:	689b      	ldr	r3, [r3, #8]
100070d4:	f043 0220 	orr.w	r2, r3, #32
100070d8:	687b      	ldr	r3, [r7, #4]
100070da:	609a      	str	r2, [r3, #8]
  }

  return ret;
100070dc:	7bfb      	ldrb	r3, [r7, #15]
}
100070de:	4618      	mov	r0, r3
100070e0:	3710      	adds	r7, #16
100070e2:	46bd      	mov	sp, r7
100070e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
100070e8:	b004      	add	sp, #16
100070ea:	4770      	bx	lr

100070ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
100070ec:	b480      	push	{r7}
100070ee:	b087      	sub	sp, #28
100070f0:	af00      	add	r7, sp, #0
100070f2:	60f8      	str	r0, [r7, #12]
100070f4:	60b9      	str	r1, [r7, #8]
100070f6:	4613      	mov	r3, r2
100070f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
100070fa:	79fb      	ldrb	r3, [r7, #7]
100070fc:	2b02      	cmp	r3, #2
100070fe:	d165      	bne.n	100071cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
10007100:	68bb      	ldr	r3, [r7, #8]
10007102:	4a41      	ldr	r2, [pc, #260]	; (10007208 <USB_SetTurnaroundTime+0x11c>)
10007104:	4293      	cmp	r3, r2
10007106:	d906      	bls.n	10007116 <USB_SetTurnaroundTime+0x2a>
10007108:	68bb      	ldr	r3, [r7, #8]
1000710a:	4a40      	ldr	r2, [pc, #256]	; (1000720c <USB_SetTurnaroundTime+0x120>)
1000710c:	4293      	cmp	r3, r2
1000710e:	d202      	bcs.n	10007116 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
10007110:	230f      	movs	r3, #15
10007112:	617b      	str	r3, [r7, #20]
10007114:	e062      	b.n	100071dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
10007116:	68bb      	ldr	r3, [r7, #8]
10007118:	4a3c      	ldr	r2, [pc, #240]	; (1000720c <USB_SetTurnaroundTime+0x120>)
1000711a:	4293      	cmp	r3, r2
1000711c:	d306      	bcc.n	1000712c <USB_SetTurnaroundTime+0x40>
1000711e:	68bb      	ldr	r3, [r7, #8]
10007120:	4a3b      	ldr	r2, [pc, #236]	; (10007210 <USB_SetTurnaroundTime+0x124>)
10007122:	4293      	cmp	r3, r2
10007124:	d202      	bcs.n	1000712c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
10007126:	230e      	movs	r3, #14
10007128:	617b      	str	r3, [r7, #20]
1000712a:	e057      	b.n	100071dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
1000712c:	68bb      	ldr	r3, [r7, #8]
1000712e:	4a38      	ldr	r2, [pc, #224]	; (10007210 <USB_SetTurnaroundTime+0x124>)
10007130:	4293      	cmp	r3, r2
10007132:	d306      	bcc.n	10007142 <USB_SetTurnaroundTime+0x56>
10007134:	68bb      	ldr	r3, [r7, #8]
10007136:	4a37      	ldr	r2, [pc, #220]	; (10007214 <USB_SetTurnaroundTime+0x128>)
10007138:	4293      	cmp	r3, r2
1000713a:	d202      	bcs.n	10007142 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
1000713c:	230d      	movs	r3, #13
1000713e:	617b      	str	r3, [r7, #20]
10007140:	e04c      	b.n	100071dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
10007142:	68bb      	ldr	r3, [r7, #8]
10007144:	4a33      	ldr	r2, [pc, #204]	; (10007214 <USB_SetTurnaroundTime+0x128>)
10007146:	4293      	cmp	r3, r2
10007148:	d306      	bcc.n	10007158 <USB_SetTurnaroundTime+0x6c>
1000714a:	68bb      	ldr	r3, [r7, #8]
1000714c:	4a32      	ldr	r2, [pc, #200]	; (10007218 <USB_SetTurnaroundTime+0x12c>)
1000714e:	4293      	cmp	r3, r2
10007150:	d802      	bhi.n	10007158 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
10007152:	230c      	movs	r3, #12
10007154:	617b      	str	r3, [r7, #20]
10007156:	e041      	b.n	100071dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
10007158:	68bb      	ldr	r3, [r7, #8]
1000715a:	4a2f      	ldr	r2, [pc, #188]	; (10007218 <USB_SetTurnaroundTime+0x12c>)
1000715c:	4293      	cmp	r3, r2
1000715e:	d906      	bls.n	1000716e <USB_SetTurnaroundTime+0x82>
10007160:	68bb      	ldr	r3, [r7, #8]
10007162:	4a2e      	ldr	r2, [pc, #184]	; (1000721c <USB_SetTurnaroundTime+0x130>)
10007164:	4293      	cmp	r3, r2
10007166:	d802      	bhi.n	1000716e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
10007168:	230b      	movs	r3, #11
1000716a:	617b      	str	r3, [r7, #20]
1000716c:	e036      	b.n	100071dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
1000716e:	68bb      	ldr	r3, [r7, #8]
10007170:	4a2a      	ldr	r2, [pc, #168]	; (1000721c <USB_SetTurnaroundTime+0x130>)
10007172:	4293      	cmp	r3, r2
10007174:	d906      	bls.n	10007184 <USB_SetTurnaroundTime+0x98>
10007176:	68bb      	ldr	r3, [r7, #8]
10007178:	4a29      	ldr	r2, [pc, #164]	; (10007220 <USB_SetTurnaroundTime+0x134>)
1000717a:	4293      	cmp	r3, r2
1000717c:	d802      	bhi.n	10007184 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
1000717e:	230a      	movs	r3, #10
10007180:	617b      	str	r3, [r7, #20]
10007182:	e02b      	b.n	100071dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
10007184:	68bb      	ldr	r3, [r7, #8]
10007186:	4a26      	ldr	r2, [pc, #152]	; (10007220 <USB_SetTurnaroundTime+0x134>)
10007188:	4293      	cmp	r3, r2
1000718a:	d906      	bls.n	1000719a <USB_SetTurnaroundTime+0xae>
1000718c:	68bb      	ldr	r3, [r7, #8]
1000718e:	4a25      	ldr	r2, [pc, #148]	; (10007224 <USB_SetTurnaroundTime+0x138>)
10007190:	4293      	cmp	r3, r2
10007192:	d202      	bcs.n	1000719a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
10007194:	2309      	movs	r3, #9
10007196:	617b      	str	r3, [r7, #20]
10007198:	e020      	b.n	100071dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
1000719a:	68bb      	ldr	r3, [r7, #8]
1000719c:	4a21      	ldr	r2, [pc, #132]	; (10007224 <USB_SetTurnaroundTime+0x138>)
1000719e:	4293      	cmp	r3, r2
100071a0:	d306      	bcc.n	100071b0 <USB_SetTurnaroundTime+0xc4>
100071a2:	68bb      	ldr	r3, [r7, #8]
100071a4:	4a20      	ldr	r2, [pc, #128]	; (10007228 <USB_SetTurnaroundTime+0x13c>)
100071a6:	4293      	cmp	r3, r2
100071a8:	d802      	bhi.n	100071b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
100071aa:	2308      	movs	r3, #8
100071ac:	617b      	str	r3, [r7, #20]
100071ae:	e015      	b.n	100071dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
100071b0:	68bb      	ldr	r3, [r7, #8]
100071b2:	4a1d      	ldr	r2, [pc, #116]	; (10007228 <USB_SetTurnaroundTime+0x13c>)
100071b4:	4293      	cmp	r3, r2
100071b6:	d906      	bls.n	100071c6 <USB_SetTurnaroundTime+0xda>
100071b8:	68bb      	ldr	r3, [r7, #8]
100071ba:	4a1c      	ldr	r2, [pc, #112]	; (1000722c <USB_SetTurnaroundTime+0x140>)
100071bc:	4293      	cmp	r3, r2
100071be:	d202      	bcs.n	100071c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
100071c0:	2307      	movs	r3, #7
100071c2:	617b      	str	r3, [r7, #20]
100071c4:	e00a      	b.n	100071dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
100071c6:	2306      	movs	r3, #6
100071c8:	617b      	str	r3, [r7, #20]
100071ca:	e007      	b.n	100071dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
100071cc:	79fb      	ldrb	r3, [r7, #7]
100071ce:	2b00      	cmp	r3, #0
100071d0:	d102      	bne.n	100071d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
100071d2:	2309      	movs	r3, #9
100071d4:	617b      	str	r3, [r7, #20]
100071d6:	e001      	b.n	100071dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
100071d8:	2309      	movs	r3, #9
100071da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
100071dc:	68fb      	ldr	r3, [r7, #12]
100071de:	68db      	ldr	r3, [r3, #12]
100071e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
100071e4:	68fb      	ldr	r3, [r7, #12]
100071e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
100071e8:	68fb      	ldr	r3, [r7, #12]
100071ea:	68da      	ldr	r2, [r3, #12]
100071ec:	697b      	ldr	r3, [r7, #20]
100071ee:	029b      	lsls	r3, r3, #10
100071f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
100071f4:	431a      	orrs	r2, r3
100071f6:	68fb      	ldr	r3, [r7, #12]
100071f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
100071fa:	2300      	movs	r3, #0
}
100071fc:	4618      	mov	r0, r3
100071fe:	371c      	adds	r7, #28
10007200:	46bd      	mov	sp, r7
10007202:	f85d 7b04 	ldr.w	r7, [sp], #4
10007206:	4770      	bx	lr
10007208:	00d8acbf 	.word	0x00d8acbf
1000720c:	00e4e1c0 	.word	0x00e4e1c0
10007210:	00f42400 	.word	0x00f42400
10007214:	01067380 	.word	0x01067380
10007218:	011a499f 	.word	0x011a499f
1000721c:	01312cff 	.word	0x01312cff
10007220:	014ca43f 	.word	0x014ca43f
10007224:	016e3600 	.word	0x016e3600
10007228:	01a6ab1f 	.word	0x01a6ab1f
1000722c:	01e84800 	.word	0x01e84800

10007230 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
10007230:	b480      	push	{r7}
10007232:	b083      	sub	sp, #12
10007234:	af00      	add	r7, sp, #0
10007236:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
10007238:	687b      	ldr	r3, [r7, #4]
1000723a:	689b      	ldr	r3, [r3, #8]
1000723c:	f043 0201 	orr.w	r2, r3, #1
10007240:	687b      	ldr	r3, [r7, #4]
10007242:	609a      	str	r2, [r3, #8]
  return HAL_OK;
10007244:	2300      	movs	r3, #0
}
10007246:	4618      	mov	r0, r3
10007248:	370c      	adds	r7, #12
1000724a:	46bd      	mov	sp, r7
1000724c:	f85d 7b04 	ldr.w	r7, [sp], #4
10007250:	4770      	bx	lr

10007252 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
10007252:	b480      	push	{r7}
10007254:	b083      	sub	sp, #12
10007256:	af00      	add	r7, sp, #0
10007258:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
1000725a:	687b      	ldr	r3, [r7, #4]
1000725c:	689b      	ldr	r3, [r3, #8]
1000725e:	f023 0201 	bic.w	r2, r3, #1
10007262:	687b      	ldr	r3, [r7, #4]
10007264:	609a      	str	r2, [r3, #8]
  return HAL_OK;
10007266:	2300      	movs	r3, #0
}
10007268:	4618      	mov	r0, r3
1000726a:	370c      	adds	r7, #12
1000726c:	46bd      	mov	sp, r7
1000726e:	f85d 7b04 	ldr.w	r7, [sp], #4
10007272:	4770      	bx	lr

10007274 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
10007274:	b580      	push	{r7, lr}
10007276:	b082      	sub	sp, #8
10007278:	af00      	add	r7, sp, #0
1000727a:	6078      	str	r0, [r7, #4]
1000727c:	460b      	mov	r3, r1
1000727e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
10007280:	687b      	ldr	r3, [r7, #4]
10007282:	68db      	ldr	r3, [r3, #12]
10007284:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
10007288:	687b      	ldr	r3, [r7, #4]
1000728a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
1000728c:	78fb      	ldrb	r3, [r7, #3]
1000728e:	2b01      	cmp	r3, #1
10007290:	d106      	bne.n	100072a0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
10007292:	687b      	ldr	r3, [r7, #4]
10007294:	68db      	ldr	r3, [r3, #12]
10007296:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
1000729a:	687b      	ldr	r3, [r7, #4]
1000729c:	60da      	str	r2, [r3, #12]
1000729e:	e00b      	b.n	100072b8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
100072a0:	78fb      	ldrb	r3, [r7, #3]
100072a2:	2b00      	cmp	r3, #0
100072a4:	d106      	bne.n	100072b4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
100072a6:	687b      	ldr	r3, [r7, #4]
100072a8:	68db      	ldr	r3, [r3, #12]
100072aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
100072ae:	687b      	ldr	r3, [r7, #4]
100072b0:	60da      	str	r2, [r3, #12]
100072b2:	e001      	b.n	100072b8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
100072b4:	2301      	movs	r3, #1
100072b6:	e003      	b.n	100072c0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
100072b8:	2032      	movs	r0, #50	; 0x32
100072ba:	f7fd f94d 	bl	10004558 <HAL_Delay>

  return HAL_OK;
100072be:	2300      	movs	r3, #0
}
100072c0:	4618      	mov	r0, r3
100072c2:	3708      	adds	r7, #8
100072c4:	46bd      	mov	sp, r7
100072c6:	bd80      	pop	{r7, pc}

100072c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
100072c8:	b084      	sub	sp, #16
100072ca:	b580      	push	{r7, lr}
100072cc:	b086      	sub	sp, #24
100072ce:	af00      	add	r7, sp, #0
100072d0:	6078      	str	r0, [r7, #4]
100072d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
100072d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
100072da:	2300      	movs	r3, #0
100072dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
100072de:	687b      	ldr	r3, [r7, #4]
100072e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
100072e2:	2300      	movs	r3, #0
100072e4:	613b      	str	r3, [r7, #16]
100072e6:	e009      	b.n	100072fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
100072e8:	687a      	ldr	r2, [r7, #4]
100072ea:	693b      	ldr	r3, [r7, #16]
100072ec:	3340      	adds	r3, #64	; 0x40
100072ee:	009b      	lsls	r3, r3, #2
100072f0:	4413      	add	r3, r2
100072f2:	2200      	movs	r2, #0
100072f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
100072f6:	693b      	ldr	r3, [r7, #16]
100072f8:	3301      	adds	r3, #1
100072fa:	613b      	str	r3, [r7, #16]
100072fc:	693b      	ldr	r3, [r7, #16]
100072fe:	2b0e      	cmp	r3, #14
10007300:	d9f2      	bls.n	100072e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
10007302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10007304:	2b00      	cmp	r3, #0
10007306:	d11c      	bne.n	10007342 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
10007308:	68fb      	ldr	r3, [r7, #12]
1000730a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1000730e:	685b      	ldr	r3, [r3, #4]
10007310:	68fa      	ldr	r2, [r7, #12]
10007312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
10007316:	f043 0302 	orr.w	r3, r3, #2
1000731a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
1000731c:	687b      	ldr	r3, [r7, #4]
1000731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10007320:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
10007324:	687b      	ldr	r3, [r7, #4]
10007326:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
10007328:	687b      	ldr	r3, [r7, #4]
1000732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000732c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
10007330:	687b      	ldr	r3, [r7, #4]
10007332:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
10007334:	687b      	ldr	r3, [r7, #4]
10007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10007338:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
1000733c:	687b      	ldr	r3, [r7, #4]
1000733e:	639a      	str	r2, [r3, #56]	; 0x38
10007340:	e00b      	b.n	1000735a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
10007342:	687b      	ldr	r3, [r7, #4]
10007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10007346:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
1000734a:	687b      	ldr	r3, [r7, #4]
1000734c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
1000734e:	687b      	ldr	r3, [r7, #4]
10007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10007352:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
10007356:	687b      	ldr	r3, [r7, #4]
10007358:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
1000735a:	68fb      	ldr	r3, [r7, #12]
1000735c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
10007360:	461a      	mov	r2, r3
10007362:	2300      	movs	r3, #0
10007364:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
10007366:	68fb      	ldr	r3, [r7, #12]
10007368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1000736c:	4619      	mov	r1, r3
1000736e:	68fb      	ldr	r3, [r7, #12]
10007370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10007374:	461a      	mov	r2, r3
10007376:	680b      	ldr	r3, [r1, #0]
10007378:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
1000737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000737c:	2b01      	cmp	r3, #1
1000737e:	d10c      	bne.n	1000739a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
10007380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10007382:	2b00      	cmp	r3, #0
10007384:	d104      	bne.n	10007390 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
10007386:	2100      	movs	r1, #0
10007388:	6878      	ldr	r0, [r7, #4]
1000738a:	f000 f949 	bl	10007620 <USB_SetDevSpeed>
1000738e:	e008      	b.n	100073a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
10007390:	2101      	movs	r1, #1
10007392:	6878      	ldr	r0, [r7, #4]
10007394:	f000 f944 	bl	10007620 <USB_SetDevSpeed>
10007398:	e003      	b.n	100073a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
1000739a:	2103      	movs	r1, #3
1000739c:	6878      	ldr	r0, [r7, #4]
1000739e:	f000 f93f 	bl	10007620 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
100073a2:	2110      	movs	r1, #16
100073a4:	6878      	ldr	r0, [r7, #4]
100073a6:	f000 f8f3 	bl	10007590 <USB_FlushTxFifo>
100073aa:	4603      	mov	r3, r0
100073ac:	2b00      	cmp	r3, #0
100073ae:	d001      	beq.n	100073b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
100073b0:	2301      	movs	r3, #1
100073b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
100073b4:	6878      	ldr	r0, [r7, #4]
100073b6:	f000 f911 	bl	100075dc <USB_FlushRxFifo>
100073ba:	4603      	mov	r3, r0
100073bc:	2b00      	cmp	r3, #0
100073be:	d001      	beq.n	100073c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
100073c0:	2301      	movs	r3, #1
100073c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
100073c4:	68fb      	ldr	r3, [r7, #12]
100073c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100073ca:	461a      	mov	r2, r3
100073cc:	2300      	movs	r3, #0
100073ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
100073d0:	68fb      	ldr	r3, [r7, #12]
100073d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100073d6:	461a      	mov	r2, r3
100073d8:	2300      	movs	r3, #0
100073da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
100073dc:	68fb      	ldr	r3, [r7, #12]
100073de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100073e2:	461a      	mov	r2, r3
100073e4:	2300      	movs	r3, #0
100073e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
100073e8:	2300      	movs	r3, #0
100073ea:	613b      	str	r3, [r7, #16]
100073ec:	e043      	b.n	10007476 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
100073ee:	693b      	ldr	r3, [r7, #16]
100073f0:	015a      	lsls	r2, r3, #5
100073f2:	68fb      	ldr	r3, [r7, #12]
100073f4:	4413      	add	r3, r2
100073f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100073fa:	681b      	ldr	r3, [r3, #0]
100073fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10007400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10007404:	d118      	bne.n	10007438 <USB_DevInit+0x170>
    {
      if (i == 0U)
10007406:	693b      	ldr	r3, [r7, #16]
10007408:	2b00      	cmp	r3, #0
1000740a:	d10a      	bne.n	10007422 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
1000740c:	693b      	ldr	r3, [r7, #16]
1000740e:	015a      	lsls	r2, r3, #5
10007410:	68fb      	ldr	r3, [r7, #12]
10007412:	4413      	add	r3, r2
10007414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007418:	461a      	mov	r2, r3
1000741a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
1000741e:	6013      	str	r3, [r2, #0]
10007420:	e013      	b.n	1000744a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
10007422:	693b      	ldr	r3, [r7, #16]
10007424:	015a      	lsls	r2, r3, #5
10007426:	68fb      	ldr	r3, [r7, #12]
10007428:	4413      	add	r3, r2
1000742a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
1000742e:	461a      	mov	r2, r3
10007430:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
10007434:	6013      	str	r3, [r2, #0]
10007436:	e008      	b.n	1000744a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
10007438:	693b      	ldr	r3, [r7, #16]
1000743a:	015a      	lsls	r2, r3, #5
1000743c:	68fb      	ldr	r3, [r7, #12]
1000743e:	4413      	add	r3, r2
10007440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007444:	461a      	mov	r2, r3
10007446:	2300      	movs	r3, #0
10007448:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
1000744a:	693b      	ldr	r3, [r7, #16]
1000744c:	015a      	lsls	r2, r3, #5
1000744e:	68fb      	ldr	r3, [r7, #12]
10007450:	4413      	add	r3, r2
10007452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007456:	461a      	mov	r2, r3
10007458:	2300      	movs	r3, #0
1000745a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
1000745c:	693b      	ldr	r3, [r7, #16]
1000745e:	015a      	lsls	r2, r3, #5
10007460:	68fb      	ldr	r3, [r7, #12]
10007462:	4413      	add	r3, r2
10007464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007468:	461a      	mov	r2, r3
1000746a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
1000746e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
10007470:	693b      	ldr	r3, [r7, #16]
10007472:	3301      	adds	r3, #1
10007474:	613b      	str	r3, [r7, #16]
10007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10007478:	693a      	ldr	r2, [r7, #16]
1000747a:	429a      	cmp	r2, r3
1000747c:	d3b7      	bcc.n	100073ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
1000747e:	2300      	movs	r3, #0
10007480:	613b      	str	r3, [r7, #16]
10007482:	e043      	b.n	1000750c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
10007484:	693b      	ldr	r3, [r7, #16]
10007486:	015a      	lsls	r2, r3, #5
10007488:	68fb      	ldr	r3, [r7, #12]
1000748a:	4413      	add	r3, r2
1000748c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007490:	681b      	ldr	r3, [r3, #0]
10007492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10007496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000749a:	d118      	bne.n	100074ce <USB_DevInit+0x206>
    {
      if (i == 0U)
1000749c:	693b      	ldr	r3, [r7, #16]
1000749e:	2b00      	cmp	r3, #0
100074a0:	d10a      	bne.n	100074b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
100074a2:	693b      	ldr	r3, [r7, #16]
100074a4:	015a      	lsls	r2, r3, #5
100074a6:	68fb      	ldr	r3, [r7, #12]
100074a8:	4413      	add	r3, r2
100074aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100074ae:	461a      	mov	r2, r3
100074b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
100074b4:	6013      	str	r3, [r2, #0]
100074b6:	e013      	b.n	100074e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
100074b8:	693b      	ldr	r3, [r7, #16]
100074ba:	015a      	lsls	r2, r3, #5
100074bc:	68fb      	ldr	r3, [r7, #12]
100074be:	4413      	add	r3, r2
100074c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100074c4:	461a      	mov	r2, r3
100074c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
100074ca:	6013      	str	r3, [r2, #0]
100074cc:	e008      	b.n	100074e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
100074ce:	693b      	ldr	r3, [r7, #16]
100074d0:	015a      	lsls	r2, r3, #5
100074d2:	68fb      	ldr	r3, [r7, #12]
100074d4:	4413      	add	r3, r2
100074d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100074da:	461a      	mov	r2, r3
100074dc:	2300      	movs	r3, #0
100074de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
100074e0:	693b      	ldr	r3, [r7, #16]
100074e2:	015a      	lsls	r2, r3, #5
100074e4:	68fb      	ldr	r3, [r7, #12]
100074e6:	4413      	add	r3, r2
100074e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100074ec:	461a      	mov	r2, r3
100074ee:	2300      	movs	r3, #0
100074f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
100074f2:	693b      	ldr	r3, [r7, #16]
100074f4:	015a      	lsls	r2, r3, #5
100074f6:	68fb      	ldr	r3, [r7, #12]
100074f8:	4413      	add	r3, r2
100074fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100074fe:	461a      	mov	r2, r3
10007500:	f64f 337f 	movw	r3, #64383	; 0xfb7f
10007504:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
10007506:	693b      	ldr	r3, [r7, #16]
10007508:	3301      	adds	r3, #1
1000750a:	613b      	str	r3, [r7, #16]
1000750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000750e:	693a      	ldr	r2, [r7, #16]
10007510:	429a      	cmp	r2, r3
10007512:	d3b7      	bcc.n	10007484 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
10007514:	68fb      	ldr	r3, [r7, #12]
10007516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1000751a:	691b      	ldr	r3, [r3, #16]
1000751c:	68fa      	ldr	r2, [r7, #12]
1000751e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
10007522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
10007526:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
10007528:	687b      	ldr	r3, [r7, #4]
1000752a:	2200      	movs	r2, #0
1000752c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
1000752e:	687b      	ldr	r3, [r7, #4]
10007530:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
10007534:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
10007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007538:	2b00      	cmp	r3, #0
1000753a:	d105      	bne.n	10007548 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
1000753c:	687b      	ldr	r3, [r7, #4]
1000753e:	699b      	ldr	r3, [r3, #24]
10007540:	f043 0210 	orr.w	r2, r3, #16
10007544:	687b      	ldr	r3, [r7, #4]
10007546:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
10007548:	687b      	ldr	r3, [r7, #4]
1000754a:	699a      	ldr	r2, [r3, #24]
1000754c:	4b0f      	ldr	r3, [pc, #60]	; (1000758c <USB_DevInit+0x2c4>)
1000754e:	4313      	orrs	r3, r2
10007550:	687a      	ldr	r2, [r7, #4]
10007552:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
10007554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10007556:	2b00      	cmp	r3, #0
10007558:	d005      	beq.n	10007566 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
1000755a:	687b      	ldr	r3, [r7, #4]
1000755c:	699b      	ldr	r3, [r3, #24]
1000755e:	f043 0208 	orr.w	r2, r3, #8
10007562:	687b      	ldr	r3, [r7, #4]
10007564:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
10007566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10007568:	2b01      	cmp	r3, #1
1000756a:	d107      	bne.n	1000757c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
1000756c:	687b      	ldr	r3, [r7, #4]
1000756e:	699b      	ldr	r3, [r3, #24]
10007570:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
10007574:	f043 0304 	orr.w	r3, r3, #4
10007578:	687a      	ldr	r2, [r7, #4]
1000757a:	6193      	str	r3, [r2, #24]
  }

  return ret;
1000757c:	7dfb      	ldrb	r3, [r7, #23]
}
1000757e:	4618      	mov	r0, r3
10007580:	3718      	adds	r7, #24
10007582:	46bd      	mov	sp, r7
10007584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
10007588:	b004      	add	sp, #16
1000758a:	4770      	bx	lr
1000758c:	803c3800 	.word	0x803c3800

10007590 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
10007590:	b480      	push	{r7}
10007592:	b085      	sub	sp, #20
10007594:	af00      	add	r7, sp, #0
10007596:	6078      	str	r0, [r7, #4]
10007598:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
1000759a:	2300      	movs	r3, #0
1000759c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
1000759e:	683b      	ldr	r3, [r7, #0]
100075a0:	019b      	lsls	r3, r3, #6
100075a2:	f043 0220 	orr.w	r2, r3, #32
100075a6:	687b      	ldr	r3, [r7, #4]
100075a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
100075aa:	68fb      	ldr	r3, [r7, #12]
100075ac:	3301      	adds	r3, #1
100075ae:	60fb      	str	r3, [r7, #12]
100075b0:	68fb      	ldr	r3, [r7, #12]
100075b2:	4a09      	ldr	r2, [pc, #36]	; (100075d8 <USB_FlushTxFifo+0x48>)
100075b4:	4293      	cmp	r3, r2
100075b6:	d901      	bls.n	100075bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
100075b8:	2303      	movs	r3, #3
100075ba:	e006      	b.n	100075ca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
100075bc:	687b      	ldr	r3, [r7, #4]
100075be:	691b      	ldr	r3, [r3, #16]
100075c0:	f003 0320 	and.w	r3, r3, #32
100075c4:	2b20      	cmp	r3, #32
100075c6:	d0f0      	beq.n	100075aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
100075c8:	2300      	movs	r3, #0
}
100075ca:	4618      	mov	r0, r3
100075cc:	3714      	adds	r7, #20
100075ce:	46bd      	mov	sp, r7
100075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
100075d4:	4770      	bx	lr
100075d6:	bf00      	nop
100075d8:	00030d40 	.word	0x00030d40

100075dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
100075dc:	b480      	push	{r7}
100075de:	b085      	sub	sp, #20
100075e0:	af00      	add	r7, sp, #0
100075e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
100075e4:	2300      	movs	r3, #0
100075e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
100075e8:	687b      	ldr	r3, [r7, #4]
100075ea:	2210      	movs	r2, #16
100075ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
100075ee:	68fb      	ldr	r3, [r7, #12]
100075f0:	3301      	adds	r3, #1
100075f2:	60fb      	str	r3, [r7, #12]
100075f4:	68fb      	ldr	r3, [r7, #12]
100075f6:	4a09      	ldr	r2, [pc, #36]	; (1000761c <USB_FlushRxFifo+0x40>)
100075f8:	4293      	cmp	r3, r2
100075fa:	d901      	bls.n	10007600 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
100075fc:	2303      	movs	r3, #3
100075fe:	e006      	b.n	1000760e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
10007600:	687b      	ldr	r3, [r7, #4]
10007602:	691b      	ldr	r3, [r3, #16]
10007604:	f003 0310 	and.w	r3, r3, #16
10007608:	2b10      	cmp	r3, #16
1000760a:	d0f0      	beq.n	100075ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
1000760c:	2300      	movs	r3, #0
}
1000760e:	4618      	mov	r0, r3
10007610:	3714      	adds	r7, #20
10007612:	46bd      	mov	sp, r7
10007614:	f85d 7b04 	ldr.w	r7, [sp], #4
10007618:	4770      	bx	lr
1000761a:	bf00      	nop
1000761c:	00030d40 	.word	0x00030d40

10007620 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
10007620:	b480      	push	{r7}
10007622:	b085      	sub	sp, #20
10007624:	af00      	add	r7, sp, #0
10007626:	6078      	str	r0, [r7, #4]
10007628:	460b      	mov	r3, r1
1000762a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
1000762c:	687b      	ldr	r3, [r7, #4]
1000762e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
10007630:	68fb      	ldr	r3, [r7, #12]
10007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10007636:	681a      	ldr	r2, [r3, #0]
10007638:	78fb      	ldrb	r3, [r7, #3]
1000763a:	68f9      	ldr	r1, [r7, #12]
1000763c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
10007640:	4313      	orrs	r3, r2
10007642:	600b      	str	r3, [r1, #0]
  return HAL_OK;
10007644:	2300      	movs	r3, #0
}
10007646:	4618      	mov	r0, r3
10007648:	3714      	adds	r7, #20
1000764a:	46bd      	mov	sp, r7
1000764c:	f85d 7b04 	ldr.w	r7, [sp], #4
10007650:	4770      	bx	lr

10007652 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
10007652:	b480      	push	{r7}
10007654:	b087      	sub	sp, #28
10007656:	af00      	add	r7, sp, #0
10007658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
1000765a:	687b      	ldr	r3, [r7, #4]
1000765c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
1000765e:	693b      	ldr	r3, [r7, #16]
10007660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10007664:	689b      	ldr	r3, [r3, #8]
10007666:	f003 0306 	and.w	r3, r3, #6
1000766a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
1000766c:	68fb      	ldr	r3, [r7, #12]
1000766e:	2b00      	cmp	r3, #0
10007670:	d102      	bne.n	10007678 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
10007672:	2300      	movs	r3, #0
10007674:	75fb      	strb	r3, [r7, #23]
10007676:	e00a      	b.n	1000768e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
10007678:	68fb      	ldr	r3, [r7, #12]
1000767a:	2b02      	cmp	r3, #2
1000767c:	d002      	beq.n	10007684 <USB_GetDevSpeed+0x32>
1000767e:	68fb      	ldr	r3, [r7, #12]
10007680:	2b06      	cmp	r3, #6
10007682:	d102      	bne.n	1000768a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
10007684:	2302      	movs	r3, #2
10007686:	75fb      	strb	r3, [r7, #23]
10007688:	e001      	b.n	1000768e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
1000768a:	230f      	movs	r3, #15
1000768c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
1000768e:	7dfb      	ldrb	r3, [r7, #23]
}
10007690:	4618      	mov	r0, r3
10007692:	371c      	adds	r7, #28
10007694:	46bd      	mov	sp, r7
10007696:	f85d 7b04 	ldr.w	r7, [sp], #4
1000769a:	4770      	bx	lr

1000769c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
1000769c:	b480      	push	{r7}
1000769e:	b085      	sub	sp, #20
100076a0:	af00      	add	r7, sp, #0
100076a2:	6078      	str	r0, [r7, #4]
100076a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
100076a6:	687b      	ldr	r3, [r7, #4]
100076a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
100076aa:	683b      	ldr	r3, [r7, #0]
100076ac:	781b      	ldrb	r3, [r3, #0]
100076ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
100076b0:	683b      	ldr	r3, [r7, #0]
100076b2:	785b      	ldrb	r3, [r3, #1]
100076b4:	2b01      	cmp	r3, #1
100076b6:	d13a      	bne.n	1000772e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
100076b8:	68fb      	ldr	r3, [r7, #12]
100076ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100076be:	69da      	ldr	r2, [r3, #28]
100076c0:	683b      	ldr	r3, [r7, #0]
100076c2:	781b      	ldrb	r3, [r3, #0]
100076c4:	f003 030f 	and.w	r3, r3, #15
100076c8:	2101      	movs	r1, #1
100076ca:	fa01 f303 	lsl.w	r3, r1, r3
100076ce:	b29b      	uxth	r3, r3
100076d0:	68f9      	ldr	r1, [r7, #12]
100076d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
100076d6:	4313      	orrs	r3, r2
100076d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
100076da:	68bb      	ldr	r3, [r7, #8]
100076dc:	015a      	lsls	r2, r3, #5
100076de:	68fb      	ldr	r3, [r7, #12]
100076e0:	4413      	add	r3, r2
100076e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100076e6:	681b      	ldr	r3, [r3, #0]
100076e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
100076ec:	2b00      	cmp	r3, #0
100076ee:	d155      	bne.n	1000779c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
100076f0:	68bb      	ldr	r3, [r7, #8]
100076f2:	015a      	lsls	r2, r3, #5
100076f4:	68fb      	ldr	r3, [r7, #12]
100076f6:	4413      	add	r3, r2
100076f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100076fc:	681a      	ldr	r2, [r3, #0]
100076fe:	683b      	ldr	r3, [r7, #0]
10007700:	689b      	ldr	r3, [r3, #8]
10007702:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
10007706:	683b      	ldr	r3, [r7, #0]
10007708:	78db      	ldrb	r3, [r3, #3]
1000770a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
1000770c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
1000770e:	68bb      	ldr	r3, [r7, #8]
10007710:	059b      	lsls	r3, r3, #22
10007712:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
10007714:	4313      	orrs	r3, r2
10007716:	68ba      	ldr	r2, [r7, #8]
10007718:	0151      	lsls	r1, r2, #5
1000771a:	68fa      	ldr	r2, [r7, #12]
1000771c:	440a      	add	r2, r1
1000771e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
10007726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
1000772a:	6013      	str	r3, [r2, #0]
1000772c:	e036      	b.n	1000779c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
1000772e:	68fb      	ldr	r3, [r7, #12]
10007730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10007734:	69da      	ldr	r2, [r3, #28]
10007736:	683b      	ldr	r3, [r7, #0]
10007738:	781b      	ldrb	r3, [r3, #0]
1000773a:	f003 030f 	and.w	r3, r3, #15
1000773e:	2101      	movs	r1, #1
10007740:	fa01 f303 	lsl.w	r3, r1, r3
10007744:	041b      	lsls	r3, r3, #16
10007746:	68f9      	ldr	r1, [r7, #12]
10007748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1000774c:	4313      	orrs	r3, r2
1000774e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
10007750:	68bb      	ldr	r3, [r7, #8]
10007752:	015a      	lsls	r2, r3, #5
10007754:	68fb      	ldr	r3, [r7, #12]
10007756:	4413      	add	r3, r2
10007758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
1000775c:	681b      	ldr	r3, [r3, #0]
1000775e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
10007762:	2b00      	cmp	r3, #0
10007764:	d11a      	bne.n	1000779c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
10007766:	68bb      	ldr	r3, [r7, #8]
10007768:	015a      	lsls	r2, r3, #5
1000776a:	68fb      	ldr	r3, [r7, #12]
1000776c:	4413      	add	r3, r2
1000776e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007772:	681a      	ldr	r2, [r3, #0]
10007774:	683b      	ldr	r3, [r7, #0]
10007776:	689b      	ldr	r3, [r3, #8]
10007778:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
1000777c:	683b      	ldr	r3, [r7, #0]
1000777e:	78db      	ldrb	r3, [r3, #3]
10007780:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
10007782:	430b      	orrs	r3, r1
10007784:	4313      	orrs	r3, r2
10007786:	68ba      	ldr	r2, [r7, #8]
10007788:	0151      	lsls	r1, r2, #5
1000778a:	68fa      	ldr	r2, [r7, #12]
1000778c:	440a      	add	r2, r1
1000778e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10007792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
10007796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
1000779a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
1000779c:	2300      	movs	r3, #0
}
1000779e:	4618      	mov	r0, r3
100077a0:	3714      	adds	r7, #20
100077a2:	46bd      	mov	sp, r7
100077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
100077a8:	4770      	bx	lr
	...

100077ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
100077ac:	b480      	push	{r7}
100077ae:	b085      	sub	sp, #20
100077b0:	af00      	add	r7, sp, #0
100077b2:	6078      	str	r0, [r7, #4]
100077b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
100077b6:	687b      	ldr	r3, [r7, #4]
100077b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
100077ba:	683b      	ldr	r3, [r7, #0]
100077bc:	781b      	ldrb	r3, [r3, #0]
100077be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
100077c0:	683b      	ldr	r3, [r7, #0]
100077c2:	785b      	ldrb	r3, [r3, #1]
100077c4:	2b01      	cmp	r3, #1
100077c6:	d161      	bne.n	1000788c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
100077c8:	68bb      	ldr	r3, [r7, #8]
100077ca:	015a      	lsls	r2, r3, #5
100077cc:	68fb      	ldr	r3, [r7, #12]
100077ce:	4413      	add	r3, r2
100077d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100077d4:	681b      	ldr	r3, [r3, #0]
100077d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100077da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100077de:	d11f      	bne.n	10007820 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
100077e0:	68bb      	ldr	r3, [r7, #8]
100077e2:	015a      	lsls	r2, r3, #5
100077e4:	68fb      	ldr	r3, [r7, #12]
100077e6:	4413      	add	r3, r2
100077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100077ec:	681b      	ldr	r3, [r3, #0]
100077ee:	68ba      	ldr	r2, [r7, #8]
100077f0:	0151      	lsls	r1, r2, #5
100077f2:	68fa      	ldr	r2, [r7, #12]
100077f4:	440a      	add	r2, r1
100077f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
100077fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
100077fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
10007800:	68bb      	ldr	r3, [r7, #8]
10007802:	015a      	lsls	r2, r3, #5
10007804:	68fb      	ldr	r3, [r7, #12]
10007806:	4413      	add	r3, r2
10007808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
1000780c:	681b      	ldr	r3, [r3, #0]
1000780e:	68ba      	ldr	r2, [r7, #8]
10007810:	0151      	lsls	r1, r2, #5
10007812:	68fa      	ldr	r2, [r7, #12]
10007814:	440a      	add	r2, r1
10007816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
1000781a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
1000781e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
10007820:	68fb      	ldr	r3, [r7, #12]
10007822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10007826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10007828:	683b      	ldr	r3, [r7, #0]
1000782a:	781b      	ldrb	r3, [r3, #0]
1000782c:	f003 030f 	and.w	r3, r3, #15
10007830:	2101      	movs	r1, #1
10007832:	fa01 f303 	lsl.w	r3, r1, r3
10007836:	b29b      	uxth	r3, r3
10007838:	43db      	mvns	r3, r3
1000783a:	68f9      	ldr	r1, [r7, #12]
1000783c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
10007840:	4013      	ands	r3, r2
10007842:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
10007844:	68fb      	ldr	r3, [r7, #12]
10007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1000784a:	69da      	ldr	r2, [r3, #28]
1000784c:	683b      	ldr	r3, [r7, #0]
1000784e:	781b      	ldrb	r3, [r3, #0]
10007850:	f003 030f 	and.w	r3, r3, #15
10007854:	2101      	movs	r1, #1
10007856:	fa01 f303 	lsl.w	r3, r1, r3
1000785a:	b29b      	uxth	r3, r3
1000785c:	43db      	mvns	r3, r3
1000785e:	68f9      	ldr	r1, [r7, #12]
10007860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
10007864:	4013      	ands	r3, r2
10007866:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
10007868:	68bb      	ldr	r3, [r7, #8]
1000786a:	015a      	lsls	r2, r3, #5
1000786c:	68fb      	ldr	r3, [r7, #12]
1000786e:	4413      	add	r3, r2
10007870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007874:	681a      	ldr	r2, [r3, #0]
10007876:	68bb      	ldr	r3, [r7, #8]
10007878:	0159      	lsls	r1, r3, #5
1000787a:	68fb      	ldr	r3, [r7, #12]
1000787c:	440b      	add	r3, r1
1000787e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007882:	4619      	mov	r1, r3
10007884:	4b35      	ldr	r3, [pc, #212]	; (1000795c <USB_DeactivateEndpoint+0x1b0>)
10007886:	4013      	ands	r3, r2
10007888:	600b      	str	r3, [r1, #0]
1000788a:	e060      	b.n	1000794e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
1000788c:	68bb      	ldr	r3, [r7, #8]
1000788e:	015a      	lsls	r2, r3, #5
10007890:	68fb      	ldr	r3, [r7, #12]
10007892:	4413      	add	r3, r2
10007894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007898:	681b      	ldr	r3, [r3, #0]
1000789a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000789e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100078a2:	d11f      	bne.n	100078e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
100078a4:	68bb      	ldr	r3, [r7, #8]
100078a6:	015a      	lsls	r2, r3, #5
100078a8:	68fb      	ldr	r3, [r7, #12]
100078aa:	4413      	add	r3, r2
100078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100078b0:	681b      	ldr	r3, [r3, #0]
100078b2:	68ba      	ldr	r2, [r7, #8]
100078b4:	0151      	lsls	r1, r2, #5
100078b6:	68fa      	ldr	r2, [r7, #12]
100078b8:	440a      	add	r2, r1
100078ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
100078be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
100078c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
100078c4:	68bb      	ldr	r3, [r7, #8]
100078c6:	015a      	lsls	r2, r3, #5
100078c8:	68fb      	ldr	r3, [r7, #12]
100078ca:	4413      	add	r3, r2
100078cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100078d0:	681b      	ldr	r3, [r3, #0]
100078d2:	68ba      	ldr	r2, [r7, #8]
100078d4:	0151      	lsls	r1, r2, #5
100078d6:	68fa      	ldr	r2, [r7, #12]
100078d8:	440a      	add	r2, r1
100078da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
100078de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
100078e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
100078e4:	68fb      	ldr	r3, [r7, #12]
100078e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100078ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
100078ec:	683b      	ldr	r3, [r7, #0]
100078ee:	781b      	ldrb	r3, [r3, #0]
100078f0:	f003 030f 	and.w	r3, r3, #15
100078f4:	2101      	movs	r1, #1
100078f6:	fa01 f303 	lsl.w	r3, r1, r3
100078fa:	041b      	lsls	r3, r3, #16
100078fc:	43db      	mvns	r3, r3
100078fe:	68f9      	ldr	r1, [r7, #12]
10007900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
10007904:	4013      	ands	r3, r2
10007906:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
10007908:	68fb      	ldr	r3, [r7, #12]
1000790a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1000790e:	69da      	ldr	r2, [r3, #28]
10007910:	683b      	ldr	r3, [r7, #0]
10007912:	781b      	ldrb	r3, [r3, #0]
10007914:	f003 030f 	and.w	r3, r3, #15
10007918:	2101      	movs	r1, #1
1000791a:	fa01 f303 	lsl.w	r3, r1, r3
1000791e:	041b      	lsls	r3, r3, #16
10007920:	43db      	mvns	r3, r3
10007922:	68f9      	ldr	r1, [r7, #12]
10007924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
10007928:	4013      	ands	r3, r2
1000792a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
1000792c:	68bb      	ldr	r3, [r7, #8]
1000792e:	015a      	lsls	r2, r3, #5
10007930:	68fb      	ldr	r3, [r7, #12]
10007932:	4413      	add	r3, r2
10007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007938:	681a      	ldr	r2, [r3, #0]
1000793a:	68bb      	ldr	r3, [r7, #8]
1000793c:	0159      	lsls	r1, r3, #5
1000793e:	68fb      	ldr	r3, [r7, #12]
10007940:	440b      	add	r3, r1
10007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007946:	4619      	mov	r1, r3
10007948:	4b05      	ldr	r3, [pc, #20]	; (10007960 <USB_DeactivateEndpoint+0x1b4>)
1000794a:	4013      	ands	r3, r2
1000794c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
1000794e:	2300      	movs	r3, #0
}
10007950:	4618      	mov	r0, r3
10007952:	3714      	adds	r7, #20
10007954:	46bd      	mov	sp, r7
10007956:	f85d 7b04 	ldr.w	r7, [sp], #4
1000795a:	4770      	bx	lr
1000795c:	ec337800 	.word	0xec337800
10007960:	eff37800 	.word	0xeff37800

10007964 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
10007964:	b580      	push	{r7, lr}
10007966:	b08a      	sub	sp, #40	; 0x28
10007968:	af02      	add	r7, sp, #8
1000796a:	60f8      	str	r0, [r7, #12]
1000796c:	60b9      	str	r1, [r7, #8]
1000796e:	4613      	mov	r3, r2
10007970:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
10007972:	68fb      	ldr	r3, [r7, #12]
10007974:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
10007976:	68bb      	ldr	r3, [r7, #8]
10007978:	781b      	ldrb	r3, [r3, #0]
1000797a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
1000797c:	68bb      	ldr	r3, [r7, #8]
1000797e:	785b      	ldrb	r3, [r3, #1]
10007980:	2b01      	cmp	r3, #1
10007982:	f040 815c 	bne.w	10007c3e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
10007986:	68bb      	ldr	r3, [r7, #8]
10007988:	695b      	ldr	r3, [r3, #20]
1000798a:	2b00      	cmp	r3, #0
1000798c:	d132      	bne.n	100079f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
1000798e:	69bb      	ldr	r3, [r7, #24]
10007990:	015a      	lsls	r2, r3, #5
10007992:	69fb      	ldr	r3, [r7, #28]
10007994:	4413      	add	r3, r2
10007996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
1000799a:	691b      	ldr	r3, [r3, #16]
1000799c:	69ba      	ldr	r2, [r7, #24]
1000799e:	0151      	lsls	r1, r2, #5
100079a0:	69fa      	ldr	r2, [r7, #28]
100079a2:	440a      	add	r2, r1
100079a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
100079a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
100079ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
100079b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
100079b2:	69bb      	ldr	r3, [r7, #24]
100079b4:	015a      	lsls	r2, r3, #5
100079b6:	69fb      	ldr	r3, [r7, #28]
100079b8:	4413      	add	r3, r2
100079ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100079be:	691b      	ldr	r3, [r3, #16]
100079c0:	69ba      	ldr	r2, [r7, #24]
100079c2:	0151      	lsls	r1, r2, #5
100079c4:	69fa      	ldr	r2, [r7, #28]
100079c6:	440a      	add	r2, r1
100079c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
100079cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
100079d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
100079d2:	69bb      	ldr	r3, [r7, #24]
100079d4:	015a      	lsls	r2, r3, #5
100079d6:	69fb      	ldr	r3, [r7, #28]
100079d8:	4413      	add	r3, r2
100079da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100079de:	691b      	ldr	r3, [r3, #16]
100079e0:	69ba      	ldr	r2, [r7, #24]
100079e2:	0151      	lsls	r1, r2, #5
100079e4:	69fa      	ldr	r2, [r7, #28]
100079e6:	440a      	add	r2, r1
100079e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
100079ec:	0cdb      	lsrs	r3, r3, #19
100079ee:	04db      	lsls	r3, r3, #19
100079f0:	6113      	str	r3, [r2, #16]
100079f2:	e074      	b.n	10007ade <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
100079f4:	69bb      	ldr	r3, [r7, #24]
100079f6:	015a      	lsls	r2, r3, #5
100079f8:	69fb      	ldr	r3, [r7, #28]
100079fa:	4413      	add	r3, r2
100079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007a00:	691b      	ldr	r3, [r3, #16]
10007a02:	69ba      	ldr	r2, [r7, #24]
10007a04:	0151      	lsls	r1, r2, #5
10007a06:	69fa      	ldr	r2, [r7, #28]
10007a08:	440a      	add	r2, r1
10007a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007a0e:	0cdb      	lsrs	r3, r3, #19
10007a10:	04db      	lsls	r3, r3, #19
10007a12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
10007a14:	69bb      	ldr	r3, [r7, #24]
10007a16:	015a      	lsls	r2, r3, #5
10007a18:	69fb      	ldr	r3, [r7, #28]
10007a1a:	4413      	add	r3, r2
10007a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007a20:	691b      	ldr	r3, [r3, #16]
10007a22:	69ba      	ldr	r2, [r7, #24]
10007a24:	0151      	lsls	r1, r2, #5
10007a26:	69fa      	ldr	r2, [r7, #28]
10007a28:	440a      	add	r2, r1
10007a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007a2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
10007a32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
10007a36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
10007a38:	69bb      	ldr	r3, [r7, #24]
10007a3a:	015a      	lsls	r2, r3, #5
10007a3c:	69fb      	ldr	r3, [r7, #28]
10007a3e:	4413      	add	r3, r2
10007a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007a44:	691a      	ldr	r2, [r3, #16]
10007a46:	68bb      	ldr	r3, [r7, #8]
10007a48:	6959      	ldr	r1, [r3, #20]
10007a4a:	68bb      	ldr	r3, [r7, #8]
10007a4c:	689b      	ldr	r3, [r3, #8]
10007a4e:	440b      	add	r3, r1
10007a50:	1e59      	subs	r1, r3, #1
10007a52:	68bb      	ldr	r3, [r7, #8]
10007a54:	689b      	ldr	r3, [r3, #8]
10007a56:	fbb1 f3f3 	udiv	r3, r1, r3
10007a5a:	04d9      	lsls	r1, r3, #19
10007a5c:	4b9d      	ldr	r3, [pc, #628]	; (10007cd4 <USB_EPStartXfer+0x370>)
10007a5e:	400b      	ands	r3, r1
10007a60:	69b9      	ldr	r1, [r7, #24]
10007a62:	0148      	lsls	r0, r1, #5
10007a64:	69f9      	ldr	r1, [r7, #28]
10007a66:	4401      	add	r1, r0
10007a68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
10007a6c:	4313      	orrs	r3, r2
10007a6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
10007a70:	69bb      	ldr	r3, [r7, #24]
10007a72:	015a      	lsls	r2, r3, #5
10007a74:	69fb      	ldr	r3, [r7, #28]
10007a76:	4413      	add	r3, r2
10007a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007a7c:	691a      	ldr	r2, [r3, #16]
10007a7e:	68bb      	ldr	r3, [r7, #8]
10007a80:	695b      	ldr	r3, [r3, #20]
10007a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
10007a86:	69b9      	ldr	r1, [r7, #24]
10007a88:	0148      	lsls	r0, r1, #5
10007a8a:	69f9      	ldr	r1, [r7, #28]
10007a8c:	4401      	add	r1, r0
10007a8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
10007a92:	4313      	orrs	r3, r2
10007a94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
10007a96:	68bb      	ldr	r3, [r7, #8]
10007a98:	78db      	ldrb	r3, [r3, #3]
10007a9a:	2b01      	cmp	r3, #1
10007a9c:	d11f      	bne.n	10007ade <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
10007a9e:	69bb      	ldr	r3, [r7, #24]
10007aa0:	015a      	lsls	r2, r3, #5
10007aa2:	69fb      	ldr	r3, [r7, #28]
10007aa4:	4413      	add	r3, r2
10007aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007aaa:	691b      	ldr	r3, [r3, #16]
10007aac:	69ba      	ldr	r2, [r7, #24]
10007aae:	0151      	lsls	r1, r2, #5
10007ab0:	69fa      	ldr	r2, [r7, #28]
10007ab2:	440a      	add	r2, r1
10007ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007ab8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
10007abc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
10007abe:	69bb      	ldr	r3, [r7, #24]
10007ac0:	015a      	lsls	r2, r3, #5
10007ac2:	69fb      	ldr	r3, [r7, #28]
10007ac4:	4413      	add	r3, r2
10007ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007aca:	691b      	ldr	r3, [r3, #16]
10007acc:	69ba      	ldr	r2, [r7, #24]
10007ace:	0151      	lsls	r1, r2, #5
10007ad0:	69fa      	ldr	r2, [r7, #28]
10007ad2:	440a      	add	r2, r1
10007ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007ad8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
10007adc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
10007ade:	79fb      	ldrb	r3, [r7, #7]
10007ae0:	2b01      	cmp	r3, #1
10007ae2:	d14b      	bne.n	10007b7c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
10007ae4:	68bb      	ldr	r3, [r7, #8]
10007ae6:	691b      	ldr	r3, [r3, #16]
10007ae8:	2b00      	cmp	r3, #0
10007aea:	d009      	beq.n	10007b00 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
10007aec:	69bb      	ldr	r3, [r7, #24]
10007aee:	015a      	lsls	r2, r3, #5
10007af0:	69fb      	ldr	r3, [r7, #28]
10007af2:	4413      	add	r3, r2
10007af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007af8:	461a      	mov	r2, r3
10007afa:	68bb      	ldr	r3, [r7, #8]
10007afc:	691b      	ldr	r3, [r3, #16]
10007afe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
10007b00:	68bb      	ldr	r3, [r7, #8]
10007b02:	78db      	ldrb	r3, [r3, #3]
10007b04:	2b01      	cmp	r3, #1
10007b06:	d128      	bne.n	10007b5a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
10007b08:	69fb      	ldr	r3, [r7, #28]
10007b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10007b0e:	689b      	ldr	r3, [r3, #8]
10007b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
10007b14:	2b00      	cmp	r3, #0
10007b16:	d110      	bne.n	10007b3a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
10007b18:	69bb      	ldr	r3, [r7, #24]
10007b1a:	015a      	lsls	r2, r3, #5
10007b1c:	69fb      	ldr	r3, [r7, #28]
10007b1e:	4413      	add	r3, r2
10007b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007b24:	681b      	ldr	r3, [r3, #0]
10007b26:	69ba      	ldr	r2, [r7, #24]
10007b28:	0151      	lsls	r1, r2, #5
10007b2a:	69fa      	ldr	r2, [r7, #28]
10007b2c:	440a      	add	r2, r1
10007b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007b32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
10007b36:	6013      	str	r3, [r2, #0]
10007b38:	e00f      	b.n	10007b5a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
10007b3a:	69bb      	ldr	r3, [r7, #24]
10007b3c:	015a      	lsls	r2, r3, #5
10007b3e:	69fb      	ldr	r3, [r7, #28]
10007b40:	4413      	add	r3, r2
10007b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007b46:	681b      	ldr	r3, [r3, #0]
10007b48:	69ba      	ldr	r2, [r7, #24]
10007b4a:	0151      	lsls	r1, r2, #5
10007b4c:	69fa      	ldr	r2, [r7, #28]
10007b4e:	440a      	add	r2, r1
10007b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
10007b58:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
10007b5a:	69bb      	ldr	r3, [r7, #24]
10007b5c:	015a      	lsls	r2, r3, #5
10007b5e:	69fb      	ldr	r3, [r7, #28]
10007b60:	4413      	add	r3, r2
10007b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007b66:	681b      	ldr	r3, [r3, #0]
10007b68:	69ba      	ldr	r2, [r7, #24]
10007b6a:	0151      	lsls	r1, r2, #5
10007b6c:	69fa      	ldr	r2, [r7, #28]
10007b6e:	440a      	add	r2, r1
10007b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007b74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
10007b78:	6013      	str	r3, [r2, #0]
10007b7a:	e12f      	b.n	10007ddc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
10007b7c:	69bb      	ldr	r3, [r7, #24]
10007b7e:	015a      	lsls	r2, r3, #5
10007b80:	69fb      	ldr	r3, [r7, #28]
10007b82:	4413      	add	r3, r2
10007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007b88:	681b      	ldr	r3, [r3, #0]
10007b8a:	69ba      	ldr	r2, [r7, #24]
10007b8c:	0151      	lsls	r1, r2, #5
10007b8e:	69fa      	ldr	r2, [r7, #28]
10007b90:	440a      	add	r2, r1
10007b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007b96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
10007b9a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
10007b9c:	68bb      	ldr	r3, [r7, #8]
10007b9e:	78db      	ldrb	r3, [r3, #3]
10007ba0:	2b01      	cmp	r3, #1
10007ba2:	d015      	beq.n	10007bd0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
10007ba4:	68bb      	ldr	r3, [r7, #8]
10007ba6:	695b      	ldr	r3, [r3, #20]
10007ba8:	2b00      	cmp	r3, #0
10007baa:	f000 8117 	beq.w	10007ddc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
10007bae:	69fb      	ldr	r3, [r7, #28]
10007bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10007bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10007bb6:	68bb      	ldr	r3, [r7, #8]
10007bb8:	781b      	ldrb	r3, [r3, #0]
10007bba:	f003 030f 	and.w	r3, r3, #15
10007bbe:	2101      	movs	r1, #1
10007bc0:	fa01 f303 	lsl.w	r3, r1, r3
10007bc4:	69f9      	ldr	r1, [r7, #28]
10007bc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
10007bca:	4313      	orrs	r3, r2
10007bcc:	634b      	str	r3, [r1, #52]	; 0x34
10007bce:	e105      	b.n	10007ddc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
10007bd0:	69fb      	ldr	r3, [r7, #28]
10007bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10007bd6:	689b      	ldr	r3, [r3, #8]
10007bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
10007bdc:	2b00      	cmp	r3, #0
10007bde:	d110      	bne.n	10007c02 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
10007be0:	69bb      	ldr	r3, [r7, #24]
10007be2:	015a      	lsls	r2, r3, #5
10007be4:	69fb      	ldr	r3, [r7, #28]
10007be6:	4413      	add	r3, r2
10007be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007bec:	681b      	ldr	r3, [r3, #0]
10007bee:	69ba      	ldr	r2, [r7, #24]
10007bf0:	0151      	lsls	r1, r2, #5
10007bf2:	69fa      	ldr	r2, [r7, #28]
10007bf4:	440a      	add	r2, r1
10007bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007bfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
10007bfe:	6013      	str	r3, [r2, #0]
10007c00:	e00f      	b.n	10007c22 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
10007c02:	69bb      	ldr	r3, [r7, #24]
10007c04:	015a      	lsls	r2, r3, #5
10007c06:	69fb      	ldr	r3, [r7, #28]
10007c08:	4413      	add	r3, r2
10007c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007c0e:	681b      	ldr	r3, [r3, #0]
10007c10:	69ba      	ldr	r2, [r7, #24]
10007c12:	0151      	lsls	r1, r2, #5
10007c14:	69fa      	ldr	r2, [r7, #28]
10007c16:	440a      	add	r2, r1
10007c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
10007c20:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
10007c22:	68bb      	ldr	r3, [r7, #8]
10007c24:	68d9      	ldr	r1, [r3, #12]
10007c26:	68bb      	ldr	r3, [r7, #8]
10007c28:	781a      	ldrb	r2, [r3, #0]
10007c2a:	68bb      	ldr	r3, [r7, #8]
10007c2c:	695b      	ldr	r3, [r3, #20]
10007c2e:	b298      	uxth	r0, r3
10007c30:	79fb      	ldrb	r3, [r7, #7]
10007c32:	9300      	str	r3, [sp, #0]
10007c34:	4603      	mov	r3, r0
10007c36:	68f8      	ldr	r0, [r7, #12]
10007c38:	f000 fa2b 	bl	10008092 <USB_WritePacket>
10007c3c:	e0ce      	b.n	10007ddc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
10007c3e:	69bb      	ldr	r3, [r7, #24]
10007c40:	015a      	lsls	r2, r3, #5
10007c42:	69fb      	ldr	r3, [r7, #28]
10007c44:	4413      	add	r3, r2
10007c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007c4a:	691b      	ldr	r3, [r3, #16]
10007c4c:	69ba      	ldr	r2, [r7, #24]
10007c4e:	0151      	lsls	r1, r2, #5
10007c50:	69fa      	ldr	r2, [r7, #28]
10007c52:	440a      	add	r2, r1
10007c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10007c58:	0cdb      	lsrs	r3, r3, #19
10007c5a:	04db      	lsls	r3, r3, #19
10007c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
10007c5e:	69bb      	ldr	r3, [r7, #24]
10007c60:	015a      	lsls	r2, r3, #5
10007c62:	69fb      	ldr	r3, [r7, #28]
10007c64:	4413      	add	r3, r2
10007c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007c6a:	691b      	ldr	r3, [r3, #16]
10007c6c:	69ba      	ldr	r2, [r7, #24]
10007c6e:	0151      	lsls	r1, r2, #5
10007c70:	69fa      	ldr	r2, [r7, #28]
10007c72:	440a      	add	r2, r1
10007c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10007c78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
10007c7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
10007c80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
10007c82:	68bb      	ldr	r3, [r7, #8]
10007c84:	695b      	ldr	r3, [r3, #20]
10007c86:	2b00      	cmp	r3, #0
10007c88:	d126      	bne.n	10007cd8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
10007c8a:	69bb      	ldr	r3, [r7, #24]
10007c8c:	015a      	lsls	r2, r3, #5
10007c8e:	69fb      	ldr	r3, [r7, #28]
10007c90:	4413      	add	r3, r2
10007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007c96:	691a      	ldr	r2, [r3, #16]
10007c98:	68bb      	ldr	r3, [r7, #8]
10007c9a:	689b      	ldr	r3, [r3, #8]
10007c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
10007ca0:	69b9      	ldr	r1, [r7, #24]
10007ca2:	0148      	lsls	r0, r1, #5
10007ca4:	69f9      	ldr	r1, [r7, #28]
10007ca6:	4401      	add	r1, r0
10007ca8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
10007cac:	4313      	orrs	r3, r2
10007cae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
10007cb0:	69bb      	ldr	r3, [r7, #24]
10007cb2:	015a      	lsls	r2, r3, #5
10007cb4:	69fb      	ldr	r3, [r7, #28]
10007cb6:	4413      	add	r3, r2
10007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007cbc:	691b      	ldr	r3, [r3, #16]
10007cbe:	69ba      	ldr	r2, [r7, #24]
10007cc0:	0151      	lsls	r1, r2, #5
10007cc2:	69fa      	ldr	r2, [r7, #28]
10007cc4:	440a      	add	r2, r1
10007cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10007cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
10007cce:	6113      	str	r3, [r2, #16]
10007cd0:	e036      	b.n	10007d40 <USB_EPStartXfer+0x3dc>
10007cd2:	bf00      	nop
10007cd4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
10007cd8:	68bb      	ldr	r3, [r7, #8]
10007cda:	695a      	ldr	r2, [r3, #20]
10007cdc:	68bb      	ldr	r3, [r7, #8]
10007cde:	689b      	ldr	r3, [r3, #8]
10007ce0:	4413      	add	r3, r2
10007ce2:	1e5a      	subs	r2, r3, #1
10007ce4:	68bb      	ldr	r3, [r7, #8]
10007ce6:	689b      	ldr	r3, [r3, #8]
10007ce8:	fbb2 f3f3 	udiv	r3, r2, r3
10007cec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
10007cee:	69bb      	ldr	r3, [r7, #24]
10007cf0:	015a      	lsls	r2, r3, #5
10007cf2:	69fb      	ldr	r3, [r7, #28]
10007cf4:	4413      	add	r3, r2
10007cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007cfa:	691a      	ldr	r2, [r3, #16]
10007cfc:	8afb      	ldrh	r3, [r7, #22]
10007cfe:	04d9      	lsls	r1, r3, #19
10007d00:	4b39      	ldr	r3, [pc, #228]	; (10007de8 <USB_EPStartXfer+0x484>)
10007d02:	400b      	ands	r3, r1
10007d04:	69b9      	ldr	r1, [r7, #24]
10007d06:	0148      	lsls	r0, r1, #5
10007d08:	69f9      	ldr	r1, [r7, #28]
10007d0a:	4401      	add	r1, r0
10007d0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
10007d10:	4313      	orrs	r3, r2
10007d12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
10007d14:	69bb      	ldr	r3, [r7, #24]
10007d16:	015a      	lsls	r2, r3, #5
10007d18:	69fb      	ldr	r3, [r7, #28]
10007d1a:	4413      	add	r3, r2
10007d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007d20:	691a      	ldr	r2, [r3, #16]
10007d22:	68bb      	ldr	r3, [r7, #8]
10007d24:	689b      	ldr	r3, [r3, #8]
10007d26:	8af9      	ldrh	r1, [r7, #22]
10007d28:	fb01 f303 	mul.w	r3, r1, r3
10007d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
10007d30:	69b9      	ldr	r1, [r7, #24]
10007d32:	0148      	lsls	r0, r1, #5
10007d34:	69f9      	ldr	r1, [r7, #28]
10007d36:	4401      	add	r1, r0
10007d38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
10007d3c:	4313      	orrs	r3, r2
10007d3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
10007d40:	79fb      	ldrb	r3, [r7, #7]
10007d42:	2b01      	cmp	r3, #1
10007d44:	d10d      	bne.n	10007d62 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
10007d46:	68bb      	ldr	r3, [r7, #8]
10007d48:	68db      	ldr	r3, [r3, #12]
10007d4a:	2b00      	cmp	r3, #0
10007d4c:	d009      	beq.n	10007d62 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
10007d4e:	68bb      	ldr	r3, [r7, #8]
10007d50:	68d9      	ldr	r1, [r3, #12]
10007d52:	69bb      	ldr	r3, [r7, #24]
10007d54:	015a      	lsls	r2, r3, #5
10007d56:	69fb      	ldr	r3, [r7, #28]
10007d58:	4413      	add	r3, r2
10007d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007d5e:	460a      	mov	r2, r1
10007d60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
10007d62:	68bb      	ldr	r3, [r7, #8]
10007d64:	78db      	ldrb	r3, [r3, #3]
10007d66:	2b01      	cmp	r3, #1
10007d68:	d128      	bne.n	10007dbc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
10007d6a:	69fb      	ldr	r3, [r7, #28]
10007d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10007d70:	689b      	ldr	r3, [r3, #8]
10007d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
10007d76:	2b00      	cmp	r3, #0
10007d78:	d110      	bne.n	10007d9c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
10007d7a:	69bb      	ldr	r3, [r7, #24]
10007d7c:	015a      	lsls	r2, r3, #5
10007d7e:	69fb      	ldr	r3, [r7, #28]
10007d80:	4413      	add	r3, r2
10007d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007d86:	681b      	ldr	r3, [r3, #0]
10007d88:	69ba      	ldr	r2, [r7, #24]
10007d8a:	0151      	lsls	r1, r2, #5
10007d8c:	69fa      	ldr	r2, [r7, #28]
10007d8e:	440a      	add	r2, r1
10007d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10007d94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
10007d98:	6013      	str	r3, [r2, #0]
10007d9a:	e00f      	b.n	10007dbc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
10007d9c:	69bb      	ldr	r3, [r7, #24]
10007d9e:	015a      	lsls	r2, r3, #5
10007da0:	69fb      	ldr	r3, [r7, #28]
10007da2:	4413      	add	r3, r2
10007da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007da8:	681b      	ldr	r3, [r3, #0]
10007daa:	69ba      	ldr	r2, [r7, #24]
10007dac:	0151      	lsls	r1, r2, #5
10007dae:	69fa      	ldr	r2, [r7, #28]
10007db0:	440a      	add	r2, r1
10007db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10007db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
10007dba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
10007dbc:	69bb      	ldr	r3, [r7, #24]
10007dbe:	015a      	lsls	r2, r3, #5
10007dc0:	69fb      	ldr	r3, [r7, #28]
10007dc2:	4413      	add	r3, r2
10007dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007dc8:	681b      	ldr	r3, [r3, #0]
10007dca:	69ba      	ldr	r2, [r7, #24]
10007dcc:	0151      	lsls	r1, r2, #5
10007dce:	69fa      	ldr	r2, [r7, #28]
10007dd0:	440a      	add	r2, r1
10007dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10007dd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
10007dda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
10007ddc:	2300      	movs	r3, #0
}
10007dde:	4618      	mov	r0, r3
10007de0:	3720      	adds	r7, #32
10007de2:	46bd      	mov	sp, r7
10007de4:	bd80      	pop	{r7, pc}
10007de6:	bf00      	nop
10007de8:	1ff80000 	.word	0x1ff80000

10007dec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
10007dec:	b480      	push	{r7}
10007dee:	b087      	sub	sp, #28
10007df0:	af00      	add	r7, sp, #0
10007df2:	60f8      	str	r0, [r7, #12]
10007df4:	60b9      	str	r1, [r7, #8]
10007df6:	4613      	mov	r3, r2
10007df8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
10007dfa:	68fb      	ldr	r3, [r7, #12]
10007dfc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
10007dfe:	68bb      	ldr	r3, [r7, #8]
10007e00:	781b      	ldrb	r3, [r3, #0]
10007e02:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
10007e04:	68bb      	ldr	r3, [r7, #8]
10007e06:	785b      	ldrb	r3, [r3, #1]
10007e08:	2b01      	cmp	r3, #1
10007e0a:	f040 80cd 	bne.w	10007fa8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
10007e0e:	68bb      	ldr	r3, [r7, #8]
10007e10:	695b      	ldr	r3, [r3, #20]
10007e12:	2b00      	cmp	r3, #0
10007e14:	d132      	bne.n	10007e7c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
10007e16:	693b      	ldr	r3, [r7, #16]
10007e18:	015a      	lsls	r2, r3, #5
10007e1a:	697b      	ldr	r3, [r7, #20]
10007e1c:	4413      	add	r3, r2
10007e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007e22:	691b      	ldr	r3, [r3, #16]
10007e24:	693a      	ldr	r2, [r7, #16]
10007e26:	0151      	lsls	r1, r2, #5
10007e28:	697a      	ldr	r2, [r7, #20]
10007e2a:	440a      	add	r2, r1
10007e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007e30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
10007e34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
10007e38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
10007e3a:	693b      	ldr	r3, [r7, #16]
10007e3c:	015a      	lsls	r2, r3, #5
10007e3e:	697b      	ldr	r3, [r7, #20]
10007e40:	4413      	add	r3, r2
10007e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007e46:	691b      	ldr	r3, [r3, #16]
10007e48:	693a      	ldr	r2, [r7, #16]
10007e4a:	0151      	lsls	r1, r2, #5
10007e4c:	697a      	ldr	r2, [r7, #20]
10007e4e:	440a      	add	r2, r1
10007e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007e54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
10007e58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
10007e5a:	693b      	ldr	r3, [r7, #16]
10007e5c:	015a      	lsls	r2, r3, #5
10007e5e:	697b      	ldr	r3, [r7, #20]
10007e60:	4413      	add	r3, r2
10007e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007e66:	691b      	ldr	r3, [r3, #16]
10007e68:	693a      	ldr	r2, [r7, #16]
10007e6a:	0151      	lsls	r1, r2, #5
10007e6c:	697a      	ldr	r2, [r7, #20]
10007e6e:	440a      	add	r2, r1
10007e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007e74:	0cdb      	lsrs	r3, r3, #19
10007e76:	04db      	lsls	r3, r3, #19
10007e78:	6113      	str	r3, [r2, #16]
10007e7a:	e04e      	b.n	10007f1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
10007e7c:	693b      	ldr	r3, [r7, #16]
10007e7e:	015a      	lsls	r2, r3, #5
10007e80:	697b      	ldr	r3, [r7, #20]
10007e82:	4413      	add	r3, r2
10007e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007e88:	691b      	ldr	r3, [r3, #16]
10007e8a:	693a      	ldr	r2, [r7, #16]
10007e8c:	0151      	lsls	r1, r2, #5
10007e8e:	697a      	ldr	r2, [r7, #20]
10007e90:	440a      	add	r2, r1
10007e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007e96:	0cdb      	lsrs	r3, r3, #19
10007e98:	04db      	lsls	r3, r3, #19
10007e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
10007e9c:	693b      	ldr	r3, [r7, #16]
10007e9e:	015a      	lsls	r2, r3, #5
10007ea0:	697b      	ldr	r3, [r7, #20]
10007ea2:	4413      	add	r3, r2
10007ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007ea8:	691b      	ldr	r3, [r3, #16]
10007eaa:	693a      	ldr	r2, [r7, #16]
10007eac:	0151      	lsls	r1, r2, #5
10007eae:	697a      	ldr	r2, [r7, #20]
10007eb0:	440a      	add	r2, r1
10007eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007eb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
10007eba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
10007ebe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
10007ec0:	68bb      	ldr	r3, [r7, #8]
10007ec2:	695a      	ldr	r2, [r3, #20]
10007ec4:	68bb      	ldr	r3, [r7, #8]
10007ec6:	689b      	ldr	r3, [r3, #8]
10007ec8:	429a      	cmp	r2, r3
10007eca:	d903      	bls.n	10007ed4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
10007ecc:	68bb      	ldr	r3, [r7, #8]
10007ece:	689a      	ldr	r2, [r3, #8]
10007ed0:	68bb      	ldr	r3, [r7, #8]
10007ed2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
10007ed4:	693b      	ldr	r3, [r7, #16]
10007ed6:	015a      	lsls	r2, r3, #5
10007ed8:	697b      	ldr	r3, [r7, #20]
10007eda:	4413      	add	r3, r2
10007edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007ee0:	691b      	ldr	r3, [r3, #16]
10007ee2:	693a      	ldr	r2, [r7, #16]
10007ee4:	0151      	lsls	r1, r2, #5
10007ee6:	697a      	ldr	r2, [r7, #20]
10007ee8:	440a      	add	r2, r1
10007eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007eee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
10007ef2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
10007ef4:	693b      	ldr	r3, [r7, #16]
10007ef6:	015a      	lsls	r2, r3, #5
10007ef8:	697b      	ldr	r3, [r7, #20]
10007efa:	4413      	add	r3, r2
10007efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007f00:	691a      	ldr	r2, [r3, #16]
10007f02:	68bb      	ldr	r3, [r7, #8]
10007f04:	695b      	ldr	r3, [r3, #20]
10007f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
10007f0a:	6939      	ldr	r1, [r7, #16]
10007f0c:	0148      	lsls	r0, r1, #5
10007f0e:	6979      	ldr	r1, [r7, #20]
10007f10:	4401      	add	r1, r0
10007f12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
10007f16:	4313      	orrs	r3, r2
10007f18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
10007f1a:	79fb      	ldrb	r3, [r7, #7]
10007f1c:	2b01      	cmp	r3, #1
10007f1e:	d11e      	bne.n	10007f5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
10007f20:	68bb      	ldr	r3, [r7, #8]
10007f22:	691b      	ldr	r3, [r3, #16]
10007f24:	2b00      	cmp	r3, #0
10007f26:	d009      	beq.n	10007f3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
10007f28:	693b      	ldr	r3, [r7, #16]
10007f2a:	015a      	lsls	r2, r3, #5
10007f2c:	697b      	ldr	r3, [r7, #20]
10007f2e:	4413      	add	r3, r2
10007f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007f34:	461a      	mov	r2, r3
10007f36:	68bb      	ldr	r3, [r7, #8]
10007f38:	691b      	ldr	r3, [r3, #16]
10007f3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
10007f3c:	693b      	ldr	r3, [r7, #16]
10007f3e:	015a      	lsls	r2, r3, #5
10007f40:	697b      	ldr	r3, [r7, #20]
10007f42:	4413      	add	r3, r2
10007f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007f48:	681b      	ldr	r3, [r3, #0]
10007f4a:	693a      	ldr	r2, [r7, #16]
10007f4c:	0151      	lsls	r1, r2, #5
10007f4e:	697a      	ldr	r2, [r7, #20]
10007f50:	440a      	add	r2, r1
10007f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007f56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
10007f5a:	6013      	str	r3, [r2, #0]
10007f5c:	e092      	b.n	10008084 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
10007f5e:	693b      	ldr	r3, [r7, #16]
10007f60:	015a      	lsls	r2, r3, #5
10007f62:	697b      	ldr	r3, [r7, #20]
10007f64:	4413      	add	r3, r2
10007f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10007f6a:	681b      	ldr	r3, [r3, #0]
10007f6c:	693a      	ldr	r2, [r7, #16]
10007f6e:	0151      	lsls	r1, r2, #5
10007f70:	697a      	ldr	r2, [r7, #20]
10007f72:	440a      	add	r2, r1
10007f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10007f78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
10007f7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
10007f7e:	68bb      	ldr	r3, [r7, #8]
10007f80:	695b      	ldr	r3, [r3, #20]
10007f82:	2b00      	cmp	r3, #0
10007f84:	d07e      	beq.n	10008084 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
10007f86:	697b      	ldr	r3, [r7, #20]
10007f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10007f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10007f8e:	68bb      	ldr	r3, [r7, #8]
10007f90:	781b      	ldrb	r3, [r3, #0]
10007f92:	f003 030f 	and.w	r3, r3, #15
10007f96:	2101      	movs	r1, #1
10007f98:	fa01 f303 	lsl.w	r3, r1, r3
10007f9c:	6979      	ldr	r1, [r7, #20]
10007f9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
10007fa2:	4313      	orrs	r3, r2
10007fa4:	634b      	str	r3, [r1, #52]	; 0x34
10007fa6:	e06d      	b.n	10008084 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
10007fa8:	693b      	ldr	r3, [r7, #16]
10007faa:	015a      	lsls	r2, r3, #5
10007fac:	697b      	ldr	r3, [r7, #20]
10007fae:	4413      	add	r3, r2
10007fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007fb4:	691b      	ldr	r3, [r3, #16]
10007fb6:	693a      	ldr	r2, [r7, #16]
10007fb8:	0151      	lsls	r1, r2, #5
10007fba:	697a      	ldr	r2, [r7, #20]
10007fbc:	440a      	add	r2, r1
10007fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10007fc2:	0cdb      	lsrs	r3, r3, #19
10007fc4:	04db      	lsls	r3, r3, #19
10007fc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
10007fc8:	693b      	ldr	r3, [r7, #16]
10007fca:	015a      	lsls	r2, r3, #5
10007fcc:	697b      	ldr	r3, [r7, #20]
10007fce:	4413      	add	r3, r2
10007fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10007fd4:	691b      	ldr	r3, [r3, #16]
10007fd6:	693a      	ldr	r2, [r7, #16]
10007fd8:	0151      	lsls	r1, r2, #5
10007fda:	697a      	ldr	r2, [r7, #20]
10007fdc:	440a      	add	r2, r1
10007fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10007fe2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
10007fe6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
10007fea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
10007fec:	68bb      	ldr	r3, [r7, #8]
10007fee:	695b      	ldr	r3, [r3, #20]
10007ff0:	2b00      	cmp	r3, #0
10007ff2:	d003      	beq.n	10007ffc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
10007ff4:	68bb      	ldr	r3, [r7, #8]
10007ff6:	689a      	ldr	r2, [r3, #8]
10007ff8:	68bb      	ldr	r3, [r7, #8]
10007ffa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
10007ffc:	693b      	ldr	r3, [r7, #16]
10007ffe:	015a      	lsls	r2, r3, #5
10008000:	697b      	ldr	r3, [r7, #20]
10008002:	4413      	add	r3, r2
10008004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10008008:	691b      	ldr	r3, [r3, #16]
1000800a:	693a      	ldr	r2, [r7, #16]
1000800c:	0151      	lsls	r1, r2, #5
1000800e:	697a      	ldr	r2, [r7, #20]
10008010:	440a      	add	r2, r1
10008012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10008016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
1000801a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
1000801c:	693b      	ldr	r3, [r7, #16]
1000801e:	015a      	lsls	r2, r3, #5
10008020:	697b      	ldr	r3, [r7, #20]
10008022:	4413      	add	r3, r2
10008024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10008028:	691a      	ldr	r2, [r3, #16]
1000802a:	68bb      	ldr	r3, [r7, #8]
1000802c:	689b      	ldr	r3, [r3, #8]
1000802e:	f3c3 0312 	ubfx	r3, r3, #0, #19
10008032:	6939      	ldr	r1, [r7, #16]
10008034:	0148      	lsls	r0, r1, #5
10008036:	6979      	ldr	r1, [r7, #20]
10008038:	4401      	add	r1, r0
1000803a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
1000803e:	4313      	orrs	r3, r2
10008040:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
10008042:	79fb      	ldrb	r3, [r7, #7]
10008044:	2b01      	cmp	r3, #1
10008046:	d10d      	bne.n	10008064 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
10008048:	68bb      	ldr	r3, [r7, #8]
1000804a:	68db      	ldr	r3, [r3, #12]
1000804c:	2b00      	cmp	r3, #0
1000804e:	d009      	beq.n	10008064 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
10008050:	68bb      	ldr	r3, [r7, #8]
10008052:	68d9      	ldr	r1, [r3, #12]
10008054:	693b      	ldr	r3, [r7, #16]
10008056:	015a      	lsls	r2, r3, #5
10008058:	697b      	ldr	r3, [r7, #20]
1000805a:	4413      	add	r3, r2
1000805c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10008060:	460a      	mov	r2, r1
10008062:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
10008064:	693b      	ldr	r3, [r7, #16]
10008066:	015a      	lsls	r2, r3, #5
10008068:	697b      	ldr	r3, [r7, #20]
1000806a:	4413      	add	r3, r2
1000806c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10008070:	681b      	ldr	r3, [r3, #0]
10008072:	693a      	ldr	r2, [r7, #16]
10008074:	0151      	lsls	r1, r2, #5
10008076:	697a      	ldr	r2, [r7, #20]
10008078:	440a      	add	r2, r1
1000807a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
1000807e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
10008082:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
10008084:	2300      	movs	r3, #0
}
10008086:	4618      	mov	r0, r3
10008088:	371c      	adds	r7, #28
1000808a:	46bd      	mov	sp, r7
1000808c:	f85d 7b04 	ldr.w	r7, [sp], #4
10008090:	4770      	bx	lr

10008092 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
10008092:	b480      	push	{r7}
10008094:	b089      	sub	sp, #36	; 0x24
10008096:	af00      	add	r7, sp, #0
10008098:	60f8      	str	r0, [r7, #12]
1000809a:	60b9      	str	r1, [r7, #8]
1000809c:	4611      	mov	r1, r2
1000809e:	461a      	mov	r2, r3
100080a0:	460b      	mov	r3, r1
100080a2:	71fb      	strb	r3, [r7, #7]
100080a4:	4613      	mov	r3, r2
100080a6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
100080a8:	68fb      	ldr	r3, [r7, #12]
100080aa:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
100080ac:	68bb      	ldr	r3, [r7, #8]
100080ae:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
100080b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
100080b4:	2b00      	cmp	r3, #0
100080b6:	d11a      	bne.n	100080ee <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
100080b8:	88bb      	ldrh	r3, [r7, #4]
100080ba:	3303      	adds	r3, #3
100080bc:	089b      	lsrs	r3, r3, #2
100080be:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
100080c0:	2300      	movs	r3, #0
100080c2:	61bb      	str	r3, [r7, #24]
100080c4:	e00f      	b.n	100080e6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
100080c6:	79fb      	ldrb	r3, [r7, #7]
100080c8:	031a      	lsls	r2, r3, #12
100080ca:	697b      	ldr	r3, [r7, #20]
100080cc:	4413      	add	r3, r2
100080ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
100080d2:	461a      	mov	r2, r3
100080d4:	69fb      	ldr	r3, [r7, #28]
100080d6:	681b      	ldr	r3, [r3, #0]
100080d8:	6013      	str	r3, [r2, #0]
      pSrc++;
100080da:	69fb      	ldr	r3, [r7, #28]
100080dc:	3304      	adds	r3, #4
100080de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
100080e0:	69bb      	ldr	r3, [r7, #24]
100080e2:	3301      	adds	r3, #1
100080e4:	61bb      	str	r3, [r7, #24]
100080e6:	69ba      	ldr	r2, [r7, #24]
100080e8:	693b      	ldr	r3, [r7, #16]
100080ea:	429a      	cmp	r2, r3
100080ec:	d3eb      	bcc.n	100080c6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
100080ee:	2300      	movs	r3, #0
}
100080f0:	4618      	mov	r0, r3
100080f2:	3724      	adds	r7, #36	; 0x24
100080f4:	46bd      	mov	sp, r7
100080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100080fa:	4770      	bx	lr

100080fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
100080fc:	b480      	push	{r7}
100080fe:	b089      	sub	sp, #36	; 0x24
10008100:	af00      	add	r7, sp, #0
10008102:	60f8      	str	r0, [r7, #12]
10008104:	60b9      	str	r1, [r7, #8]
10008106:	4613      	mov	r3, r2
10008108:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
1000810a:	68fb      	ldr	r3, [r7, #12]
1000810c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
1000810e:	68bb      	ldr	r3, [r7, #8]
10008110:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
10008112:	88fb      	ldrh	r3, [r7, #6]
10008114:	3303      	adds	r3, #3
10008116:	089b      	lsrs	r3, r3, #2
10008118:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
1000811a:	2300      	movs	r3, #0
1000811c:	61bb      	str	r3, [r7, #24]
1000811e:	e00b      	b.n	10008138 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
10008120:	697b      	ldr	r3, [r7, #20]
10008122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10008126:	681a      	ldr	r2, [r3, #0]
10008128:	69fb      	ldr	r3, [r7, #28]
1000812a:	601a      	str	r2, [r3, #0]
    pDest++;
1000812c:	69fb      	ldr	r3, [r7, #28]
1000812e:	3304      	adds	r3, #4
10008130:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
10008132:	69bb      	ldr	r3, [r7, #24]
10008134:	3301      	adds	r3, #1
10008136:	61bb      	str	r3, [r7, #24]
10008138:	69ba      	ldr	r2, [r7, #24]
1000813a:	693b      	ldr	r3, [r7, #16]
1000813c:	429a      	cmp	r2, r3
1000813e:	d3ef      	bcc.n	10008120 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
10008140:	69fb      	ldr	r3, [r7, #28]
}
10008142:	4618      	mov	r0, r3
10008144:	3724      	adds	r7, #36	; 0x24
10008146:	46bd      	mov	sp, r7
10008148:	f85d 7b04 	ldr.w	r7, [sp], #4
1000814c:	4770      	bx	lr

1000814e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
1000814e:	b480      	push	{r7}
10008150:	b085      	sub	sp, #20
10008152:	af00      	add	r7, sp, #0
10008154:	6078      	str	r0, [r7, #4]
10008156:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
10008158:	687b      	ldr	r3, [r7, #4]
1000815a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
1000815c:	683b      	ldr	r3, [r7, #0]
1000815e:	781b      	ldrb	r3, [r3, #0]
10008160:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
10008162:	683b      	ldr	r3, [r7, #0]
10008164:	785b      	ldrb	r3, [r3, #1]
10008166:	2b01      	cmp	r3, #1
10008168:	d12c      	bne.n	100081c4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
1000816a:	68bb      	ldr	r3, [r7, #8]
1000816c:	015a      	lsls	r2, r3, #5
1000816e:	68fb      	ldr	r3, [r7, #12]
10008170:	4413      	add	r3, r2
10008172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10008176:	681b      	ldr	r3, [r3, #0]
10008178:	2b00      	cmp	r3, #0
1000817a:	db12      	blt.n	100081a2 <USB_EPSetStall+0x54>
1000817c:	68bb      	ldr	r3, [r7, #8]
1000817e:	2b00      	cmp	r3, #0
10008180:	d00f      	beq.n	100081a2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
10008182:	68bb      	ldr	r3, [r7, #8]
10008184:	015a      	lsls	r2, r3, #5
10008186:	68fb      	ldr	r3, [r7, #12]
10008188:	4413      	add	r3, r2
1000818a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
1000818e:	681b      	ldr	r3, [r3, #0]
10008190:	68ba      	ldr	r2, [r7, #8]
10008192:	0151      	lsls	r1, r2, #5
10008194:	68fa      	ldr	r2, [r7, #12]
10008196:	440a      	add	r2, r1
10008198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
1000819c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
100081a0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
100081a2:	68bb      	ldr	r3, [r7, #8]
100081a4:	015a      	lsls	r2, r3, #5
100081a6:	68fb      	ldr	r3, [r7, #12]
100081a8:	4413      	add	r3, r2
100081aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100081ae:	681b      	ldr	r3, [r3, #0]
100081b0:	68ba      	ldr	r2, [r7, #8]
100081b2:	0151      	lsls	r1, r2, #5
100081b4:	68fa      	ldr	r2, [r7, #12]
100081b6:	440a      	add	r2, r1
100081b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
100081bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
100081c0:	6013      	str	r3, [r2, #0]
100081c2:	e02b      	b.n	1000821c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
100081c4:	68bb      	ldr	r3, [r7, #8]
100081c6:	015a      	lsls	r2, r3, #5
100081c8:	68fb      	ldr	r3, [r7, #12]
100081ca:	4413      	add	r3, r2
100081cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100081d0:	681b      	ldr	r3, [r3, #0]
100081d2:	2b00      	cmp	r3, #0
100081d4:	db12      	blt.n	100081fc <USB_EPSetStall+0xae>
100081d6:	68bb      	ldr	r3, [r7, #8]
100081d8:	2b00      	cmp	r3, #0
100081da:	d00f      	beq.n	100081fc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
100081dc:	68bb      	ldr	r3, [r7, #8]
100081de:	015a      	lsls	r2, r3, #5
100081e0:	68fb      	ldr	r3, [r7, #12]
100081e2:	4413      	add	r3, r2
100081e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100081e8:	681b      	ldr	r3, [r3, #0]
100081ea:	68ba      	ldr	r2, [r7, #8]
100081ec:	0151      	lsls	r1, r2, #5
100081ee:	68fa      	ldr	r2, [r7, #12]
100081f0:	440a      	add	r2, r1
100081f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
100081f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
100081fa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
100081fc:	68bb      	ldr	r3, [r7, #8]
100081fe:	015a      	lsls	r2, r3, #5
10008200:	68fb      	ldr	r3, [r7, #12]
10008202:	4413      	add	r3, r2
10008204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10008208:	681b      	ldr	r3, [r3, #0]
1000820a:	68ba      	ldr	r2, [r7, #8]
1000820c:	0151      	lsls	r1, r2, #5
1000820e:	68fa      	ldr	r2, [r7, #12]
10008210:	440a      	add	r2, r1
10008212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
10008216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1000821a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
1000821c:	2300      	movs	r3, #0
}
1000821e:	4618      	mov	r0, r3
10008220:	3714      	adds	r7, #20
10008222:	46bd      	mov	sp, r7
10008224:	f85d 7b04 	ldr.w	r7, [sp], #4
10008228:	4770      	bx	lr

1000822a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
1000822a:	b480      	push	{r7}
1000822c:	b085      	sub	sp, #20
1000822e:	af00      	add	r7, sp, #0
10008230:	6078      	str	r0, [r7, #4]
10008232:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
10008234:	687b      	ldr	r3, [r7, #4]
10008236:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
10008238:	683b      	ldr	r3, [r7, #0]
1000823a:	781b      	ldrb	r3, [r3, #0]
1000823c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
1000823e:	683b      	ldr	r3, [r7, #0]
10008240:	785b      	ldrb	r3, [r3, #1]
10008242:	2b01      	cmp	r3, #1
10008244:	d128      	bne.n	10008298 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
10008246:	68bb      	ldr	r3, [r7, #8]
10008248:	015a      	lsls	r2, r3, #5
1000824a:	68fb      	ldr	r3, [r7, #12]
1000824c:	4413      	add	r3, r2
1000824e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10008252:	681b      	ldr	r3, [r3, #0]
10008254:	68ba      	ldr	r2, [r7, #8]
10008256:	0151      	lsls	r1, r2, #5
10008258:	68fa      	ldr	r2, [r7, #12]
1000825a:	440a      	add	r2, r1
1000825c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10008260:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
10008264:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
10008266:	683b      	ldr	r3, [r7, #0]
10008268:	78db      	ldrb	r3, [r3, #3]
1000826a:	2b03      	cmp	r3, #3
1000826c:	d003      	beq.n	10008276 <USB_EPClearStall+0x4c>
1000826e:	683b      	ldr	r3, [r7, #0]
10008270:	78db      	ldrb	r3, [r3, #3]
10008272:	2b02      	cmp	r3, #2
10008274:	d138      	bne.n	100082e8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
10008276:	68bb      	ldr	r3, [r7, #8]
10008278:	015a      	lsls	r2, r3, #5
1000827a:	68fb      	ldr	r3, [r7, #12]
1000827c:	4413      	add	r3, r2
1000827e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
10008282:	681b      	ldr	r3, [r3, #0]
10008284:	68ba      	ldr	r2, [r7, #8]
10008286:	0151      	lsls	r1, r2, #5
10008288:	68fa      	ldr	r2, [r7, #12]
1000828a:	440a      	add	r2, r1
1000828c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10008290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
10008294:	6013      	str	r3, [r2, #0]
10008296:	e027      	b.n	100082e8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
10008298:	68bb      	ldr	r3, [r7, #8]
1000829a:	015a      	lsls	r2, r3, #5
1000829c:	68fb      	ldr	r3, [r7, #12]
1000829e:	4413      	add	r3, r2
100082a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100082a4:	681b      	ldr	r3, [r3, #0]
100082a6:	68ba      	ldr	r2, [r7, #8]
100082a8:	0151      	lsls	r1, r2, #5
100082aa:	68fa      	ldr	r2, [r7, #12]
100082ac:	440a      	add	r2, r1
100082ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
100082b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
100082b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
100082b8:	683b      	ldr	r3, [r7, #0]
100082ba:	78db      	ldrb	r3, [r3, #3]
100082bc:	2b03      	cmp	r3, #3
100082be:	d003      	beq.n	100082c8 <USB_EPClearStall+0x9e>
100082c0:	683b      	ldr	r3, [r7, #0]
100082c2:	78db      	ldrb	r3, [r3, #3]
100082c4:	2b02      	cmp	r3, #2
100082c6:	d10f      	bne.n	100082e8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
100082c8:	68bb      	ldr	r3, [r7, #8]
100082ca:	015a      	lsls	r2, r3, #5
100082cc:	68fb      	ldr	r3, [r7, #12]
100082ce:	4413      	add	r3, r2
100082d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100082d4:	681b      	ldr	r3, [r3, #0]
100082d6:	68ba      	ldr	r2, [r7, #8]
100082d8:	0151      	lsls	r1, r2, #5
100082da:	68fa      	ldr	r2, [r7, #12]
100082dc:	440a      	add	r2, r1
100082de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
100082e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
100082e6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
100082e8:	2300      	movs	r3, #0
}
100082ea:	4618      	mov	r0, r3
100082ec:	3714      	adds	r7, #20
100082ee:	46bd      	mov	sp, r7
100082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
100082f4:	4770      	bx	lr

100082f6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
100082f6:	b480      	push	{r7}
100082f8:	b085      	sub	sp, #20
100082fa:	af00      	add	r7, sp, #0
100082fc:	6078      	str	r0, [r7, #4]
100082fe:	460b      	mov	r3, r1
10008300:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
10008302:	687b      	ldr	r3, [r7, #4]
10008304:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
10008306:	68fb      	ldr	r3, [r7, #12]
10008308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1000830c:	681b      	ldr	r3, [r3, #0]
1000830e:	68fa      	ldr	r2, [r7, #12]
10008310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
10008314:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
10008318:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
1000831a:	68fb      	ldr	r3, [r7, #12]
1000831c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10008320:	681a      	ldr	r2, [r3, #0]
10008322:	78fb      	ldrb	r3, [r7, #3]
10008324:	011b      	lsls	r3, r3, #4
10008326:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
1000832a:	68f9      	ldr	r1, [r7, #12]
1000832c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
10008330:	4313      	orrs	r3, r2
10008332:	600b      	str	r3, [r1, #0]

  return HAL_OK;
10008334:	2300      	movs	r3, #0
}
10008336:	4618      	mov	r0, r3
10008338:	3714      	adds	r7, #20
1000833a:	46bd      	mov	sp, r7
1000833c:	f85d 7b04 	ldr.w	r7, [sp], #4
10008340:	4770      	bx	lr

10008342 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
10008342:	b480      	push	{r7}
10008344:	b085      	sub	sp, #20
10008346:	af00      	add	r7, sp, #0
10008348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
1000834a:	687b      	ldr	r3, [r7, #4]
1000834c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
1000834e:	68fb      	ldr	r3, [r7, #12]
10008350:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
10008354:	681b      	ldr	r3, [r3, #0]
10008356:	68fa      	ldr	r2, [r7, #12]
10008358:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
1000835c:	f023 0303 	bic.w	r3, r3, #3
10008360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
10008362:	68fb      	ldr	r3, [r7, #12]
10008364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10008368:	685b      	ldr	r3, [r3, #4]
1000836a:	68fa      	ldr	r2, [r7, #12]
1000836c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
10008370:	f023 0302 	bic.w	r3, r3, #2
10008374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
10008376:	2300      	movs	r3, #0
}
10008378:	4618      	mov	r0, r3
1000837a:	3714      	adds	r7, #20
1000837c:	46bd      	mov	sp, r7
1000837e:	f85d 7b04 	ldr.w	r7, [sp], #4
10008382:	4770      	bx	lr

10008384 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
10008384:	b480      	push	{r7}
10008386:	b085      	sub	sp, #20
10008388:	af00      	add	r7, sp, #0
1000838a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
1000838c:	687b      	ldr	r3, [r7, #4]
1000838e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
10008390:	68fb      	ldr	r3, [r7, #12]
10008392:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
10008396:	681b      	ldr	r3, [r3, #0]
10008398:	68fa      	ldr	r2, [r7, #12]
1000839a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
1000839e:	f023 0303 	bic.w	r3, r3, #3
100083a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
100083a4:	68fb      	ldr	r3, [r7, #12]
100083a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100083aa:	685b      	ldr	r3, [r3, #4]
100083ac:	68fa      	ldr	r2, [r7, #12]
100083ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
100083b2:	f043 0302 	orr.w	r3, r3, #2
100083b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
100083b8:	2300      	movs	r3, #0
}
100083ba:	4618      	mov	r0, r3
100083bc:	3714      	adds	r7, #20
100083be:	46bd      	mov	sp, r7
100083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100083c4:	4770      	bx	lr

100083c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
100083c6:	b480      	push	{r7}
100083c8:	b085      	sub	sp, #20
100083ca:	af00      	add	r7, sp, #0
100083cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
100083ce:	687b      	ldr	r3, [r7, #4]
100083d0:	695b      	ldr	r3, [r3, #20]
100083d2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
100083d4:	687b      	ldr	r3, [r7, #4]
100083d6:	699b      	ldr	r3, [r3, #24]
100083d8:	68fa      	ldr	r2, [r7, #12]
100083da:	4013      	ands	r3, r2
100083dc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
100083de:	68fb      	ldr	r3, [r7, #12]
}
100083e0:	4618      	mov	r0, r3
100083e2:	3714      	adds	r7, #20
100083e4:	46bd      	mov	sp, r7
100083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
100083ea:	4770      	bx	lr

100083ec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
100083ec:	b480      	push	{r7}
100083ee:	b085      	sub	sp, #20
100083f0:	af00      	add	r7, sp, #0
100083f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
100083f4:	687b      	ldr	r3, [r7, #4]
100083f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
100083f8:	68fb      	ldr	r3, [r7, #12]
100083fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100083fe:	699b      	ldr	r3, [r3, #24]
10008400:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
10008402:	68fb      	ldr	r3, [r7, #12]
10008404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10008408:	69db      	ldr	r3, [r3, #28]
1000840a:	68ba      	ldr	r2, [r7, #8]
1000840c:	4013      	ands	r3, r2
1000840e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
10008410:	68bb      	ldr	r3, [r7, #8]
10008412:	0c1b      	lsrs	r3, r3, #16
}
10008414:	4618      	mov	r0, r3
10008416:	3714      	adds	r7, #20
10008418:	46bd      	mov	sp, r7
1000841a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000841e:	4770      	bx	lr

10008420 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
10008420:	b480      	push	{r7}
10008422:	b085      	sub	sp, #20
10008424:	af00      	add	r7, sp, #0
10008426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
10008428:	687b      	ldr	r3, [r7, #4]
1000842a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
1000842c:	68fb      	ldr	r3, [r7, #12]
1000842e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10008432:	699b      	ldr	r3, [r3, #24]
10008434:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
10008436:	68fb      	ldr	r3, [r7, #12]
10008438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1000843c:	69db      	ldr	r3, [r3, #28]
1000843e:	68ba      	ldr	r2, [r7, #8]
10008440:	4013      	ands	r3, r2
10008442:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
10008444:	68bb      	ldr	r3, [r7, #8]
10008446:	b29b      	uxth	r3, r3
}
10008448:	4618      	mov	r0, r3
1000844a:	3714      	adds	r7, #20
1000844c:	46bd      	mov	sp, r7
1000844e:	f85d 7b04 	ldr.w	r7, [sp], #4
10008452:	4770      	bx	lr

10008454 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
10008454:	b480      	push	{r7}
10008456:	b085      	sub	sp, #20
10008458:	af00      	add	r7, sp, #0
1000845a:	6078      	str	r0, [r7, #4]
1000845c:	460b      	mov	r3, r1
1000845e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
10008460:	687b      	ldr	r3, [r7, #4]
10008462:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
10008464:	78fb      	ldrb	r3, [r7, #3]
10008466:	015a      	lsls	r2, r3, #5
10008468:	68fb      	ldr	r3, [r7, #12]
1000846a:	4413      	add	r3, r2
1000846c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10008470:	689b      	ldr	r3, [r3, #8]
10008472:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
10008474:	68fb      	ldr	r3, [r7, #12]
10008476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1000847a:	695b      	ldr	r3, [r3, #20]
1000847c:	68ba      	ldr	r2, [r7, #8]
1000847e:	4013      	ands	r3, r2
10008480:	60bb      	str	r3, [r7, #8]

  return tmpreg;
10008482:	68bb      	ldr	r3, [r7, #8]
}
10008484:	4618      	mov	r0, r3
10008486:	3714      	adds	r7, #20
10008488:	46bd      	mov	sp, r7
1000848a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000848e:	4770      	bx	lr

10008490 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
10008490:	b480      	push	{r7}
10008492:	b087      	sub	sp, #28
10008494:	af00      	add	r7, sp, #0
10008496:	6078      	str	r0, [r7, #4]
10008498:	460b      	mov	r3, r1
1000849a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
1000849c:	687b      	ldr	r3, [r7, #4]
1000849e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
100084a0:	697b      	ldr	r3, [r7, #20]
100084a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100084a6:	691b      	ldr	r3, [r3, #16]
100084a8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
100084aa:	697b      	ldr	r3, [r7, #20]
100084ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
100084b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100084b2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
100084b4:	78fb      	ldrb	r3, [r7, #3]
100084b6:	f003 030f 	and.w	r3, r3, #15
100084ba:	68fa      	ldr	r2, [r7, #12]
100084bc:	fa22 f303 	lsr.w	r3, r2, r3
100084c0:	01db      	lsls	r3, r3, #7
100084c2:	b2db      	uxtb	r3, r3
100084c4:	693a      	ldr	r2, [r7, #16]
100084c6:	4313      	orrs	r3, r2
100084c8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
100084ca:	78fb      	ldrb	r3, [r7, #3]
100084cc:	015a      	lsls	r2, r3, #5
100084ce:	697b      	ldr	r3, [r7, #20]
100084d0:	4413      	add	r3, r2
100084d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
100084d6:	689b      	ldr	r3, [r3, #8]
100084d8:	693a      	ldr	r2, [r7, #16]
100084da:	4013      	ands	r3, r2
100084dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
100084de:	68bb      	ldr	r3, [r7, #8]
}
100084e0:	4618      	mov	r0, r3
100084e2:	371c      	adds	r7, #28
100084e4:	46bd      	mov	sp, r7
100084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
100084ea:	4770      	bx	lr

100084ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
100084ec:	b480      	push	{r7}
100084ee:	b083      	sub	sp, #12
100084f0:	af00      	add	r7, sp, #0
100084f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
100084f4:	687b      	ldr	r3, [r7, #4]
100084f6:	695b      	ldr	r3, [r3, #20]
100084f8:	f003 0301 	and.w	r3, r3, #1
}
100084fc:	4618      	mov	r0, r3
100084fe:	370c      	adds	r7, #12
10008500:	46bd      	mov	sp, r7
10008502:	f85d 7b04 	ldr.w	r7, [sp], #4
10008506:	4770      	bx	lr

10008508 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
10008508:	b480      	push	{r7}
1000850a:	b085      	sub	sp, #20
1000850c:	af00      	add	r7, sp, #0
1000850e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
10008510:	687b      	ldr	r3, [r7, #4]
10008512:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
10008514:	68fb      	ldr	r3, [r7, #12]
10008516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
1000851a:	681b      	ldr	r3, [r3, #0]
1000851c:	68fa      	ldr	r2, [r7, #12]
1000851e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
10008522:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
10008526:	f023 0307 	bic.w	r3, r3, #7
1000852a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
1000852c:	68fb      	ldr	r3, [r7, #12]
1000852e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10008532:	685b      	ldr	r3, [r3, #4]
10008534:	68fa      	ldr	r2, [r7, #12]
10008536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1000853a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000853e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
10008540:	2300      	movs	r3, #0
}
10008542:	4618      	mov	r0, r3
10008544:	3714      	adds	r7, #20
10008546:	46bd      	mov	sp, r7
10008548:	f85d 7b04 	ldr.w	r7, [sp], #4
1000854c:	4770      	bx	lr
	...

10008550 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
10008550:	b480      	push	{r7}
10008552:	b087      	sub	sp, #28
10008554:	af00      	add	r7, sp, #0
10008556:	60f8      	str	r0, [r7, #12]
10008558:	460b      	mov	r3, r1
1000855a:	607a      	str	r2, [r7, #4]
1000855c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
1000855e:	68fb      	ldr	r3, [r7, #12]
10008560:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
10008562:	68fb      	ldr	r3, [r7, #12]
10008564:	333c      	adds	r3, #60	; 0x3c
10008566:	3304      	adds	r3, #4
10008568:	681b      	ldr	r3, [r3, #0]
1000856a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
1000856c:	693b      	ldr	r3, [r7, #16]
1000856e:	4a26      	ldr	r2, [pc, #152]	; (10008608 <USB_EP0_OutStart+0xb8>)
10008570:	4293      	cmp	r3, r2
10008572:	d90a      	bls.n	1000858a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
10008574:	697b      	ldr	r3, [r7, #20]
10008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
1000857a:	681b      	ldr	r3, [r3, #0]
1000857c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10008580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10008584:	d101      	bne.n	1000858a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
10008586:	2300      	movs	r3, #0
10008588:	e037      	b.n	100085fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
1000858a:	697b      	ldr	r3, [r7, #20]
1000858c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
10008590:	461a      	mov	r2, r3
10008592:	2300      	movs	r3, #0
10008594:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
10008596:	697b      	ldr	r3, [r7, #20]
10008598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
1000859c:	691b      	ldr	r3, [r3, #16]
1000859e:	697a      	ldr	r2, [r7, #20]
100085a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
100085a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
100085a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
100085aa:	697b      	ldr	r3, [r7, #20]
100085ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100085b0:	691b      	ldr	r3, [r3, #16]
100085b2:	697a      	ldr	r2, [r7, #20]
100085b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
100085b8:	f043 0318 	orr.w	r3, r3, #24
100085bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
100085be:	697b      	ldr	r3, [r7, #20]
100085c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100085c4:	691b      	ldr	r3, [r3, #16]
100085c6:	697a      	ldr	r2, [r7, #20]
100085c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
100085cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
100085d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
100085d2:	7afb      	ldrb	r3, [r7, #11]
100085d4:	2b01      	cmp	r3, #1
100085d6:	d10f      	bne.n	100085f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
100085d8:	697b      	ldr	r3, [r7, #20]
100085da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100085de:	461a      	mov	r2, r3
100085e0:	687b      	ldr	r3, [r7, #4]
100085e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
100085e4:	697b      	ldr	r3, [r7, #20]
100085e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
100085ea:	681b      	ldr	r3, [r3, #0]
100085ec:	697a      	ldr	r2, [r7, #20]
100085ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
100085f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
100085f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
100085f8:	2300      	movs	r3, #0
}
100085fa:	4618      	mov	r0, r3
100085fc:	371c      	adds	r7, #28
100085fe:	46bd      	mov	sp, r7
10008600:	f85d 7b04 	ldr.w	r7, [sp], #4
10008604:	4770      	bx	lr
10008606:	bf00      	nop
10008608:	4f54300a 	.word	0x4f54300a

1000860c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
1000860c:	b480      	push	{r7}
1000860e:	b085      	sub	sp, #20
10008610:	af00      	add	r7, sp, #0
10008612:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
10008614:	2300      	movs	r3, #0
10008616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
10008618:	68fb      	ldr	r3, [r7, #12]
1000861a:	3301      	adds	r3, #1
1000861c:	60fb      	str	r3, [r7, #12]
1000861e:	68fb      	ldr	r3, [r7, #12]
10008620:	4a13      	ldr	r2, [pc, #76]	; (10008670 <USB_CoreReset+0x64>)
10008622:	4293      	cmp	r3, r2
10008624:	d901      	bls.n	1000862a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
10008626:	2303      	movs	r3, #3
10008628:	e01b      	b.n	10008662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
1000862a:	687b      	ldr	r3, [r7, #4]
1000862c:	691b      	ldr	r3, [r3, #16]
1000862e:	2b00      	cmp	r3, #0
10008630:	daf2      	bge.n	10008618 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
10008632:	2300      	movs	r3, #0
10008634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
10008636:	687b      	ldr	r3, [r7, #4]
10008638:	691b      	ldr	r3, [r3, #16]
1000863a:	f043 0201 	orr.w	r2, r3, #1
1000863e:	687b      	ldr	r3, [r7, #4]
10008640:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
10008642:	68fb      	ldr	r3, [r7, #12]
10008644:	3301      	adds	r3, #1
10008646:	60fb      	str	r3, [r7, #12]
10008648:	68fb      	ldr	r3, [r7, #12]
1000864a:	4a09      	ldr	r2, [pc, #36]	; (10008670 <USB_CoreReset+0x64>)
1000864c:	4293      	cmp	r3, r2
1000864e:	d901      	bls.n	10008654 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
10008650:	2303      	movs	r3, #3
10008652:	e006      	b.n	10008662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
10008654:	687b      	ldr	r3, [r7, #4]
10008656:	691b      	ldr	r3, [r3, #16]
10008658:	f003 0301 	and.w	r3, r3, #1
1000865c:	2b01      	cmp	r3, #1
1000865e:	d0f0      	beq.n	10008642 <USB_CoreReset+0x36>

  return HAL_OK;
10008660:	2300      	movs	r3, #0
}
10008662:	4618      	mov	r0, r3
10008664:	3714      	adds	r7, #20
10008666:	46bd      	mov	sp, r7
10008668:	f85d 7b04 	ldr.w	r7, [sp], #4
1000866c:	4770      	bx	lr
1000866e:	bf00      	nop
10008670:	00030d40 	.word	0x00030d40

10008674 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
10008674:	b580      	push	{r7, lr}
10008676:	b084      	sub	sp, #16
10008678:	af00      	add	r7, sp, #0
1000867a:	6078      	str	r0, [r7, #4]
1000867c:	460b      	mov	r3, r1
1000867e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
10008680:	f44f 7007 	mov.w	r0, #540	; 0x21c
10008684:	f002 fc12 	bl	1000aeac <USBD_static_malloc>
10008688:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
1000868a:	68fb      	ldr	r3, [r7, #12]
1000868c:	2b00      	cmp	r3, #0
1000868e:	d105      	bne.n	1000869c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
10008690:	687b      	ldr	r3, [r7, #4]
10008692:	2200      	movs	r2, #0
10008694:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
10008698:	2302      	movs	r3, #2
1000869a:	e066      	b.n	1000876a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
1000869c:	687b      	ldr	r3, [r7, #4]
1000869e:	68fa      	ldr	r2, [r7, #12]
100086a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
100086a4:	687b      	ldr	r3, [r7, #4]
100086a6:	7c1b      	ldrb	r3, [r3, #16]
100086a8:	2b00      	cmp	r3, #0
100086aa:	d119      	bne.n	100086e0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
100086ac:	f44f 7300 	mov.w	r3, #512	; 0x200
100086b0:	2202      	movs	r2, #2
100086b2:	2181      	movs	r1, #129	; 0x81
100086b4:	6878      	ldr	r0, [r7, #4]
100086b6:	f002 fad6 	bl	1000ac66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
100086ba:	687b      	ldr	r3, [r7, #4]
100086bc:	2201      	movs	r2, #1
100086be:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
100086c0:	f44f 7300 	mov.w	r3, #512	; 0x200
100086c4:	2202      	movs	r2, #2
100086c6:	2101      	movs	r1, #1
100086c8:	6878      	ldr	r0, [r7, #4]
100086ca:	f002 facc 	bl	1000ac66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
100086ce:	687b      	ldr	r3, [r7, #4]
100086d0:	2201      	movs	r2, #1
100086d2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
100086d6:	687b      	ldr	r3, [r7, #4]
100086d8:	2210      	movs	r2, #16
100086da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
100086de:	e016      	b.n	1000870e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
100086e0:	2340      	movs	r3, #64	; 0x40
100086e2:	2202      	movs	r2, #2
100086e4:	2181      	movs	r1, #129	; 0x81
100086e6:	6878      	ldr	r0, [r7, #4]
100086e8:	f002 fabd 	bl	1000ac66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
100086ec:	687b      	ldr	r3, [r7, #4]
100086ee:	2201      	movs	r2, #1
100086f0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
100086f2:	2340      	movs	r3, #64	; 0x40
100086f4:	2202      	movs	r2, #2
100086f6:	2101      	movs	r1, #1
100086f8:	6878      	ldr	r0, [r7, #4]
100086fa:	f002 fab4 	bl	1000ac66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
100086fe:	687b      	ldr	r3, [r7, #4]
10008700:	2201      	movs	r2, #1
10008702:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
10008706:	687b      	ldr	r3, [r7, #4]
10008708:	2210      	movs	r2, #16
1000870a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
1000870e:	2308      	movs	r3, #8
10008710:	2203      	movs	r2, #3
10008712:	2182      	movs	r1, #130	; 0x82
10008714:	6878      	ldr	r0, [r7, #4]
10008716:	f002 faa6 	bl	1000ac66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
1000871a:	687b      	ldr	r3, [r7, #4]
1000871c:	2201      	movs	r2, #1
1000871e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
10008722:	687b      	ldr	r3, [r7, #4]
10008724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
10008728:	681b      	ldr	r3, [r3, #0]
1000872a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
1000872c:	68fb      	ldr	r3, [r7, #12]
1000872e:	2200      	movs	r2, #0
10008730:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
10008734:	68fb      	ldr	r3, [r7, #12]
10008736:	2200      	movs	r2, #0
10008738:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
1000873c:	687b      	ldr	r3, [r7, #4]
1000873e:	7c1b      	ldrb	r3, [r3, #16]
10008740:	2b00      	cmp	r3, #0
10008742:	d109      	bne.n	10008758 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
10008744:	68fb      	ldr	r3, [r7, #12]
10008746:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
1000874a:	f44f 7300 	mov.w	r3, #512	; 0x200
1000874e:	2101      	movs	r1, #1
10008750:	6878      	ldr	r0, [r7, #4]
10008752:	f002 fb77 	bl	1000ae44 <USBD_LL_PrepareReceive>
10008756:	e007      	b.n	10008768 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
10008758:	68fb      	ldr	r3, [r7, #12]
1000875a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
1000875e:	2340      	movs	r3, #64	; 0x40
10008760:	2101      	movs	r1, #1
10008762:	6878      	ldr	r0, [r7, #4]
10008764:	f002 fb6e 	bl	1000ae44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
10008768:	2300      	movs	r3, #0
}
1000876a:	4618      	mov	r0, r3
1000876c:	3710      	adds	r7, #16
1000876e:	46bd      	mov	sp, r7
10008770:	bd80      	pop	{r7, pc}

10008772 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
10008772:	b580      	push	{r7, lr}
10008774:	b082      	sub	sp, #8
10008776:	af00      	add	r7, sp, #0
10008778:	6078      	str	r0, [r7, #4]
1000877a:	460b      	mov	r3, r1
1000877c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
1000877e:	2181      	movs	r1, #129	; 0x81
10008780:	6878      	ldr	r0, [r7, #4]
10008782:	f002 fa96 	bl	1000acb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
10008786:	687b      	ldr	r3, [r7, #4]
10008788:	2200      	movs	r2, #0
1000878a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
1000878c:	2101      	movs	r1, #1
1000878e:	6878      	ldr	r0, [r7, #4]
10008790:	f002 fa8f 	bl	1000acb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
10008794:	687b      	ldr	r3, [r7, #4]
10008796:	2200      	movs	r2, #0
10008798:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
1000879c:	2182      	movs	r1, #130	; 0x82
1000879e:	6878      	ldr	r0, [r7, #4]
100087a0:	f002 fa87 	bl	1000acb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
100087a4:	687b      	ldr	r3, [r7, #4]
100087a6:	2200      	movs	r2, #0
100087a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
100087ac:	687b      	ldr	r3, [r7, #4]
100087ae:	2200      	movs	r2, #0
100087b0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
100087b4:	687b      	ldr	r3, [r7, #4]
100087b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
100087ba:	2b00      	cmp	r3, #0
100087bc:	d00e      	beq.n	100087dc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
100087be:	687b      	ldr	r3, [r7, #4]
100087c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
100087c4:	685b      	ldr	r3, [r3, #4]
100087c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
100087c8:	687b      	ldr	r3, [r7, #4]
100087ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
100087ce:	4618      	mov	r0, r3
100087d0:	f002 fb7a 	bl	1000aec8 <USBD_static_free>
    pdev->pClassData = NULL;
100087d4:	687b      	ldr	r3, [r7, #4]
100087d6:	2200      	movs	r2, #0
100087d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
100087dc:	2300      	movs	r3, #0
}
100087de:	4618      	mov	r0, r3
100087e0:	3708      	adds	r7, #8
100087e2:	46bd      	mov	sp, r7
100087e4:	bd80      	pop	{r7, pc}
	...

100087e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
100087e8:	b580      	push	{r7, lr}
100087ea:	b086      	sub	sp, #24
100087ec:	af00      	add	r7, sp, #0
100087ee:	6078      	str	r0, [r7, #4]
100087f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
100087f2:	687b      	ldr	r3, [r7, #4]
100087f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
100087f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
100087fa:	2300      	movs	r3, #0
100087fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
100087fe:	2300      	movs	r3, #0
10008800:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
10008802:	2300      	movs	r3, #0
10008804:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
10008806:	693b      	ldr	r3, [r7, #16]
10008808:	2b00      	cmp	r3, #0
1000880a:	d101      	bne.n	10008810 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
1000880c:	2303      	movs	r3, #3
1000880e:	e0af      	b.n	10008970 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
10008810:	683b      	ldr	r3, [r7, #0]
10008812:	781b      	ldrb	r3, [r3, #0]
10008814:	f003 0360 	and.w	r3, r3, #96	; 0x60
10008818:	2b00      	cmp	r3, #0
1000881a:	d03f      	beq.n	1000889c <USBD_CDC_Setup+0xb4>
1000881c:	2b20      	cmp	r3, #32
1000881e:	f040 809f 	bne.w	10008960 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
10008822:	683b      	ldr	r3, [r7, #0]
10008824:	88db      	ldrh	r3, [r3, #6]
10008826:	2b00      	cmp	r3, #0
10008828:	d02e      	beq.n	10008888 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
1000882a:	683b      	ldr	r3, [r7, #0]
1000882c:	781b      	ldrb	r3, [r3, #0]
1000882e:	b25b      	sxtb	r3, r3
10008830:	2b00      	cmp	r3, #0
10008832:	da16      	bge.n	10008862 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
10008834:	687b      	ldr	r3, [r7, #4]
10008836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
1000883a:	689b      	ldr	r3, [r3, #8]
1000883c:	683a      	ldr	r2, [r7, #0]
1000883e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
10008840:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
10008842:	683a      	ldr	r2, [r7, #0]
10008844:	88d2      	ldrh	r2, [r2, #6]
10008846:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
10008848:	683b      	ldr	r3, [r7, #0]
1000884a:	88db      	ldrh	r3, [r3, #6]
1000884c:	2b07      	cmp	r3, #7
1000884e:	bf28      	it	cs
10008850:	2307      	movcs	r3, #7
10008852:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
10008854:	693b      	ldr	r3, [r7, #16]
10008856:	89fa      	ldrh	r2, [r7, #14]
10008858:	4619      	mov	r1, r3
1000885a:	6878      	ldr	r0, [r7, #4]
1000885c:	f001 fb19 	bl	10009e92 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
10008860:	e085      	b.n	1000896e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
10008862:	683b      	ldr	r3, [r7, #0]
10008864:	785a      	ldrb	r2, [r3, #1]
10008866:	693b      	ldr	r3, [r7, #16]
10008868:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
1000886c:	683b      	ldr	r3, [r7, #0]
1000886e:	88db      	ldrh	r3, [r3, #6]
10008870:	b2da      	uxtb	r2, r3
10008872:	693b      	ldr	r3, [r7, #16]
10008874:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
10008878:	6939      	ldr	r1, [r7, #16]
1000887a:	683b      	ldr	r3, [r7, #0]
1000887c:	88db      	ldrh	r3, [r3, #6]
1000887e:	461a      	mov	r2, r3
10008880:	6878      	ldr	r0, [r7, #4]
10008882:	f001 fb32 	bl	10009eea <USBD_CtlPrepareRx>
      break;
10008886:	e072      	b.n	1000896e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
10008888:	687b      	ldr	r3, [r7, #4]
1000888a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
1000888e:	689b      	ldr	r3, [r3, #8]
10008890:	683a      	ldr	r2, [r7, #0]
10008892:	7850      	ldrb	r0, [r2, #1]
10008894:	2200      	movs	r2, #0
10008896:	6839      	ldr	r1, [r7, #0]
10008898:	4798      	blx	r3
      break;
1000889a:	e068      	b.n	1000896e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
1000889c:	683b      	ldr	r3, [r7, #0]
1000889e:	785b      	ldrb	r3, [r3, #1]
100088a0:	2b0b      	cmp	r3, #11
100088a2:	d852      	bhi.n	1000894a <USBD_CDC_Setup+0x162>
100088a4:	a201      	add	r2, pc, #4	; (adr r2, 100088ac <USBD_CDC_Setup+0xc4>)
100088a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100088aa:	bf00      	nop
100088ac:	100088dd 	.word	0x100088dd
100088b0:	10008959 	.word	0x10008959
100088b4:	1000894b 	.word	0x1000894b
100088b8:	1000894b 	.word	0x1000894b
100088bc:	1000894b 	.word	0x1000894b
100088c0:	1000894b 	.word	0x1000894b
100088c4:	1000894b 	.word	0x1000894b
100088c8:	1000894b 	.word	0x1000894b
100088cc:	1000894b 	.word	0x1000894b
100088d0:	1000894b 	.word	0x1000894b
100088d4:	10008907 	.word	0x10008907
100088d8:	10008931 	.word	0x10008931
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
100088dc:	687b      	ldr	r3, [r7, #4]
100088de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
100088e2:	b2db      	uxtb	r3, r3
100088e4:	2b03      	cmp	r3, #3
100088e6:	d107      	bne.n	100088f8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
100088e8:	f107 030a 	add.w	r3, r7, #10
100088ec:	2202      	movs	r2, #2
100088ee:	4619      	mov	r1, r3
100088f0:	6878      	ldr	r0, [r7, #4]
100088f2:	f001 face 	bl	10009e92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
100088f6:	e032      	b.n	1000895e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
100088f8:	6839      	ldr	r1, [r7, #0]
100088fa:	6878      	ldr	r0, [r7, #4]
100088fc:	f001 fa58 	bl	10009db0 <USBD_CtlError>
            ret = USBD_FAIL;
10008900:	2303      	movs	r3, #3
10008902:	75fb      	strb	r3, [r7, #23]
          break;
10008904:	e02b      	b.n	1000895e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
10008906:	687b      	ldr	r3, [r7, #4]
10008908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
1000890c:	b2db      	uxtb	r3, r3
1000890e:	2b03      	cmp	r3, #3
10008910:	d107      	bne.n	10008922 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
10008912:	f107 030d 	add.w	r3, r7, #13
10008916:	2201      	movs	r2, #1
10008918:	4619      	mov	r1, r3
1000891a:	6878      	ldr	r0, [r7, #4]
1000891c:	f001 fab9 	bl	10009e92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
10008920:	e01d      	b.n	1000895e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
10008922:	6839      	ldr	r1, [r7, #0]
10008924:	6878      	ldr	r0, [r7, #4]
10008926:	f001 fa43 	bl	10009db0 <USBD_CtlError>
            ret = USBD_FAIL;
1000892a:	2303      	movs	r3, #3
1000892c:	75fb      	strb	r3, [r7, #23]
          break;
1000892e:	e016      	b.n	1000895e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
10008930:	687b      	ldr	r3, [r7, #4]
10008932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10008936:	b2db      	uxtb	r3, r3
10008938:	2b03      	cmp	r3, #3
1000893a:	d00f      	beq.n	1000895c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
1000893c:	6839      	ldr	r1, [r7, #0]
1000893e:	6878      	ldr	r0, [r7, #4]
10008940:	f001 fa36 	bl	10009db0 <USBD_CtlError>
            ret = USBD_FAIL;
10008944:	2303      	movs	r3, #3
10008946:	75fb      	strb	r3, [r7, #23]
          }
          break;
10008948:	e008      	b.n	1000895c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
1000894a:	6839      	ldr	r1, [r7, #0]
1000894c:	6878      	ldr	r0, [r7, #4]
1000894e:	f001 fa2f 	bl	10009db0 <USBD_CtlError>
          ret = USBD_FAIL;
10008952:	2303      	movs	r3, #3
10008954:	75fb      	strb	r3, [r7, #23]
          break;
10008956:	e002      	b.n	1000895e <USBD_CDC_Setup+0x176>
          break;
10008958:	bf00      	nop
1000895a:	e008      	b.n	1000896e <USBD_CDC_Setup+0x186>
          break;
1000895c:	bf00      	nop
      }
      break;
1000895e:	e006      	b.n	1000896e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
10008960:	6839      	ldr	r1, [r7, #0]
10008962:	6878      	ldr	r0, [r7, #4]
10008964:	f001 fa24 	bl	10009db0 <USBD_CtlError>
      ret = USBD_FAIL;
10008968:	2303      	movs	r3, #3
1000896a:	75fb      	strb	r3, [r7, #23]
      break;
1000896c:	bf00      	nop
  }

  return (uint8_t)ret;
1000896e:	7dfb      	ldrb	r3, [r7, #23]
}
10008970:	4618      	mov	r0, r3
10008972:	3718      	adds	r7, #24
10008974:	46bd      	mov	sp, r7
10008976:	bd80      	pop	{r7, pc}

10008978 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
10008978:	b580      	push	{r7, lr}
1000897a:	b084      	sub	sp, #16
1000897c:	af00      	add	r7, sp, #0
1000897e:	6078      	str	r0, [r7, #4]
10008980:	460b      	mov	r3, r1
10008982:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
10008984:	687b      	ldr	r3, [r7, #4]
10008986:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
1000898a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
1000898c:	687b      	ldr	r3, [r7, #4]
1000898e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
10008992:	2b00      	cmp	r3, #0
10008994:	d101      	bne.n	1000899a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
10008996:	2303      	movs	r3, #3
10008998:	e04f      	b.n	10008a3a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
1000899a:	687b      	ldr	r3, [r7, #4]
1000899c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
100089a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
100089a2:	78fa      	ldrb	r2, [r7, #3]
100089a4:	6879      	ldr	r1, [r7, #4]
100089a6:	4613      	mov	r3, r2
100089a8:	009b      	lsls	r3, r3, #2
100089aa:	4413      	add	r3, r2
100089ac:	009b      	lsls	r3, r3, #2
100089ae:	440b      	add	r3, r1
100089b0:	3318      	adds	r3, #24
100089b2:	681b      	ldr	r3, [r3, #0]
100089b4:	2b00      	cmp	r3, #0
100089b6:	d029      	beq.n	10008a0c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
100089b8:	78fa      	ldrb	r2, [r7, #3]
100089ba:	6879      	ldr	r1, [r7, #4]
100089bc:	4613      	mov	r3, r2
100089be:	009b      	lsls	r3, r3, #2
100089c0:	4413      	add	r3, r2
100089c2:	009b      	lsls	r3, r3, #2
100089c4:	440b      	add	r3, r1
100089c6:	3318      	adds	r3, #24
100089c8:	681a      	ldr	r2, [r3, #0]
100089ca:	78f9      	ldrb	r1, [r7, #3]
100089cc:	68f8      	ldr	r0, [r7, #12]
100089ce:	460b      	mov	r3, r1
100089d0:	00db      	lsls	r3, r3, #3
100089d2:	1a5b      	subs	r3, r3, r1
100089d4:	009b      	lsls	r3, r3, #2
100089d6:	4403      	add	r3, r0
100089d8:	3344      	adds	r3, #68	; 0x44
100089da:	681b      	ldr	r3, [r3, #0]
100089dc:	fbb2 f1f3 	udiv	r1, r2, r3
100089e0:	fb03 f301 	mul.w	r3, r3, r1
100089e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
100089e6:	2b00      	cmp	r3, #0
100089e8:	d110      	bne.n	10008a0c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
100089ea:	78fa      	ldrb	r2, [r7, #3]
100089ec:	6879      	ldr	r1, [r7, #4]
100089ee:	4613      	mov	r3, r2
100089f0:	009b      	lsls	r3, r3, #2
100089f2:	4413      	add	r3, r2
100089f4:	009b      	lsls	r3, r3, #2
100089f6:	440b      	add	r3, r1
100089f8:	3318      	adds	r3, #24
100089fa:	2200      	movs	r2, #0
100089fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
100089fe:	78f9      	ldrb	r1, [r7, #3]
10008a00:	2300      	movs	r3, #0
10008a02:	2200      	movs	r2, #0
10008a04:	6878      	ldr	r0, [r7, #4]
10008a06:	f002 f9fc 	bl	1000ae02 <USBD_LL_Transmit>
10008a0a:	e015      	b.n	10008a38 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
10008a0c:	68bb      	ldr	r3, [r7, #8]
10008a0e:	2200      	movs	r2, #0
10008a10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
10008a14:	687b      	ldr	r3, [r7, #4]
10008a16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
10008a1a:	691b      	ldr	r3, [r3, #16]
10008a1c:	2b00      	cmp	r3, #0
10008a1e:	d00b      	beq.n	10008a38 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
10008a20:	687b      	ldr	r3, [r7, #4]
10008a22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
10008a26:	691b      	ldr	r3, [r3, #16]
10008a28:	68ba      	ldr	r2, [r7, #8]
10008a2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
10008a2e:	68ba      	ldr	r2, [r7, #8]
10008a30:	f502 7104 	add.w	r1, r2, #528	; 0x210
10008a34:	78fa      	ldrb	r2, [r7, #3]
10008a36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
10008a38:	2300      	movs	r3, #0
}
10008a3a:	4618      	mov	r0, r3
10008a3c:	3710      	adds	r7, #16
10008a3e:	46bd      	mov	sp, r7
10008a40:	bd80      	pop	{r7, pc}

10008a42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
10008a42:	b580      	push	{r7, lr}
10008a44:	b084      	sub	sp, #16
10008a46:	af00      	add	r7, sp, #0
10008a48:	6078      	str	r0, [r7, #4]
10008a4a:	460b      	mov	r3, r1
10008a4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
10008a4e:	687b      	ldr	r3, [r7, #4]
10008a50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
10008a54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
10008a56:	687b      	ldr	r3, [r7, #4]
10008a58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
10008a5c:	2b00      	cmp	r3, #0
10008a5e:	d101      	bne.n	10008a64 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
10008a60:	2303      	movs	r3, #3
10008a62:	e015      	b.n	10008a90 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
10008a64:	78fb      	ldrb	r3, [r7, #3]
10008a66:	4619      	mov	r1, r3
10008a68:	6878      	ldr	r0, [r7, #4]
10008a6a:	f002 fa0c 	bl	1000ae86 <USBD_LL_GetRxDataSize>
10008a6e:	4602      	mov	r2, r0
10008a70:	68fb      	ldr	r3, [r7, #12]
10008a72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
10008a76:	687b      	ldr	r3, [r7, #4]
10008a78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
10008a7c:	68db      	ldr	r3, [r3, #12]
10008a7e:	68fa      	ldr	r2, [r7, #12]
10008a80:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
10008a84:	68fa      	ldr	r2, [r7, #12]
10008a86:	f502 7203 	add.w	r2, r2, #524	; 0x20c
10008a8a:	4611      	mov	r1, r2
10008a8c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
10008a8e:	2300      	movs	r3, #0
}
10008a90:	4618      	mov	r0, r3
10008a92:	3710      	adds	r7, #16
10008a94:	46bd      	mov	sp, r7
10008a96:	bd80      	pop	{r7, pc}

10008a98 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
10008a98:	b580      	push	{r7, lr}
10008a9a:	b084      	sub	sp, #16
10008a9c:	af00      	add	r7, sp, #0
10008a9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
10008aa0:	687b      	ldr	r3, [r7, #4]
10008aa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
10008aa6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
10008aa8:	68fb      	ldr	r3, [r7, #12]
10008aaa:	2b00      	cmp	r3, #0
10008aac:	d101      	bne.n	10008ab2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
10008aae:	2303      	movs	r3, #3
10008ab0:	e01b      	b.n	10008aea <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
10008ab2:	687b      	ldr	r3, [r7, #4]
10008ab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
10008ab8:	2b00      	cmp	r3, #0
10008aba:	d015      	beq.n	10008ae8 <USBD_CDC_EP0_RxReady+0x50>
10008abc:	68fb      	ldr	r3, [r7, #12]
10008abe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
10008ac2:	2bff      	cmp	r3, #255	; 0xff
10008ac4:	d010      	beq.n	10008ae8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
10008ac6:	687b      	ldr	r3, [r7, #4]
10008ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
10008acc:	689b      	ldr	r3, [r3, #8]
10008ace:	68fa      	ldr	r2, [r7, #12]
10008ad0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
10008ad4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
10008ad6:	68fa      	ldr	r2, [r7, #12]
10008ad8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
10008adc:	b292      	uxth	r2, r2
10008ade:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
10008ae0:	68fb      	ldr	r3, [r7, #12]
10008ae2:	22ff      	movs	r2, #255	; 0xff
10008ae4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
10008ae8:	2300      	movs	r3, #0
}
10008aea:	4618      	mov	r0, r3
10008aec:	3710      	adds	r7, #16
10008aee:	46bd      	mov	sp, r7
10008af0:	bd80      	pop	{r7, pc}
	...

10008af4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
10008af4:	b480      	push	{r7}
10008af6:	b083      	sub	sp, #12
10008af8:	af00      	add	r7, sp, #0
10008afa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
10008afc:	687b      	ldr	r3, [r7, #4]
10008afe:	2243      	movs	r2, #67	; 0x43
10008b00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
10008b02:	4b03      	ldr	r3, [pc, #12]	; (10008b10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
10008b04:	4618      	mov	r0, r3
10008b06:	370c      	adds	r7, #12
10008b08:	46bd      	mov	sp, r7
10008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
10008b0e:	4770      	bx	lr
10008b10:	20000094 	.word	0x20000094

10008b14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
10008b14:	b480      	push	{r7}
10008b16:	b083      	sub	sp, #12
10008b18:	af00      	add	r7, sp, #0
10008b1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
10008b1c:	687b      	ldr	r3, [r7, #4]
10008b1e:	2243      	movs	r2, #67	; 0x43
10008b20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
10008b22:	4b03      	ldr	r3, [pc, #12]	; (10008b30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
10008b24:	4618      	mov	r0, r3
10008b26:	370c      	adds	r7, #12
10008b28:	46bd      	mov	sp, r7
10008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
10008b2e:	4770      	bx	lr
10008b30:	20000050 	.word	0x20000050

10008b34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
10008b34:	b480      	push	{r7}
10008b36:	b083      	sub	sp, #12
10008b38:	af00      	add	r7, sp, #0
10008b3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
10008b3c:	687b      	ldr	r3, [r7, #4]
10008b3e:	2243      	movs	r2, #67	; 0x43
10008b40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
10008b42:	4b03      	ldr	r3, [pc, #12]	; (10008b50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
10008b44:	4618      	mov	r0, r3
10008b46:	370c      	adds	r7, #12
10008b48:	46bd      	mov	sp, r7
10008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
10008b4e:	4770      	bx	lr
10008b50:	200000d8 	.word	0x200000d8

10008b54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
10008b54:	b480      	push	{r7}
10008b56:	b083      	sub	sp, #12
10008b58:	af00      	add	r7, sp, #0
10008b5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
10008b5c:	687b      	ldr	r3, [r7, #4]
10008b5e:	220a      	movs	r2, #10
10008b60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
10008b62:	4b03      	ldr	r3, [pc, #12]	; (10008b70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
10008b64:	4618      	mov	r0, r3
10008b66:	370c      	adds	r7, #12
10008b68:	46bd      	mov	sp, r7
10008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
10008b6e:	4770      	bx	lr
10008b70:	2000000c 	.word	0x2000000c

10008b74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
10008b74:	b480      	push	{r7}
10008b76:	b083      	sub	sp, #12
10008b78:	af00      	add	r7, sp, #0
10008b7a:	6078      	str	r0, [r7, #4]
10008b7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
10008b7e:	683b      	ldr	r3, [r7, #0]
10008b80:	2b00      	cmp	r3, #0
10008b82:	d101      	bne.n	10008b88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
10008b84:	2303      	movs	r3, #3
10008b86:	e004      	b.n	10008b92 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
10008b88:	687b      	ldr	r3, [r7, #4]
10008b8a:	683a      	ldr	r2, [r7, #0]
10008b8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
10008b90:	2300      	movs	r3, #0
}
10008b92:	4618      	mov	r0, r3
10008b94:	370c      	adds	r7, #12
10008b96:	46bd      	mov	sp, r7
10008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
10008b9c:	4770      	bx	lr

10008b9e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
10008b9e:	b480      	push	{r7}
10008ba0:	b087      	sub	sp, #28
10008ba2:	af00      	add	r7, sp, #0
10008ba4:	60f8      	str	r0, [r7, #12]
10008ba6:	60b9      	str	r1, [r7, #8]
10008ba8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
10008baa:	68fb      	ldr	r3, [r7, #12]
10008bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
10008bb0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
10008bb2:	697b      	ldr	r3, [r7, #20]
10008bb4:	2b00      	cmp	r3, #0
10008bb6:	d101      	bne.n	10008bbc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
10008bb8:	2303      	movs	r3, #3
10008bba:	e008      	b.n	10008bce <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
10008bbc:	697b      	ldr	r3, [r7, #20]
10008bbe:	68ba      	ldr	r2, [r7, #8]
10008bc0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
10008bc4:	697b      	ldr	r3, [r7, #20]
10008bc6:	687a      	ldr	r2, [r7, #4]
10008bc8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
10008bcc:	2300      	movs	r3, #0
}
10008bce:	4618      	mov	r0, r3
10008bd0:	371c      	adds	r7, #28
10008bd2:	46bd      	mov	sp, r7
10008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
10008bd8:	4770      	bx	lr

10008bda <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
10008bda:	b480      	push	{r7}
10008bdc:	b085      	sub	sp, #20
10008bde:	af00      	add	r7, sp, #0
10008be0:	6078      	str	r0, [r7, #4]
10008be2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
10008be4:	687b      	ldr	r3, [r7, #4]
10008be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
10008bea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
10008bec:	68fb      	ldr	r3, [r7, #12]
10008bee:	2b00      	cmp	r3, #0
10008bf0:	d101      	bne.n	10008bf6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
10008bf2:	2303      	movs	r3, #3
10008bf4:	e004      	b.n	10008c00 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
10008bf6:	68fb      	ldr	r3, [r7, #12]
10008bf8:	683a      	ldr	r2, [r7, #0]
10008bfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
10008bfe:	2300      	movs	r3, #0
}
10008c00:	4618      	mov	r0, r3
10008c02:	3714      	adds	r7, #20
10008c04:	46bd      	mov	sp, r7
10008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
10008c0a:	4770      	bx	lr

10008c0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
10008c0c:	b580      	push	{r7, lr}
10008c0e:	b084      	sub	sp, #16
10008c10:	af00      	add	r7, sp, #0
10008c12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
10008c14:	687b      	ldr	r3, [r7, #4]
10008c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
10008c1a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
10008c1c:	2301      	movs	r3, #1
10008c1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
10008c20:	687b      	ldr	r3, [r7, #4]
10008c22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
10008c26:	2b00      	cmp	r3, #0
10008c28:	d101      	bne.n	10008c2e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
10008c2a:	2303      	movs	r3, #3
10008c2c:	e01a      	b.n	10008c64 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
10008c2e:	68bb      	ldr	r3, [r7, #8]
10008c30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
10008c34:	2b00      	cmp	r3, #0
10008c36:	d114      	bne.n	10008c62 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
10008c38:	68bb      	ldr	r3, [r7, #8]
10008c3a:	2201      	movs	r2, #1
10008c3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
10008c40:	68bb      	ldr	r3, [r7, #8]
10008c42:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
10008c46:	687b      	ldr	r3, [r7, #4]
10008c48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
10008c4a:	68bb      	ldr	r3, [r7, #8]
10008c4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
10008c50:	68bb      	ldr	r3, [r7, #8]
10008c52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
10008c56:	2181      	movs	r1, #129	; 0x81
10008c58:	6878      	ldr	r0, [r7, #4]
10008c5a:	f002 f8d2 	bl	1000ae02 <USBD_LL_Transmit>

    ret = USBD_OK;
10008c5e:	2300      	movs	r3, #0
10008c60:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
10008c62:	7bfb      	ldrb	r3, [r7, #15]
}
10008c64:	4618      	mov	r0, r3
10008c66:	3710      	adds	r7, #16
10008c68:	46bd      	mov	sp, r7
10008c6a:	bd80      	pop	{r7, pc}

10008c6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
10008c6c:	b580      	push	{r7, lr}
10008c6e:	b084      	sub	sp, #16
10008c70:	af00      	add	r7, sp, #0
10008c72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
10008c74:	687b      	ldr	r3, [r7, #4]
10008c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
10008c7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
10008c7c:	687b      	ldr	r3, [r7, #4]
10008c7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
10008c82:	2b00      	cmp	r3, #0
10008c84:	d101      	bne.n	10008c8a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
10008c86:	2303      	movs	r3, #3
10008c88:	e016      	b.n	10008cb8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
10008c8a:	687b      	ldr	r3, [r7, #4]
10008c8c:	7c1b      	ldrb	r3, [r3, #16]
10008c8e:	2b00      	cmp	r3, #0
10008c90:	d109      	bne.n	10008ca6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
10008c92:	68fb      	ldr	r3, [r7, #12]
10008c94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
10008c98:	f44f 7300 	mov.w	r3, #512	; 0x200
10008c9c:	2101      	movs	r1, #1
10008c9e:	6878      	ldr	r0, [r7, #4]
10008ca0:	f002 f8d0 	bl	1000ae44 <USBD_LL_PrepareReceive>
10008ca4:	e007      	b.n	10008cb6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
10008ca6:	68fb      	ldr	r3, [r7, #12]
10008ca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
10008cac:	2340      	movs	r3, #64	; 0x40
10008cae:	2101      	movs	r1, #1
10008cb0:	6878      	ldr	r0, [r7, #4]
10008cb2:	f002 f8c7 	bl	1000ae44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
10008cb6:	2300      	movs	r3, #0
}
10008cb8:	4618      	mov	r0, r3
10008cba:	3710      	adds	r7, #16
10008cbc:	46bd      	mov	sp, r7
10008cbe:	bd80      	pop	{r7, pc}

10008cc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
10008cc0:	b580      	push	{r7, lr}
10008cc2:	b086      	sub	sp, #24
10008cc4:	af00      	add	r7, sp, #0
10008cc6:	60f8      	str	r0, [r7, #12]
10008cc8:	60b9      	str	r1, [r7, #8]
10008cca:	4613      	mov	r3, r2
10008ccc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
10008cce:	68fb      	ldr	r3, [r7, #12]
10008cd0:	2b00      	cmp	r3, #0
10008cd2:	d101      	bne.n	10008cd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
10008cd4:	2303      	movs	r3, #3
10008cd6:	e01f      	b.n	10008d18 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
10008cd8:	68fb      	ldr	r3, [r7, #12]
10008cda:	2200      	movs	r2, #0
10008cdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
10008ce0:	68fb      	ldr	r3, [r7, #12]
10008ce2:	2200      	movs	r2, #0
10008ce4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
10008ce8:	68fb      	ldr	r3, [r7, #12]
10008cea:	2200      	movs	r2, #0
10008cec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
10008cf0:	68bb      	ldr	r3, [r7, #8]
10008cf2:	2b00      	cmp	r3, #0
10008cf4:	d003      	beq.n	10008cfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
10008cf6:	68fb      	ldr	r3, [r7, #12]
10008cf8:	68ba      	ldr	r2, [r7, #8]
10008cfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
10008cfe:	68fb      	ldr	r3, [r7, #12]
10008d00:	2201      	movs	r2, #1
10008d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
10008d06:	68fb      	ldr	r3, [r7, #12]
10008d08:	79fa      	ldrb	r2, [r7, #7]
10008d0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
10008d0c:	68f8      	ldr	r0, [r7, #12]
10008d0e:	f001 ff43 	bl	1000ab98 <USBD_LL_Init>
10008d12:	4603      	mov	r3, r0
10008d14:	75fb      	strb	r3, [r7, #23]

  return ret;
10008d16:	7dfb      	ldrb	r3, [r7, #23]
}
10008d18:	4618      	mov	r0, r3
10008d1a:	3718      	adds	r7, #24
10008d1c:	46bd      	mov	sp, r7
10008d1e:	bd80      	pop	{r7, pc}

10008d20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
10008d20:	b580      	push	{r7, lr}
10008d22:	b084      	sub	sp, #16
10008d24:	af00      	add	r7, sp, #0
10008d26:	6078      	str	r0, [r7, #4]
10008d28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
10008d2a:	2300      	movs	r3, #0
10008d2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
10008d2e:	683b      	ldr	r3, [r7, #0]
10008d30:	2b00      	cmp	r3, #0
10008d32:	d101      	bne.n	10008d38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
10008d34:	2303      	movs	r3, #3
10008d36:	e016      	b.n	10008d66 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
10008d38:	687b      	ldr	r3, [r7, #4]
10008d3a:	683a      	ldr	r2, [r7, #0]
10008d3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
10008d40:	687b      	ldr	r3, [r7, #4]
10008d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10008d48:	2b00      	cmp	r3, #0
10008d4a:	d00b      	beq.n	10008d64 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
10008d4c:	687b      	ldr	r3, [r7, #4]
10008d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10008d54:	f107 020e 	add.w	r2, r7, #14
10008d58:	4610      	mov	r0, r2
10008d5a:	4798      	blx	r3
10008d5c:	4602      	mov	r2, r0
10008d5e:	687b      	ldr	r3, [r7, #4]
10008d60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
10008d64:	2300      	movs	r3, #0
}
10008d66:	4618      	mov	r0, r3
10008d68:	3710      	adds	r7, #16
10008d6a:	46bd      	mov	sp, r7
10008d6c:	bd80      	pop	{r7, pc}

10008d6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
10008d6e:	b580      	push	{r7, lr}
10008d70:	b082      	sub	sp, #8
10008d72:	af00      	add	r7, sp, #0
10008d74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
10008d76:	6878      	ldr	r0, [r7, #4]
10008d78:	f001 ff5a 	bl	1000ac30 <USBD_LL_Start>
10008d7c:	4603      	mov	r3, r0
}
10008d7e:	4618      	mov	r0, r3
10008d80:	3708      	adds	r7, #8
10008d82:	46bd      	mov	sp, r7
10008d84:	bd80      	pop	{r7, pc}

10008d86 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
10008d86:	b480      	push	{r7}
10008d88:	b083      	sub	sp, #12
10008d8a:	af00      	add	r7, sp, #0
10008d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
10008d8e:	2300      	movs	r3, #0
}
10008d90:	4618      	mov	r0, r3
10008d92:	370c      	adds	r7, #12
10008d94:	46bd      	mov	sp, r7
10008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
10008d9a:	4770      	bx	lr

10008d9c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
10008d9c:	b580      	push	{r7, lr}
10008d9e:	b084      	sub	sp, #16
10008da0:	af00      	add	r7, sp, #0
10008da2:	6078      	str	r0, [r7, #4]
10008da4:	460b      	mov	r3, r1
10008da6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
10008da8:	2303      	movs	r3, #3
10008daa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
10008dac:	687b      	ldr	r3, [r7, #4]
10008dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10008db2:	2b00      	cmp	r3, #0
10008db4:	d009      	beq.n	10008dca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
10008db6:	687b      	ldr	r3, [r7, #4]
10008db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10008dbc:	681b      	ldr	r3, [r3, #0]
10008dbe:	78fa      	ldrb	r2, [r7, #3]
10008dc0:	4611      	mov	r1, r2
10008dc2:	6878      	ldr	r0, [r7, #4]
10008dc4:	4798      	blx	r3
10008dc6:	4603      	mov	r3, r0
10008dc8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
10008dca:	7bfb      	ldrb	r3, [r7, #15]
}
10008dcc:	4618      	mov	r0, r3
10008dce:	3710      	adds	r7, #16
10008dd0:	46bd      	mov	sp, r7
10008dd2:	bd80      	pop	{r7, pc}

10008dd4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
10008dd4:	b580      	push	{r7, lr}
10008dd6:	b082      	sub	sp, #8
10008dd8:	af00      	add	r7, sp, #0
10008dda:	6078      	str	r0, [r7, #4]
10008ddc:	460b      	mov	r3, r1
10008dde:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
10008de0:	687b      	ldr	r3, [r7, #4]
10008de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10008de6:	2b00      	cmp	r3, #0
10008de8:	d007      	beq.n	10008dfa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
10008dea:	687b      	ldr	r3, [r7, #4]
10008dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10008df0:	685b      	ldr	r3, [r3, #4]
10008df2:	78fa      	ldrb	r2, [r7, #3]
10008df4:	4611      	mov	r1, r2
10008df6:	6878      	ldr	r0, [r7, #4]
10008df8:	4798      	blx	r3
  }

  return USBD_OK;
10008dfa:	2300      	movs	r3, #0
}
10008dfc:	4618      	mov	r0, r3
10008dfe:	3708      	adds	r7, #8
10008e00:	46bd      	mov	sp, r7
10008e02:	bd80      	pop	{r7, pc}

10008e04 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
10008e04:	b580      	push	{r7, lr}
10008e06:	b084      	sub	sp, #16
10008e08:	af00      	add	r7, sp, #0
10008e0a:	6078      	str	r0, [r7, #4]
10008e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
10008e0e:	687b      	ldr	r3, [r7, #4]
10008e10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
10008e14:	6839      	ldr	r1, [r7, #0]
10008e16:	4618      	mov	r0, r3
10008e18:	f000 ff90 	bl	10009d3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
10008e1c:	687b      	ldr	r3, [r7, #4]
10008e1e:	2201      	movs	r2, #1
10008e20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
10008e24:	687b      	ldr	r3, [r7, #4]
10008e26:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
10008e2a:	461a      	mov	r2, r3
10008e2c:	687b      	ldr	r3, [r7, #4]
10008e2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
10008e32:	687b      	ldr	r3, [r7, #4]
10008e34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
10008e38:	f003 031f 	and.w	r3, r3, #31
10008e3c:	2b02      	cmp	r3, #2
10008e3e:	d01a      	beq.n	10008e76 <USBD_LL_SetupStage+0x72>
10008e40:	2b02      	cmp	r3, #2
10008e42:	d822      	bhi.n	10008e8a <USBD_LL_SetupStage+0x86>
10008e44:	2b00      	cmp	r3, #0
10008e46:	d002      	beq.n	10008e4e <USBD_LL_SetupStage+0x4a>
10008e48:	2b01      	cmp	r3, #1
10008e4a:	d00a      	beq.n	10008e62 <USBD_LL_SetupStage+0x5e>
10008e4c:	e01d      	b.n	10008e8a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
10008e4e:	687b      	ldr	r3, [r7, #4]
10008e50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
10008e54:	4619      	mov	r1, r3
10008e56:	6878      	ldr	r0, [r7, #4]
10008e58:	f000 fa62 	bl	10009320 <USBD_StdDevReq>
10008e5c:	4603      	mov	r3, r0
10008e5e:	73fb      	strb	r3, [r7, #15]
      break;
10008e60:	e020      	b.n	10008ea4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
10008e62:	687b      	ldr	r3, [r7, #4]
10008e64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
10008e68:	4619      	mov	r1, r3
10008e6a:	6878      	ldr	r0, [r7, #4]
10008e6c:	f000 fac6 	bl	100093fc <USBD_StdItfReq>
10008e70:	4603      	mov	r3, r0
10008e72:	73fb      	strb	r3, [r7, #15]
      break;
10008e74:	e016      	b.n	10008ea4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
10008e76:	687b      	ldr	r3, [r7, #4]
10008e78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
10008e7c:	4619      	mov	r1, r3
10008e7e:	6878      	ldr	r0, [r7, #4]
10008e80:	f000 fb05 	bl	1000948e <USBD_StdEPReq>
10008e84:	4603      	mov	r3, r0
10008e86:	73fb      	strb	r3, [r7, #15]
      break;
10008e88:	e00c      	b.n	10008ea4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
10008e8a:	687b      	ldr	r3, [r7, #4]
10008e8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
10008e90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
10008e94:	b2db      	uxtb	r3, r3
10008e96:	4619      	mov	r1, r3
10008e98:	6878      	ldr	r0, [r7, #4]
10008e9a:	f001 ff29 	bl	1000acf0 <USBD_LL_StallEP>
10008e9e:	4603      	mov	r3, r0
10008ea0:	73fb      	strb	r3, [r7, #15]
      break;
10008ea2:	bf00      	nop
  }

  return ret;
10008ea4:	7bfb      	ldrb	r3, [r7, #15]
}
10008ea6:	4618      	mov	r0, r3
10008ea8:	3710      	adds	r7, #16
10008eaa:	46bd      	mov	sp, r7
10008eac:	bd80      	pop	{r7, pc}

10008eae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
10008eae:	b580      	push	{r7, lr}
10008eb0:	b086      	sub	sp, #24
10008eb2:	af00      	add	r7, sp, #0
10008eb4:	60f8      	str	r0, [r7, #12]
10008eb6:	460b      	mov	r3, r1
10008eb8:	607a      	str	r2, [r7, #4]
10008eba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
10008ebc:	7afb      	ldrb	r3, [r7, #11]
10008ebe:	2b00      	cmp	r3, #0
10008ec0:	d138      	bne.n	10008f34 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
10008ec2:	68fb      	ldr	r3, [r7, #12]
10008ec4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
10008ec8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
10008eca:	68fb      	ldr	r3, [r7, #12]
10008ecc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
10008ed0:	2b03      	cmp	r3, #3
10008ed2:	d14a      	bne.n	10008f6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
10008ed4:	693b      	ldr	r3, [r7, #16]
10008ed6:	689a      	ldr	r2, [r3, #8]
10008ed8:	693b      	ldr	r3, [r7, #16]
10008eda:	68db      	ldr	r3, [r3, #12]
10008edc:	429a      	cmp	r2, r3
10008ede:	d913      	bls.n	10008f08 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
10008ee0:	693b      	ldr	r3, [r7, #16]
10008ee2:	689a      	ldr	r2, [r3, #8]
10008ee4:	693b      	ldr	r3, [r7, #16]
10008ee6:	68db      	ldr	r3, [r3, #12]
10008ee8:	1ad2      	subs	r2, r2, r3
10008eea:	693b      	ldr	r3, [r7, #16]
10008eec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
10008eee:	693b      	ldr	r3, [r7, #16]
10008ef0:	68da      	ldr	r2, [r3, #12]
10008ef2:	693b      	ldr	r3, [r7, #16]
10008ef4:	689b      	ldr	r3, [r3, #8]
10008ef6:	4293      	cmp	r3, r2
10008ef8:	bf28      	it	cs
10008efa:	4613      	movcs	r3, r2
10008efc:	461a      	mov	r2, r3
10008efe:	6879      	ldr	r1, [r7, #4]
10008f00:	68f8      	ldr	r0, [r7, #12]
10008f02:	f001 f80f 	bl	10009f24 <USBD_CtlContinueRx>
10008f06:	e030      	b.n	10008f6a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
10008f08:	68fb      	ldr	r3, [r7, #12]
10008f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10008f0e:	b2db      	uxtb	r3, r3
10008f10:	2b03      	cmp	r3, #3
10008f12:	d10b      	bne.n	10008f2c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
10008f14:	68fb      	ldr	r3, [r7, #12]
10008f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10008f1a:	691b      	ldr	r3, [r3, #16]
10008f1c:	2b00      	cmp	r3, #0
10008f1e:	d005      	beq.n	10008f2c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
10008f20:	68fb      	ldr	r3, [r7, #12]
10008f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10008f26:	691b      	ldr	r3, [r3, #16]
10008f28:	68f8      	ldr	r0, [r7, #12]
10008f2a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
10008f2c:	68f8      	ldr	r0, [r7, #12]
10008f2e:	f001 f80a 	bl	10009f46 <USBD_CtlSendStatus>
10008f32:	e01a      	b.n	10008f6a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
10008f34:	68fb      	ldr	r3, [r7, #12]
10008f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10008f3a:	b2db      	uxtb	r3, r3
10008f3c:	2b03      	cmp	r3, #3
10008f3e:	d114      	bne.n	10008f6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
10008f40:	68fb      	ldr	r3, [r7, #12]
10008f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10008f46:	699b      	ldr	r3, [r3, #24]
10008f48:	2b00      	cmp	r3, #0
10008f4a:	d00e      	beq.n	10008f6a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
10008f4c:	68fb      	ldr	r3, [r7, #12]
10008f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10008f52:	699b      	ldr	r3, [r3, #24]
10008f54:	7afa      	ldrb	r2, [r7, #11]
10008f56:	4611      	mov	r1, r2
10008f58:	68f8      	ldr	r0, [r7, #12]
10008f5a:	4798      	blx	r3
10008f5c:	4603      	mov	r3, r0
10008f5e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
10008f60:	7dfb      	ldrb	r3, [r7, #23]
10008f62:	2b00      	cmp	r3, #0
10008f64:	d001      	beq.n	10008f6a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
10008f66:	7dfb      	ldrb	r3, [r7, #23]
10008f68:	e000      	b.n	10008f6c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
10008f6a:	2300      	movs	r3, #0
}
10008f6c:	4618      	mov	r0, r3
10008f6e:	3718      	adds	r7, #24
10008f70:	46bd      	mov	sp, r7
10008f72:	bd80      	pop	{r7, pc}

10008f74 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
10008f74:	b580      	push	{r7, lr}
10008f76:	b086      	sub	sp, #24
10008f78:	af00      	add	r7, sp, #0
10008f7a:	60f8      	str	r0, [r7, #12]
10008f7c:	460b      	mov	r3, r1
10008f7e:	607a      	str	r2, [r7, #4]
10008f80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
10008f82:	7afb      	ldrb	r3, [r7, #11]
10008f84:	2b00      	cmp	r3, #0
10008f86:	d16b      	bne.n	10009060 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
10008f88:	68fb      	ldr	r3, [r7, #12]
10008f8a:	3314      	adds	r3, #20
10008f8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
10008f8e:	68fb      	ldr	r3, [r7, #12]
10008f90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
10008f94:	2b02      	cmp	r3, #2
10008f96:	d156      	bne.n	10009046 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
10008f98:	693b      	ldr	r3, [r7, #16]
10008f9a:	689a      	ldr	r2, [r3, #8]
10008f9c:	693b      	ldr	r3, [r7, #16]
10008f9e:	68db      	ldr	r3, [r3, #12]
10008fa0:	429a      	cmp	r2, r3
10008fa2:	d914      	bls.n	10008fce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
10008fa4:	693b      	ldr	r3, [r7, #16]
10008fa6:	689a      	ldr	r2, [r3, #8]
10008fa8:	693b      	ldr	r3, [r7, #16]
10008faa:	68db      	ldr	r3, [r3, #12]
10008fac:	1ad2      	subs	r2, r2, r3
10008fae:	693b      	ldr	r3, [r7, #16]
10008fb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
10008fb2:	693b      	ldr	r3, [r7, #16]
10008fb4:	689b      	ldr	r3, [r3, #8]
10008fb6:	461a      	mov	r2, r3
10008fb8:	6879      	ldr	r1, [r7, #4]
10008fba:	68f8      	ldr	r0, [r7, #12]
10008fbc:	f000 ff84 	bl	10009ec8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
10008fc0:	2300      	movs	r3, #0
10008fc2:	2200      	movs	r2, #0
10008fc4:	2100      	movs	r1, #0
10008fc6:	68f8      	ldr	r0, [r7, #12]
10008fc8:	f001 ff3c 	bl	1000ae44 <USBD_LL_PrepareReceive>
10008fcc:	e03b      	b.n	10009046 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
10008fce:	693b      	ldr	r3, [r7, #16]
10008fd0:	68da      	ldr	r2, [r3, #12]
10008fd2:	693b      	ldr	r3, [r7, #16]
10008fd4:	689b      	ldr	r3, [r3, #8]
10008fd6:	429a      	cmp	r2, r3
10008fd8:	d11c      	bne.n	10009014 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
10008fda:	693b      	ldr	r3, [r7, #16]
10008fdc:	685a      	ldr	r2, [r3, #4]
10008fde:	693b      	ldr	r3, [r7, #16]
10008fe0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
10008fe2:	429a      	cmp	r2, r3
10008fe4:	d316      	bcc.n	10009014 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
10008fe6:	693b      	ldr	r3, [r7, #16]
10008fe8:	685a      	ldr	r2, [r3, #4]
10008fea:	68fb      	ldr	r3, [r7, #12]
10008fec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
10008ff0:	429a      	cmp	r2, r3
10008ff2:	d20f      	bcs.n	10009014 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
10008ff4:	2200      	movs	r2, #0
10008ff6:	2100      	movs	r1, #0
10008ff8:	68f8      	ldr	r0, [r7, #12]
10008ffa:	f000 ff65 	bl	10009ec8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
10008ffe:	68fb      	ldr	r3, [r7, #12]
10009000:	2200      	movs	r2, #0
10009002:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
10009006:	2300      	movs	r3, #0
10009008:	2200      	movs	r2, #0
1000900a:	2100      	movs	r1, #0
1000900c:	68f8      	ldr	r0, [r7, #12]
1000900e:	f001 ff19 	bl	1000ae44 <USBD_LL_PrepareReceive>
10009012:	e018      	b.n	10009046 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
10009014:	68fb      	ldr	r3, [r7, #12]
10009016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
1000901a:	b2db      	uxtb	r3, r3
1000901c:	2b03      	cmp	r3, #3
1000901e:	d10b      	bne.n	10009038 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
10009020:	68fb      	ldr	r3, [r7, #12]
10009022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10009026:	68db      	ldr	r3, [r3, #12]
10009028:	2b00      	cmp	r3, #0
1000902a:	d005      	beq.n	10009038 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
1000902c:	68fb      	ldr	r3, [r7, #12]
1000902e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10009032:	68db      	ldr	r3, [r3, #12]
10009034:	68f8      	ldr	r0, [r7, #12]
10009036:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
10009038:	2180      	movs	r1, #128	; 0x80
1000903a:	68f8      	ldr	r0, [r7, #12]
1000903c:	f001 fe58 	bl	1000acf0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
10009040:	68f8      	ldr	r0, [r7, #12]
10009042:	f000 ff93 	bl	10009f6c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
10009046:	68fb      	ldr	r3, [r7, #12]
10009048:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
1000904c:	2b01      	cmp	r3, #1
1000904e:	d122      	bne.n	10009096 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
10009050:	68f8      	ldr	r0, [r7, #12]
10009052:	f7ff fe98 	bl	10008d86 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
10009056:	68fb      	ldr	r3, [r7, #12]
10009058:	2200      	movs	r2, #0
1000905a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
1000905e:	e01a      	b.n	10009096 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
10009060:	68fb      	ldr	r3, [r7, #12]
10009062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10009066:	b2db      	uxtb	r3, r3
10009068:	2b03      	cmp	r3, #3
1000906a:	d114      	bne.n	10009096 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
1000906c:	68fb      	ldr	r3, [r7, #12]
1000906e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10009072:	695b      	ldr	r3, [r3, #20]
10009074:	2b00      	cmp	r3, #0
10009076:	d00e      	beq.n	10009096 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
10009078:	68fb      	ldr	r3, [r7, #12]
1000907a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
1000907e:	695b      	ldr	r3, [r3, #20]
10009080:	7afa      	ldrb	r2, [r7, #11]
10009082:	4611      	mov	r1, r2
10009084:	68f8      	ldr	r0, [r7, #12]
10009086:	4798      	blx	r3
10009088:	4603      	mov	r3, r0
1000908a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
1000908c:	7dfb      	ldrb	r3, [r7, #23]
1000908e:	2b00      	cmp	r3, #0
10009090:	d001      	beq.n	10009096 <USBD_LL_DataInStage+0x122>
        {
          return ret;
10009092:	7dfb      	ldrb	r3, [r7, #23]
10009094:	e000      	b.n	10009098 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
10009096:	2300      	movs	r3, #0
}
10009098:	4618      	mov	r0, r3
1000909a:	3718      	adds	r7, #24
1000909c:	46bd      	mov	sp, r7
1000909e:	bd80      	pop	{r7, pc}

100090a0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
100090a0:	b580      	push	{r7, lr}
100090a2:	b082      	sub	sp, #8
100090a4:	af00      	add	r7, sp, #0
100090a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
100090a8:	687b      	ldr	r3, [r7, #4]
100090aa:	2201      	movs	r2, #1
100090ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
100090b0:	687b      	ldr	r3, [r7, #4]
100090b2:	2200      	movs	r2, #0
100090b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
100090b8:	687b      	ldr	r3, [r7, #4]
100090ba:	2200      	movs	r2, #0
100090bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
100090be:	687b      	ldr	r3, [r7, #4]
100090c0:	2200      	movs	r2, #0
100090c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
100090c6:	687b      	ldr	r3, [r7, #4]
100090c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100090cc:	2b00      	cmp	r3, #0
100090ce:	d101      	bne.n	100090d4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
100090d0:	2303      	movs	r3, #3
100090d2:	e02f      	b.n	10009134 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
100090d4:	687b      	ldr	r3, [r7, #4]
100090d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
100090da:	2b00      	cmp	r3, #0
100090dc:	d00f      	beq.n	100090fe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
100090de:	687b      	ldr	r3, [r7, #4]
100090e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100090e4:	685b      	ldr	r3, [r3, #4]
100090e6:	2b00      	cmp	r3, #0
100090e8:	d009      	beq.n	100090fe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
100090ea:	687b      	ldr	r3, [r7, #4]
100090ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100090f0:	685b      	ldr	r3, [r3, #4]
100090f2:	687a      	ldr	r2, [r7, #4]
100090f4:	6852      	ldr	r2, [r2, #4]
100090f6:	b2d2      	uxtb	r2, r2
100090f8:	4611      	mov	r1, r2
100090fa:	6878      	ldr	r0, [r7, #4]
100090fc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
100090fe:	2340      	movs	r3, #64	; 0x40
10009100:	2200      	movs	r2, #0
10009102:	2100      	movs	r1, #0
10009104:	6878      	ldr	r0, [r7, #4]
10009106:	f001 fdae 	bl	1000ac66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
1000910a:	687b      	ldr	r3, [r7, #4]
1000910c:	2201      	movs	r2, #1
1000910e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
10009112:	687b      	ldr	r3, [r7, #4]
10009114:	2240      	movs	r2, #64	; 0x40
10009116:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
1000911a:	2340      	movs	r3, #64	; 0x40
1000911c:	2200      	movs	r2, #0
1000911e:	2180      	movs	r1, #128	; 0x80
10009120:	6878      	ldr	r0, [r7, #4]
10009122:	f001 fda0 	bl	1000ac66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
10009126:	687b      	ldr	r3, [r7, #4]
10009128:	2201      	movs	r2, #1
1000912a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
1000912c:	687b      	ldr	r3, [r7, #4]
1000912e:	2240      	movs	r2, #64	; 0x40
10009130:	621a      	str	r2, [r3, #32]

  return USBD_OK;
10009132:	2300      	movs	r3, #0
}
10009134:	4618      	mov	r0, r3
10009136:	3708      	adds	r7, #8
10009138:	46bd      	mov	sp, r7
1000913a:	bd80      	pop	{r7, pc}

1000913c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
1000913c:	b480      	push	{r7}
1000913e:	b083      	sub	sp, #12
10009140:	af00      	add	r7, sp, #0
10009142:	6078      	str	r0, [r7, #4]
10009144:	460b      	mov	r3, r1
10009146:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
10009148:	687b      	ldr	r3, [r7, #4]
1000914a:	78fa      	ldrb	r2, [r7, #3]
1000914c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
1000914e:	2300      	movs	r3, #0
}
10009150:	4618      	mov	r0, r3
10009152:	370c      	adds	r7, #12
10009154:	46bd      	mov	sp, r7
10009156:	f85d 7b04 	ldr.w	r7, [sp], #4
1000915a:	4770      	bx	lr

1000915c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
1000915c:	b480      	push	{r7}
1000915e:	b083      	sub	sp, #12
10009160:	af00      	add	r7, sp, #0
10009162:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
10009164:	687b      	ldr	r3, [r7, #4]
10009166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
1000916a:	b2da      	uxtb	r2, r3
1000916c:	687b      	ldr	r3, [r7, #4]
1000916e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
10009172:	687b      	ldr	r3, [r7, #4]
10009174:	2204      	movs	r2, #4
10009176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
1000917a:	2300      	movs	r3, #0
}
1000917c:	4618      	mov	r0, r3
1000917e:	370c      	adds	r7, #12
10009180:	46bd      	mov	sp, r7
10009182:	f85d 7b04 	ldr.w	r7, [sp], #4
10009186:	4770      	bx	lr

10009188 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
10009188:	b480      	push	{r7}
1000918a:	b083      	sub	sp, #12
1000918c:	af00      	add	r7, sp, #0
1000918e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
10009190:	687b      	ldr	r3, [r7, #4]
10009192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10009196:	b2db      	uxtb	r3, r3
10009198:	2b04      	cmp	r3, #4
1000919a:	d106      	bne.n	100091aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
1000919c:	687b      	ldr	r3, [r7, #4]
1000919e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
100091a2:	b2da      	uxtb	r2, r3
100091a4:	687b      	ldr	r3, [r7, #4]
100091a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
100091aa:	2300      	movs	r3, #0
}
100091ac:	4618      	mov	r0, r3
100091ae:	370c      	adds	r7, #12
100091b0:	46bd      	mov	sp, r7
100091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
100091b6:	4770      	bx	lr

100091b8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
100091b8:	b580      	push	{r7, lr}
100091ba:	b082      	sub	sp, #8
100091bc:	af00      	add	r7, sp, #0
100091be:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
100091c0:	687b      	ldr	r3, [r7, #4]
100091c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100091c6:	2b00      	cmp	r3, #0
100091c8:	d101      	bne.n	100091ce <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
100091ca:	2303      	movs	r3, #3
100091cc:	e012      	b.n	100091f4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
100091ce:	687b      	ldr	r3, [r7, #4]
100091d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
100091d4:	b2db      	uxtb	r3, r3
100091d6:	2b03      	cmp	r3, #3
100091d8:	d10b      	bne.n	100091f2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
100091da:	687b      	ldr	r3, [r7, #4]
100091dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100091e0:	69db      	ldr	r3, [r3, #28]
100091e2:	2b00      	cmp	r3, #0
100091e4:	d005      	beq.n	100091f2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
100091e6:	687b      	ldr	r3, [r7, #4]
100091e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100091ec:	69db      	ldr	r3, [r3, #28]
100091ee:	6878      	ldr	r0, [r7, #4]
100091f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
100091f2:	2300      	movs	r3, #0
}
100091f4:	4618      	mov	r0, r3
100091f6:	3708      	adds	r7, #8
100091f8:	46bd      	mov	sp, r7
100091fa:	bd80      	pop	{r7, pc}

100091fc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
100091fc:	b580      	push	{r7, lr}
100091fe:	b082      	sub	sp, #8
10009200:	af00      	add	r7, sp, #0
10009202:	6078      	str	r0, [r7, #4]
10009204:	460b      	mov	r3, r1
10009206:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
10009208:	687b      	ldr	r3, [r7, #4]
1000920a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
1000920e:	2b00      	cmp	r3, #0
10009210:	d101      	bne.n	10009216 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
10009212:	2303      	movs	r3, #3
10009214:	e014      	b.n	10009240 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
10009216:	687b      	ldr	r3, [r7, #4]
10009218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
1000921c:	b2db      	uxtb	r3, r3
1000921e:	2b03      	cmp	r3, #3
10009220:	d10d      	bne.n	1000923e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
10009222:	687b      	ldr	r3, [r7, #4]
10009224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10009228:	6a1b      	ldr	r3, [r3, #32]
1000922a:	2b00      	cmp	r3, #0
1000922c:	d007      	beq.n	1000923e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
1000922e:	687b      	ldr	r3, [r7, #4]
10009230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10009234:	6a1b      	ldr	r3, [r3, #32]
10009236:	78fa      	ldrb	r2, [r7, #3]
10009238:	4611      	mov	r1, r2
1000923a:	6878      	ldr	r0, [r7, #4]
1000923c:	4798      	blx	r3
    }
  }

  return USBD_OK;
1000923e:	2300      	movs	r3, #0
}
10009240:	4618      	mov	r0, r3
10009242:	3708      	adds	r7, #8
10009244:	46bd      	mov	sp, r7
10009246:	bd80      	pop	{r7, pc}

10009248 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
10009248:	b580      	push	{r7, lr}
1000924a:	b082      	sub	sp, #8
1000924c:	af00      	add	r7, sp, #0
1000924e:	6078      	str	r0, [r7, #4]
10009250:	460b      	mov	r3, r1
10009252:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
10009254:	687b      	ldr	r3, [r7, #4]
10009256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
1000925a:	2b00      	cmp	r3, #0
1000925c:	d101      	bne.n	10009262 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
1000925e:	2303      	movs	r3, #3
10009260:	e014      	b.n	1000928c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
10009262:	687b      	ldr	r3, [r7, #4]
10009264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10009268:	b2db      	uxtb	r3, r3
1000926a:	2b03      	cmp	r3, #3
1000926c:	d10d      	bne.n	1000928a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
1000926e:	687b      	ldr	r3, [r7, #4]
10009270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10009274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009276:	2b00      	cmp	r3, #0
10009278:	d007      	beq.n	1000928a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
1000927a:	687b      	ldr	r3, [r7, #4]
1000927c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10009280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10009282:	78fa      	ldrb	r2, [r7, #3]
10009284:	4611      	mov	r1, r2
10009286:	6878      	ldr	r0, [r7, #4]
10009288:	4798      	blx	r3
    }
  }

  return USBD_OK;
1000928a:	2300      	movs	r3, #0
}
1000928c:	4618      	mov	r0, r3
1000928e:	3708      	adds	r7, #8
10009290:	46bd      	mov	sp, r7
10009292:	bd80      	pop	{r7, pc}

10009294 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
10009294:	b480      	push	{r7}
10009296:	b083      	sub	sp, #12
10009298:	af00      	add	r7, sp, #0
1000929a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
1000929c:	2300      	movs	r3, #0
}
1000929e:	4618      	mov	r0, r3
100092a0:	370c      	adds	r7, #12
100092a2:	46bd      	mov	sp, r7
100092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
100092a8:	4770      	bx	lr

100092aa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
100092aa:	b580      	push	{r7, lr}
100092ac:	b082      	sub	sp, #8
100092ae:	af00      	add	r7, sp, #0
100092b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
100092b2:	687b      	ldr	r3, [r7, #4]
100092b4:	2201      	movs	r2, #1
100092b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
100092ba:	687b      	ldr	r3, [r7, #4]
100092bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100092c0:	2b00      	cmp	r3, #0
100092c2:	d009      	beq.n	100092d8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
100092c4:	687b      	ldr	r3, [r7, #4]
100092c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100092ca:	685b      	ldr	r3, [r3, #4]
100092cc:	687a      	ldr	r2, [r7, #4]
100092ce:	6852      	ldr	r2, [r2, #4]
100092d0:	b2d2      	uxtb	r2, r2
100092d2:	4611      	mov	r1, r2
100092d4:	6878      	ldr	r0, [r7, #4]
100092d6:	4798      	blx	r3
  }

  return USBD_OK;
100092d8:	2300      	movs	r3, #0
}
100092da:	4618      	mov	r0, r3
100092dc:	3708      	adds	r7, #8
100092de:	46bd      	mov	sp, r7
100092e0:	bd80      	pop	{r7, pc}

100092e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
100092e2:	b480      	push	{r7}
100092e4:	b087      	sub	sp, #28
100092e6:	af00      	add	r7, sp, #0
100092e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
100092ea:	687b      	ldr	r3, [r7, #4]
100092ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
100092ee:	697b      	ldr	r3, [r7, #20]
100092f0:	781b      	ldrb	r3, [r3, #0]
100092f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
100092f4:	697b      	ldr	r3, [r7, #20]
100092f6:	3301      	adds	r3, #1
100092f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
100092fa:	697b      	ldr	r3, [r7, #20]
100092fc:	781b      	ldrb	r3, [r3, #0]
100092fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
10009300:	8a3b      	ldrh	r3, [r7, #16]
10009302:	021b      	lsls	r3, r3, #8
10009304:	b21a      	sxth	r2, r3
10009306:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
1000930a:	4313      	orrs	r3, r2
1000930c:	b21b      	sxth	r3, r3
1000930e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
10009310:	89fb      	ldrh	r3, [r7, #14]
}
10009312:	4618      	mov	r0, r3
10009314:	371c      	adds	r7, #28
10009316:	46bd      	mov	sp, r7
10009318:	f85d 7b04 	ldr.w	r7, [sp], #4
1000931c:	4770      	bx	lr
	...

10009320 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
10009320:	b580      	push	{r7, lr}
10009322:	b084      	sub	sp, #16
10009324:	af00      	add	r7, sp, #0
10009326:	6078      	str	r0, [r7, #4]
10009328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
1000932a:	2300      	movs	r3, #0
1000932c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
1000932e:	683b      	ldr	r3, [r7, #0]
10009330:	781b      	ldrb	r3, [r3, #0]
10009332:	f003 0360 	and.w	r3, r3, #96	; 0x60
10009336:	2b40      	cmp	r3, #64	; 0x40
10009338:	d005      	beq.n	10009346 <USBD_StdDevReq+0x26>
1000933a:	2b40      	cmp	r3, #64	; 0x40
1000933c:	d853      	bhi.n	100093e6 <USBD_StdDevReq+0xc6>
1000933e:	2b00      	cmp	r3, #0
10009340:	d00b      	beq.n	1000935a <USBD_StdDevReq+0x3a>
10009342:	2b20      	cmp	r3, #32
10009344:	d14f      	bne.n	100093e6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
10009346:	687b      	ldr	r3, [r7, #4]
10009348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
1000934c:	689b      	ldr	r3, [r3, #8]
1000934e:	6839      	ldr	r1, [r7, #0]
10009350:	6878      	ldr	r0, [r7, #4]
10009352:	4798      	blx	r3
10009354:	4603      	mov	r3, r0
10009356:	73fb      	strb	r3, [r7, #15]
      break;
10009358:	e04a      	b.n	100093f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
1000935a:	683b      	ldr	r3, [r7, #0]
1000935c:	785b      	ldrb	r3, [r3, #1]
1000935e:	2b09      	cmp	r3, #9
10009360:	d83b      	bhi.n	100093da <USBD_StdDevReq+0xba>
10009362:	a201      	add	r2, pc, #4	; (adr r2, 10009368 <USBD_StdDevReq+0x48>)
10009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009368:	100093bd 	.word	0x100093bd
1000936c:	100093d1 	.word	0x100093d1
10009370:	100093db 	.word	0x100093db
10009374:	100093c7 	.word	0x100093c7
10009378:	100093db 	.word	0x100093db
1000937c:	1000939b 	.word	0x1000939b
10009380:	10009391 	.word	0x10009391
10009384:	100093db 	.word	0x100093db
10009388:	100093b3 	.word	0x100093b3
1000938c:	100093a5 	.word	0x100093a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
10009390:	6839      	ldr	r1, [r7, #0]
10009392:	6878      	ldr	r0, [r7, #4]
10009394:	f000 f9de 	bl	10009754 <USBD_GetDescriptor>
          break;
10009398:	e024      	b.n	100093e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
1000939a:	6839      	ldr	r1, [r7, #0]
1000939c:	6878      	ldr	r0, [r7, #4]
1000939e:	f000 fb43 	bl	10009a28 <USBD_SetAddress>
          break;
100093a2:	e01f      	b.n	100093e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
100093a4:	6839      	ldr	r1, [r7, #0]
100093a6:	6878      	ldr	r0, [r7, #4]
100093a8:	f000 fb82 	bl	10009ab0 <USBD_SetConfig>
100093ac:	4603      	mov	r3, r0
100093ae:	73fb      	strb	r3, [r7, #15]
          break;
100093b0:	e018      	b.n	100093e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
100093b2:	6839      	ldr	r1, [r7, #0]
100093b4:	6878      	ldr	r0, [r7, #4]
100093b6:	f000 fc21 	bl	10009bfc <USBD_GetConfig>
          break;
100093ba:	e013      	b.n	100093e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
100093bc:	6839      	ldr	r1, [r7, #0]
100093be:	6878      	ldr	r0, [r7, #4]
100093c0:	f000 fc52 	bl	10009c68 <USBD_GetStatus>
          break;
100093c4:	e00e      	b.n	100093e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
100093c6:	6839      	ldr	r1, [r7, #0]
100093c8:	6878      	ldr	r0, [r7, #4]
100093ca:	f000 fc81 	bl	10009cd0 <USBD_SetFeature>
          break;
100093ce:	e009      	b.n	100093e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
100093d0:	6839      	ldr	r1, [r7, #0]
100093d2:	6878      	ldr	r0, [r7, #4]
100093d4:	f000 fc90 	bl	10009cf8 <USBD_ClrFeature>
          break;
100093d8:	e004      	b.n	100093e4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
100093da:	6839      	ldr	r1, [r7, #0]
100093dc:	6878      	ldr	r0, [r7, #4]
100093de:	f000 fce7 	bl	10009db0 <USBD_CtlError>
          break;
100093e2:	bf00      	nop
      }
      break;
100093e4:	e004      	b.n	100093f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
100093e6:	6839      	ldr	r1, [r7, #0]
100093e8:	6878      	ldr	r0, [r7, #4]
100093ea:	f000 fce1 	bl	10009db0 <USBD_CtlError>
      break;
100093ee:	bf00      	nop
  }

  return ret;
100093f0:	7bfb      	ldrb	r3, [r7, #15]
}
100093f2:	4618      	mov	r0, r3
100093f4:	3710      	adds	r7, #16
100093f6:	46bd      	mov	sp, r7
100093f8:	bd80      	pop	{r7, pc}
100093fa:	bf00      	nop

100093fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
100093fc:	b580      	push	{r7, lr}
100093fe:	b084      	sub	sp, #16
10009400:	af00      	add	r7, sp, #0
10009402:	6078      	str	r0, [r7, #4]
10009404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
10009406:	2300      	movs	r3, #0
10009408:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
1000940a:	683b      	ldr	r3, [r7, #0]
1000940c:	781b      	ldrb	r3, [r3, #0]
1000940e:	f003 0360 	and.w	r3, r3, #96	; 0x60
10009412:	2b40      	cmp	r3, #64	; 0x40
10009414:	d005      	beq.n	10009422 <USBD_StdItfReq+0x26>
10009416:	2b40      	cmp	r3, #64	; 0x40
10009418:	d82f      	bhi.n	1000947a <USBD_StdItfReq+0x7e>
1000941a:	2b00      	cmp	r3, #0
1000941c:	d001      	beq.n	10009422 <USBD_StdItfReq+0x26>
1000941e:	2b20      	cmp	r3, #32
10009420:	d12b      	bne.n	1000947a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
10009422:	687b      	ldr	r3, [r7, #4]
10009424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10009428:	b2db      	uxtb	r3, r3
1000942a:	3b01      	subs	r3, #1
1000942c:	2b02      	cmp	r3, #2
1000942e:	d81d      	bhi.n	1000946c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
10009430:	683b      	ldr	r3, [r7, #0]
10009432:	889b      	ldrh	r3, [r3, #4]
10009434:	b2db      	uxtb	r3, r3
10009436:	2b01      	cmp	r3, #1
10009438:	d813      	bhi.n	10009462 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
1000943a:	687b      	ldr	r3, [r7, #4]
1000943c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10009440:	689b      	ldr	r3, [r3, #8]
10009442:	6839      	ldr	r1, [r7, #0]
10009444:	6878      	ldr	r0, [r7, #4]
10009446:	4798      	blx	r3
10009448:	4603      	mov	r3, r0
1000944a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
1000944c:	683b      	ldr	r3, [r7, #0]
1000944e:	88db      	ldrh	r3, [r3, #6]
10009450:	2b00      	cmp	r3, #0
10009452:	d110      	bne.n	10009476 <USBD_StdItfReq+0x7a>
10009454:	7bfb      	ldrb	r3, [r7, #15]
10009456:	2b00      	cmp	r3, #0
10009458:	d10d      	bne.n	10009476 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
1000945a:	6878      	ldr	r0, [r7, #4]
1000945c:	f000 fd73 	bl	10009f46 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
10009460:	e009      	b.n	10009476 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
10009462:	6839      	ldr	r1, [r7, #0]
10009464:	6878      	ldr	r0, [r7, #4]
10009466:	f000 fca3 	bl	10009db0 <USBD_CtlError>
          break;
1000946a:	e004      	b.n	10009476 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
1000946c:	6839      	ldr	r1, [r7, #0]
1000946e:	6878      	ldr	r0, [r7, #4]
10009470:	f000 fc9e 	bl	10009db0 <USBD_CtlError>
          break;
10009474:	e000      	b.n	10009478 <USBD_StdItfReq+0x7c>
          break;
10009476:	bf00      	nop
      }
      break;
10009478:	e004      	b.n	10009484 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
1000947a:	6839      	ldr	r1, [r7, #0]
1000947c:	6878      	ldr	r0, [r7, #4]
1000947e:	f000 fc97 	bl	10009db0 <USBD_CtlError>
      break;
10009482:	bf00      	nop
  }

  return ret;
10009484:	7bfb      	ldrb	r3, [r7, #15]
}
10009486:	4618      	mov	r0, r3
10009488:	3710      	adds	r7, #16
1000948a:	46bd      	mov	sp, r7
1000948c:	bd80      	pop	{r7, pc}

1000948e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
1000948e:	b580      	push	{r7, lr}
10009490:	b084      	sub	sp, #16
10009492:	af00      	add	r7, sp, #0
10009494:	6078      	str	r0, [r7, #4]
10009496:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
10009498:	2300      	movs	r3, #0
1000949a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
1000949c:	683b      	ldr	r3, [r7, #0]
1000949e:	889b      	ldrh	r3, [r3, #4]
100094a0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
100094a2:	683b      	ldr	r3, [r7, #0]
100094a4:	781b      	ldrb	r3, [r3, #0]
100094a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
100094aa:	2b40      	cmp	r3, #64	; 0x40
100094ac:	d007      	beq.n	100094be <USBD_StdEPReq+0x30>
100094ae:	2b40      	cmp	r3, #64	; 0x40
100094b0:	f200 8145 	bhi.w	1000973e <USBD_StdEPReq+0x2b0>
100094b4:	2b00      	cmp	r3, #0
100094b6:	d00c      	beq.n	100094d2 <USBD_StdEPReq+0x44>
100094b8:	2b20      	cmp	r3, #32
100094ba:	f040 8140 	bne.w	1000973e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
100094be:	687b      	ldr	r3, [r7, #4]
100094c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100094c4:	689b      	ldr	r3, [r3, #8]
100094c6:	6839      	ldr	r1, [r7, #0]
100094c8:	6878      	ldr	r0, [r7, #4]
100094ca:	4798      	blx	r3
100094cc:	4603      	mov	r3, r0
100094ce:	73fb      	strb	r3, [r7, #15]
      break;
100094d0:	e13a      	b.n	10009748 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
100094d2:	683b      	ldr	r3, [r7, #0]
100094d4:	785b      	ldrb	r3, [r3, #1]
100094d6:	2b03      	cmp	r3, #3
100094d8:	d007      	beq.n	100094ea <USBD_StdEPReq+0x5c>
100094da:	2b03      	cmp	r3, #3
100094dc:	f300 8129 	bgt.w	10009732 <USBD_StdEPReq+0x2a4>
100094e0:	2b00      	cmp	r3, #0
100094e2:	d07f      	beq.n	100095e4 <USBD_StdEPReq+0x156>
100094e4:	2b01      	cmp	r3, #1
100094e6:	d03c      	beq.n	10009562 <USBD_StdEPReq+0xd4>
100094e8:	e123      	b.n	10009732 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
100094ea:	687b      	ldr	r3, [r7, #4]
100094ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
100094f0:	b2db      	uxtb	r3, r3
100094f2:	2b02      	cmp	r3, #2
100094f4:	d002      	beq.n	100094fc <USBD_StdEPReq+0x6e>
100094f6:	2b03      	cmp	r3, #3
100094f8:	d016      	beq.n	10009528 <USBD_StdEPReq+0x9a>
100094fa:	e02c      	b.n	10009556 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
100094fc:	7bbb      	ldrb	r3, [r7, #14]
100094fe:	2b00      	cmp	r3, #0
10009500:	d00d      	beq.n	1000951e <USBD_StdEPReq+0x90>
10009502:	7bbb      	ldrb	r3, [r7, #14]
10009504:	2b80      	cmp	r3, #128	; 0x80
10009506:	d00a      	beq.n	1000951e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
10009508:	7bbb      	ldrb	r3, [r7, #14]
1000950a:	4619      	mov	r1, r3
1000950c:	6878      	ldr	r0, [r7, #4]
1000950e:	f001 fbef 	bl	1000acf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
10009512:	2180      	movs	r1, #128	; 0x80
10009514:	6878      	ldr	r0, [r7, #4]
10009516:	f001 fbeb 	bl	1000acf0 <USBD_LL_StallEP>
1000951a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
1000951c:	e020      	b.n	10009560 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
1000951e:	6839      	ldr	r1, [r7, #0]
10009520:	6878      	ldr	r0, [r7, #4]
10009522:	f000 fc45 	bl	10009db0 <USBD_CtlError>
              break;
10009526:	e01b      	b.n	10009560 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
10009528:	683b      	ldr	r3, [r7, #0]
1000952a:	885b      	ldrh	r3, [r3, #2]
1000952c:	2b00      	cmp	r3, #0
1000952e:	d10e      	bne.n	1000954e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
10009530:	7bbb      	ldrb	r3, [r7, #14]
10009532:	2b00      	cmp	r3, #0
10009534:	d00b      	beq.n	1000954e <USBD_StdEPReq+0xc0>
10009536:	7bbb      	ldrb	r3, [r7, #14]
10009538:	2b80      	cmp	r3, #128	; 0x80
1000953a:	d008      	beq.n	1000954e <USBD_StdEPReq+0xc0>
1000953c:	683b      	ldr	r3, [r7, #0]
1000953e:	88db      	ldrh	r3, [r3, #6]
10009540:	2b00      	cmp	r3, #0
10009542:	d104      	bne.n	1000954e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
10009544:	7bbb      	ldrb	r3, [r7, #14]
10009546:	4619      	mov	r1, r3
10009548:	6878      	ldr	r0, [r7, #4]
1000954a:	f001 fbd1 	bl	1000acf0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
1000954e:	6878      	ldr	r0, [r7, #4]
10009550:	f000 fcf9 	bl	10009f46 <USBD_CtlSendStatus>

              break;
10009554:	e004      	b.n	10009560 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
10009556:	6839      	ldr	r1, [r7, #0]
10009558:	6878      	ldr	r0, [r7, #4]
1000955a:	f000 fc29 	bl	10009db0 <USBD_CtlError>
              break;
1000955e:	bf00      	nop
          }
          break;
10009560:	e0ec      	b.n	1000973c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
10009562:	687b      	ldr	r3, [r7, #4]
10009564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10009568:	b2db      	uxtb	r3, r3
1000956a:	2b02      	cmp	r3, #2
1000956c:	d002      	beq.n	10009574 <USBD_StdEPReq+0xe6>
1000956e:	2b03      	cmp	r3, #3
10009570:	d016      	beq.n	100095a0 <USBD_StdEPReq+0x112>
10009572:	e030      	b.n	100095d6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
10009574:	7bbb      	ldrb	r3, [r7, #14]
10009576:	2b00      	cmp	r3, #0
10009578:	d00d      	beq.n	10009596 <USBD_StdEPReq+0x108>
1000957a:	7bbb      	ldrb	r3, [r7, #14]
1000957c:	2b80      	cmp	r3, #128	; 0x80
1000957e:	d00a      	beq.n	10009596 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
10009580:	7bbb      	ldrb	r3, [r7, #14]
10009582:	4619      	mov	r1, r3
10009584:	6878      	ldr	r0, [r7, #4]
10009586:	f001 fbb3 	bl	1000acf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
1000958a:	2180      	movs	r1, #128	; 0x80
1000958c:	6878      	ldr	r0, [r7, #4]
1000958e:	f001 fbaf 	bl	1000acf0 <USBD_LL_StallEP>
10009592:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
10009594:	e025      	b.n	100095e2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
10009596:	6839      	ldr	r1, [r7, #0]
10009598:	6878      	ldr	r0, [r7, #4]
1000959a:	f000 fc09 	bl	10009db0 <USBD_CtlError>
              break;
1000959e:	e020      	b.n	100095e2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
100095a0:	683b      	ldr	r3, [r7, #0]
100095a2:	885b      	ldrh	r3, [r3, #2]
100095a4:	2b00      	cmp	r3, #0
100095a6:	d11b      	bne.n	100095e0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
100095a8:	7bbb      	ldrb	r3, [r7, #14]
100095aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100095ae:	2b00      	cmp	r3, #0
100095b0:	d004      	beq.n	100095bc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
100095b2:	7bbb      	ldrb	r3, [r7, #14]
100095b4:	4619      	mov	r1, r3
100095b6:	6878      	ldr	r0, [r7, #4]
100095b8:	f001 fbb9 	bl	1000ad2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
100095bc:	6878      	ldr	r0, [r7, #4]
100095be:	f000 fcc2 	bl	10009f46 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
100095c2:	687b      	ldr	r3, [r7, #4]
100095c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100095c8:	689b      	ldr	r3, [r3, #8]
100095ca:	6839      	ldr	r1, [r7, #0]
100095cc:	6878      	ldr	r0, [r7, #4]
100095ce:	4798      	blx	r3
100095d0:	4603      	mov	r3, r0
100095d2:	73fb      	strb	r3, [r7, #15]
              }
              break;
100095d4:	e004      	b.n	100095e0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
100095d6:	6839      	ldr	r1, [r7, #0]
100095d8:	6878      	ldr	r0, [r7, #4]
100095da:	f000 fbe9 	bl	10009db0 <USBD_CtlError>
              break;
100095de:	e000      	b.n	100095e2 <USBD_StdEPReq+0x154>
              break;
100095e0:	bf00      	nop
          }
          break;
100095e2:	e0ab      	b.n	1000973c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
100095e4:	687b      	ldr	r3, [r7, #4]
100095e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
100095ea:	b2db      	uxtb	r3, r3
100095ec:	2b02      	cmp	r3, #2
100095ee:	d002      	beq.n	100095f6 <USBD_StdEPReq+0x168>
100095f0:	2b03      	cmp	r3, #3
100095f2:	d032      	beq.n	1000965a <USBD_StdEPReq+0x1cc>
100095f4:	e097      	b.n	10009726 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
100095f6:	7bbb      	ldrb	r3, [r7, #14]
100095f8:	2b00      	cmp	r3, #0
100095fa:	d007      	beq.n	1000960c <USBD_StdEPReq+0x17e>
100095fc:	7bbb      	ldrb	r3, [r7, #14]
100095fe:	2b80      	cmp	r3, #128	; 0x80
10009600:	d004      	beq.n	1000960c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
10009602:	6839      	ldr	r1, [r7, #0]
10009604:	6878      	ldr	r0, [r7, #4]
10009606:	f000 fbd3 	bl	10009db0 <USBD_CtlError>
                break;
1000960a:	e091      	b.n	10009730 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
1000960c:	f997 300e 	ldrsb.w	r3, [r7, #14]
10009610:	2b00      	cmp	r3, #0
10009612:	da0b      	bge.n	1000962c <USBD_StdEPReq+0x19e>
10009614:	7bbb      	ldrb	r3, [r7, #14]
10009616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
1000961a:	4613      	mov	r3, r2
1000961c:	009b      	lsls	r3, r3, #2
1000961e:	4413      	add	r3, r2
10009620:	009b      	lsls	r3, r3, #2
10009622:	3310      	adds	r3, #16
10009624:	687a      	ldr	r2, [r7, #4]
10009626:	4413      	add	r3, r2
10009628:	3304      	adds	r3, #4
1000962a:	e00b      	b.n	10009644 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
1000962c:	7bbb      	ldrb	r3, [r7, #14]
1000962e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
10009632:	4613      	mov	r3, r2
10009634:	009b      	lsls	r3, r3, #2
10009636:	4413      	add	r3, r2
10009638:	009b      	lsls	r3, r3, #2
1000963a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
1000963e:	687a      	ldr	r2, [r7, #4]
10009640:	4413      	add	r3, r2
10009642:	3304      	adds	r3, #4
10009644:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
10009646:	68bb      	ldr	r3, [r7, #8]
10009648:	2200      	movs	r2, #0
1000964a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
1000964c:	68bb      	ldr	r3, [r7, #8]
1000964e:	2202      	movs	r2, #2
10009650:	4619      	mov	r1, r3
10009652:	6878      	ldr	r0, [r7, #4]
10009654:	f000 fc1d 	bl	10009e92 <USBD_CtlSendData>
              break;
10009658:	e06a      	b.n	10009730 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
1000965a:	f997 300e 	ldrsb.w	r3, [r7, #14]
1000965e:	2b00      	cmp	r3, #0
10009660:	da11      	bge.n	10009686 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
10009662:	7bbb      	ldrb	r3, [r7, #14]
10009664:	f003 020f 	and.w	r2, r3, #15
10009668:	6879      	ldr	r1, [r7, #4]
1000966a:	4613      	mov	r3, r2
1000966c:	009b      	lsls	r3, r3, #2
1000966e:	4413      	add	r3, r2
10009670:	009b      	lsls	r3, r3, #2
10009672:	440b      	add	r3, r1
10009674:	3324      	adds	r3, #36	; 0x24
10009676:	881b      	ldrh	r3, [r3, #0]
10009678:	2b00      	cmp	r3, #0
1000967a:	d117      	bne.n	100096ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
1000967c:	6839      	ldr	r1, [r7, #0]
1000967e:	6878      	ldr	r0, [r7, #4]
10009680:	f000 fb96 	bl	10009db0 <USBD_CtlError>
                  break;
10009684:	e054      	b.n	10009730 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
10009686:	7bbb      	ldrb	r3, [r7, #14]
10009688:	f003 020f 	and.w	r2, r3, #15
1000968c:	6879      	ldr	r1, [r7, #4]
1000968e:	4613      	mov	r3, r2
10009690:	009b      	lsls	r3, r3, #2
10009692:	4413      	add	r3, r2
10009694:	009b      	lsls	r3, r3, #2
10009696:	440b      	add	r3, r1
10009698:	f503 73b2 	add.w	r3, r3, #356	; 0x164
1000969c:	881b      	ldrh	r3, [r3, #0]
1000969e:	2b00      	cmp	r3, #0
100096a0:	d104      	bne.n	100096ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
100096a2:	6839      	ldr	r1, [r7, #0]
100096a4:	6878      	ldr	r0, [r7, #4]
100096a6:	f000 fb83 	bl	10009db0 <USBD_CtlError>
                  break;
100096aa:	e041      	b.n	10009730 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
100096ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
100096b0:	2b00      	cmp	r3, #0
100096b2:	da0b      	bge.n	100096cc <USBD_StdEPReq+0x23e>
100096b4:	7bbb      	ldrb	r3, [r7, #14]
100096b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
100096ba:	4613      	mov	r3, r2
100096bc:	009b      	lsls	r3, r3, #2
100096be:	4413      	add	r3, r2
100096c0:	009b      	lsls	r3, r3, #2
100096c2:	3310      	adds	r3, #16
100096c4:	687a      	ldr	r2, [r7, #4]
100096c6:	4413      	add	r3, r2
100096c8:	3304      	adds	r3, #4
100096ca:	e00b      	b.n	100096e4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
100096cc:	7bbb      	ldrb	r3, [r7, #14]
100096ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
100096d2:	4613      	mov	r3, r2
100096d4:	009b      	lsls	r3, r3, #2
100096d6:	4413      	add	r3, r2
100096d8:	009b      	lsls	r3, r3, #2
100096da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
100096de:	687a      	ldr	r2, [r7, #4]
100096e0:	4413      	add	r3, r2
100096e2:	3304      	adds	r3, #4
100096e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
100096e6:	7bbb      	ldrb	r3, [r7, #14]
100096e8:	2b00      	cmp	r3, #0
100096ea:	d002      	beq.n	100096f2 <USBD_StdEPReq+0x264>
100096ec:	7bbb      	ldrb	r3, [r7, #14]
100096ee:	2b80      	cmp	r3, #128	; 0x80
100096f0:	d103      	bne.n	100096fa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
100096f2:	68bb      	ldr	r3, [r7, #8]
100096f4:	2200      	movs	r2, #0
100096f6:	601a      	str	r2, [r3, #0]
100096f8:	e00e      	b.n	10009718 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
100096fa:	7bbb      	ldrb	r3, [r7, #14]
100096fc:	4619      	mov	r1, r3
100096fe:	6878      	ldr	r0, [r7, #4]
10009700:	f001 fb34 	bl	1000ad6c <USBD_LL_IsStallEP>
10009704:	4603      	mov	r3, r0
10009706:	2b00      	cmp	r3, #0
10009708:	d003      	beq.n	10009712 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
1000970a:	68bb      	ldr	r3, [r7, #8]
1000970c:	2201      	movs	r2, #1
1000970e:	601a      	str	r2, [r3, #0]
10009710:	e002      	b.n	10009718 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
10009712:	68bb      	ldr	r3, [r7, #8]
10009714:	2200      	movs	r2, #0
10009716:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
10009718:	68bb      	ldr	r3, [r7, #8]
1000971a:	2202      	movs	r2, #2
1000971c:	4619      	mov	r1, r3
1000971e:	6878      	ldr	r0, [r7, #4]
10009720:	f000 fbb7 	bl	10009e92 <USBD_CtlSendData>
              break;
10009724:	e004      	b.n	10009730 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
10009726:	6839      	ldr	r1, [r7, #0]
10009728:	6878      	ldr	r0, [r7, #4]
1000972a:	f000 fb41 	bl	10009db0 <USBD_CtlError>
              break;
1000972e:	bf00      	nop
          }
          break;
10009730:	e004      	b.n	1000973c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
10009732:	6839      	ldr	r1, [r7, #0]
10009734:	6878      	ldr	r0, [r7, #4]
10009736:	f000 fb3b 	bl	10009db0 <USBD_CtlError>
          break;
1000973a:	bf00      	nop
      }
      break;
1000973c:	e004      	b.n	10009748 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
1000973e:	6839      	ldr	r1, [r7, #0]
10009740:	6878      	ldr	r0, [r7, #4]
10009742:	f000 fb35 	bl	10009db0 <USBD_CtlError>
      break;
10009746:	bf00      	nop
  }

  return ret;
10009748:	7bfb      	ldrb	r3, [r7, #15]
}
1000974a:	4618      	mov	r0, r3
1000974c:	3710      	adds	r7, #16
1000974e:	46bd      	mov	sp, r7
10009750:	bd80      	pop	{r7, pc}
	...

10009754 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
10009754:	b580      	push	{r7, lr}
10009756:	b084      	sub	sp, #16
10009758:	af00      	add	r7, sp, #0
1000975a:	6078      	str	r0, [r7, #4]
1000975c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
1000975e:	2300      	movs	r3, #0
10009760:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
10009762:	2300      	movs	r3, #0
10009764:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
10009766:	2300      	movs	r3, #0
10009768:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
1000976a:	683b      	ldr	r3, [r7, #0]
1000976c:	885b      	ldrh	r3, [r3, #2]
1000976e:	0a1b      	lsrs	r3, r3, #8
10009770:	b29b      	uxth	r3, r3
10009772:	3b01      	subs	r3, #1
10009774:	2b06      	cmp	r3, #6
10009776:	f200 8128 	bhi.w	100099ca <USBD_GetDescriptor+0x276>
1000977a:	a201      	add	r2, pc, #4	; (adr r2, 10009780 <USBD_GetDescriptor+0x2c>)
1000977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009780:	1000979d 	.word	0x1000979d
10009784:	100097b5 	.word	0x100097b5
10009788:	100097f5 	.word	0x100097f5
1000978c:	100099cb 	.word	0x100099cb
10009790:	100099cb 	.word	0x100099cb
10009794:	1000996b 	.word	0x1000996b
10009798:	10009997 	.word	0x10009997
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
1000979c:	687b      	ldr	r3, [r7, #4]
1000979e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
100097a2:	681b      	ldr	r3, [r3, #0]
100097a4:	687a      	ldr	r2, [r7, #4]
100097a6:	7c12      	ldrb	r2, [r2, #16]
100097a8:	f107 0108 	add.w	r1, r7, #8
100097ac:	4610      	mov	r0, r2
100097ae:	4798      	blx	r3
100097b0:	60f8      	str	r0, [r7, #12]
      break;
100097b2:	e112      	b.n	100099da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
100097b4:	687b      	ldr	r3, [r7, #4]
100097b6:	7c1b      	ldrb	r3, [r3, #16]
100097b8:	2b00      	cmp	r3, #0
100097ba:	d10d      	bne.n	100097d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
100097bc:	687b      	ldr	r3, [r7, #4]
100097be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100097c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100097c4:	f107 0208 	add.w	r2, r7, #8
100097c8:	4610      	mov	r0, r2
100097ca:	4798      	blx	r3
100097cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
100097ce:	68fb      	ldr	r3, [r7, #12]
100097d0:	3301      	adds	r3, #1
100097d2:	2202      	movs	r2, #2
100097d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
100097d6:	e100      	b.n	100099da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
100097d8:	687b      	ldr	r3, [r7, #4]
100097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100097e0:	f107 0208 	add.w	r2, r7, #8
100097e4:	4610      	mov	r0, r2
100097e6:	4798      	blx	r3
100097e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
100097ea:	68fb      	ldr	r3, [r7, #12]
100097ec:	3301      	adds	r3, #1
100097ee:	2202      	movs	r2, #2
100097f0:	701a      	strb	r2, [r3, #0]
      break;
100097f2:	e0f2      	b.n	100099da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
100097f4:	683b      	ldr	r3, [r7, #0]
100097f6:	885b      	ldrh	r3, [r3, #2]
100097f8:	b2db      	uxtb	r3, r3
100097fa:	2b05      	cmp	r3, #5
100097fc:	f200 80ac 	bhi.w	10009958 <USBD_GetDescriptor+0x204>
10009800:	a201      	add	r2, pc, #4	; (adr r2, 10009808 <USBD_GetDescriptor+0xb4>)
10009802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009806:	bf00      	nop
10009808:	10009821 	.word	0x10009821
1000980c:	10009855 	.word	0x10009855
10009810:	10009889 	.word	0x10009889
10009814:	100098bd 	.word	0x100098bd
10009818:	100098f1 	.word	0x100098f1
1000981c:	10009925 	.word	0x10009925
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
10009820:	687b      	ldr	r3, [r7, #4]
10009822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
10009826:	685b      	ldr	r3, [r3, #4]
10009828:	2b00      	cmp	r3, #0
1000982a:	d00b      	beq.n	10009844 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
1000982c:	687b      	ldr	r3, [r7, #4]
1000982e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
10009832:	685b      	ldr	r3, [r3, #4]
10009834:	687a      	ldr	r2, [r7, #4]
10009836:	7c12      	ldrb	r2, [r2, #16]
10009838:	f107 0108 	add.w	r1, r7, #8
1000983c:	4610      	mov	r0, r2
1000983e:	4798      	blx	r3
10009840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
10009842:	e091      	b.n	10009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
10009844:	6839      	ldr	r1, [r7, #0]
10009846:	6878      	ldr	r0, [r7, #4]
10009848:	f000 fab2 	bl	10009db0 <USBD_CtlError>
            err++;
1000984c:	7afb      	ldrb	r3, [r7, #11]
1000984e:	3301      	adds	r3, #1
10009850:	72fb      	strb	r3, [r7, #11]
          break;
10009852:	e089      	b.n	10009968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
10009854:	687b      	ldr	r3, [r7, #4]
10009856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
1000985a:	689b      	ldr	r3, [r3, #8]
1000985c:	2b00      	cmp	r3, #0
1000985e:	d00b      	beq.n	10009878 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
10009860:	687b      	ldr	r3, [r7, #4]
10009862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
10009866:	689b      	ldr	r3, [r3, #8]
10009868:	687a      	ldr	r2, [r7, #4]
1000986a:	7c12      	ldrb	r2, [r2, #16]
1000986c:	f107 0108 	add.w	r1, r7, #8
10009870:	4610      	mov	r0, r2
10009872:	4798      	blx	r3
10009874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
10009876:	e077      	b.n	10009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
10009878:	6839      	ldr	r1, [r7, #0]
1000987a:	6878      	ldr	r0, [r7, #4]
1000987c:	f000 fa98 	bl	10009db0 <USBD_CtlError>
            err++;
10009880:	7afb      	ldrb	r3, [r7, #11]
10009882:	3301      	adds	r3, #1
10009884:	72fb      	strb	r3, [r7, #11]
          break;
10009886:	e06f      	b.n	10009968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
10009888:	687b      	ldr	r3, [r7, #4]
1000988a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
1000988e:	68db      	ldr	r3, [r3, #12]
10009890:	2b00      	cmp	r3, #0
10009892:	d00b      	beq.n	100098ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
10009894:	687b      	ldr	r3, [r7, #4]
10009896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
1000989a:	68db      	ldr	r3, [r3, #12]
1000989c:	687a      	ldr	r2, [r7, #4]
1000989e:	7c12      	ldrb	r2, [r2, #16]
100098a0:	f107 0108 	add.w	r1, r7, #8
100098a4:	4610      	mov	r0, r2
100098a6:	4798      	blx	r3
100098a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
100098aa:	e05d      	b.n	10009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
100098ac:	6839      	ldr	r1, [r7, #0]
100098ae:	6878      	ldr	r0, [r7, #4]
100098b0:	f000 fa7e 	bl	10009db0 <USBD_CtlError>
            err++;
100098b4:	7afb      	ldrb	r3, [r7, #11]
100098b6:	3301      	adds	r3, #1
100098b8:	72fb      	strb	r3, [r7, #11]
          break;
100098ba:	e055      	b.n	10009968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
100098bc:	687b      	ldr	r3, [r7, #4]
100098be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
100098c2:	691b      	ldr	r3, [r3, #16]
100098c4:	2b00      	cmp	r3, #0
100098c6:	d00b      	beq.n	100098e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
100098c8:	687b      	ldr	r3, [r7, #4]
100098ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
100098ce:	691b      	ldr	r3, [r3, #16]
100098d0:	687a      	ldr	r2, [r7, #4]
100098d2:	7c12      	ldrb	r2, [r2, #16]
100098d4:	f107 0108 	add.w	r1, r7, #8
100098d8:	4610      	mov	r0, r2
100098da:	4798      	blx	r3
100098dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
100098de:	e043      	b.n	10009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
100098e0:	6839      	ldr	r1, [r7, #0]
100098e2:	6878      	ldr	r0, [r7, #4]
100098e4:	f000 fa64 	bl	10009db0 <USBD_CtlError>
            err++;
100098e8:	7afb      	ldrb	r3, [r7, #11]
100098ea:	3301      	adds	r3, #1
100098ec:	72fb      	strb	r3, [r7, #11]
          break;
100098ee:	e03b      	b.n	10009968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
100098f0:	687b      	ldr	r3, [r7, #4]
100098f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
100098f6:	695b      	ldr	r3, [r3, #20]
100098f8:	2b00      	cmp	r3, #0
100098fa:	d00b      	beq.n	10009914 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
100098fc:	687b      	ldr	r3, [r7, #4]
100098fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
10009902:	695b      	ldr	r3, [r3, #20]
10009904:	687a      	ldr	r2, [r7, #4]
10009906:	7c12      	ldrb	r2, [r2, #16]
10009908:	f107 0108 	add.w	r1, r7, #8
1000990c:	4610      	mov	r0, r2
1000990e:	4798      	blx	r3
10009910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
10009912:	e029      	b.n	10009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
10009914:	6839      	ldr	r1, [r7, #0]
10009916:	6878      	ldr	r0, [r7, #4]
10009918:	f000 fa4a 	bl	10009db0 <USBD_CtlError>
            err++;
1000991c:	7afb      	ldrb	r3, [r7, #11]
1000991e:	3301      	adds	r3, #1
10009920:	72fb      	strb	r3, [r7, #11]
          break;
10009922:	e021      	b.n	10009968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
10009924:	687b      	ldr	r3, [r7, #4]
10009926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
1000992a:	699b      	ldr	r3, [r3, #24]
1000992c:	2b00      	cmp	r3, #0
1000992e:	d00b      	beq.n	10009948 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
10009930:	687b      	ldr	r3, [r7, #4]
10009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
10009936:	699b      	ldr	r3, [r3, #24]
10009938:	687a      	ldr	r2, [r7, #4]
1000993a:	7c12      	ldrb	r2, [r2, #16]
1000993c:	f107 0108 	add.w	r1, r7, #8
10009940:	4610      	mov	r0, r2
10009942:	4798      	blx	r3
10009944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
10009946:	e00f      	b.n	10009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
10009948:	6839      	ldr	r1, [r7, #0]
1000994a:	6878      	ldr	r0, [r7, #4]
1000994c:	f000 fa30 	bl	10009db0 <USBD_CtlError>
            err++;
10009950:	7afb      	ldrb	r3, [r7, #11]
10009952:	3301      	adds	r3, #1
10009954:	72fb      	strb	r3, [r7, #11]
          break;
10009956:	e007      	b.n	10009968 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
10009958:	6839      	ldr	r1, [r7, #0]
1000995a:	6878      	ldr	r0, [r7, #4]
1000995c:	f000 fa28 	bl	10009db0 <USBD_CtlError>
          err++;
10009960:	7afb      	ldrb	r3, [r7, #11]
10009962:	3301      	adds	r3, #1
10009964:	72fb      	strb	r3, [r7, #11]
#endif
          break;
10009966:	bf00      	nop
      }
      break;
10009968:	e037      	b.n	100099da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
1000996a:	687b      	ldr	r3, [r7, #4]
1000996c:	7c1b      	ldrb	r3, [r3, #16]
1000996e:	2b00      	cmp	r3, #0
10009970:	d109      	bne.n	10009986 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
10009972:	687b      	ldr	r3, [r7, #4]
10009974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
10009978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000997a:	f107 0208 	add.w	r2, r7, #8
1000997e:	4610      	mov	r0, r2
10009980:	4798      	blx	r3
10009982:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
10009984:	e029      	b.n	100099da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
10009986:	6839      	ldr	r1, [r7, #0]
10009988:	6878      	ldr	r0, [r7, #4]
1000998a:	f000 fa11 	bl	10009db0 <USBD_CtlError>
        err++;
1000998e:	7afb      	ldrb	r3, [r7, #11]
10009990:	3301      	adds	r3, #1
10009992:	72fb      	strb	r3, [r7, #11]
      break;
10009994:	e021      	b.n	100099da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
10009996:	687b      	ldr	r3, [r7, #4]
10009998:	7c1b      	ldrb	r3, [r3, #16]
1000999a:	2b00      	cmp	r3, #0
1000999c:	d10d      	bne.n	100099ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
1000999e:	687b      	ldr	r3, [r7, #4]
100099a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
100099a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100099a6:	f107 0208 	add.w	r2, r7, #8
100099aa:	4610      	mov	r0, r2
100099ac:	4798      	blx	r3
100099ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
100099b0:	68fb      	ldr	r3, [r7, #12]
100099b2:	3301      	adds	r3, #1
100099b4:	2207      	movs	r2, #7
100099b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
100099b8:	e00f      	b.n	100099da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
100099ba:	6839      	ldr	r1, [r7, #0]
100099bc:	6878      	ldr	r0, [r7, #4]
100099be:	f000 f9f7 	bl	10009db0 <USBD_CtlError>
        err++;
100099c2:	7afb      	ldrb	r3, [r7, #11]
100099c4:	3301      	adds	r3, #1
100099c6:	72fb      	strb	r3, [r7, #11]
      break;
100099c8:	e007      	b.n	100099da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
100099ca:	6839      	ldr	r1, [r7, #0]
100099cc:	6878      	ldr	r0, [r7, #4]
100099ce:	f000 f9ef 	bl	10009db0 <USBD_CtlError>
      err++;
100099d2:	7afb      	ldrb	r3, [r7, #11]
100099d4:	3301      	adds	r3, #1
100099d6:	72fb      	strb	r3, [r7, #11]
      break;
100099d8:	bf00      	nop
  }

  if (err != 0U)
100099da:	7afb      	ldrb	r3, [r7, #11]
100099dc:	2b00      	cmp	r3, #0
100099de:	d11e      	bne.n	10009a1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
100099e0:	683b      	ldr	r3, [r7, #0]
100099e2:	88db      	ldrh	r3, [r3, #6]
100099e4:	2b00      	cmp	r3, #0
100099e6:	d016      	beq.n	10009a16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
100099e8:	893b      	ldrh	r3, [r7, #8]
100099ea:	2b00      	cmp	r3, #0
100099ec:	d00e      	beq.n	10009a0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
100099ee:	683b      	ldr	r3, [r7, #0]
100099f0:	88da      	ldrh	r2, [r3, #6]
100099f2:	893b      	ldrh	r3, [r7, #8]
100099f4:	4293      	cmp	r3, r2
100099f6:	bf28      	it	cs
100099f8:	4613      	movcs	r3, r2
100099fa:	b29b      	uxth	r3, r3
100099fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
100099fe:	893b      	ldrh	r3, [r7, #8]
10009a00:	461a      	mov	r2, r3
10009a02:	68f9      	ldr	r1, [r7, #12]
10009a04:	6878      	ldr	r0, [r7, #4]
10009a06:	f000 fa44 	bl	10009e92 <USBD_CtlSendData>
10009a0a:	e009      	b.n	10009a20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
10009a0c:	6839      	ldr	r1, [r7, #0]
10009a0e:	6878      	ldr	r0, [r7, #4]
10009a10:	f000 f9ce 	bl	10009db0 <USBD_CtlError>
10009a14:	e004      	b.n	10009a20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
10009a16:	6878      	ldr	r0, [r7, #4]
10009a18:	f000 fa95 	bl	10009f46 <USBD_CtlSendStatus>
10009a1c:	e000      	b.n	10009a20 <USBD_GetDescriptor+0x2cc>
    return;
10009a1e:	bf00      	nop
  }
}
10009a20:	3710      	adds	r7, #16
10009a22:	46bd      	mov	sp, r7
10009a24:	bd80      	pop	{r7, pc}
10009a26:	bf00      	nop

10009a28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
10009a28:	b580      	push	{r7, lr}
10009a2a:	b084      	sub	sp, #16
10009a2c:	af00      	add	r7, sp, #0
10009a2e:	6078      	str	r0, [r7, #4]
10009a30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
10009a32:	683b      	ldr	r3, [r7, #0]
10009a34:	889b      	ldrh	r3, [r3, #4]
10009a36:	2b00      	cmp	r3, #0
10009a38:	d131      	bne.n	10009a9e <USBD_SetAddress+0x76>
10009a3a:	683b      	ldr	r3, [r7, #0]
10009a3c:	88db      	ldrh	r3, [r3, #6]
10009a3e:	2b00      	cmp	r3, #0
10009a40:	d12d      	bne.n	10009a9e <USBD_SetAddress+0x76>
10009a42:	683b      	ldr	r3, [r7, #0]
10009a44:	885b      	ldrh	r3, [r3, #2]
10009a46:	2b7f      	cmp	r3, #127	; 0x7f
10009a48:	d829      	bhi.n	10009a9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
10009a4a:	683b      	ldr	r3, [r7, #0]
10009a4c:	885b      	ldrh	r3, [r3, #2]
10009a4e:	b2db      	uxtb	r3, r3
10009a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10009a54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
10009a56:	687b      	ldr	r3, [r7, #4]
10009a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10009a5c:	b2db      	uxtb	r3, r3
10009a5e:	2b03      	cmp	r3, #3
10009a60:	d104      	bne.n	10009a6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
10009a62:	6839      	ldr	r1, [r7, #0]
10009a64:	6878      	ldr	r0, [r7, #4]
10009a66:	f000 f9a3 	bl	10009db0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
10009a6a:	e01d      	b.n	10009aa8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
10009a6c:	687b      	ldr	r3, [r7, #4]
10009a6e:	7bfa      	ldrb	r2, [r7, #15]
10009a70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
10009a74:	7bfb      	ldrb	r3, [r7, #15]
10009a76:	4619      	mov	r1, r3
10009a78:	6878      	ldr	r0, [r7, #4]
10009a7a:	f001 f9a3 	bl	1000adc4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
10009a7e:	6878      	ldr	r0, [r7, #4]
10009a80:	f000 fa61 	bl	10009f46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
10009a84:	7bfb      	ldrb	r3, [r7, #15]
10009a86:	2b00      	cmp	r3, #0
10009a88:	d004      	beq.n	10009a94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
10009a8a:	687b      	ldr	r3, [r7, #4]
10009a8c:	2202      	movs	r2, #2
10009a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
10009a92:	e009      	b.n	10009aa8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
10009a94:	687b      	ldr	r3, [r7, #4]
10009a96:	2201      	movs	r2, #1
10009a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
10009a9c:	e004      	b.n	10009aa8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
10009a9e:	6839      	ldr	r1, [r7, #0]
10009aa0:	6878      	ldr	r0, [r7, #4]
10009aa2:	f000 f985 	bl	10009db0 <USBD_CtlError>
  }
}
10009aa6:	bf00      	nop
10009aa8:	bf00      	nop
10009aaa:	3710      	adds	r7, #16
10009aac:	46bd      	mov	sp, r7
10009aae:	bd80      	pop	{r7, pc}

10009ab0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
10009ab0:	b580      	push	{r7, lr}
10009ab2:	b084      	sub	sp, #16
10009ab4:	af00      	add	r7, sp, #0
10009ab6:	6078      	str	r0, [r7, #4]
10009ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
10009aba:	2300      	movs	r3, #0
10009abc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
10009abe:	683b      	ldr	r3, [r7, #0]
10009ac0:	885b      	ldrh	r3, [r3, #2]
10009ac2:	b2da      	uxtb	r2, r3
10009ac4:	4b4c      	ldr	r3, [pc, #304]	; (10009bf8 <USBD_SetConfig+0x148>)
10009ac6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
10009ac8:	4b4b      	ldr	r3, [pc, #300]	; (10009bf8 <USBD_SetConfig+0x148>)
10009aca:	781b      	ldrb	r3, [r3, #0]
10009acc:	2b01      	cmp	r3, #1
10009ace:	d905      	bls.n	10009adc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
10009ad0:	6839      	ldr	r1, [r7, #0]
10009ad2:	6878      	ldr	r0, [r7, #4]
10009ad4:	f000 f96c 	bl	10009db0 <USBD_CtlError>
    return USBD_FAIL;
10009ad8:	2303      	movs	r3, #3
10009ada:	e088      	b.n	10009bee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
10009adc:	687b      	ldr	r3, [r7, #4]
10009ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10009ae2:	b2db      	uxtb	r3, r3
10009ae4:	2b02      	cmp	r3, #2
10009ae6:	d002      	beq.n	10009aee <USBD_SetConfig+0x3e>
10009ae8:	2b03      	cmp	r3, #3
10009aea:	d025      	beq.n	10009b38 <USBD_SetConfig+0x88>
10009aec:	e071      	b.n	10009bd2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
10009aee:	4b42      	ldr	r3, [pc, #264]	; (10009bf8 <USBD_SetConfig+0x148>)
10009af0:	781b      	ldrb	r3, [r3, #0]
10009af2:	2b00      	cmp	r3, #0
10009af4:	d01c      	beq.n	10009b30 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
10009af6:	4b40      	ldr	r3, [pc, #256]	; (10009bf8 <USBD_SetConfig+0x148>)
10009af8:	781b      	ldrb	r3, [r3, #0]
10009afa:	461a      	mov	r2, r3
10009afc:	687b      	ldr	r3, [r7, #4]
10009afe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
10009b00:	4b3d      	ldr	r3, [pc, #244]	; (10009bf8 <USBD_SetConfig+0x148>)
10009b02:	781b      	ldrb	r3, [r3, #0]
10009b04:	4619      	mov	r1, r3
10009b06:	6878      	ldr	r0, [r7, #4]
10009b08:	f7ff f948 	bl	10008d9c <USBD_SetClassConfig>
10009b0c:	4603      	mov	r3, r0
10009b0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
10009b10:	7bfb      	ldrb	r3, [r7, #15]
10009b12:	2b00      	cmp	r3, #0
10009b14:	d004      	beq.n	10009b20 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
10009b16:	6839      	ldr	r1, [r7, #0]
10009b18:	6878      	ldr	r0, [r7, #4]
10009b1a:	f000 f949 	bl	10009db0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
10009b1e:	e065      	b.n	10009bec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
10009b20:	6878      	ldr	r0, [r7, #4]
10009b22:	f000 fa10 	bl	10009f46 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
10009b26:	687b      	ldr	r3, [r7, #4]
10009b28:	2203      	movs	r2, #3
10009b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
10009b2e:	e05d      	b.n	10009bec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
10009b30:	6878      	ldr	r0, [r7, #4]
10009b32:	f000 fa08 	bl	10009f46 <USBD_CtlSendStatus>
      break;
10009b36:	e059      	b.n	10009bec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
10009b38:	4b2f      	ldr	r3, [pc, #188]	; (10009bf8 <USBD_SetConfig+0x148>)
10009b3a:	781b      	ldrb	r3, [r3, #0]
10009b3c:	2b00      	cmp	r3, #0
10009b3e:	d112      	bne.n	10009b66 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
10009b40:	687b      	ldr	r3, [r7, #4]
10009b42:	2202      	movs	r2, #2
10009b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
10009b48:	4b2b      	ldr	r3, [pc, #172]	; (10009bf8 <USBD_SetConfig+0x148>)
10009b4a:	781b      	ldrb	r3, [r3, #0]
10009b4c:	461a      	mov	r2, r3
10009b4e:	687b      	ldr	r3, [r7, #4]
10009b50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
10009b52:	4b29      	ldr	r3, [pc, #164]	; (10009bf8 <USBD_SetConfig+0x148>)
10009b54:	781b      	ldrb	r3, [r3, #0]
10009b56:	4619      	mov	r1, r3
10009b58:	6878      	ldr	r0, [r7, #4]
10009b5a:	f7ff f93b 	bl	10008dd4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
10009b5e:	6878      	ldr	r0, [r7, #4]
10009b60:	f000 f9f1 	bl	10009f46 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
10009b64:	e042      	b.n	10009bec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
10009b66:	4b24      	ldr	r3, [pc, #144]	; (10009bf8 <USBD_SetConfig+0x148>)
10009b68:	781b      	ldrb	r3, [r3, #0]
10009b6a:	461a      	mov	r2, r3
10009b6c:	687b      	ldr	r3, [r7, #4]
10009b6e:	685b      	ldr	r3, [r3, #4]
10009b70:	429a      	cmp	r2, r3
10009b72:	d02a      	beq.n	10009bca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
10009b74:	687b      	ldr	r3, [r7, #4]
10009b76:	685b      	ldr	r3, [r3, #4]
10009b78:	b2db      	uxtb	r3, r3
10009b7a:	4619      	mov	r1, r3
10009b7c:	6878      	ldr	r0, [r7, #4]
10009b7e:	f7ff f929 	bl	10008dd4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
10009b82:	4b1d      	ldr	r3, [pc, #116]	; (10009bf8 <USBD_SetConfig+0x148>)
10009b84:	781b      	ldrb	r3, [r3, #0]
10009b86:	461a      	mov	r2, r3
10009b88:	687b      	ldr	r3, [r7, #4]
10009b8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
10009b8c:	4b1a      	ldr	r3, [pc, #104]	; (10009bf8 <USBD_SetConfig+0x148>)
10009b8e:	781b      	ldrb	r3, [r3, #0]
10009b90:	4619      	mov	r1, r3
10009b92:	6878      	ldr	r0, [r7, #4]
10009b94:	f7ff f902 	bl	10008d9c <USBD_SetClassConfig>
10009b98:	4603      	mov	r3, r0
10009b9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
10009b9c:	7bfb      	ldrb	r3, [r7, #15]
10009b9e:	2b00      	cmp	r3, #0
10009ba0:	d00f      	beq.n	10009bc2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
10009ba2:	6839      	ldr	r1, [r7, #0]
10009ba4:	6878      	ldr	r0, [r7, #4]
10009ba6:	f000 f903 	bl	10009db0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
10009baa:	687b      	ldr	r3, [r7, #4]
10009bac:	685b      	ldr	r3, [r3, #4]
10009bae:	b2db      	uxtb	r3, r3
10009bb0:	4619      	mov	r1, r3
10009bb2:	6878      	ldr	r0, [r7, #4]
10009bb4:	f7ff f90e 	bl	10008dd4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
10009bb8:	687b      	ldr	r3, [r7, #4]
10009bba:	2202      	movs	r2, #2
10009bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
10009bc0:	e014      	b.n	10009bec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
10009bc2:	6878      	ldr	r0, [r7, #4]
10009bc4:	f000 f9bf 	bl	10009f46 <USBD_CtlSendStatus>
      break;
10009bc8:	e010      	b.n	10009bec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
10009bca:	6878      	ldr	r0, [r7, #4]
10009bcc:	f000 f9bb 	bl	10009f46 <USBD_CtlSendStatus>
      break;
10009bd0:	e00c      	b.n	10009bec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
10009bd2:	6839      	ldr	r1, [r7, #0]
10009bd4:	6878      	ldr	r0, [r7, #4]
10009bd6:	f000 f8eb 	bl	10009db0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
10009bda:	4b07      	ldr	r3, [pc, #28]	; (10009bf8 <USBD_SetConfig+0x148>)
10009bdc:	781b      	ldrb	r3, [r3, #0]
10009bde:	4619      	mov	r1, r3
10009be0:	6878      	ldr	r0, [r7, #4]
10009be2:	f7ff f8f7 	bl	10008dd4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
10009be6:	2303      	movs	r3, #3
10009be8:	73fb      	strb	r3, [r7, #15]
      break;
10009bea:	bf00      	nop
  }

  return ret;
10009bec:	7bfb      	ldrb	r3, [r7, #15]
}
10009bee:	4618      	mov	r0, r3
10009bf0:	3710      	adds	r7, #16
10009bf2:	46bd      	mov	sp, r7
10009bf4:	bd80      	pop	{r7, pc}
10009bf6:	bf00      	nop
10009bf8:	20000294 	.word	0x20000294

10009bfc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
10009bfc:	b580      	push	{r7, lr}
10009bfe:	b082      	sub	sp, #8
10009c00:	af00      	add	r7, sp, #0
10009c02:	6078      	str	r0, [r7, #4]
10009c04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
10009c06:	683b      	ldr	r3, [r7, #0]
10009c08:	88db      	ldrh	r3, [r3, #6]
10009c0a:	2b01      	cmp	r3, #1
10009c0c:	d004      	beq.n	10009c18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
10009c0e:	6839      	ldr	r1, [r7, #0]
10009c10:	6878      	ldr	r0, [r7, #4]
10009c12:	f000 f8cd 	bl	10009db0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
10009c16:	e023      	b.n	10009c60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
10009c18:	687b      	ldr	r3, [r7, #4]
10009c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10009c1e:	b2db      	uxtb	r3, r3
10009c20:	2b02      	cmp	r3, #2
10009c22:	dc02      	bgt.n	10009c2a <USBD_GetConfig+0x2e>
10009c24:	2b00      	cmp	r3, #0
10009c26:	dc03      	bgt.n	10009c30 <USBD_GetConfig+0x34>
10009c28:	e015      	b.n	10009c56 <USBD_GetConfig+0x5a>
10009c2a:	2b03      	cmp	r3, #3
10009c2c:	d00b      	beq.n	10009c46 <USBD_GetConfig+0x4a>
10009c2e:	e012      	b.n	10009c56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
10009c30:	687b      	ldr	r3, [r7, #4]
10009c32:	2200      	movs	r2, #0
10009c34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
10009c36:	687b      	ldr	r3, [r7, #4]
10009c38:	3308      	adds	r3, #8
10009c3a:	2201      	movs	r2, #1
10009c3c:	4619      	mov	r1, r3
10009c3e:	6878      	ldr	r0, [r7, #4]
10009c40:	f000 f927 	bl	10009e92 <USBD_CtlSendData>
        break;
10009c44:	e00c      	b.n	10009c60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
10009c46:	687b      	ldr	r3, [r7, #4]
10009c48:	3304      	adds	r3, #4
10009c4a:	2201      	movs	r2, #1
10009c4c:	4619      	mov	r1, r3
10009c4e:	6878      	ldr	r0, [r7, #4]
10009c50:	f000 f91f 	bl	10009e92 <USBD_CtlSendData>
        break;
10009c54:	e004      	b.n	10009c60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
10009c56:	6839      	ldr	r1, [r7, #0]
10009c58:	6878      	ldr	r0, [r7, #4]
10009c5a:	f000 f8a9 	bl	10009db0 <USBD_CtlError>
        break;
10009c5e:	bf00      	nop
}
10009c60:	bf00      	nop
10009c62:	3708      	adds	r7, #8
10009c64:	46bd      	mov	sp, r7
10009c66:	bd80      	pop	{r7, pc}

10009c68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
10009c68:	b580      	push	{r7, lr}
10009c6a:	b082      	sub	sp, #8
10009c6c:	af00      	add	r7, sp, #0
10009c6e:	6078      	str	r0, [r7, #4]
10009c70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
10009c72:	687b      	ldr	r3, [r7, #4]
10009c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10009c78:	b2db      	uxtb	r3, r3
10009c7a:	3b01      	subs	r3, #1
10009c7c:	2b02      	cmp	r3, #2
10009c7e:	d81e      	bhi.n	10009cbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
10009c80:	683b      	ldr	r3, [r7, #0]
10009c82:	88db      	ldrh	r3, [r3, #6]
10009c84:	2b02      	cmp	r3, #2
10009c86:	d004      	beq.n	10009c92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
10009c88:	6839      	ldr	r1, [r7, #0]
10009c8a:	6878      	ldr	r0, [r7, #4]
10009c8c:	f000 f890 	bl	10009db0 <USBD_CtlError>
        break;
10009c90:	e01a      	b.n	10009cc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
10009c92:	687b      	ldr	r3, [r7, #4]
10009c94:	2201      	movs	r2, #1
10009c96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
10009c98:	687b      	ldr	r3, [r7, #4]
10009c9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
10009c9e:	2b00      	cmp	r3, #0
10009ca0:	d005      	beq.n	10009cae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
10009ca2:	687b      	ldr	r3, [r7, #4]
10009ca4:	68db      	ldr	r3, [r3, #12]
10009ca6:	f043 0202 	orr.w	r2, r3, #2
10009caa:	687b      	ldr	r3, [r7, #4]
10009cac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
10009cae:	687b      	ldr	r3, [r7, #4]
10009cb0:	330c      	adds	r3, #12
10009cb2:	2202      	movs	r2, #2
10009cb4:	4619      	mov	r1, r3
10009cb6:	6878      	ldr	r0, [r7, #4]
10009cb8:	f000 f8eb 	bl	10009e92 <USBD_CtlSendData>
      break;
10009cbc:	e004      	b.n	10009cc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
10009cbe:	6839      	ldr	r1, [r7, #0]
10009cc0:	6878      	ldr	r0, [r7, #4]
10009cc2:	f000 f875 	bl	10009db0 <USBD_CtlError>
      break;
10009cc6:	bf00      	nop
  }
}
10009cc8:	bf00      	nop
10009cca:	3708      	adds	r7, #8
10009ccc:	46bd      	mov	sp, r7
10009cce:	bd80      	pop	{r7, pc}

10009cd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
10009cd0:	b580      	push	{r7, lr}
10009cd2:	b082      	sub	sp, #8
10009cd4:	af00      	add	r7, sp, #0
10009cd6:	6078      	str	r0, [r7, #4]
10009cd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
10009cda:	683b      	ldr	r3, [r7, #0]
10009cdc:	885b      	ldrh	r3, [r3, #2]
10009cde:	2b01      	cmp	r3, #1
10009ce0:	d106      	bne.n	10009cf0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
10009ce2:	687b      	ldr	r3, [r7, #4]
10009ce4:	2201      	movs	r2, #1
10009ce6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
10009cea:	6878      	ldr	r0, [r7, #4]
10009cec:	f000 f92b 	bl	10009f46 <USBD_CtlSendStatus>
  }
}
10009cf0:	bf00      	nop
10009cf2:	3708      	adds	r7, #8
10009cf4:	46bd      	mov	sp, r7
10009cf6:	bd80      	pop	{r7, pc}

10009cf8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
10009cf8:	b580      	push	{r7, lr}
10009cfa:	b082      	sub	sp, #8
10009cfc:	af00      	add	r7, sp, #0
10009cfe:	6078      	str	r0, [r7, #4]
10009d00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
10009d02:	687b      	ldr	r3, [r7, #4]
10009d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
10009d08:	b2db      	uxtb	r3, r3
10009d0a:	3b01      	subs	r3, #1
10009d0c:	2b02      	cmp	r3, #2
10009d0e:	d80b      	bhi.n	10009d28 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
10009d10:	683b      	ldr	r3, [r7, #0]
10009d12:	885b      	ldrh	r3, [r3, #2]
10009d14:	2b01      	cmp	r3, #1
10009d16:	d10c      	bne.n	10009d32 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
10009d18:	687b      	ldr	r3, [r7, #4]
10009d1a:	2200      	movs	r2, #0
10009d1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
10009d20:	6878      	ldr	r0, [r7, #4]
10009d22:	f000 f910 	bl	10009f46 <USBD_CtlSendStatus>
      }
      break;
10009d26:	e004      	b.n	10009d32 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
10009d28:	6839      	ldr	r1, [r7, #0]
10009d2a:	6878      	ldr	r0, [r7, #4]
10009d2c:	f000 f840 	bl	10009db0 <USBD_CtlError>
      break;
10009d30:	e000      	b.n	10009d34 <USBD_ClrFeature+0x3c>
      break;
10009d32:	bf00      	nop
  }
}
10009d34:	bf00      	nop
10009d36:	3708      	adds	r7, #8
10009d38:	46bd      	mov	sp, r7
10009d3a:	bd80      	pop	{r7, pc}

10009d3c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
10009d3c:	b580      	push	{r7, lr}
10009d3e:	b084      	sub	sp, #16
10009d40:	af00      	add	r7, sp, #0
10009d42:	6078      	str	r0, [r7, #4]
10009d44:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
10009d46:	683b      	ldr	r3, [r7, #0]
10009d48:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
10009d4a:	68fb      	ldr	r3, [r7, #12]
10009d4c:	781a      	ldrb	r2, [r3, #0]
10009d4e:	687b      	ldr	r3, [r7, #4]
10009d50:	701a      	strb	r2, [r3, #0]

  pbuff++;
10009d52:	68fb      	ldr	r3, [r7, #12]
10009d54:	3301      	adds	r3, #1
10009d56:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
10009d58:	68fb      	ldr	r3, [r7, #12]
10009d5a:	781a      	ldrb	r2, [r3, #0]
10009d5c:	687b      	ldr	r3, [r7, #4]
10009d5e:	705a      	strb	r2, [r3, #1]

  pbuff++;
10009d60:	68fb      	ldr	r3, [r7, #12]
10009d62:	3301      	adds	r3, #1
10009d64:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
10009d66:	68f8      	ldr	r0, [r7, #12]
10009d68:	f7ff fabb 	bl	100092e2 <SWAPBYTE>
10009d6c:	4603      	mov	r3, r0
10009d6e:	461a      	mov	r2, r3
10009d70:	687b      	ldr	r3, [r7, #4]
10009d72:	805a      	strh	r2, [r3, #2]

  pbuff++;
10009d74:	68fb      	ldr	r3, [r7, #12]
10009d76:	3301      	adds	r3, #1
10009d78:	60fb      	str	r3, [r7, #12]
  pbuff++;
10009d7a:	68fb      	ldr	r3, [r7, #12]
10009d7c:	3301      	adds	r3, #1
10009d7e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
10009d80:	68f8      	ldr	r0, [r7, #12]
10009d82:	f7ff faae 	bl	100092e2 <SWAPBYTE>
10009d86:	4603      	mov	r3, r0
10009d88:	461a      	mov	r2, r3
10009d8a:	687b      	ldr	r3, [r7, #4]
10009d8c:	809a      	strh	r2, [r3, #4]

  pbuff++;
10009d8e:	68fb      	ldr	r3, [r7, #12]
10009d90:	3301      	adds	r3, #1
10009d92:	60fb      	str	r3, [r7, #12]
  pbuff++;
10009d94:	68fb      	ldr	r3, [r7, #12]
10009d96:	3301      	adds	r3, #1
10009d98:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
10009d9a:	68f8      	ldr	r0, [r7, #12]
10009d9c:	f7ff faa1 	bl	100092e2 <SWAPBYTE>
10009da0:	4603      	mov	r3, r0
10009da2:	461a      	mov	r2, r3
10009da4:	687b      	ldr	r3, [r7, #4]
10009da6:	80da      	strh	r2, [r3, #6]
}
10009da8:	bf00      	nop
10009daa:	3710      	adds	r7, #16
10009dac:	46bd      	mov	sp, r7
10009dae:	bd80      	pop	{r7, pc}

10009db0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
10009db0:	b580      	push	{r7, lr}
10009db2:	b082      	sub	sp, #8
10009db4:	af00      	add	r7, sp, #0
10009db6:	6078      	str	r0, [r7, #4]
10009db8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
10009dba:	2180      	movs	r1, #128	; 0x80
10009dbc:	6878      	ldr	r0, [r7, #4]
10009dbe:	f000 ff97 	bl	1000acf0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
10009dc2:	2100      	movs	r1, #0
10009dc4:	6878      	ldr	r0, [r7, #4]
10009dc6:	f000 ff93 	bl	1000acf0 <USBD_LL_StallEP>
}
10009dca:	bf00      	nop
10009dcc:	3708      	adds	r7, #8
10009dce:	46bd      	mov	sp, r7
10009dd0:	bd80      	pop	{r7, pc}

10009dd2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
10009dd2:	b580      	push	{r7, lr}
10009dd4:	b086      	sub	sp, #24
10009dd6:	af00      	add	r7, sp, #0
10009dd8:	60f8      	str	r0, [r7, #12]
10009dda:	60b9      	str	r1, [r7, #8]
10009ddc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
10009dde:	2300      	movs	r3, #0
10009de0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
10009de2:	68fb      	ldr	r3, [r7, #12]
10009de4:	2b00      	cmp	r3, #0
10009de6:	d036      	beq.n	10009e56 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
10009de8:	68fb      	ldr	r3, [r7, #12]
10009dea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
10009dec:	6938      	ldr	r0, [r7, #16]
10009dee:	f000 f836 	bl	10009e5e <USBD_GetLen>
10009df2:	4603      	mov	r3, r0
10009df4:	3301      	adds	r3, #1
10009df6:	b29b      	uxth	r3, r3
10009df8:	005b      	lsls	r3, r3, #1
10009dfa:	b29a      	uxth	r2, r3
10009dfc:	687b      	ldr	r3, [r7, #4]
10009dfe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
10009e00:	7dfb      	ldrb	r3, [r7, #23]
10009e02:	68ba      	ldr	r2, [r7, #8]
10009e04:	4413      	add	r3, r2
10009e06:	687a      	ldr	r2, [r7, #4]
10009e08:	7812      	ldrb	r2, [r2, #0]
10009e0a:	701a      	strb	r2, [r3, #0]
  idx++;
10009e0c:	7dfb      	ldrb	r3, [r7, #23]
10009e0e:	3301      	adds	r3, #1
10009e10:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
10009e12:	7dfb      	ldrb	r3, [r7, #23]
10009e14:	68ba      	ldr	r2, [r7, #8]
10009e16:	4413      	add	r3, r2
10009e18:	2203      	movs	r2, #3
10009e1a:	701a      	strb	r2, [r3, #0]
  idx++;
10009e1c:	7dfb      	ldrb	r3, [r7, #23]
10009e1e:	3301      	adds	r3, #1
10009e20:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
10009e22:	e013      	b.n	10009e4c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
10009e24:	7dfb      	ldrb	r3, [r7, #23]
10009e26:	68ba      	ldr	r2, [r7, #8]
10009e28:	4413      	add	r3, r2
10009e2a:	693a      	ldr	r2, [r7, #16]
10009e2c:	7812      	ldrb	r2, [r2, #0]
10009e2e:	701a      	strb	r2, [r3, #0]
    pdesc++;
10009e30:	693b      	ldr	r3, [r7, #16]
10009e32:	3301      	adds	r3, #1
10009e34:	613b      	str	r3, [r7, #16]
    idx++;
10009e36:	7dfb      	ldrb	r3, [r7, #23]
10009e38:	3301      	adds	r3, #1
10009e3a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
10009e3c:	7dfb      	ldrb	r3, [r7, #23]
10009e3e:	68ba      	ldr	r2, [r7, #8]
10009e40:	4413      	add	r3, r2
10009e42:	2200      	movs	r2, #0
10009e44:	701a      	strb	r2, [r3, #0]
    idx++;
10009e46:	7dfb      	ldrb	r3, [r7, #23]
10009e48:	3301      	adds	r3, #1
10009e4a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
10009e4c:	693b      	ldr	r3, [r7, #16]
10009e4e:	781b      	ldrb	r3, [r3, #0]
10009e50:	2b00      	cmp	r3, #0
10009e52:	d1e7      	bne.n	10009e24 <USBD_GetString+0x52>
10009e54:	e000      	b.n	10009e58 <USBD_GetString+0x86>
    return;
10009e56:	bf00      	nop
  }
}
10009e58:	3718      	adds	r7, #24
10009e5a:	46bd      	mov	sp, r7
10009e5c:	bd80      	pop	{r7, pc}

10009e5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
10009e5e:	b480      	push	{r7}
10009e60:	b085      	sub	sp, #20
10009e62:	af00      	add	r7, sp, #0
10009e64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
10009e66:	2300      	movs	r3, #0
10009e68:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
10009e6a:	687b      	ldr	r3, [r7, #4]
10009e6c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
10009e6e:	e005      	b.n	10009e7c <USBD_GetLen+0x1e>
  {
    len++;
10009e70:	7bfb      	ldrb	r3, [r7, #15]
10009e72:	3301      	adds	r3, #1
10009e74:	73fb      	strb	r3, [r7, #15]
    pbuff++;
10009e76:	68bb      	ldr	r3, [r7, #8]
10009e78:	3301      	adds	r3, #1
10009e7a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
10009e7c:	68bb      	ldr	r3, [r7, #8]
10009e7e:	781b      	ldrb	r3, [r3, #0]
10009e80:	2b00      	cmp	r3, #0
10009e82:	d1f5      	bne.n	10009e70 <USBD_GetLen+0x12>
  }

  return len;
10009e84:	7bfb      	ldrb	r3, [r7, #15]
}
10009e86:	4618      	mov	r0, r3
10009e88:	3714      	adds	r7, #20
10009e8a:	46bd      	mov	sp, r7
10009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
10009e90:	4770      	bx	lr

10009e92 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
10009e92:	b580      	push	{r7, lr}
10009e94:	b084      	sub	sp, #16
10009e96:	af00      	add	r7, sp, #0
10009e98:	60f8      	str	r0, [r7, #12]
10009e9a:	60b9      	str	r1, [r7, #8]
10009e9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
10009e9e:	68fb      	ldr	r3, [r7, #12]
10009ea0:	2202      	movs	r2, #2
10009ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
10009ea6:	68fb      	ldr	r3, [r7, #12]
10009ea8:	687a      	ldr	r2, [r7, #4]
10009eaa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
10009eac:	68fb      	ldr	r3, [r7, #12]
10009eae:	687a      	ldr	r2, [r7, #4]
10009eb0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
10009eb2:	687b      	ldr	r3, [r7, #4]
10009eb4:	68ba      	ldr	r2, [r7, #8]
10009eb6:	2100      	movs	r1, #0
10009eb8:	68f8      	ldr	r0, [r7, #12]
10009eba:	f000 ffa2 	bl	1000ae02 <USBD_LL_Transmit>

  return USBD_OK;
10009ebe:	2300      	movs	r3, #0
}
10009ec0:	4618      	mov	r0, r3
10009ec2:	3710      	adds	r7, #16
10009ec4:	46bd      	mov	sp, r7
10009ec6:	bd80      	pop	{r7, pc}

10009ec8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
10009ec8:	b580      	push	{r7, lr}
10009eca:	b084      	sub	sp, #16
10009ecc:	af00      	add	r7, sp, #0
10009ece:	60f8      	str	r0, [r7, #12]
10009ed0:	60b9      	str	r1, [r7, #8]
10009ed2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
10009ed4:	687b      	ldr	r3, [r7, #4]
10009ed6:	68ba      	ldr	r2, [r7, #8]
10009ed8:	2100      	movs	r1, #0
10009eda:	68f8      	ldr	r0, [r7, #12]
10009edc:	f000 ff91 	bl	1000ae02 <USBD_LL_Transmit>

  return USBD_OK;
10009ee0:	2300      	movs	r3, #0
}
10009ee2:	4618      	mov	r0, r3
10009ee4:	3710      	adds	r7, #16
10009ee6:	46bd      	mov	sp, r7
10009ee8:	bd80      	pop	{r7, pc}

10009eea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
10009eea:	b580      	push	{r7, lr}
10009eec:	b084      	sub	sp, #16
10009eee:	af00      	add	r7, sp, #0
10009ef0:	60f8      	str	r0, [r7, #12]
10009ef2:	60b9      	str	r1, [r7, #8]
10009ef4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
10009ef6:	68fb      	ldr	r3, [r7, #12]
10009ef8:	2203      	movs	r2, #3
10009efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
10009efe:	68fb      	ldr	r3, [r7, #12]
10009f00:	687a      	ldr	r2, [r7, #4]
10009f02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
10009f06:	68fb      	ldr	r3, [r7, #12]
10009f08:	687a      	ldr	r2, [r7, #4]
10009f0a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
10009f0e:	687b      	ldr	r3, [r7, #4]
10009f10:	68ba      	ldr	r2, [r7, #8]
10009f12:	2100      	movs	r1, #0
10009f14:	68f8      	ldr	r0, [r7, #12]
10009f16:	f000 ff95 	bl	1000ae44 <USBD_LL_PrepareReceive>

  return USBD_OK;
10009f1a:	2300      	movs	r3, #0
}
10009f1c:	4618      	mov	r0, r3
10009f1e:	3710      	adds	r7, #16
10009f20:	46bd      	mov	sp, r7
10009f22:	bd80      	pop	{r7, pc}

10009f24 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
10009f24:	b580      	push	{r7, lr}
10009f26:	b084      	sub	sp, #16
10009f28:	af00      	add	r7, sp, #0
10009f2a:	60f8      	str	r0, [r7, #12]
10009f2c:	60b9      	str	r1, [r7, #8]
10009f2e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
10009f30:	687b      	ldr	r3, [r7, #4]
10009f32:	68ba      	ldr	r2, [r7, #8]
10009f34:	2100      	movs	r1, #0
10009f36:	68f8      	ldr	r0, [r7, #12]
10009f38:	f000 ff84 	bl	1000ae44 <USBD_LL_PrepareReceive>

  return USBD_OK;
10009f3c:	2300      	movs	r3, #0
}
10009f3e:	4618      	mov	r0, r3
10009f40:	3710      	adds	r7, #16
10009f42:	46bd      	mov	sp, r7
10009f44:	bd80      	pop	{r7, pc}

10009f46 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
10009f46:	b580      	push	{r7, lr}
10009f48:	b082      	sub	sp, #8
10009f4a:	af00      	add	r7, sp, #0
10009f4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
10009f4e:	687b      	ldr	r3, [r7, #4]
10009f50:	2204      	movs	r2, #4
10009f52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
10009f56:	2300      	movs	r3, #0
10009f58:	2200      	movs	r2, #0
10009f5a:	2100      	movs	r1, #0
10009f5c:	6878      	ldr	r0, [r7, #4]
10009f5e:	f000 ff50 	bl	1000ae02 <USBD_LL_Transmit>

  return USBD_OK;
10009f62:	2300      	movs	r3, #0
}
10009f64:	4618      	mov	r0, r3
10009f66:	3708      	adds	r7, #8
10009f68:	46bd      	mov	sp, r7
10009f6a:	bd80      	pop	{r7, pc}

10009f6c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
10009f6c:	b580      	push	{r7, lr}
10009f6e:	b082      	sub	sp, #8
10009f70:	af00      	add	r7, sp, #0
10009f72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
10009f74:	687b      	ldr	r3, [r7, #4]
10009f76:	2205      	movs	r2, #5
10009f78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
10009f7c:	2300      	movs	r3, #0
10009f7e:	2200      	movs	r2, #0
10009f80:	2100      	movs	r1, #0
10009f82:	6878      	ldr	r0, [r7, #4]
10009f84:	f000 ff5e 	bl	1000ae44 <USBD_LL_PrepareReceive>

  return USBD_OK;
10009f88:	2300      	movs	r3, #0
}
10009f8a:	4618      	mov	r0, r3
10009f8c:	3708      	adds	r7, #8
10009f8e:	46bd      	mov	sp, r7
10009f90:	bd80      	pop	{r7, pc}
	...

10009f94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
10009f94:	b580      	push	{r7, lr}
10009f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
10009f98:	2200      	movs	r2, #0
10009f9a:	4912      	ldr	r1, [pc, #72]	; (10009fe4 <MX_USB_DEVICE_Init+0x50>)
10009f9c:	4812      	ldr	r0, [pc, #72]	; (10009fe8 <MX_USB_DEVICE_Init+0x54>)
10009f9e:	f7fe fe8f 	bl	10008cc0 <USBD_Init>
10009fa2:	4603      	mov	r3, r0
10009fa4:	2b00      	cmp	r3, #0
10009fa6:	d001      	beq.n	10009fac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
10009fa8:	f7fa f970 	bl	1000428c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
10009fac:	490f      	ldr	r1, [pc, #60]	; (10009fec <MX_USB_DEVICE_Init+0x58>)
10009fae:	480e      	ldr	r0, [pc, #56]	; (10009fe8 <MX_USB_DEVICE_Init+0x54>)
10009fb0:	f7fe feb6 	bl	10008d20 <USBD_RegisterClass>
10009fb4:	4603      	mov	r3, r0
10009fb6:	2b00      	cmp	r3, #0
10009fb8:	d001      	beq.n	10009fbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
10009fba:	f7fa f967 	bl	1000428c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
10009fbe:	490c      	ldr	r1, [pc, #48]	; (10009ff0 <MX_USB_DEVICE_Init+0x5c>)
10009fc0:	4809      	ldr	r0, [pc, #36]	; (10009fe8 <MX_USB_DEVICE_Init+0x54>)
10009fc2:	f7fe fdd7 	bl	10008b74 <USBD_CDC_RegisterInterface>
10009fc6:	4603      	mov	r3, r0
10009fc8:	2b00      	cmp	r3, #0
10009fca:	d001      	beq.n	10009fd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
10009fcc:	f7fa f95e 	bl	1000428c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
10009fd0:	4805      	ldr	r0, [pc, #20]	; (10009fe8 <MX_USB_DEVICE_Init+0x54>)
10009fd2:	f7fe fecc 	bl	10008d6e <USBD_Start>
10009fd6:	4603      	mov	r3, r0
10009fd8:	2b00      	cmp	r3, #0
10009fda:	d001      	beq.n	10009fe0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
10009fdc:	f7fa f956 	bl	1000428c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
10009fe0:	bf00      	nop
10009fe2:	bd80      	pop	{r7, pc}
10009fe4:	20000130 	.word	0x20000130
10009fe8:	20000588 	.word	0x20000588
10009fec:	20000018 	.word	0x20000018
10009ff0:	2000011c 	.word	0x2000011c

10009ff4 <b_Get_flagrun>:
  * @{
  */

/* USER CODE BEGIN PRIVATE_MACRO */
bool b_Get_flagrun()
{
10009ff4:	b480      	push	{r7}
10009ff6:	af00      	add	r7, sp, #0
	return xUSBDownloadVar.flag_run;
10009ff8:	4b03      	ldr	r3, [pc, #12]	; (1000a008 <b_Get_flagrun+0x14>)
10009ffa:	7c5b      	ldrb	r3, [r3, #17]
10009ffc:	b2db      	uxtb	r3, r3
}
10009ffe:	4618      	mov	r0, r3
1000a000:	46bd      	mov	sp, r7
1000a002:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a006:	4770      	bx	lr
1000a008:	20000298 	.word	0x20000298

1000a00c <v_Clear_flagrun>:

void v_Clear_flagrun()
{
1000a00c:	b480      	push	{r7}
1000a00e:	af00      	add	r7, sp, #0
	xUSBDownloadVar.flag_run = false;
1000a010:	4b03      	ldr	r3, [pc, #12]	; (1000a020 <v_Clear_flagrun+0x14>)
1000a012:	2200      	movs	r2, #0
1000a014:	745a      	strb	r2, [r3, #17]
}
1000a016:	bf00      	nop
1000a018:	46bd      	mov	sp, r7
1000a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a01e:	4770      	bx	lr
1000a020:	20000298 	.word	0x20000298

1000a024 <ui_Get_testindex>:

uint16_t ui_Get_testindex()
{
1000a024:	b480      	push	{r7}
1000a026:	af00      	add	r7, sp, #0
	return xUSBDownloadVar.test_index;
1000a028:	4b03      	ldr	r3, [pc, #12]	; (1000a038 <ui_Get_testindex+0x14>)
1000a02a:	8a5b      	ldrh	r3, [r3, #18]
1000a02c:	b29b      	uxth	r3, r3
}
1000a02e:	4618      	mov	r0, r3
1000a030:	46bd      	mov	sp, r7
1000a032:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a036:	4770      	bx	lr
1000a038:	20000298 	.word	0x20000298

1000a03c <ui_Get_testsize>:

uint16_t ui_Get_testsize()
{
1000a03c:	b480      	push	{r7}
1000a03e:	af00      	add	r7, sp, #0
	return xUSBDownloadVar.test_size;
1000a040:	4b03      	ldr	r3, [pc, #12]	; (1000a050 <ui_Get_testsize+0x14>)
1000a042:	8a9b      	ldrh	r3, [r3, #20]
1000a044:	b29b      	uxth	r3, r3
}
1000a046:	4618      	mov	r0, r3
1000a048:	46bd      	mov	sp, r7
1000a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a04e:	4770      	bx	lr
1000a050:	20000298 	.word	0x20000298

1000a054 <ui_Get_flagmodel>:

uint8_t ui_Get_flagmodel()
{
1000a054:	b480      	push	{r7}
1000a056:	af00      	add	r7, sp, #0
	return xUSBDownloadVar.flag_model;
1000a058:	4b03      	ldr	r3, [pc, #12]	; (1000a068 <ui_Get_flagmodel+0x14>)
1000a05a:	7c1b      	ldrb	r3, [r3, #16]
1000a05c:	b2db      	uxtb	r3, r3
}
1000a05e:	4618      	mov	r0, r3
1000a060:	46bd      	mov	sp, r7
1000a062:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a066:	4770      	bx	lr
1000a068:	20000298 	.word	0x20000298

1000a06c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
1000a06c:	b580      	push	{r7, lr}
1000a06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
1000a070:	2200      	movs	r2, #0
1000a072:	4905      	ldr	r1, [pc, #20]	; (1000a088 <CDC_Init_FS+0x1c>)
1000a074:	4805      	ldr	r0, [pc, #20]	; (1000a08c <CDC_Init_FS+0x20>)
1000a076:	f7fe fd92 	bl	10008b9e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
1000a07a:	4905      	ldr	r1, [pc, #20]	; (1000a090 <CDC_Init_FS+0x24>)
1000a07c:	4803      	ldr	r0, [pc, #12]	; (1000a08c <CDC_Init_FS+0x20>)
1000a07e:	f7fe fdac 	bl	10008bda <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
1000a082:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
1000a084:	4618      	mov	r0, r3
1000a086:	bd80      	pop	{r7, pc}
1000a088:	20001058 	.word	0x20001058
1000a08c:	20000588 	.word	0x20000588
1000a090:	20000858 	.word	0x20000858

1000a094 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
1000a094:	b480      	push	{r7}
1000a096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
1000a098:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
1000a09a:	4618      	mov	r0, r3
1000a09c:	46bd      	mov	sp, r7
1000a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a0a2:	4770      	bx	lr

1000a0a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
1000a0a4:	b480      	push	{r7}
1000a0a6:	b083      	sub	sp, #12
1000a0a8:	af00      	add	r7, sp, #0
1000a0aa:	4603      	mov	r3, r0
1000a0ac:	6039      	str	r1, [r7, #0]
1000a0ae:	71fb      	strb	r3, [r7, #7]
1000a0b0:	4613      	mov	r3, r2
1000a0b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
1000a0b4:	79fb      	ldrb	r3, [r7, #7]
1000a0b6:	2b23      	cmp	r3, #35	; 0x23
1000a0b8:	d84a      	bhi.n	1000a150 <CDC_Control_FS+0xac>
1000a0ba:	a201      	add	r2, pc, #4	; (adr r2, 1000a0c0 <CDC_Control_FS+0x1c>)
1000a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000a0c0:	1000a151 	.word	0x1000a151
1000a0c4:	1000a151 	.word	0x1000a151
1000a0c8:	1000a151 	.word	0x1000a151
1000a0cc:	1000a151 	.word	0x1000a151
1000a0d0:	1000a151 	.word	0x1000a151
1000a0d4:	1000a151 	.word	0x1000a151
1000a0d8:	1000a151 	.word	0x1000a151
1000a0dc:	1000a151 	.word	0x1000a151
1000a0e0:	1000a151 	.word	0x1000a151
1000a0e4:	1000a151 	.word	0x1000a151
1000a0e8:	1000a151 	.word	0x1000a151
1000a0ec:	1000a151 	.word	0x1000a151
1000a0f0:	1000a151 	.word	0x1000a151
1000a0f4:	1000a151 	.word	0x1000a151
1000a0f8:	1000a151 	.word	0x1000a151
1000a0fc:	1000a151 	.word	0x1000a151
1000a100:	1000a151 	.word	0x1000a151
1000a104:	1000a151 	.word	0x1000a151
1000a108:	1000a151 	.word	0x1000a151
1000a10c:	1000a151 	.word	0x1000a151
1000a110:	1000a151 	.word	0x1000a151
1000a114:	1000a151 	.word	0x1000a151
1000a118:	1000a151 	.word	0x1000a151
1000a11c:	1000a151 	.word	0x1000a151
1000a120:	1000a151 	.word	0x1000a151
1000a124:	1000a151 	.word	0x1000a151
1000a128:	1000a151 	.word	0x1000a151
1000a12c:	1000a151 	.word	0x1000a151
1000a130:	1000a151 	.word	0x1000a151
1000a134:	1000a151 	.word	0x1000a151
1000a138:	1000a151 	.word	0x1000a151
1000a13c:	1000a151 	.word	0x1000a151
1000a140:	1000a151 	.word	0x1000a151
1000a144:	1000a151 	.word	0x1000a151
1000a148:	1000a151 	.word	0x1000a151
1000a14c:	1000a151 	.word	0x1000a151
    case CDC_SEND_BREAK:

    break;

  default:
    break;
1000a150:	bf00      	nop
  }

  return (USBD_OK);
1000a152:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
1000a154:	4618      	mov	r0, r3
1000a156:	370c      	adds	r7, #12
1000a158:	46bd      	mov	sp, r7
1000a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a15e:	4770      	bx	lr

1000a160 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
1000a160:	b5b0      	push	{r4, r5, r7, lr}
1000a162:	b09e      	sub	sp, #120	; 0x78
1000a164:	af00      	add	r7, sp, #0
1000a166:	6078      	str	r0, [r7, #4]
1000a168:	6039      	str	r1, [r7, #0]
	uint8_t	Aux_Buffer[16];
	uint8_t dig_count;
	uint16_t num;
	static	uint16_t	PacketCount = 0;
	static uint32_t		Flash_BaseAddr;
	int i = 0;
1000a16a:	2300      	movs	r3, #0
1000a16c:	673b      	str	r3, [r7, #112]	; 0x70
	static uint32_t		flash_cont = 0;

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
1000a16e:	6879      	ldr	r1, [r7, #4]
1000a170:	48c3      	ldr	r0, [pc, #780]	; (1000a480 <CDC_Receive_FS+0x320>)
1000a172:	f7fe fd32 	bl	10008bda <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
1000a176:	48c2      	ldr	r0, [pc, #776]	; (1000a480 <CDC_Receive_FS+0x320>)
1000a178:	f7fe fd78 	bl	10008c6c <USBD_CDC_ReceivePacket>

	if(xUSBDownloadVar.RxMode == true)
1000a17c:	4bc1      	ldr	r3, [pc, #772]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a17e:	781b      	ldrb	r3, [r3, #0]
1000a180:	b2db      	uxtb	r3, r3
1000a182:	2b00      	cmp	r3, #0
1000a184:	d06a      	beq.n	1000a25c <CDC_Receive_FS+0xfc>
	{
		USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
1000a186:	6879      	ldr	r1, [r7, #4]
1000a188:	48bd      	ldr	r0, [pc, #756]	; (1000a480 <CDC_Receive_FS+0x320>)
1000a18a:	f7fe fd26 	bl	10008bda <USBD_CDC_SetRxBuffer>
		USBD_CDC_ReceivePacket(&hUsbDeviceFS);
1000a18e:	48bc      	ldr	r0, [pc, #752]	; (1000a480 <CDC_Receive_FS+0x320>)
1000a190:	f7fe fd6c 	bl	10008c6c <USBD_CDC_ReceivePacket>
		for(i = 0; i<(*Len); i++)
1000a194:	2300      	movs	r3, #0
1000a196:	673b      	str	r3, [r7, #112]	; 0x70
1000a198:	e019      	b.n	1000a1ce <CDC_Receive_FS+0x6e>
		{
			HAL_FLASH_Unlock();
1000a19a:	f7fa fb67 	bl	1000486c <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (flash_cont + i), Buf[i]);
1000a19e:	4bba      	ldr	r3, [pc, #744]	; (1000a488 <CDC_Receive_FS+0x328>)
1000a1a0:	681a      	ldr	r2, [r3, #0]
1000a1a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1000a1a4:	18d1      	adds	r1, r2, r3
1000a1a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1000a1a8:	687a      	ldr	r2, [r7, #4]
1000a1aa:	4413      	add	r3, r2
1000a1ac:	781b      	ldrb	r3, [r3, #0]
1000a1ae:	b2da      	uxtb	r2, r3
1000a1b0:	f04f 0300 	mov.w	r3, #0
1000a1b4:	2000      	movs	r0, #0
1000a1b6:	f7fa fb05 	bl	100047c4 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
1000a1ba:	f7fa fb79 	bl	100048b0 <HAL_FLASH_Lock>
			Buf[i]=0;
1000a1be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1000a1c0:	687a      	ldr	r2, [r7, #4]
1000a1c2:	4413      	add	r3, r2
1000a1c4:	2200      	movs	r2, #0
1000a1c6:	701a      	strb	r2, [r3, #0]
		for(i = 0; i<(*Len); i++)
1000a1c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1000a1ca:	3301      	adds	r3, #1
1000a1cc:	673b      	str	r3, [r7, #112]	; 0x70
1000a1ce:	683b      	ldr	r3, [r7, #0]
1000a1d0:	681a      	ldr	r2, [r3, #0]
1000a1d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1000a1d4:	429a      	cmp	r2, r3
1000a1d6:	d8e0      	bhi.n	1000a19a <CDC_Receive_FS+0x3a>
		}
		flash_cont += *Len;
1000a1d8:	683b      	ldr	r3, [r7, #0]
1000a1da:	681a      	ldr	r2, [r3, #0]
1000a1dc:	4baa      	ldr	r3, [pc, #680]	; (1000a488 <CDC_Receive_FS+0x328>)
1000a1de:	681b      	ldr	r3, [r3, #0]
1000a1e0:	4413      	add	r3, r2
1000a1e2:	4aa9      	ldr	r2, [pc, #676]	; (1000a488 <CDC_Receive_FS+0x328>)
1000a1e4:	6013      	str	r3, [r2, #0]

		PacketCount++;
1000a1e6:	4ba9      	ldr	r3, [pc, #676]	; (1000a48c <CDC_Receive_FS+0x32c>)
1000a1e8:	881b      	ldrh	r3, [r3, #0]
1000a1ea:	3301      	adds	r3, #1
1000a1ec:	b29a      	uxth	r2, r3
1000a1ee:	4ba7      	ldr	r3, [pc, #668]	; (1000a48c <CDC_Receive_FS+0x32c>)
1000a1f0:	801a      	strh	r2, [r3, #0]
		//if(PacketCount >= ((xUSBDownloadVar.Size+(PACKET_SIZE-1))/PACKET_SIZE))
		if((flash_cont - Flash_BaseAddr) >= xUSBDownloadVar.Size)
1000a1f2:	4ba5      	ldr	r3, [pc, #660]	; (1000a488 <CDC_Receive_FS+0x328>)
1000a1f4:	681a      	ldr	r2, [r3, #0]
1000a1f6:	4ba6      	ldr	r3, [pc, #664]	; (1000a490 <CDC_Receive_FS+0x330>)
1000a1f8:	681b      	ldr	r3, [r3, #0]
1000a1fa:	1ad2      	subs	r2, r2, r3
1000a1fc:	4ba1      	ldr	r3, [pc, #644]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a1fe:	685b      	ldr	r3, [r3, #4]
1000a200:	429a      	cmp	r2, r3
1000a202:	f0c0 820e 	bcc.w	1000a622 <CDC_Receive_FS+0x4c2>
		{
			xUSBDownloadVar.RxMode	=	false;
1000a206:	4b9f      	ldr	r3, [pc, #636]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a208:	2200      	movs	r2, #0
1000a20a:	701a      	strb	r2, [r3, #0]
			strncpy((char*)Tx_Buffer, "File Received.\0", 15);
1000a20c:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a210:	4aa0      	ldr	r2, [pc, #640]	; (1000a494 <CDC_Receive_FS+0x334>)
1000a212:	461c      	mov	r4, r3
1000a214:	4613      	mov	r3, r2
1000a216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1000a218:	c407      	stmia	r4!, {r0, r1, r2}
1000a21a:	8023      	strh	r3, [r4, #0]
1000a21c:	3402      	adds	r4, #2
1000a21e:	0c1b      	lsrs	r3, r3, #16
1000a220:	7023      	strb	r3, [r4, #0]
			CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
1000a222:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a226:	4618      	mov	r0, r3
1000a228:	f7f5 ff0a 	bl	10000040 <strlen>
1000a22c:	4603      	mov	r3, r0
1000a22e:	b29a      	uxth	r2, r3
1000a230:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a234:	4611      	mov	r1, r2
1000a236:	4618      	mov	r0, r3
1000a238:	f000 fa20 	bl	1000a67c <CDC_Transmit_FS>
			switch(xUSBDownloadVar.DataType)
1000a23c:	4b91      	ldr	r3, [pc, #580]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a23e:	7a1b      	ldrb	r3, [r3, #8]
1000a240:	b2db      	uxtb	r3, r3
1000a242:	2b02      	cmp	r3, #2
1000a244:	f000 81ef 	beq.w	1000a626 <CDC_Receive_FS+0x4c6>
1000a248:	2b02      	cmp	r3, #2
1000a24a:	f300 81ee 	bgt.w	1000a62a <CDC_Receive_FS+0x4ca>
1000a24e:	2b00      	cmp	r3, #0
1000a250:	f000 81ed 	beq.w	1000a62e <CDC_Receive_FS+0x4ce>
1000a254:	2b01      	cmp	r3, #1
1000a256:	f000 81ec 	beq.w	1000a632 <CDC_Receive_FS+0x4d2>
			case DATATYPE_FLOATMODEL:
				break;
			case DATATYPE_INTMODEL:
				break;
			default:
				break;
1000a25a:	e1e6      	b.n	1000a62a <CDC_Receive_FS+0x4ca>
			}
		}
	}
	else
	{
		switch(Buf[0])
1000a25c:	687b      	ldr	r3, [r7, #4]
1000a25e:	781b      	ldrb	r3, [r3, #0]
1000a260:	3b44      	subs	r3, #68	; 0x44
1000a262:	2b0f      	cmp	r3, #15
1000a264:	f200 81e7 	bhi.w	1000a636 <CDC_Receive_FS+0x4d6>
1000a268:	a201      	add	r2, pc, #4	; (adr r2, 1000a270 <CDC_Receive_FS+0x110>)
1000a26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000a26e:	bf00      	nop
1000a270:	1000a327 	.word	0x1000a327
1000a274:	1000a637 	.word	0x1000a637
1000a278:	1000a637 	.word	0x1000a637
1000a27c:	1000a637 	.word	0x1000a637
1000a280:	1000a637 	.word	0x1000a637
1000a284:	1000a3e3 	.word	0x1000a3e3
1000a288:	1000a637 	.word	0x1000a637
1000a28c:	1000a637 	.word	0x1000a637
1000a290:	1000a637 	.word	0x1000a637
1000a294:	1000a535 	.word	0x1000a535
1000a298:	1000a637 	.word	0x1000a637
1000a29c:	1000a637 	.word	0x1000a637
1000a2a0:	1000a637 	.word	0x1000a637
1000a2a4:	1000a637 	.word	0x1000a637
1000a2a8:	1000a5c1 	.word	0x1000a5c1
1000a2ac:	1000a2b1 	.word	0x1000a2b1
		{
			case	USB_MODE_TRANSFER_SIZE:
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
1000a2b0:	6879      	ldr	r1, [r7, #4]
1000a2b2:	4873      	ldr	r0, [pc, #460]	; (1000a480 <CDC_Receive_FS+0x320>)
1000a2b4:	f7fe fc91 	bl	10008bda <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
1000a2b8:	4871      	ldr	r0, [pc, #452]	; (1000a480 <CDC_Receive_FS+0x320>)
1000a2ba:	f7fe fcd7 	bl	10008c6c <USBD_CDC_ReceivePacket>

				free(xUSBDownloadVar.DataBuffer);
1000a2be:	4b71      	ldr	r3, [pc, #452]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a2c0:	68db      	ldr	r3, [r3, #12]
1000a2c2:	4618      	mov	r0, r3
1000a2c4:	f000 fe86 	bl	1000afd4 <free>
				xUSBDownloadVar.Size = atoi((char*)&Buf[POS_TRANSFER_SIZE]);
1000a2c8:	687b      	ldr	r3, [r7, #4]
1000a2ca:	3302      	adds	r3, #2
1000a2cc:	4618      	mov	r0, r3
1000a2ce:	f000 fe31 	bl	1000af34 <atoi>
1000a2d2:	4603      	mov	r3, r0
1000a2d4:	461a      	mov	r2, r3
1000a2d6:	4b6b      	ldr	r3, [pc, #428]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a2d8:	605a      	str	r2, [r3, #4]

				strncpy((char*)Tx_Buffer, "Size Received for Data Transfer: ", 36);
1000a2da:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a2de:	2224      	movs	r2, #36	; 0x24
1000a2e0:	496d      	ldr	r1, [pc, #436]	; (1000a498 <CDC_Receive_FS+0x338>)
1000a2e2:	4618      	mov	r0, r3
1000a2e4:	f000 ff6f 	bl	1000b1c6 <strncpy>
				itoa(xUSBDownloadVar.Size, (char*)Aux_Buffer,10);
1000a2e8:	4b66      	ldr	r3, [pc, #408]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a2ea:	685b      	ldr	r3, [r3, #4]
1000a2ec:	4618      	mov	r0, r3
1000a2ee:	f107 0320 	add.w	r3, r7, #32
1000a2f2:	220a      	movs	r2, #10
1000a2f4:	4619      	mov	r1, r3
1000a2f6:	f000 fe63 	bl	1000afc0 <itoa>
				strcat((char*)Tx_Buffer, (char*)Aux_Buffer);
1000a2fa:	f107 0220 	add.w	r2, r7, #32
1000a2fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a302:	4611      	mov	r1, r2
1000a304:	4618      	mov	r0, r3
1000a306:	f000 ff3d 	bl	1000b184 <strcat>
				strcat((char*)Tx_Buffer, "\0");

				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
1000a30a:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a30e:	4618      	mov	r0, r3
1000a310:	f7f5 fe96 	bl	10000040 <strlen>
1000a314:	4603      	mov	r3, r0
1000a316:	b29a      	uxth	r2, r3
1000a318:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a31c:	4611      	mov	r1, r2
1000a31e:	4618      	mov	r0, r3
1000a320:	f000 f9ac 	bl	1000a67c <CDC_Transmit_FS>
			break;
1000a324:	e18a      	b.n	1000a63c <CDC_Receive_FS+0x4dc>

			case	USB_MODE_TRANSFER_DATATYPE:
				if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "dataset", 7) == 0)
1000a326:	687b      	ldr	r3, [r7, #4]
1000a328:	3302      	adds	r3, #2
1000a32a:	2207      	movs	r2, #7
1000a32c:	495b      	ldr	r1, [pc, #364]	; (1000a49c <CDC_Receive_FS+0x33c>)
1000a32e:	4618      	mov	r0, r3
1000a330:	f000 ff37 	bl	1000b1a2 <strncmp>
1000a334:	4603      	mov	r3, r0
1000a336:	2b00      	cmp	r3, #0
1000a338:	d10a      	bne.n	1000a350 <CDC_Receive_FS+0x1f0>
				{
					xUSBDownloadVar.DataType = DATATYPE_DATASET;
1000a33a:	4b52      	ldr	r3, [pc, #328]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a33c:	2200      	movs	r2, #0
1000a33e:	721a      	strb	r2, [r3, #8]
					strncpy((char*)Tx_Buffer, "Data Type: dataset\0", 20);
1000a340:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a344:	2214      	movs	r2, #20
1000a346:	4956      	ldr	r1, [pc, #344]	; (1000a4a0 <CDC_Receive_FS+0x340>)
1000a348:	4618      	mov	r0, r3
1000a34a:	f000 ff3c 	bl	1000b1c6 <strncpy>
1000a34e:	e033      	b.n	1000a3b8 <CDC_Receive_FS+0x258>
				}
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "float model", 11) == 0)
1000a350:	687b      	ldr	r3, [r7, #4]
1000a352:	3302      	adds	r3, #2
1000a354:	220b      	movs	r2, #11
1000a356:	4953      	ldr	r1, [pc, #332]	; (1000a4a4 <CDC_Receive_FS+0x344>)
1000a358:	4618      	mov	r0, r3
1000a35a:	f000 ff22 	bl	1000b1a2 <strncmp>
1000a35e:	4603      	mov	r3, r0
1000a360:	2b00      	cmp	r3, #0
1000a362:	d10a      	bne.n	1000a37a <CDC_Receive_FS+0x21a>
				{
					xUSBDownloadVar.DataType = DATATYPE_FLOATMODEL;
1000a364:	4b47      	ldr	r3, [pc, #284]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a366:	2201      	movs	r2, #1
1000a368:	721a      	strb	r2, [r3, #8]
					strncpy((char*)Tx_Buffer, "Data Type: float model\0", 33);
1000a36a:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a36e:	2221      	movs	r2, #33	; 0x21
1000a370:	494d      	ldr	r1, [pc, #308]	; (1000a4a8 <CDC_Receive_FS+0x348>)
1000a372:	4618      	mov	r0, r3
1000a374:	f000 ff27 	bl	1000b1c6 <strncpy>
1000a378:	e01e      	b.n	1000a3b8 <CDC_Receive_FS+0x258>
				}
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int model", 9) == 0)
1000a37a:	687b      	ldr	r3, [r7, #4]
1000a37c:	3302      	adds	r3, #2
1000a37e:	2209      	movs	r2, #9
1000a380:	494a      	ldr	r1, [pc, #296]	; (1000a4ac <CDC_Receive_FS+0x34c>)
1000a382:	4618      	mov	r0, r3
1000a384:	f000 ff0d 	bl	1000b1a2 <strncmp>
1000a388:	4603      	mov	r3, r0
1000a38a:	2b00      	cmp	r3, #0
1000a38c:	d10a      	bne.n	1000a3a4 <CDC_Receive_FS+0x244>
				{
					xUSBDownloadVar.DataType = DATATYPE_INTMODEL;
1000a38e:	4b3d      	ldr	r3, [pc, #244]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a390:	2202      	movs	r2, #2
1000a392:	721a      	strb	r2, [r3, #8]
					strncpy((char*)Tx_Buffer, "Data Type: int model\0", 33);
1000a394:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a398:	2221      	movs	r2, #33	; 0x21
1000a39a:	4945      	ldr	r1, [pc, #276]	; (1000a4b0 <CDC_Receive_FS+0x350>)
1000a39c:	4618      	mov	r0, r3
1000a39e:	f000 ff12 	bl	1000b1c6 <strncpy>
1000a3a2:	e009      	b.n	1000a3b8 <CDC_Receive_FS+0x258>
				}
				else
				{
					xUSBDownloadVar.DataType = 0xff;
1000a3a4:	4b37      	ldr	r3, [pc, #220]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a3a6:	22ff      	movs	r2, #255	; 0xff
1000a3a8:	721a      	strb	r2, [r3, #8]
					strncpy((char*)Tx_Buffer, "Data Type: Error\0", 33);
1000a3aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a3ae:	2221      	movs	r2, #33	; 0x21
1000a3b0:	4940      	ldr	r1, [pc, #256]	; (1000a4b4 <CDC_Receive_FS+0x354>)
1000a3b2:	4618      	mov	r0, r3
1000a3b4:	f000 ff07 	bl	1000b1c6 <strncpy>
				}
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
1000a3b8:	6879      	ldr	r1, [r7, #4]
1000a3ba:	4831      	ldr	r0, [pc, #196]	; (1000a480 <CDC_Receive_FS+0x320>)
1000a3bc:	f7fe fc0d 	bl	10008bda <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
1000a3c0:	482f      	ldr	r0, [pc, #188]	; (1000a480 <CDC_Receive_FS+0x320>)
1000a3c2:	f7fe fc53 	bl	10008c6c <USBD_CDC_ReceivePacket>

				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
1000a3c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a3ca:	4618      	mov	r0, r3
1000a3cc:	f7f5 fe38 	bl	10000040 <strlen>
1000a3d0:	4603      	mov	r3, r0
1000a3d2:	b29a      	uxth	r2, r3
1000a3d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a3d8:	4611      	mov	r1, r2
1000a3da:	4618      	mov	r0, r3
1000a3dc:	f000 f94e 	bl	1000a67c <CDC_Transmit_FS>
			break;
1000a3e0:	e12c      	b.n	1000a63c <CDC_Receive_FS+0x4dc>

			case	USB_MODE_INITTRANSFER:;
				/* Flash Erase Variables */
				uint32_t SectorError;
				FLASH_EraseInitTypeDef xFlash_Erase;
				xFlash_Erase.TypeErase = FLASH_TYPEERASE_SECTORS;
1000a3e2:	2300      	movs	r3, #0
1000a3e4:	60bb      	str	r3, [r7, #8]
				xFlash_Erase.NbSectors = 1;
1000a3e6:	2301      	movs	r3, #1
1000a3e8:	617b      	str	r3, [r7, #20]
				xFlash_Erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
1000a3ea:	2302      	movs	r3, #2
1000a3ec:	61bb      	str	r3, [r7, #24]

				/* Flash Sector Erase */
				HAL_FLASH_Unlock();
1000a3ee:	f7fa fa3d 	bl	1000486c <HAL_FLASH_Unlock>
				switch(xUSBDownloadVar.DataType)
1000a3f2:	4b24      	ldr	r3, [pc, #144]	; (1000a484 <CDC_Receive_FS+0x324>)
1000a3f4:	7a1b      	ldrb	r3, [r3, #8]
1000a3f6:	b2db      	uxtb	r3, r3
1000a3f8:	2b02      	cmp	r3, #2
1000a3fa:	d061      	beq.n	1000a4c0 <CDC_Receive_FS+0x360>
1000a3fc:	2b02      	cmp	r3, #2
1000a3fe:	dc6d      	bgt.n	1000a4dc <CDC_Receive_FS+0x37c>
1000a400:	2b00      	cmp	r3, #0
1000a402:	d002      	beq.n	1000a40a <CDC_Receive_FS+0x2aa>
1000a404:	2b01      	cmp	r3, #1
1000a406:	d02c      	beq.n	1000a462 <CDC_Receive_FS+0x302>
1000a408:	e068      	b.n	1000a4dc <CDC_Receive_FS+0x37c>
				{
				case DATATYPE_DATASET	:
					xFlash_Erase.Sector = FLASH_SECTOR_6;
1000a40a:	2306      	movs	r3, #6
1000a40c:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
1000a40e:	f107 021c 	add.w	r2, r7, #28
1000a412:	f107 0308 	add.w	r3, r7, #8
1000a416:	4611      	mov	r1, r2
1000a418:	4618      	mov	r0, r3
1000a41a:	f7fa fb89 	bl	10004b30 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_7;
1000a41e:	2307      	movs	r3, #7
1000a420:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
1000a422:	f107 021c 	add.w	r2, r7, #28
1000a426:	f107 0308 	add.w	r3, r7, #8
1000a42a:	4611      	mov	r1, r2
1000a42c:	4618      	mov	r0, r3
1000a42e:	f7fa fb7f 	bl	10004b30 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_8;
1000a432:	2308      	movs	r3, #8
1000a434:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
1000a436:	f107 021c 	add.w	r2, r7, #28
1000a43a:	f107 0308 	add.w	r3, r7, #8
1000a43e:	4611      	mov	r1, r2
1000a440:	4618      	mov	r0, r3
1000a442:	f7fa fb75 	bl	10004b30 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_9;
1000a446:	2309      	movs	r3, #9
1000a448:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
1000a44a:	f107 021c 	add.w	r2, r7, #28
1000a44e:	f107 0308 	add.w	r3, r7, #8
1000a452:	4611      	mov	r1, r2
1000a454:	4618      	mov	r0, r3
1000a456:	f7fa fb6b 	bl	10004b30 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_DATASET;
1000a45a:	4b0d      	ldr	r3, [pc, #52]	; (1000a490 <CDC_Receive_FS+0x330>)
1000a45c:	4a16      	ldr	r2, [pc, #88]	; (1000a4b8 <CDC_Receive_FS+0x358>)
1000a45e:	601a      	str	r2, [r3, #0]
					break;
1000a460:	e03c      	b.n	1000a4dc <CDC_Receive_FS+0x37c>
				case DATATYPE_FLOATMODEL:
					xFlash_Erase.Sector = FLASH_SECTOR_10;
1000a462:	230a      	movs	r3, #10
1000a464:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
1000a466:	f107 021c 	add.w	r2, r7, #28
1000a46a:	f107 0308 	add.w	r3, r7, #8
1000a46e:	4611      	mov	r1, r2
1000a470:	4618      	mov	r0, r3
1000a472:	f7fa fb5d 	bl	10004b30 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_FLOATMODEL;
1000a476:	4b06      	ldr	r3, [pc, #24]	; (1000a490 <CDC_Receive_FS+0x330>)
1000a478:	4a10      	ldr	r2, [pc, #64]	; (1000a4bc <CDC_Receive_FS+0x35c>)
1000a47a:	601a      	str	r2, [r3, #0]
					break;
1000a47c:	e02e      	b.n	1000a4dc <CDC_Receive_FS+0x37c>
1000a47e:	bf00      	nop
1000a480:	20000588 	.word	0x20000588
1000a484:	20000298 	.word	0x20000298
1000a488:	200002b0 	.word	0x200002b0
1000a48c:	200002b4 	.word	0x200002b4
1000a490:	200002b8 	.word	0x200002b8
1000a494:	0800b6dc 	.word	0x0800b6dc
1000a498:	0800b6ec 	.word	0x0800b6ec
1000a49c:	0800b710 	.word	0x0800b710
1000a4a0:	0800b718 	.word	0x0800b718
1000a4a4:	0800b72c 	.word	0x0800b72c
1000a4a8:	0800b738 	.word	0x0800b738
1000a4ac:	0800b750 	.word	0x0800b750
1000a4b0:	0800b75c 	.word	0x0800b75c
1000a4b4:	0800b774 	.word	0x0800b774
1000a4b8:	08040000 	.word	0x08040000
1000a4bc:	080c0000 	.word	0x080c0000
				case DATATYPE_INTMODEL:
					xFlash_Erase.Sector = FLASH_SECTOR_11;
1000a4c0:	230b      	movs	r3, #11
1000a4c2:	613b      	str	r3, [r7, #16]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
1000a4c4:	f107 021c 	add.w	r2, r7, #28
1000a4c8:	f107 0308 	add.w	r3, r7, #8
1000a4cc:	4611      	mov	r1, r2
1000a4ce:	4618      	mov	r0, r3
1000a4d0:	f7fa fb2e 	bl	10004b30 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_INTMODEL;
1000a4d4:	4b5c      	ldr	r3, [pc, #368]	; (1000a648 <CDC_Receive_FS+0x4e8>)
1000a4d6:	4a5d      	ldr	r2, [pc, #372]	; (1000a64c <CDC_Receive_FS+0x4ec>)
1000a4d8:	601a      	str	r2, [r3, #0]
					break;
1000a4da:	bf00      	nop
				}
				HAL_FLASH_Lock();
1000a4dc:	f7fa f9e8 	bl	100048b0 <HAL_FLASH_Lock>

				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
1000a4e0:	6879      	ldr	r1, [r7, #4]
1000a4e2:	485b      	ldr	r0, [pc, #364]	; (1000a650 <CDC_Receive_FS+0x4f0>)
1000a4e4:	f7fe fb79 	bl	10008bda <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
1000a4e8:	4859      	ldr	r0, [pc, #356]	; (1000a650 <CDC_Receive_FS+0x4f0>)
1000a4ea:	f7fe fbbf 	bl	10008c6c <USBD_CDC_ReceivePacket>
				PacketCount					=	0;
1000a4ee:	4b59      	ldr	r3, [pc, #356]	; (1000a654 <CDC_Receive_FS+0x4f4>)
1000a4f0:	2200      	movs	r2, #0
1000a4f2:	801a      	strh	r2, [r3, #0]
				xUSBDownloadVar.RxMode		=	true;
1000a4f4:	4b58      	ldr	r3, [pc, #352]	; (1000a658 <CDC_Receive_FS+0x4f8>)
1000a4f6:	2201      	movs	r2, #1
1000a4f8:	701a      	strb	r2, [r3, #0]
				strncpy((char*)Tx_Buffer, "FLASH Sections Erased. \0", 24);
1000a4fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a4fe:	4a57      	ldr	r2, [pc, #348]	; (1000a65c <CDC_Receive_FS+0x4fc>)
1000a500:	461c      	mov	r4, r3
1000a502:	4615      	mov	r5, r2
1000a504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000a506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000a508:	e895 0003 	ldmia.w	r5, {r0, r1}
1000a50c:	e884 0003 	stmia.w	r4, {r0, r1}
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
1000a510:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a514:	4618      	mov	r0, r3
1000a516:	f7f5 fd93 	bl	10000040 <strlen>
1000a51a:	4603      	mov	r3, r0
1000a51c:	b29a      	uxth	r2, r3
1000a51e:	f107 0330 	add.w	r3, r7, #48	; 0x30
1000a522:	4611      	mov	r1, r2
1000a524:	4618      	mov	r0, r3
1000a526:	f000 f8a9 	bl	1000a67c <CDC_Transmit_FS>
				flash_cont = Flash_BaseAddr;
1000a52a:	4b47      	ldr	r3, [pc, #284]	; (1000a648 <CDC_Receive_FS+0x4e8>)
1000a52c:	681b      	ldr	r3, [r3, #0]
1000a52e:	4a4c      	ldr	r2, [pc, #304]	; (1000a660 <CDC_Receive_FS+0x500>)
1000a530:	6013      	str	r3, [r2, #0]
			break;
1000a532:	e083      	b.n	1000a63c <CDC_Receive_FS+0x4dc>

			case USB_MODE_SELMODEL:
				if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "float", 5) == 0)
1000a534:	687b      	ldr	r3, [r7, #4]
1000a536:	3302      	adds	r3, #2
1000a538:	2205      	movs	r2, #5
1000a53a:	494a      	ldr	r1, [pc, #296]	; (1000a664 <CDC_Receive_FS+0x504>)
1000a53c:	4618      	mov	r0, r3
1000a53e:	f000 fe30 	bl	1000b1a2 <strncmp>
1000a542:	4603      	mov	r3, r0
1000a544:	2b00      	cmp	r3, #0
1000a546:	d103      	bne.n	1000a550 <CDC_Receive_FS+0x3f0>
					xUSBDownloadVar.flag_model = FLAGMODEL_FLOAT;
1000a548:	4b43      	ldr	r3, [pc, #268]	; (1000a658 <CDC_Receive_FS+0x4f8>)
1000a54a:	2201      	movs	r2, #1
1000a54c:	741a      	strb	r2, [r3, #16]
					xUSBDownloadVar.flag_model = FLAGMODEL_INT8;
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 16", 6) == 0)
					xUSBDownloadVar.flag_model = FLAGMODEL_INT16;
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 32", 6) == 0)
					xUSBDownloadVar.flag_model = FLAGMODEL_INT32;
				break;
1000a54e:	e074      	b.n	1000a63a <CDC_Receive_FS+0x4da>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 4", 5) == 0)
1000a550:	687b      	ldr	r3, [r7, #4]
1000a552:	3302      	adds	r3, #2
1000a554:	2205      	movs	r2, #5
1000a556:	4944      	ldr	r1, [pc, #272]	; (1000a668 <CDC_Receive_FS+0x508>)
1000a558:	4618      	mov	r0, r3
1000a55a:	f000 fe22 	bl	1000b1a2 <strncmp>
1000a55e:	4603      	mov	r3, r0
1000a560:	2b00      	cmp	r3, #0
1000a562:	d103      	bne.n	1000a56c <CDC_Receive_FS+0x40c>
					xUSBDownloadVar.flag_model = FLAGMODEL_INT4;
1000a564:	4b3c      	ldr	r3, [pc, #240]	; (1000a658 <CDC_Receive_FS+0x4f8>)
1000a566:	2202      	movs	r2, #2
1000a568:	741a      	strb	r2, [r3, #16]
				break;
1000a56a:	e066      	b.n	1000a63a <CDC_Receive_FS+0x4da>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 8", 5) == 0)
1000a56c:	687b      	ldr	r3, [r7, #4]
1000a56e:	3302      	adds	r3, #2
1000a570:	2205      	movs	r2, #5
1000a572:	493e      	ldr	r1, [pc, #248]	; (1000a66c <CDC_Receive_FS+0x50c>)
1000a574:	4618      	mov	r0, r3
1000a576:	f000 fe14 	bl	1000b1a2 <strncmp>
1000a57a:	4603      	mov	r3, r0
1000a57c:	2b00      	cmp	r3, #0
1000a57e:	d103      	bne.n	1000a588 <CDC_Receive_FS+0x428>
					xUSBDownloadVar.flag_model = FLAGMODEL_INT8;
1000a580:	4b35      	ldr	r3, [pc, #212]	; (1000a658 <CDC_Receive_FS+0x4f8>)
1000a582:	2204      	movs	r2, #4
1000a584:	741a      	strb	r2, [r3, #16]
				break;
1000a586:	e058      	b.n	1000a63a <CDC_Receive_FS+0x4da>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 16", 6) == 0)
1000a588:	687b      	ldr	r3, [r7, #4]
1000a58a:	3302      	adds	r3, #2
1000a58c:	2206      	movs	r2, #6
1000a58e:	4938      	ldr	r1, [pc, #224]	; (1000a670 <CDC_Receive_FS+0x510>)
1000a590:	4618      	mov	r0, r3
1000a592:	f000 fe06 	bl	1000b1a2 <strncmp>
1000a596:	4603      	mov	r3, r0
1000a598:	2b00      	cmp	r3, #0
1000a59a:	d103      	bne.n	1000a5a4 <CDC_Receive_FS+0x444>
					xUSBDownloadVar.flag_model = FLAGMODEL_INT16;
1000a59c:	4b2e      	ldr	r3, [pc, #184]	; (1000a658 <CDC_Receive_FS+0x4f8>)
1000a59e:	2208      	movs	r2, #8
1000a5a0:	741a      	strb	r2, [r3, #16]
				break;
1000a5a2:	e04a      	b.n	1000a63a <CDC_Receive_FS+0x4da>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int 32", 6) == 0)
1000a5a4:	687b      	ldr	r3, [r7, #4]
1000a5a6:	3302      	adds	r3, #2
1000a5a8:	2206      	movs	r2, #6
1000a5aa:	4932      	ldr	r1, [pc, #200]	; (1000a674 <CDC_Receive_FS+0x514>)
1000a5ac:	4618      	mov	r0, r3
1000a5ae:	f000 fdf8 	bl	1000b1a2 <strncmp>
1000a5b2:	4603      	mov	r3, r0
1000a5b4:	2b00      	cmp	r3, #0
1000a5b6:	d140      	bne.n	1000a63a <CDC_Receive_FS+0x4da>
					xUSBDownloadVar.flag_model = FLAGMODEL_INT32;
1000a5b8:	4b27      	ldr	r3, [pc, #156]	; (1000a658 <CDC_Receive_FS+0x4f8>)
1000a5ba:	2210      	movs	r2, #16
1000a5bc:	741a      	strb	r2, [r3, #16]
				break;
1000a5be:	e03c      	b.n	1000a63a <CDC_Receive_FS+0x4da>

			case USB_MODE_RUN:
				xUSBDownloadVar.flag_run = true;
1000a5c0:	4b25      	ldr	r3, [pc, #148]	; (1000a658 <CDC_Receive_FS+0x4f8>)
1000a5c2:	2201      	movs	r2, #1
1000a5c4:	745a      	strb	r2, [r3, #17]
				xUSBDownloadVar.test_index = atoi((char*)&Buf[POS_TRANSFER_SIZE]);
1000a5c6:	687b      	ldr	r3, [r7, #4]
1000a5c8:	3302      	adds	r3, #2
1000a5ca:	4618      	mov	r0, r3
1000a5cc:	f000 fcb2 	bl	1000af34 <atoi>
1000a5d0:	4603      	mov	r3, r0
1000a5d2:	b29a      	uxth	r2, r3
1000a5d4:	4b20      	ldr	r3, [pc, #128]	; (1000a658 <CDC_Receive_FS+0x4f8>)
1000a5d6:	825a      	strh	r2, [r3, #18]
				num = xUSBDownloadVar.test_index;
1000a5d8:	4b1f      	ldr	r3, [pc, #124]	; (1000a658 <CDC_Receive_FS+0x4f8>)
1000a5da:	8a5b      	ldrh	r3, [r3, #18]
1000a5dc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
				dig_count = 0;
1000a5e0:	2300      	movs	r3, #0
1000a5e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				do
				{
					dig_count++;
1000a5e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1000a5ea:	3301      	adds	r3, #1
1000a5ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					num /= 10;
1000a5f0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
1000a5f4:	4a20      	ldr	r2, [pc, #128]	; (1000a678 <CDC_Receive_FS+0x518>)
1000a5f6:	fba2 2303 	umull	r2, r3, r2, r3
1000a5fa:	08db      	lsrs	r3, r3, #3
1000a5fc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
				} while(num != 0);
1000a600:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
1000a604:	2b00      	cmp	r3, #0
1000a606:	d1ee      	bne.n	1000a5e6 <CDC_Receive_FS+0x486>

				xUSBDownloadVar.test_size = atoi((char*)&Buf[POS_TRANSFER_SIZE + dig_count + 1]);
1000a608:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1000a60c:	3303      	adds	r3, #3
1000a60e:	687a      	ldr	r2, [r7, #4]
1000a610:	4413      	add	r3, r2
1000a612:	4618      	mov	r0, r3
1000a614:	f000 fc8e 	bl	1000af34 <atoi>
1000a618:	4603      	mov	r3, r0
1000a61a:	b29a      	uxth	r2, r3
1000a61c:	4b0e      	ldr	r3, [pc, #56]	; (1000a658 <CDC_Receive_FS+0x4f8>)
1000a61e:	829a      	strh	r2, [r3, #20]
				break;
1000a620:	e00c      	b.n	1000a63c <CDC_Receive_FS+0x4dc>
		}
1000a622:	bf00      	nop
1000a624:	e00a      	b.n	1000a63c <CDC_Receive_FS+0x4dc>
				break;
1000a626:	bf00      	nop
1000a628:	e008      	b.n	1000a63c <CDC_Receive_FS+0x4dc>
				break;
1000a62a:	bf00      	nop
1000a62c:	e006      	b.n	1000a63c <CDC_Receive_FS+0x4dc>
				break;
1000a62e:	bf00      	nop
1000a630:	e004      	b.n	1000a63c <CDC_Receive_FS+0x4dc>
				break;
1000a632:	bf00      	nop
1000a634:	e002      	b.n	1000a63c <CDC_Receive_FS+0x4dc>

			default:
				break;
1000a636:	bf00      	nop
1000a638:	e000      	b.n	1000a63c <CDC_Receive_FS+0x4dc>
				break;
1000a63a:	bf00      	nop
		}
	}
	return (USBD_OK);
1000a63c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
1000a63e:	4618      	mov	r0, r3
1000a640:	3778      	adds	r7, #120	; 0x78
1000a642:	46bd      	mov	sp, r7
1000a644:	bdb0      	pop	{r4, r5, r7, pc}
1000a646:	bf00      	nop
1000a648:	200002b8 	.word	0x200002b8
1000a64c:	080e0000 	.word	0x080e0000
1000a650:	20000588 	.word	0x20000588
1000a654:	200002b4 	.word	0x200002b4
1000a658:	20000298 	.word	0x20000298
1000a65c:	0800b788 	.word	0x0800b788
1000a660:	200002b0 	.word	0x200002b0
1000a664:	0800b7a4 	.word	0x0800b7a4
1000a668:	0800b7ac 	.word	0x0800b7ac
1000a66c:	0800b7b4 	.word	0x0800b7b4
1000a670:	0800b7bc 	.word	0x0800b7bc
1000a674:	0800b7c4 	.word	0x0800b7c4
1000a678:	cccccccd 	.word	0xcccccccd

1000a67c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
1000a67c:	b580      	push	{r7, lr}
1000a67e:	b084      	sub	sp, #16
1000a680:	af00      	add	r7, sp, #0
1000a682:	6078      	str	r0, [r7, #4]
1000a684:	460b      	mov	r3, r1
1000a686:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
1000a688:	2300      	movs	r3, #0
1000a68a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
1000a68c:	4b0d      	ldr	r3, [pc, #52]	; (1000a6c4 <CDC_Transmit_FS+0x48>)
1000a68e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
1000a692:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
1000a694:	68bb      	ldr	r3, [r7, #8]
1000a696:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
1000a69a:	2b00      	cmp	r3, #0
1000a69c:	d001      	beq.n	1000a6a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
1000a69e:	2301      	movs	r3, #1
1000a6a0:	e00b      	b.n	1000a6ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
1000a6a2:	887b      	ldrh	r3, [r7, #2]
1000a6a4:	461a      	mov	r2, r3
1000a6a6:	6879      	ldr	r1, [r7, #4]
1000a6a8:	4806      	ldr	r0, [pc, #24]	; (1000a6c4 <CDC_Transmit_FS+0x48>)
1000a6aa:	f7fe fa78 	bl	10008b9e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
1000a6ae:	4805      	ldr	r0, [pc, #20]	; (1000a6c4 <CDC_Transmit_FS+0x48>)
1000a6b0:	f7fe faac 	bl	10008c0c <USBD_CDC_TransmitPacket>
1000a6b4:	4603      	mov	r3, r0
1000a6b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
1000a6b8:	7bfb      	ldrb	r3, [r7, #15]
}
1000a6ba:	4618      	mov	r0, r3
1000a6bc:	3710      	adds	r7, #16
1000a6be:	46bd      	mov	sp, r7
1000a6c0:	bd80      	pop	{r7, pc}
1000a6c2:	bf00      	nop
1000a6c4:	20000588 	.word	0x20000588

1000a6c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
1000a6c8:	b480      	push	{r7}
1000a6ca:	b087      	sub	sp, #28
1000a6cc:	af00      	add	r7, sp, #0
1000a6ce:	60f8      	str	r0, [r7, #12]
1000a6d0:	60b9      	str	r1, [r7, #8]
1000a6d2:	4613      	mov	r3, r2
1000a6d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
1000a6d6:	2300      	movs	r3, #0
1000a6d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
1000a6da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
1000a6de:	4618      	mov	r0, r3
1000a6e0:	371c      	adds	r7, #28
1000a6e2:	46bd      	mov	sp, r7
1000a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a6e8:	4770      	bx	lr
	...

1000a6ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
1000a6ec:	b480      	push	{r7}
1000a6ee:	b083      	sub	sp, #12
1000a6f0:	af00      	add	r7, sp, #0
1000a6f2:	4603      	mov	r3, r0
1000a6f4:	6039      	str	r1, [r7, #0]
1000a6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
1000a6f8:	683b      	ldr	r3, [r7, #0]
1000a6fa:	2212      	movs	r2, #18
1000a6fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
1000a6fe:	4b03      	ldr	r3, [pc, #12]	; (1000a70c <USBD_FS_DeviceDescriptor+0x20>)
}
1000a700:	4618      	mov	r0, r3
1000a702:	370c      	adds	r7, #12
1000a704:	46bd      	mov	sp, r7
1000a706:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a70a:	4770      	bx	lr
1000a70c:	2000014c 	.word	0x2000014c

1000a710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
1000a710:	b480      	push	{r7}
1000a712:	b083      	sub	sp, #12
1000a714:	af00      	add	r7, sp, #0
1000a716:	4603      	mov	r3, r0
1000a718:	6039      	str	r1, [r7, #0]
1000a71a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
1000a71c:	683b      	ldr	r3, [r7, #0]
1000a71e:	2204      	movs	r2, #4
1000a720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
1000a722:	4b03      	ldr	r3, [pc, #12]	; (1000a730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
1000a724:	4618      	mov	r0, r3
1000a726:	370c      	adds	r7, #12
1000a728:	46bd      	mov	sp, r7
1000a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a72e:	4770      	bx	lr
1000a730:	20000160 	.word	0x20000160

1000a734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
1000a734:	b580      	push	{r7, lr}
1000a736:	b082      	sub	sp, #8
1000a738:	af00      	add	r7, sp, #0
1000a73a:	4603      	mov	r3, r0
1000a73c:	6039      	str	r1, [r7, #0]
1000a73e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
1000a740:	79fb      	ldrb	r3, [r7, #7]
1000a742:	2b00      	cmp	r3, #0
1000a744:	d105      	bne.n	1000a752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
1000a746:	683a      	ldr	r2, [r7, #0]
1000a748:	4907      	ldr	r1, [pc, #28]	; (1000a768 <USBD_FS_ProductStrDescriptor+0x34>)
1000a74a:	4808      	ldr	r0, [pc, #32]	; (1000a76c <USBD_FS_ProductStrDescriptor+0x38>)
1000a74c:	f7ff fb41 	bl	10009dd2 <USBD_GetString>
1000a750:	e004      	b.n	1000a75c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
1000a752:	683a      	ldr	r2, [r7, #0]
1000a754:	4904      	ldr	r1, [pc, #16]	; (1000a768 <USBD_FS_ProductStrDescriptor+0x34>)
1000a756:	4805      	ldr	r0, [pc, #20]	; (1000a76c <USBD_FS_ProductStrDescriptor+0x38>)
1000a758:	f7ff fb3b 	bl	10009dd2 <USBD_GetString>
  }
  return USBD_StrDesc;
1000a75c:	4b02      	ldr	r3, [pc, #8]	; (1000a768 <USBD_FS_ProductStrDescriptor+0x34>)
}
1000a75e:	4618      	mov	r0, r3
1000a760:	3708      	adds	r7, #8
1000a762:	46bd      	mov	sp, r7
1000a764:	bd80      	pop	{r7, pc}
1000a766:	bf00      	nop
1000a768:	20001858 	.word	0x20001858
1000a76c:	0800b7cc 	.word	0x0800b7cc

1000a770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
1000a770:	b580      	push	{r7, lr}
1000a772:	b082      	sub	sp, #8
1000a774:	af00      	add	r7, sp, #0
1000a776:	4603      	mov	r3, r0
1000a778:	6039      	str	r1, [r7, #0]
1000a77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
1000a77c:	683a      	ldr	r2, [r7, #0]
1000a77e:	4904      	ldr	r1, [pc, #16]	; (1000a790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
1000a780:	4804      	ldr	r0, [pc, #16]	; (1000a794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
1000a782:	f7ff fb26 	bl	10009dd2 <USBD_GetString>
  return USBD_StrDesc;
1000a786:	4b02      	ldr	r3, [pc, #8]	; (1000a790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
1000a788:	4618      	mov	r0, r3
1000a78a:	3708      	adds	r7, #8
1000a78c:	46bd      	mov	sp, r7
1000a78e:	bd80      	pop	{r7, pc}
1000a790:	20001858 	.word	0x20001858
1000a794:	0800b7e4 	.word	0x0800b7e4

1000a798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
1000a798:	b580      	push	{r7, lr}
1000a79a:	b082      	sub	sp, #8
1000a79c:	af00      	add	r7, sp, #0
1000a79e:	4603      	mov	r3, r0
1000a7a0:	6039      	str	r1, [r7, #0]
1000a7a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
1000a7a4:	683b      	ldr	r3, [r7, #0]
1000a7a6:	221a      	movs	r2, #26
1000a7a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
1000a7aa:	f000 f843 	bl	1000a834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
1000a7ae:	4b02      	ldr	r3, [pc, #8]	; (1000a7b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
1000a7b0:	4618      	mov	r0, r3
1000a7b2:	3708      	adds	r7, #8
1000a7b4:	46bd      	mov	sp, r7
1000a7b6:	bd80      	pop	{r7, pc}
1000a7b8:	20000164 	.word	0x20000164

1000a7bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
1000a7bc:	b580      	push	{r7, lr}
1000a7be:	b082      	sub	sp, #8
1000a7c0:	af00      	add	r7, sp, #0
1000a7c2:	4603      	mov	r3, r0
1000a7c4:	6039      	str	r1, [r7, #0]
1000a7c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
1000a7c8:	79fb      	ldrb	r3, [r7, #7]
1000a7ca:	2b00      	cmp	r3, #0
1000a7cc:	d105      	bne.n	1000a7da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
1000a7ce:	683a      	ldr	r2, [r7, #0]
1000a7d0:	4907      	ldr	r1, [pc, #28]	; (1000a7f0 <USBD_FS_ConfigStrDescriptor+0x34>)
1000a7d2:	4808      	ldr	r0, [pc, #32]	; (1000a7f4 <USBD_FS_ConfigStrDescriptor+0x38>)
1000a7d4:	f7ff fafd 	bl	10009dd2 <USBD_GetString>
1000a7d8:	e004      	b.n	1000a7e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
1000a7da:	683a      	ldr	r2, [r7, #0]
1000a7dc:	4904      	ldr	r1, [pc, #16]	; (1000a7f0 <USBD_FS_ConfigStrDescriptor+0x34>)
1000a7de:	4805      	ldr	r0, [pc, #20]	; (1000a7f4 <USBD_FS_ConfigStrDescriptor+0x38>)
1000a7e0:	f7ff faf7 	bl	10009dd2 <USBD_GetString>
  }
  return USBD_StrDesc;
1000a7e4:	4b02      	ldr	r3, [pc, #8]	; (1000a7f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
1000a7e6:	4618      	mov	r0, r3
1000a7e8:	3708      	adds	r7, #8
1000a7ea:	46bd      	mov	sp, r7
1000a7ec:	bd80      	pop	{r7, pc}
1000a7ee:	bf00      	nop
1000a7f0:	20001858 	.word	0x20001858
1000a7f4:	0800b7f8 	.word	0x0800b7f8

1000a7f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
1000a7f8:	b580      	push	{r7, lr}
1000a7fa:	b082      	sub	sp, #8
1000a7fc:	af00      	add	r7, sp, #0
1000a7fe:	4603      	mov	r3, r0
1000a800:	6039      	str	r1, [r7, #0]
1000a802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
1000a804:	79fb      	ldrb	r3, [r7, #7]
1000a806:	2b00      	cmp	r3, #0
1000a808:	d105      	bne.n	1000a816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
1000a80a:	683a      	ldr	r2, [r7, #0]
1000a80c:	4907      	ldr	r1, [pc, #28]	; (1000a82c <USBD_FS_InterfaceStrDescriptor+0x34>)
1000a80e:	4808      	ldr	r0, [pc, #32]	; (1000a830 <USBD_FS_InterfaceStrDescriptor+0x38>)
1000a810:	f7ff fadf 	bl	10009dd2 <USBD_GetString>
1000a814:	e004      	b.n	1000a820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
1000a816:	683a      	ldr	r2, [r7, #0]
1000a818:	4904      	ldr	r1, [pc, #16]	; (1000a82c <USBD_FS_InterfaceStrDescriptor+0x34>)
1000a81a:	4805      	ldr	r0, [pc, #20]	; (1000a830 <USBD_FS_InterfaceStrDescriptor+0x38>)
1000a81c:	f7ff fad9 	bl	10009dd2 <USBD_GetString>
  }
  return USBD_StrDesc;
1000a820:	4b02      	ldr	r3, [pc, #8]	; (1000a82c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
1000a822:	4618      	mov	r0, r3
1000a824:	3708      	adds	r7, #8
1000a826:	46bd      	mov	sp, r7
1000a828:	bd80      	pop	{r7, pc}
1000a82a:	bf00      	nop
1000a82c:	20001858 	.word	0x20001858
1000a830:	0800b804 	.word	0x0800b804

1000a834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
1000a834:	b580      	push	{r7, lr}
1000a836:	b084      	sub	sp, #16
1000a838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
1000a83a:	4b0f      	ldr	r3, [pc, #60]	; (1000a878 <Get_SerialNum+0x44>)
1000a83c:	681b      	ldr	r3, [r3, #0]
1000a83e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
1000a840:	4b0e      	ldr	r3, [pc, #56]	; (1000a87c <Get_SerialNum+0x48>)
1000a842:	681b      	ldr	r3, [r3, #0]
1000a844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
1000a846:	4b0e      	ldr	r3, [pc, #56]	; (1000a880 <Get_SerialNum+0x4c>)
1000a848:	681b      	ldr	r3, [r3, #0]
1000a84a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
1000a84c:	68fa      	ldr	r2, [r7, #12]
1000a84e:	687b      	ldr	r3, [r7, #4]
1000a850:	4413      	add	r3, r2
1000a852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
1000a854:	68fb      	ldr	r3, [r7, #12]
1000a856:	2b00      	cmp	r3, #0
1000a858:	d009      	beq.n	1000a86e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
1000a85a:	2208      	movs	r2, #8
1000a85c:	4909      	ldr	r1, [pc, #36]	; (1000a884 <Get_SerialNum+0x50>)
1000a85e:	68f8      	ldr	r0, [r7, #12]
1000a860:	f000 f814 	bl	1000a88c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
1000a864:	2204      	movs	r2, #4
1000a866:	4908      	ldr	r1, [pc, #32]	; (1000a888 <Get_SerialNum+0x54>)
1000a868:	68b8      	ldr	r0, [r7, #8]
1000a86a:	f000 f80f 	bl	1000a88c <IntToUnicode>
  }
}
1000a86e:	bf00      	nop
1000a870:	3710      	adds	r7, #16
1000a872:	46bd      	mov	sp, r7
1000a874:	bd80      	pop	{r7, pc}
1000a876:	bf00      	nop
1000a878:	1fff7a10 	.word	0x1fff7a10
1000a87c:	1fff7a14 	.word	0x1fff7a14
1000a880:	1fff7a18 	.word	0x1fff7a18
1000a884:	20000166 	.word	0x20000166
1000a888:	20000176 	.word	0x20000176

1000a88c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
1000a88c:	b480      	push	{r7}
1000a88e:	b087      	sub	sp, #28
1000a890:	af00      	add	r7, sp, #0
1000a892:	60f8      	str	r0, [r7, #12]
1000a894:	60b9      	str	r1, [r7, #8]
1000a896:	4613      	mov	r3, r2
1000a898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
1000a89a:	2300      	movs	r3, #0
1000a89c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
1000a89e:	2300      	movs	r3, #0
1000a8a0:	75fb      	strb	r3, [r7, #23]
1000a8a2:	e027      	b.n	1000a8f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
1000a8a4:	68fb      	ldr	r3, [r7, #12]
1000a8a6:	0f1b      	lsrs	r3, r3, #28
1000a8a8:	2b09      	cmp	r3, #9
1000a8aa:	d80b      	bhi.n	1000a8c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
1000a8ac:	68fb      	ldr	r3, [r7, #12]
1000a8ae:	0f1b      	lsrs	r3, r3, #28
1000a8b0:	b2da      	uxtb	r2, r3
1000a8b2:	7dfb      	ldrb	r3, [r7, #23]
1000a8b4:	005b      	lsls	r3, r3, #1
1000a8b6:	4619      	mov	r1, r3
1000a8b8:	68bb      	ldr	r3, [r7, #8]
1000a8ba:	440b      	add	r3, r1
1000a8bc:	3230      	adds	r2, #48	; 0x30
1000a8be:	b2d2      	uxtb	r2, r2
1000a8c0:	701a      	strb	r2, [r3, #0]
1000a8c2:	e00a      	b.n	1000a8da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
1000a8c4:	68fb      	ldr	r3, [r7, #12]
1000a8c6:	0f1b      	lsrs	r3, r3, #28
1000a8c8:	b2da      	uxtb	r2, r3
1000a8ca:	7dfb      	ldrb	r3, [r7, #23]
1000a8cc:	005b      	lsls	r3, r3, #1
1000a8ce:	4619      	mov	r1, r3
1000a8d0:	68bb      	ldr	r3, [r7, #8]
1000a8d2:	440b      	add	r3, r1
1000a8d4:	3237      	adds	r2, #55	; 0x37
1000a8d6:	b2d2      	uxtb	r2, r2
1000a8d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
1000a8da:	68fb      	ldr	r3, [r7, #12]
1000a8dc:	011b      	lsls	r3, r3, #4
1000a8de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
1000a8e0:	7dfb      	ldrb	r3, [r7, #23]
1000a8e2:	005b      	lsls	r3, r3, #1
1000a8e4:	3301      	adds	r3, #1
1000a8e6:	68ba      	ldr	r2, [r7, #8]
1000a8e8:	4413      	add	r3, r2
1000a8ea:	2200      	movs	r2, #0
1000a8ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
1000a8ee:	7dfb      	ldrb	r3, [r7, #23]
1000a8f0:	3301      	adds	r3, #1
1000a8f2:	75fb      	strb	r3, [r7, #23]
1000a8f4:	7dfa      	ldrb	r2, [r7, #23]
1000a8f6:	79fb      	ldrb	r3, [r7, #7]
1000a8f8:	429a      	cmp	r2, r3
1000a8fa:	d3d3      	bcc.n	1000a8a4 <IntToUnicode+0x18>
  }
}
1000a8fc:	bf00      	nop
1000a8fe:	bf00      	nop
1000a900:	371c      	adds	r7, #28
1000a902:	46bd      	mov	sp, r7
1000a904:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a908:	4770      	bx	lr
	...

1000a90c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
1000a90c:	b580      	push	{r7, lr}
1000a90e:	b08a      	sub	sp, #40	; 0x28
1000a910:	af00      	add	r7, sp, #0
1000a912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
1000a914:	f107 0314 	add.w	r3, r7, #20
1000a918:	2200      	movs	r2, #0
1000a91a:	601a      	str	r2, [r3, #0]
1000a91c:	605a      	str	r2, [r3, #4]
1000a91e:	609a      	str	r2, [r3, #8]
1000a920:	60da      	str	r2, [r3, #12]
1000a922:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
1000a924:	687b      	ldr	r3, [r7, #4]
1000a926:	681b      	ldr	r3, [r3, #0]
1000a928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
1000a92c:	d13a      	bne.n	1000a9a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
1000a92e:	2300      	movs	r3, #0
1000a930:	613b      	str	r3, [r7, #16]
1000a932:	4b1e      	ldr	r3, [pc, #120]	; (1000a9ac <HAL_PCD_MspInit+0xa0>)
1000a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000a936:	4a1d      	ldr	r2, [pc, #116]	; (1000a9ac <HAL_PCD_MspInit+0xa0>)
1000a938:	f043 0301 	orr.w	r3, r3, #1
1000a93c:	6313      	str	r3, [r2, #48]	; 0x30
1000a93e:	4b1b      	ldr	r3, [pc, #108]	; (1000a9ac <HAL_PCD_MspInit+0xa0>)
1000a940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000a942:	f003 0301 	and.w	r3, r3, #1
1000a946:	613b      	str	r3, [r7, #16]
1000a948:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
1000a94a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
1000a94e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1000a950:	2302      	movs	r3, #2
1000a952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1000a954:	2300      	movs	r3, #0
1000a956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
1000a958:	2303      	movs	r3, #3
1000a95a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
1000a95c:	230a      	movs	r3, #10
1000a95e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1000a960:	f107 0314 	add.w	r3, r7, #20
1000a964:	4619      	mov	r1, r3
1000a966:	4812      	ldr	r0, [pc, #72]	; (1000a9b0 <HAL_PCD_MspInit+0xa4>)
1000a968:	f7fa fa04 	bl	10004d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
1000a96c:	4b0f      	ldr	r3, [pc, #60]	; (1000a9ac <HAL_PCD_MspInit+0xa0>)
1000a96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000a970:	4a0e      	ldr	r2, [pc, #56]	; (1000a9ac <HAL_PCD_MspInit+0xa0>)
1000a972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1000a976:	6353      	str	r3, [r2, #52]	; 0x34
1000a978:	2300      	movs	r3, #0
1000a97a:	60fb      	str	r3, [r7, #12]
1000a97c:	4b0b      	ldr	r3, [pc, #44]	; (1000a9ac <HAL_PCD_MspInit+0xa0>)
1000a97e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000a980:	4a0a      	ldr	r2, [pc, #40]	; (1000a9ac <HAL_PCD_MspInit+0xa0>)
1000a982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
1000a986:	6453      	str	r3, [r2, #68]	; 0x44
1000a988:	4b08      	ldr	r3, [pc, #32]	; (1000a9ac <HAL_PCD_MspInit+0xa0>)
1000a98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000a98c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
1000a990:	60fb      	str	r3, [r7, #12]
1000a992:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
1000a994:	2200      	movs	r2, #0
1000a996:	2100      	movs	r1, #0
1000a998:	2043      	movs	r0, #67	; 0x43
1000a99a:	f7f9 fedc 	bl	10004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
1000a99e:	2043      	movs	r0, #67	; 0x43
1000a9a0:	f7f9 fef5 	bl	1000478e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
1000a9a4:	bf00      	nop
1000a9a6:	3728      	adds	r7, #40	; 0x28
1000a9a8:	46bd      	mov	sp, r7
1000a9aa:	bd80      	pop	{r7, pc}
1000a9ac:	40023800 	.word	0x40023800
1000a9b0:	40020000 	.word	0x40020000

1000a9b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
1000a9b4:	b580      	push	{r7, lr}
1000a9b6:	b082      	sub	sp, #8
1000a9b8:	af00      	add	r7, sp, #0
1000a9ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
1000a9bc:	687b      	ldr	r3, [r7, #4]
1000a9be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
1000a9c2:	687b      	ldr	r3, [r7, #4]
1000a9c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
1000a9c8:	4619      	mov	r1, r3
1000a9ca:	4610      	mov	r0, r2
1000a9cc:	f7fe fa1a 	bl	10008e04 <USBD_LL_SetupStage>
}
1000a9d0:	bf00      	nop
1000a9d2:	3708      	adds	r7, #8
1000a9d4:	46bd      	mov	sp, r7
1000a9d6:	bd80      	pop	{r7, pc}

1000a9d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
1000a9d8:	b580      	push	{r7, lr}
1000a9da:	b082      	sub	sp, #8
1000a9dc:	af00      	add	r7, sp, #0
1000a9de:	6078      	str	r0, [r7, #4]
1000a9e0:	460b      	mov	r3, r1
1000a9e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
1000a9e4:	687b      	ldr	r3, [r7, #4]
1000a9e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
1000a9ea:	78fa      	ldrb	r2, [r7, #3]
1000a9ec:	6879      	ldr	r1, [r7, #4]
1000a9ee:	4613      	mov	r3, r2
1000a9f0:	00db      	lsls	r3, r3, #3
1000a9f2:	1a9b      	subs	r3, r3, r2
1000a9f4:	009b      	lsls	r3, r3, #2
1000a9f6:	440b      	add	r3, r1
1000a9f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
1000a9fc:	681a      	ldr	r2, [r3, #0]
1000a9fe:	78fb      	ldrb	r3, [r7, #3]
1000aa00:	4619      	mov	r1, r3
1000aa02:	f7fe fa54 	bl	10008eae <USBD_LL_DataOutStage>
}
1000aa06:	bf00      	nop
1000aa08:	3708      	adds	r7, #8
1000aa0a:	46bd      	mov	sp, r7
1000aa0c:	bd80      	pop	{r7, pc}

1000aa0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
1000aa0e:	b580      	push	{r7, lr}
1000aa10:	b082      	sub	sp, #8
1000aa12:	af00      	add	r7, sp, #0
1000aa14:	6078      	str	r0, [r7, #4]
1000aa16:	460b      	mov	r3, r1
1000aa18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
1000aa1a:	687b      	ldr	r3, [r7, #4]
1000aa1c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
1000aa20:	78fa      	ldrb	r2, [r7, #3]
1000aa22:	6879      	ldr	r1, [r7, #4]
1000aa24:	4613      	mov	r3, r2
1000aa26:	00db      	lsls	r3, r3, #3
1000aa28:	1a9b      	subs	r3, r3, r2
1000aa2a:	009b      	lsls	r3, r3, #2
1000aa2c:	440b      	add	r3, r1
1000aa2e:	3348      	adds	r3, #72	; 0x48
1000aa30:	681a      	ldr	r2, [r3, #0]
1000aa32:	78fb      	ldrb	r3, [r7, #3]
1000aa34:	4619      	mov	r1, r3
1000aa36:	f7fe fa9d 	bl	10008f74 <USBD_LL_DataInStage>
}
1000aa3a:	bf00      	nop
1000aa3c:	3708      	adds	r7, #8
1000aa3e:	46bd      	mov	sp, r7
1000aa40:	bd80      	pop	{r7, pc}

1000aa42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
1000aa42:	b580      	push	{r7, lr}
1000aa44:	b082      	sub	sp, #8
1000aa46:	af00      	add	r7, sp, #0
1000aa48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
1000aa4a:	687b      	ldr	r3, [r7, #4]
1000aa4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
1000aa50:	4618      	mov	r0, r3
1000aa52:	f7fe fbb1 	bl	100091b8 <USBD_LL_SOF>
}
1000aa56:	bf00      	nop
1000aa58:	3708      	adds	r7, #8
1000aa5a:	46bd      	mov	sp, r7
1000aa5c:	bd80      	pop	{r7, pc}

1000aa5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
1000aa5e:	b580      	push	{r7, lr}
1000aa60:	b084      	sub	sp, #16
1000aa62:	af00      	add	r7, sp, #0
1000aa64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
1000aa66:	2301      	movs	r3, #1
1000aa68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
1000aa6a:	687b      	ldr	r3, [r7, #4]
1000aa6c:	68db      	ldr	r3, [r3, #12]
1000aa6e:	2b00      	cmp	r3, #0
1000aa70:	d102      	bne.n	1000aa78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
1000aa72:	2300      	movs	r3, #0
1000aa74:	73fb      	strb	r3, [r7, #15]
1000aa76:	e008      	b.n	1000aa8a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
1000aa78:	687b      	ldr	r3, [r7, #4]
1000aa7a:	68db      	ldr	r3, [r3, #12]
1000aa7c:	2b02      	cmp	r3, #2
1000aa7e:	d102      	bne.n	1000aa86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
1000aa80:	2301      	movs	r3, #1
1000aa82:	73fb      	strb	r3, [r7, #15]
1000aa84:	e001      	b.n	1000aa8a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
1000aa86:	f7f9 fc01 	bl	1000428c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
1000aa8a:	687b      	ldr	r3, [r7, #4]
1000aa8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
1000aa90:	7bfa      	ldrb	r2, [r7, #15]
1000aa92:	4611      	mov	r1, r2
1000aa94:	4618      	mov	r0, r3
1000aa96:	f7fe fb51 	bl	1000913c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
1000aa9a:	687b      	ldr	r3, [r7, #4]
1000aa9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
1000aaa0:	4618      	mov	r0, r3
1000aaa2:	f7fe fafd 	bl	100090a0 <USBD_LL_Reset>
}
1000aaa6:	bf00      	nop
1000aaa8:	3710      	adds	r7, #16
1000aaaa:	46bd      	mov	sp, r7
1000aaac:	bd80      	pop	{r7, pc}
	...

1000aab0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
1000aab0:	b580      	push	{r7, lr}
1000aab2:	b082      	sub	sp, #8
1000aab4:	af00      	add	r7, sp, #0
1000aab6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
1000aab8:	687b      	ldr	r3, [r7, #4]
1000aaba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
1000aabe:	4618      	mov	r0, r3
1000aac0:	f7fe fb4c 	bl	1000915c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
1000aac4:	687b      	ldr	r3, [r7, #4]
1000aac6:	681b      	ldr	r3, [r3, #0]
1000aac8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
1000aacc:	681b      	ldr	r3, [r3, #0]
1000aace:	687a      	ldr	r2, [r7, #4]
1000aad0:	6812      	ldr	r2, [r2, #0]
1000aad2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
1000aad6:	f043 0301 	orr.w	r3, r3, #1
1000aada:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
1000aadc:	687b      	ldr	r3, [r7, #4]
1000aade:	6a1b      	ldr	r3, [r3, #32]
1000aae0:	2b00      	cmp	r3, #0
1000aae2:	d005      	beq.n	1000aaf0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
1000aae4:	4b04      	ldr	r3, [pc, #16]	; (1000aaf8 <HAL_PCD_SuspendCallback+0x48>)
1000aae6:	691b      	ldr	r3, [r3, #16]
1000aae8:	4a03      	ldr	r2, [pc, #12]	; (1000aaf8 <HAL_PCD_SuspendCallback+0x48>)
1000aaea:	f043 0306 	orr.w	r3, r3, #6
1000aaee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
1000aaf0:	bf00      	nop
1000aaf2:	3708      	adds	r7, #8
1000aaf4:	46bd      	mov	sp, r7
1000aaf6:	bd80      	pop	{r7, pc}
1000aaf8:	e000ed00 	.word	0xe000ed00

1000aafc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
1000aafc:	b580      	push	{r7, lr}
1000aafe:	b082      	sub	sp, #8
1000ab00:	af00      	add	r7, sp, #0
1000ab02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
1000ab04:	687b      	ldr	r3, [r7, #4]
1000ab06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
1000ab0a:	4618      	mov	r0, r3
1000ab0c:	f7fe fb3c 	bl	10009188 <USBD_LL_Resume>
}
1000ab10:	bf00      	nop
1000ab12:	3708      	adds	r7, #8
1000ab14:	46bd      	mov	sp, r7
1000ab16:	bd80      	pop	{r7, pc}

1000ab18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
1000ab18:	b580      	push	{r7, lr}
1000ab1a:	b082      	sub	sp, #8
1000ab1c:	af00      	add	r7, sp, #0
1000ab1e:	6078      	str	r0, [r7, #4]
1000ab20:	460b      	mov	r3, r1
1000ab22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
1000ab24:	687b      	ldr	r3, [r7, #4]
1000ab26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
1000ab2a:	78fa      	ldrb	r2, [r7, #3]
1000ab2c:	4611      	mov	r1, r2
1000ab2e:	4618      	mov	r0, r3
1000ab30:	f7fe fb8a 	bl	10009248 <USBD_LL_IsoOUTIncomplete>
}
1000ab34:	bf00      	nop
1000ab36:	3708      	adds	r7, #8
1000ab38:	46bd      	mov	sp, r7
1000ab3a:	bd80      	pop	{r7, pc}

1000ab3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
1000ab3c:	b580      	push	{r7, lr}
1000ab3e:	b082      	sub	sp, #8
1000ab40:	af00      	add	r7, sp, #0
1000ab42:	6078      	str	r0, [r7, #4]
1000ab44:	460b      	mov	r3, r1
1000ab46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
1000ab48:	687b      	ldr	r3, [r7, #4]
1000ab4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
1000ab4e:	78fa      	ldrb	r2, [r7, #3]
1000ab50:	4611      	mov	r1, r2
1000ab52:	4618      	mov	r0, r3
1000ab54:	f7fe fb52 	bl	100091fc <USBD_LL_IsoINIncomplete>
}
1000ab58:	bf00      	nop
1000ab5a:	3708      	adds	r7, #8
1000ab5c:	46bd      	mov	sp, r7
1000ab5e:	bd80      	pop	{r7, pc}

1000ab60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
1000ab60:	b580      	push	{r7, lr}
1000ab62:	b082      	sub	sp, #8
1000ab64:	af00      	add	r7, sp, #0
1000ab66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
1000ab68:	687b      	ldr	r3, [r7, #4]
1000ab6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
1000ab6e:	4618      	mov	r0, r3
1000ab70:	f7fe fb90 	bl	10009294 <USBD_LL_DevConnected>
}
1000ab74:	bf00      	nop
1000ab76:	3708      	adds	r7, #8
1000ab78:	46bd      	mov	sp, r7
1000ab7a:	bd80      	pop	{r7, pc}

1000ab7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
1000ab7c:	b580      	push	{r7, lr}
1000ab7e:	b082      	sub	sp, #8
1000ab80:	af00      	add	r7, sp, #0
1000ab82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
1000ab84:	687b      	ldr	r3, [r7, #4]
1000ab86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
1000ab8a:	4618      	mov	r0, r3
1000ab8c:	f7fe fb8d 	bl	100092aa <USBD_LL_DevDisconnected>
}
1000ab90:	bf00      	nop
1000ab92:	3708      	adds	r7, #8
1000ab94:	46bd      	mov	sp, r7
1000ab96:	bd80      	pop	{r7, pc}

1000ab98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
1000ab98:	b580      	push	{r7, lr}
1000ab9a:	b082      	sub	sp, #8
1000ab9c:	af00      	add	r7, sp, #0
1000ab9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
1000aba0:	687b      	ldr	r3, [r7, #4]
1000aba2:	781b      	ldrb	r3, [r3, #0]
1000aba4:	2b00      	cmp	r3, #0
1000aba6:	d13c      	bne.n	1000ac22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
1000aba8:	4a20      	ldr	r2, [pc, #128]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abaa:	687b      	ldr	r3, [r7, #4]
1000abac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
1000abb0:	687b      	ldr	r3, [r7, #4]
1000abb2:	4a1e      	ldr	r2, [pc, #120]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
1000abb8:	4b1c      	ldr	r3, [pc, #112]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000abbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
1000abc0:	4b1a      	ldr	r3, [pc, #104]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abc2:	2204      	movs	r2, #4
1000abc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
1000abc6:	4b19      	ldr	r3, [pc, #100]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abc8:	2202      	movs	r2, #2
1000abca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
1000abcc:	4b17      	ldr	r3, [pc, #92]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abce:	2200      	movs	r2, #0
1000abd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
1000abd2:	4b16      	ldr	r3, [pc, #88]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abd4:	2202      	movs	r2, #2
1000abd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
1000abd8:	4b14      	ldr	r3, [pc, #80]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abda:	2200      	movs	r2, #0
1000abdc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
1000abde:	4b13      	ldr	r3, [pc, #76]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abe0:	2200      	movs	r2, #0
1000abe2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
1000abe4:	4b11      	ldr	r3, [pc, #68]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abe6:	2200      	movs	r2, #0
1000abe8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
1000abea:	4b10      	ldr	r3, [pc, #64]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abec:	2200      	movs	r2, #0
1000abee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
1000abf0:	4b0e      	ldr	r3, [pc, #56]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abf2:	2200      	movs	r2, #0
1000abf4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
1000abf6:	480d      	ldr	r0, [pc, #52]	; (1000ac2c <USBD_LL_Init+0x94>)
1000abf8:	f7fa fa58 	bl	100050ac <HAL_PCD_Init>
1000abfc:	4603      	mov	r3, r0
1000abfe:	2b00      	cmp	r3, #0
1000ac00:	d001      	beq.n	1000ac06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
1000ac02:	f7f9 fb43 	bl	1000428c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
1000ac06:	2180      	movs	r1, #128	; 0x80
1000ac08:	4808      	ldr	r0, [pc, #32]	; (1000ac2c <USBD_LL_Init+0x94>)
1000ac0a:	f7fb fbb6 	bl	1000637a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
1000ac0e:	2240      	movs	r2, #64	; 0x40
1000ac10:	2100      	movs	r1, #0
1000ac12:	4806      	ldr	r0, [pc, #24]	; (1000ac2c <USBD_LL_Init+0x94>)
1000ac14:	f7fb fb6a 	bl	100062ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
1000ac18:	2280      	movs	r2, #128	; 0x80
1000ac1a:	2101      	movs	r1, #1
1000ac1c:	4803      	ldr	r0, [pc, #12]	; (1000ac2c <USBD_LL_Init+0x94>)
1000ac1e:	f7fb fb65 	bl	100062ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
1000ac22:	2300      	movs	r3, #0
}
1000ac24:	4618      	mov	r0, r3
1000ac26:	3708      	adds	r7, #8
1000ac28:	46bd      	mov	sp, r7
1000ac2a:	bd80      	pop	{r7, pc}
1000ac2c:	20001a58 	.word	0x20001a58

1000ac30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
1000ac30:	b580      	push	{r7, lr}
1000ac32:	b084      	sub	sp, #16
1000ac34:	af00      	add	r7, sp, #0
1000ac36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
1000ac38:	2300      	movs	r3, #0
1000ac3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
1000ac3c:	2300      	movs	r3, #0
1000ac3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
1000ac40:	687b      	ldr	r3, [r7, #4]
1000ac42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
1000ac46:	4618      	mov	r0, r3
1000ac48:	f7fa fb4d 	bl	100052e6 <HAL_PCD_Start>
1000ac4c:	4603      	mov	r3, r0
1000ac4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
1000ac50:	7bfb      	ldrb	r3, [r7, #15]
1000ac52:	4618      	mov	r0, r3
1000ac54:	f000 f942 	bl	1000aedc <USBD_Get_USB_Status>
1000ac58:	4603      	mov	r3, r0
1000ac5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
1000ac5c:	7bbb      	ldrb	r3, [r7, #14]
}
1000ac5e:	4618      	mov	r0, r3
1000ac60:	3710      	adds	r7, #16
1000ac62:	46bd      	mov	sp, r7
1000ac64:	bd80      	pop	{r7, pc}

1000ac66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
1000ac66:	b580      	push	{r7, lr}
1000ac68:	b084      	sub	sp, #16
1000ac6a:	af00      	add	r7, sp, #0
1000ac6c:	6078      	str	r0, [r7, #4]
1000ac6e:	4608      	mov	r0, r1
1000ac70:	4611      	mov	r1, r2
1000ac72:	461a      	mov	r2, r3
1000ac74:	4603      	mov	r3, r0
1000ac76:	70fb      	strb	r3, [r7, #3]
1000ac78:	460b      	mov	r3, r1
1000ac7a:	70bb      	strb	r3, [r7, #2]
1000ac7c:	4613      	mov	r3, r2
1000ac7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
1000ac80:	2300      	movs	r3, #0
1000ac82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
1000ac84:	2300      	movs	r3, #0
1000ac86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
1000ac88:	687b      	ldr	r3, [r7, #4]
1000ac8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
1000ac8e:	78bb      	ldrb	r3, [r7, #2]
1000ac90:	883a      	ldrh	r2, [r7, #0]
1000ac92:	78f9      	ldrb	r1, [r7, #3]
1000ac94:	f7fa ff31 	bl	10005afa <HAL_PCD_EP_Open>
1000ac98:	4603      	mov	r3, r0
1000ac9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
1000ac9c:	7bfb      	ldrb	r3, [r7, #15]
1000ac9e:	4618      	mov	r0, r3
1000aca0:	f000 f91c 	bl	1000aedc <USBD_Get_USB_Status>
1000aca4:	4603      	mov	r3, r0
1000aca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
1000aca8:	7bbb      	ldrb	r3, [r7, #14]
}
1000acaa:	4618      	mov	r0, r3
1000acac:	3710      	adds	r7, #16
1000acae:	46bd      	mov	sp, r7
1000acb0:	bd80      	pop	{r7, pc}

1000acb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
1000acb2:	b580      	push	{r7, lr}
1000acb4:	b084      	sub	sp, #16
1000acb6:	af00      	add	r7, sp, #0
1000acb8:	6078      	str	r0, [r7, #4]
1000acba:	460b      	mov	r3, r1
1000acbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
1000acbe:	2300      	movs	r3, #0
1000acc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
1000acc2:	2300      	movs	r3, #0
1000acc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
1000acc6:	687b      	ldr	r3, [r7, #4]
1000acc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
1000accc:	78fa      	ldrb	r2, [r7, #3]
1000acce:	4611      	mov	r1, r2
1000acd0:	4618      	mov	r0, r3
1000acd2:	f7fa ff7a 	bl	10005bca <HAL_PCD_EP_Close>
1000acd6:	4603      	mov	r3, r0
1000acd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
1000acda:	7bfb      	ldrb	r3, [r7, #15]
1000acdc:	4618      	mov	r0, r3
1000acde:	f000 f8fd 	bl	1000aedc <USBD_Get_USB_Status>
1000ace2:	4603      	mov	r3, r0
1000ace4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
1000ace6:	7bbb      	ldrb	r3, [r7, #14]
}
1000ace8:	4618      	mov	r0, r3
1000acea:	3710      	adds	r7, #16
1000acec:	46bd      	mov	sp, r7
1000acee:	bd80      	pop	{r7, pc}

1000acf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
1000acf0:	b580      	push	{r7, lr}
1000acf2:	b084      	sub	sp, #16
1000acf4:	af00      	add	r7, sp, #0
1000acf6:	6078      	str	r0, [r7, #4]
1000acf8:	460b      	mov	r3, r1
1000acfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
1000acfc:	2300      	movs	r3, #0
1000acfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
1000ad00:	2300      	movs	r3, #0
1000ad02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
1000ad04:	687b      	ldr	r3, [r7, #4]
1000ad06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
1000ad0a:	78fa      	ldrb	r2, [r7, #3]
1000ad0c:	4611      	mov	r1, r2
1000ad0e:	4618      	mov	r0, r3
1000ad10:	f7fb f852 	bl	10005db8 <HAL_PCD_EP_SetStall>
1000ad14:	4603      	mov	r3, r0
1000ad16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
1000ad18:	7bfb      	ldrb	r3, [r7, #15]
1000ad1a:	4618      	mov	r0, r3
1000ad1c:	f000 f8de 	bl	1000aedc <USBD_Get_USB_Status>
1000ad20:	4603      	mov	r3, r0
1000ad22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
1000ad24:	7bbb      	ldrb	r3, [r7, #14]
}
1000ad26:	4618      	mov	r0, r3
1000ad28:	3710      	adds	r7, #16
1000ad2a:	46bd      	mov	sp, r7
1000ad2c:	bd80      	pop	{r7, pc}

1000ad2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
1000ad2e:	b580      	push	{r7, lr}
1000ad30:	b084      	sub	sp, #16
1000ad32:	af00      	add	r7, sp, #0
1000ad34:	6078      	str	r0, [r7, #4]
1000ad36:	460b      	mov	r3, r1
1000ad38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
1000ad3a:	2300      	movs	r3, #0
1000ad3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
1000ad3e:	2300      	movs	r3, #0
1000ad40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
1000ad42:	687b      	ldr	r3, [r7, #4]
1000ad44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
1000ad48:	78fa      	ldrb	r2, [r7, #3]
1000ad4a:	4611      	mov	r1, r2
1000ad4c:	4618      	mov	r0, r3
1000ad4e:	f7fb f897 	bl	10005e80 <HAL_PCD_EP_ClrStall>
1000ad52:	4603      	mov	r3, r0
1000ad54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
1000ad56:	7bfb      	ldrb	r3, [r7, #15]
1000ad58:	4618      	mov	r0, r3
1000ad5a:	f000 f8bf 	bl	1000aedc <USBD_Get_USB_Status>
1000ad5e:	4603      	mov	r3, r0
1000ad60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
1000ad62:	7bbb      	ldrb	r3, [r7, #14]
}
1000ad64:	4618      	mov	r0, r3
1000ad66:	3710      	adds	r7, #16
1000ad68:	46bd      	mov	sp, r7
1000ad6a:	bd80      	pop	{r7, pc}

1000ad6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
1000ad6c:	b480      	push	{r7}
1000ad6e:	b085      	sub	sp, #20
1000ad70:	af00      	add	r7, sp, #0
1000ad72:	6078      	str	r0, [r7, #4]
1000ad74:	460b      	mov	r3, r1
1000ad76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
1000ad78:	687b      	ldr	r3, [r7, #4]
1000ad7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
1000ad7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
1000ad80:	f997 3003 	ldrsb.w	r3, [r7, #3]
1000ad84:	2b00      	cmp	r3, #0
1000ad86:	da0b      	bge.n	1000ada0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
1000ad88:	78fb      	ldrb	r3, [r7, #3]
1000ad8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
1000ad8e:	68f9      	ldr	r1, [r7, #12]
1000ad90:	4613      	mov	r3, r2
1000ad92:	00db      	lsls	r3, r3, #3
1000ad94:	1a9b      	subs	r3, r3, r2
1000ad96:	009b      	lsls	r3, r3, #2
1000ad98:	440b      	add	r3, r1
1000ad9a:	333e      	adds	r3, #62	; 0x3e
1000ad9c:	781b      	ldrb	r3, [r3, #0]
1000ad9e:	e00b      	b.n	1000adb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
1000ada0:	78fb      	ldrb	r3, [r7, #3]
1000ada2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
1000ada6:	68f9      	ldr	r1, [r7, #12]
1000ada8:	4613      	mov	r3, r2
1000adaa:	00db      	lsls	r3, r3, #3
1000adac:	1a9b      	subs	r3, r3, r2
1000adae:	009b      	lsls	r3, r3, #2
1000adb0:	440b      	add	r3, r1
1000adb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
1000adb6:	781b      	ldrb	r3, [r3, #0]
  }
}
1000adb8:	4618      	mov	r0, r3
1000adba:	3714      	adds	r7, #20
1000adbc:	46bd      	mov	sp, r7
1000adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
1000adc2:	4770      	bx	lr

1000adc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
1000adc4:	b580      	push	{r7, lr}
1000adc6:	b084      	sub	sp, #16
1000adc8:	af00      	add	r7, sp, #0
1000adca:	6078      	str	r0, [r7, #4]
1000adcc:	460b      	mov	r3, r1
1000adce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
1000add0:	2300      	movs	r3, #0
1000add2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
1000add4:	2300      	movs	r3, #0
1000add6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
1000add8:	687b      	ldr	r3, [r7, #4]
1000adda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
1000adde:	78fa      	ldrb	r2, [r7, #3]
1000ade0:	4611      	mov	r1, r2
1000ade2:	4618      	mov	r0, r3
1000ade4:	f7fa fe64 	bl	10005ab0 <HAL_PCD_SetAddress>
1000ade8:	4603      	mov	r3, r0
1000adea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
1000adec:	7bfb      	ldrb	r3, [r7, #15]
1000adee:	4618      	mov	r0, r3
1000adf0:	f000 f874 	bl	1000aedc <USBD_Get_USB_Status>
1000adf4:	4603      	mov	r3, r0
1000adf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
1000adf8:	7bbb      	ldrb	r3, [r7, #14]
}
1000adfa:	4618      	mov	r0, r3
1000adfc:	3710      	adds	r7, #16
1000adfe:	46bd      	mov	sp, r7
1000ae00:	bd80      	pop	{r7, pc}

1000ae02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
1000ae02:	b580      	push	{r7, lr}
1000ae04:	b086      	sub	sp, #24
1000ae06:	af00      	add	r7, sp, #0
1000ae08:	60f8      	str	r0, [r7, #12]
1000ae0a:	607a      	str	r2, [r7, #4]
1000ae0c:	603b      	str	r3, [r7, #0]
1000ae0e:	460b      	mov	r3, r1
1000ae10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
1000ae12:	2300      	movs	r3, #0
1000ae14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
1000ae16:	2300      	movs	r3, #0
1000ae18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
1000ae1a:	68fb      	ldr	r3, [r7, #12]
1000ae1c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
1000ae20:	7af9      	ldrb	r1, [r7, #11]
1000ae22:	683b      	ldr	r3, [r7, #0]
1000ae24:	687a      	ldr	r2, [r7, #4]
1000ae26:	f7fa ff7d 	bl	10005d24 <HAL_PCD_EP_Transmit>
1000ae2a:	4603      	mov	r3, r0
1000ae2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
1000ae2e:	7dfb      	ldrb	r3, [r7, #23]
1000ae30:	4618      	mov	r0, r3
1000ae32:	f000 f853 	bl	1000aedc <USBD_Get_USB_Status>
1000ae36:	4603      	mov	r3, r0
1000ae38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
1000ae3a:	7dbb      	ldrb	r3, [r7, #22]
}
1000ae3c:	4618      	mov	r0, r3
1000ae3e:	3718      	adds	r7, #24
1000ae40:	46bd      	mov	sp, r7
1000ae42:	bd80      	pop	{r7, pc}

1000ae44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
1000ae44:	b580      	push	{r7, lr}
1000ae46:	b086      	sub	sp, #24
1000ae48:	af00      	add	r7, sp, #0
1000ae4a:	60f8      	str	r0, [r7, #12]
1000ae4c:	607a      	str	r2, [r7, #4]
1000ae4e:	603b      	str	r3, [r7, #0]
1000ae50:	460b      	mov	r3, r1
1000ae52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
1000ae54:	2300      	movs	r3, #0
1000ae56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
1000ae58:	2300      	movs	r3, #0
1000ae5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
1000ae5c:	68fb      	ldr	r3, [r7, #12]
1000ae5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
1000ae62:	7af9      	ldrb	r1, [r7, #11]
1000ae64:	683b      	ldr	r3, [r7, #0]
1000ae66:	687a      	ldr	r2, [r7, #4]
1000ae68:	f7fa fef9 	bl	10005c5e <HAL_PCD_EP_Receive>
1000ae6c:	4603      	mov	r3, r0
1000ae6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
1000ae70:	7dfb      	ldrb	r3, [r7, #23]
1000ae72:	4618      	mov	r0, r3
1000ae74:	f000 f832 	bl	1000aedc <USBD_Get_USB_Status>
1000ae78:	4603      	mov	r3, r0
1000ae7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
1000ae7c:	7dbb      	ldrb	r3, [r7, #22]
}
1000ae7e:	4618      	mov	r0, r3
1000ae80:	3718      	adds	r7, #24
1000ae82:	46bd      	mov	sp, r7
1000ae84:	bd80      	pop	{r7, pc}

1000ae86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
1000ae86:	b580      	push	{r7, lr}
1000ae88:	b082      	sub	sp, #8
1000ae8a:	af00      	add	r7, sp, #0
1000ae8c:	6078      	str	r0, [r7, #4]
1000ae8e:	460b      	mov	r3, r1
1000ae90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
1000ae92:	687b      	ldr	r3, [r7, #4]
1000ae94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
1000ae98:	78fa      	ldrb	r2, [r7, #3]
1000ae9a:	4611      	mov	r1, r2
1000ae9c:	4618      	mov	r0, r3
1000ae9e:	f7fa ff29 	bl	10005cf4 <HAL_PCD_EP_GetRxCount>
1000aea2:	4603      	mov	r3, r0
}
1000aea4:	4618      	mov	r0, r3
1000aea6:	3708      	adds	r7, #8
1000aea8:	46bd      	mov	sp, r7
1000aeaa:	bd80      	pop	{r7, pc}

1000aeac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
1000aeac:	b480      	push	{r7}
1000aeae:	b083      	sub	sp, #12
1000aeb0:	af00      	add	r7, sp, #0
1000aeb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
1000aeb4:	4b03      	ldr	r3, [pc, #12]	; (1000aec4 <USBD_static_malloc+0x18>)
}
1000aeb6:	4618      	mov	r0, r3
1000aeb8:	370c      	adds	r7, #12
1000aeba:	46bd      	mov	sp, r7
1000aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aec0:	4770      	bx	lr
1000aec2:	bf00      	nop
1000aec4:	200002bc 	.word	0x200002bc

1000aec8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
1000aec8:	b480      	push	{r7}
1000aeca:	b083      	sub	sp, #12
1000aecc:	af00      	add	r7, sp, #0
1000aece:	6078      	str	r0, [r7, #4]

}
1000aed0:	bf00      	nop
1000aed2:	370c      	adds	r7, #12
1000aed4:	46bd      	mov	sp, r7
1000aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aeda:	4770      	bx	lr

1000aedc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
1000aedc:	b480      	push	{r7}
1000aede:	b085      	sub	sp, #20
1000aee0:	af00      	add	r7, sp, #0
1000aee2:	4603      	mov	r3, r0
1000aee4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
1000aee6:	2300      	movs	r3, #0
1000aee8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
1000aeea:	79fb      	ldrb	r3, [r7, #7]
1000aeec:	2b03      	cmp	r3, #3
1000aeee:	d817      	bhi.n	1000af20 <USBD_Get_USB_Status+0x44>
1000aef0:	a201      	add	r2, pc, #4	; (adr r2, 1000aef8 <USBD_Get_USB_Status+0x1c>)
1000aef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000aef6:	bf00      	nop
1000aef8:	1000af09 	.word	0x1000af09
1000aefc:	1000af0f 	.word	0x1000af0f
1000af00:	1000af15 	.word	0x1000af15
1000af04:	1000af1b 	.word	0x1000af1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
1000af08:	2300      	movs	r3, #0
1000af0a:	73fb      	strb	r3, [r7, #15]
    break;
1000af0c:	e00b      	b.n	1000af26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
1000af0e:	2303      	movs	r3, #3
1000af10:	73fb      	strb	r3, [r7, #15]
    break;
1000af12:	e008      	b.n	1000af26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
1000af14:	2301      	movs	r3, #1
1000af16:	73fb      	strb	r3, [r7, #15]
    break;
1000af18:	e005      	b.n	1000af26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
1000af1a:	2303      	movs	r3, #3
1000af1c:	73fb      	strb	r3, [r7, #15]
    break;
1000af1e:	e002      	b.n	1000af26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
1000af20:	2303      	movs	r3, #3
1000af22:	73fb      	strb	r3, [r7, #15]
    break;
1000af24:	bf00      	nop
  }
  return usb_status;
1000af26:	7bfb      	ldrb	r3, [r7, #15]
}
1000af28:	4618      	mov	r0, r3
1000af2a:	3714      	adds	r7, #20
1000af2c:	46bd      	mov	sp, r7
1000af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000af32:	4770      	bx	lr

1000af34 <atoi>:
1000af34:	220a      	movs	r2, #10
1000af36:	2100      	movs	r1, #0
1000af38:	f000 b9dc 	b.w	1000b2f4 <strtol>

1000af3c <__errno>:
1000af3c:	4b01      	ldr	r3, [pc, #4]	; (1000af44 <__errno+0x8>)
1000af3e:	6818      	ldr	r0, [r3, #0]
1000af40:	4770      	bx	lr
1000af42:	bf00      	nop
1000af44:	20000180 	.word	0x20000180

1000af48 <__libc_init_array>:
1000af48:	b570      	push	{r4, r5, r6, lr}
1000af4a:	4d0d      	ldr	r5, [pc, #52]	; (1000af80 <__libc_init_array+0x38>)
1000af4c:	4c0d      	ldr	r4, [pc, #52]	; (1000af84 <__libc_init_array+0x3c>)
1000af4e:	1b64      	subs	r4, r4, r5
1000af50:	10a4      	asrs	r4, r4, #2
1000af52:	2600      	movs	r6, #0
1000af54:	42a6      	cmp	r6, r4
1000af56:	d109      	bne.n	1000af6c <__libc_init_array+0x24>
1000af58:	4d0b      	ldr	r5, [pc, #44]	; (1000af88 <__libc_init_array+0x40>)
1000af5a:	4c0c      	ldr	r4, [pc, #48]	; (1000af8c <__libc_init_array+0x44>)
1000af5c:	f000 faee 	bl	1000b53c <_init>
1000af60:	1b64      	subs	r4, r4, r5
1000af62:	10a4      	asrs	r4, r4, #2
1000af64:	2600      	movs	r6, #0
1000af66:	42a6      	cmp	r6, r4
1000af68:	d105      	bne.n	1000af76 <__libc_init_array+0x2e>
1000af6a:	bd70      	pop	{r4, r5, r6, pc}
1000af6c:	f855 3b04 	ldr.w	r3, [r5], #4
1000af70:	4798      	blx	r3
1000af72:	3601      	adds	r6, #1
1000af74:	e7ee      	b.n	1000af54 <__libc_init_array+0xc>
1000af76:	f855 3b04 	ldr.w	r3, [r5], #4
1000af7a:	4798      	blx	r3
1000af7c:	3601      	adds	r6, #1
1000af7e:	e7f2      	b.n	1000af66 <__libc_init_array+0x1e>
1000af80:	0800b954 	.word	0x0800b954
1000af84:	0800b954 	.word	0x0800b954
1000af88:	0800b954 	.word	0x0800b954
1000af8c:	0800b958 	.word	0x0800b958

1000af90 <__itoa>:
1000af90:	1e93      	subs	r3, r2, #2
1000af92:	2b22      	cmp	r3, #34	; 0x22
1000af94:	b510      	push	{r4, lr}
1000af96:	460c      	mov	r4, r1
1000af98:	d904      	bls.n	1000afa4 <__itoa+0x14>
1000af9a:	2300      	movs	r3, #0
1000af9c:	700b      	strb	r3, [r1, #0]
1000af9e:	461c      	mov	r4, r3
1000afa0:	4620      	mov	r0, r4
1000afa2:	bd10      	pop	{r4, pc}
1000afa4:	2a0a      	cmp	r2, #10
1000afa6:	d109      	bne.n	1000afbc <__itoa+0x2c>
1000afa8:	2800      	cmp	r0, #0
1000afaa:	da07      	bge.n	1000afbc <__itoa+0x2c>
1000afac:	232d      	movs	r3, #45	; 0x2d
1000afae:	700b      	strb	r3, [r1, #0]
1000afb0:	4240      	negs	r0, r0
1000afb2:	2101      	movs	r1, #1
1000afb4:	4421      	add	r1, r4
1000afb6:	f000 f9a7 	bl	1000b308 <__utoa>
1000afba:	e7f1      	b.n	1000afa0 <__itoa+0x10>
1000afbc:	2100      	movs	r1, #0
1000afbe:	e7f9      	b.n	1000afb4 <__itoa+0x24>

1000afc0 <itoa>:
1000afc0:	f7ff bfe6 	b.w	1000af90 <__itoa>

1000afc4 <malloc>:
1000afc4:	4b02      	ldr	r3, [pc, #8]	; (1000afd0 <malloc+0xc>)
1000afc6:	4601      	mov	r1, r0
1000afc8:	6818      	ldr	r0, [r3, #0]
1000afca:	f000 b871 	b.w	1000b0b0 <_malloc_r>
1000afce:	bf00      	nop
1000afd0:	20000180 	.word	0x20000180

1000afd4 <free>:
1000afd4:	4b02      	ldr	r3, [pc, #8]	; (1000afe0 <free+0xc>)
1000afd6:	4601      	mov	r1, r0
1000afd8:	6818      	ldr	r0, [r3, #0]
1000afda:	f000 b819 	b.w	1000b010 <_free_r>
1000afde:	bf00      	nop
1000afe0:	20000180 	.word	0x20000180

1000afe4 <memcpy>:
1000afe4:	440a      	add	r2, r1
1000afe6:	4291      	cmp	r1, r2
1000afe8:	f100 33ff 	add.w	r3, r0, #4294967295
1000afec:	d100      	bne.n	1000aff0 <memcpy+0xc>
1000afee:	4770      	bx	lr
1000aff0:	b510      	push	{r4, lr}
1000aff2:	f811 4b01 	ldrb.w	r4, [r1], #1
1000aff6:	f803 4f01 	strb.w	r4, [r3, #1]!
1000affa:	4291      	cmp	r1, r2
1000affc:	d1f9      	bne.n	1000aff2 <memcpy+0xe>
1000affe:	bd10      	pop	{r4, pc}

1000b000 <memset>:
1000b000:	4402      	add	r2, r0
1000b002:	4603      	mov	r3, r0
1000b004:	4293      	cmp	r3, r2
1000b006:	d100      	bne.n	1000b00a <memset+0xa>
1000b008:	4770      	bx	lr
1000b00a:	f803 1b01 	strb.w	r1, [r3], #1
1000b00e:	e7f9      	b.n	1000b004 <memset+0x4>

1000b010 <_free_r>:
1000b010:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000b012:	2900      	cmp	r1, #0
1000b014:	d048      	beq.n	1000b0a8 <_free_r+0x98>
1000b016:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000b01a:	9001      	str	r0, [sp, #4]
1000b01c:	2b00      	cmp	r3, #0
1000b01e:	f1a1 0404 	sub.w	r4, r1, #4
1000b022:	bfb8      	it	lt
1000b024:	18e4      	addlt	r4, r4, r3
1000b026:	f000 f9b1 	bl	1000b38c <__malloc_lock>
1000b02a:	4a20      	ldr	r2, [pc, #128]	; (1000b0ac <_free_r+0x9c>)
1000b02c:	9801      	ldr	r0, [sp, #4]
1000b02e:	6813      	ldr	r3, [r2, #0]
1000b030:	4615      	mov	r5, r2
1000b032:	b933      	cbnz	r3, 1000b042 <_free_r+0x32>
1000b034:	6063      	str	r3, [r4, #4]
1000b036:	6014      	str	r4, [r2, #0]
1000b038:	b003      	add	sp, #12
1000b03a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1000b03e:	f000 b9ab 	b.w	1000b398 <__malloc_unlock>
1000b042:	42a3      	cmp	r3, r4
1000b044:	d90b      	bls.n	1000b05e <_free_r+0x4e>
1000b046:	6821      	ldr	r1, [r4, #0]
1000b048:	1862      	adds	r2, r4, r1
1000b04a:	4293      	cmp	r3, r2
1000b04c:	bf04      	itt	eq
1000b04e:	681a      	ldreq	r2, [r3, #0]
1000b050:	685b      	ldreq	r3, [r3, #4]
1000b052:	6063      	str	r3, [r4, #4]
1000b054:	bf04      	itt	eq
1000b056:	1852      	addeq	r2, r2, r1
1000b058:	6022      	streq	r2, [r4, #0]
1000b05a:	602c      	str	r4, [r5, #0]
1000b05c:	e7ec      	b.n	1000b038 <_free_r+0x28>
1000b05e:	461a      	mov	r2, r3
1000b060:	685b      	ldr	r3, [r3, #4]
1000b062:	b10b      	cbz	r3, 1000b068 <_free_r+0x58>
1000b064:	42a3      	cmp	r3, r4
1000b066:	d9fa      	bls.n	1000b05e <_free_r+0x4e>
1000b068:	6811      	ldr	r1, [r2, #0]
1000b06a:	1855      	adds	r5, r2, r1
1000b06c:	42a5      	cmp	r5, r4
1000b06e:	d10b      	bne.n	1000b088 <_free_r+0x78>
1000b070:	6824      	ldr	r4, [r4, #0]
1000b072:	4421      	add	r1, r4
1000b074:	1854      	adds	r4, r2, r1
1000b076:	42a3      	cmp	r3, r4
1000b078:	6011      	str	r1, [r2, #0]
1000b07a:	d1dd      	bne.n	1000b038 <_free_r+0x28>
1000b07c:	681c      	ldr	r4, [r3, #0]
1000b07e:	685b      	ldr	r3, [r3, #4]
1000b080:	6053      	str	r3, [r2, #4]
1000b082:	4421      	add	r1, r4
1000b084:	6011      	str	r1, [r2, #0]
1000b086:	e7d7      	b.n	1000b038 <_free_r+0x28>
1000b088:	d902      	bls.n	1000b090 <_free_r+0x80>
1000b08a:	230c      	movs	r3, #12
1000b08c:	6003      	str	r3, [r0, #0]
1000b08e:	e7d3      	b.n	1000b038 <_free_r+0x28>
1000b090:	6825      	ldr	r5, [r4, #0]
1000b092:	1961      	adds	r1, r4, r5
1000b094:	428b      	cmp	r3, r1
1000b096:	bf04      	itt	eq
1000b098:	6819      	ldreq	r1, [r3, #0]
1000b09a:	685b      	ldreq	r3, [r3, #4]
1000b09c:	6063      	str	r3, [r4, #4]
1000b09e:	bf04      	itt	eq
1000b0a0:	1949      	addeq	r1, r1, r5
1000b0a2:	6021      	streq	r1, [r4, #0]
1000b0a4:	6054      	str	r4, [r2, #4]
1000b0a6:	e7c7      	b.n	1000b038 <_free_r+0x28>
1000b0a8:	b003      	add	sp, #12
1000b0aa:	bd30      	pop	{r4, r5, pc}
1000b0ac:	200004dc 	.word	0x200004dc

1000b0b0 <_malloc_r>:
1000b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b0b2:	1ccd      	adds	r5, r1, #3
1000b0b4:	f025 0503 	bic.w	r5, r5, #3
1000b0b8:	3508      	adds	r5, #8
1000b0ba:	2d0c      	cmp	r5, #12
1000b0bc:	bf38      	it	cc
1000b0be:	250c      	movcc	r5, #12
1000b0c0:	2d00      	cmp	r5, #0
1000b0c2:	4606      	mov	r6, r0
1000b0c4:	db01      	blt.n	1000b0ca <_malloc_r+0x1a>
1000b0c6:	42a9      	cmp	r1, r5
1000b0c8:	d903      	bls.n	1000b0d2 <_malloc_r+0x22>
1000b0ca:	230c      	movs	r3, #12
1000b0cc:	6033      	str	r3, [r6, #0]
1000b0ce:	2000      	movs	r0, #0
1000b0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b0d2:	f000 f95b 	bl	1000b38c <__malloc_lock>
1000b0d6:	4921      	ldr	r1, [pc, #132]	; (1000b15c <_malloc_r+0xac>)
1000b0d8:	680a      	ldr	r2, [r1, #0]
1000b0da:	4614      	mov	r4, r2
1000b0dc:	b99c      	cbnz	r4, 1000b106 <_malloc_r+0x56>
1000b0de:	4f20      	ldr	r7, [pc, #128]	; (1000b160 <_malloc_r+0xb0>)
1000b0e0:	683b      	ldr	r3, [r7, #0]
1000b0e2:	b923      	cbnz	r3, 1000b0ee <_malloc_r+0x3e>
1000b0e4:	4621      	mov	r1, r4
1000b0e6:	4630      	mov	r0, r6
1000b0e8:	f000 f83c 	bl	1000b164 <_sbrk_r>
1000b0ec:	6038      	str	r0, [r7, #0]
1000b0ee:	4629      	mov	r1, r5
1000b0f0:	4630      	mov	r0, r6
1000b0f2:	f000 f837 	bl	1000b164 <_sbrk_r>
1000b0f6:	1c43      	adds	r3, r0, #1
1000b0f8:	d123      	bne.n	1000b142 <_malloc_r+0x92>
1000b0fa:	230c      	movs	r3, #12
1000b0fc:	6033      	str	r3, [r6, #0]
1000b0fe:	4630      	mov	r0, r6
1000b100:	f000 f94a 	bl	1000b398 <__malloc_unlock>
1000b104:	e7e3      	b.n	1000b0ce <_malloc_r+0x1e>
1000b106:	6823      	ldr	r3, [r4, #0]
1000b108:	1b5b      	subs	r3, r3, r5
1000b10a:	d417      	bmi.n	1000b13c <_malloc_r+0x8c>
1000b10c:	2b0b      	cmp	r3, #11
1000b10e:	d903      	bls.n	1000b118 <_malloc_r+0x68>
1000b110:	6023      	str	r3, [r4, #0]
1000b112:	441c      	add	r4, r3
1000b114:	6025      	str	r5, [r4, #0]
1000b116:	e004      	b.n	1000b122 <_malloc_r+0x72>
1000b118:	6863      	ldr	r3, [r4, #4]
1000b11a:	42a2      	cmp	r2, r4
1000b11c:	bf0c      	ite	eq
1000b11e:	600b      	streq	r3, [r1, #0]
1000b120:	6053      	strne	r3, [r2, #4]
1000b122:	4630      	mov	r0, r6
1000b124:	f000 f938 	bl	1000b398 <__malloc_unlock>
1000b128:	f104 000b 	add.w	r0, r4, #11
1000b12c:	1d23      	adds	r3, r4, #4
1000b12e:	f020 0007 	bic.w	r0, r0, #7
1000b132:	1ac2      	subs	r2, r0, r3
1000b134:	d0cc      	beq.n	1000b0d0 <_malloc_r+0x20>
1000b136:	1a1b      	subs	r3, r3, r0
1000b138:	50a3      	str	r3, [r4, r2]
1000b13a:	e7c9      	b.n	1000b0d0 <_malloc_r+0x20>
1000b13c:	4622      	mov	r2, r4
1000b13e:	6864      	ldr	r4, [r4, #4]
1000b140:	e7cc      	b.n	1000b0dc <_malloc_r+0x2c>
1000b142:	1cc4      	adds	r4, r0, #3
1000b144:	f024 0403 	bic.w	r4, r4, #3
1000b148:	42a0      	cmp	r0, r4
1000b14a:	d0e3      	beq.n	1000b114 <_malloc_r+0x64>
1000b14c:	1a21      	subs	r1, r4, r0
1000b14e:	4630      	mov	r0, r6
1000b150:	f000 f808 	bl	1000b164 <_sbrk_r>
1000b154:	3001      	adds	r0, #1
1000b156:	d1dd      	bne.n	1000b114 <_malloc_r+0x64>
1000b158:	e7cf      	b.n	1000b0fa <_malloc_r+0x4a>
1000b15a:	bf00      	nop
1000b15c:	200004dc 	.word	0x200004dc
1000b160:	200004e0 	.word	0x200004e0

1000b164 <_sbrk_r>:
1000b164:	b538      	push	{r3, r4, r5, lr}
1000b166:	4d06      	ldr	r5, [pc, #24]	; (1000b180 <_sbrk_r+0x1c>)
1000b168:	2300      	movs	r3, #0
1000b16a:	4604      	mov	r4, r0
1000b16c:	4608      	mov	r0, r1
1000b16e:	602b      	str	r3, [r5, #0]
1000b170:	f7f9 f90a 	bl	10004388 <_sbrk>
1000b174:	1c43      	adds	r3, r0, #1
1000b176:	d102      	bne.n	1000b17e <_sbrk_r+0x1a>
1000b178:	682b      	ldr	r3, [r5, #0]
1000b17a:	b103      	cbz	r3, 1000b17e <_sbrk_r+0x1a>
1000b17c:	6023      	str	r3, [r4, #0]
1000b17e:	bd38      	pop	{r3, r4, r5, pc}
1000b180:	20001e60 	.word	0x20001e60

1000b184 <strcat>:
1000b184:	b510      	push	{r4, lr}
1000b186:	4602      	mov	r2, r0
1000b188:	7814      	ldrb	r4, [r2, #0]
1000b18a:	4613      	mov	r3, r2
1000b18c:	3201      	adds	r2, #1
1000b18e:	2c00      	cmp	r4, #0
1000b190:	d1fa      	bne.n	1000b188 <strcat+0x4>
1000b192:	3b01      	subs	r3, #1
1000b194:	f811 2b01 	ldrb.w	r2, [r1], #1
1000b198:	f803 2f01 	strb.w	r2, [r3, #1]!
1000b19c:	2a00      	cmp	r2, #0
1000b19e:	d1f9      	bne.n	1000b194 <strcat+0x10>
1000b1a0:	bd10      	pop	{r4, pc}

1000b1a2 <strncmp>:
1000b1a2:	b510      	push	{r4, lr}
1000b1a4:	b16a      	cbz	r2, 1000b1c2 <strncmp+0x20>
1000b1a6:	3901      	subs	r1, #1
1000b1a8:	1884      	adds	r4, r0, r2
1000b1aa:	f810 3b01 	ldrb.w	r3, [r0], #1
1000b1ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
1000b1b2:	4293      	cmp	r3, r2
1000b1b4:	d103      	bne.n	1000b1be <strncmp+0x1c>
1000b1b6:	42a0      	cmp	r0, r4
1000b1b8:	d001      	beq.n	1000b1be <strncmp+0x1c>
1000b1ba:	2b00      	cmp	r3, #0
1000b1bc:	d1f5      	bne.n	1000b1aa <strncmp+0x8>
1000b1be:	1a98      	subs	r0, r3, r2
1000b1c0:	bd10      	pop	{r4, pc}
1000b1c2:	4610      	mov	r0, r2
1000b1c4:	e7fc      	b.n	1000b1c0 <strncmp+0x1e>

1000b1c6 <strncpy>:
1000b1c6:	b510      	push	{r4, lr}
1000b1c8:	3901      	subs	r1, #1
1000b1ca:	4603      	mov	r3, r0
1000b1cc:	b132      	cbz	r2, 1000b1dc <strncpy+0x16>
1000b1ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1000b1d2:	f803 4b01 	strb.w	r4, [r3], #1
1000b1d6:	3a01      	subs	r2, #1
1000b1d8:	2c00      	cmp	r4, #0
1000b1da:	d1f7      	bne.n	1000b1cc <strncpy+0x6>
1000b1dc:	441a      	add	r2, r3
1000b1de:	2100      	movs	r1, #0
1000b1e0:	4293      	cmp	r3, r2
1000b1e2:	d100      	bne.n	1000b1e6 <strncpy+0x20>
1000b1e4:	bd10      	pop	{r4, pc}
1000b1e6:	f803 1b01 	strb.w	r1, [r3], #1
1000b1ea:	e7f9      	b.n	1000b1e0 <strncpy+0x1a>

1000b1ec <_strtol_l.isra.0>:
1000b1ec:	2b01      	cmp	r3, #1
1000b1ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000b1f2:	d001      	beq.n	1000b1f8 <_strtol_l.isra.0+0xc>
1000b1f4:	2b24      	cmp	r3, #36	; 0x24
1000b1f6:	d906      	bls.n	1000b206 <_strtol_l.isra.0+0x1a>
1000b1f8:	f7ff fea0 	bl	1000af3c <__errno>
1000b1fc:	2316      	movs	r3, #22
1000b1fe:	6003      	str	r3, [r0, #0]
1000b200:	2000      	movs	r0, #0
1000b202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000b206:	4f3a      	ldr	r7, [pc, #232]	; (1000b2f0 <_strtol_l.isra.0+0x104>)
1000b208:	468e      	mov	lr, r1
1000b20a:	4676      	mov	r6, lr
1000b20c:	f81e 4b01 	ldrb.w	r4, [lr], #1
1000b210:	5de5      	ldrb	r5, [r4, r7]
1000b212:	f015 0508 	ands.w	r5, r5, #8
1000b216:	d1f8      	bne.n	1000b20a <_strtol_l.isra.0+0x1e>
1000b218:	2c2d      	cmp	r4, #45	; 0x2d
1000b21a:	d134      	bne.n	1000b286 <_strtol_l.isra.0+0x9a>
1000b21c:	f89e 4000 	ldrb.w	r4, [lr]
1000b220:	f04f 0801 	mov.w	r8, #1
1000b224:	f106 0e02 	add.w	lr, r6, #2
1000b228:	2b00      	cmp	r3, #0
1000b22a:	d05c      	beq.n	1000b2e6 <_strtol_l.isra.0+0xfa>
1000b22c:	2b10      	cmp	r3, #16
1000b22e:	d10c      	bne.n	1000b24a <_strtol_l.isra.0+0x5e>
1000b230:	2c30      	cmp	r4, #48	; 0x30
1000b232:	d10a      	bne.n	1000b24a <_strtol_l.isra.0+0x5e>
1000b234:	f89e 4000 	ldrb.w	r4, [lr]
1000b238:	f004 04df 	and.w	r4, r4, #223	; 0xdf
1000b23c:	2c58      	cmp	r4, #88	; 0x58
1000b23e:	d14d      	bne.n	1000b2dc <_strtol_l.isra.0+0xf0>
1000b240:	f89e 4001 	ldrb.w	r4, [lr, #1]
1000b244:	2310      	movs	r3, #16
1000b246:	f10e 0e02 	add.w	lr, lr, #2
1000b24a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
1000b24e:	f10c 3cff 	add.w	ip, ip, #4294967295
1000b252:	2600      	movs	r6, #0
1000b254:	fbbc f9f3 	udiv	r9, ip, r3
1000b258:	4635      	mov	r5, r6
1000b25a:	fb03 ca19 	mls	sl, r3, r9, ip
1000b25e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
1000b262:	2f09      	cmp	r7, #9
1000b264:	d818      	bhi.n	1000b298 <_strtol_l.isra.0+0xac>
1000b266:	463c      	mov	r4, r7
1000b268:	42a3      	cmp	r3, r4
1000b26a:	dd24      	ble.n	1000b2b6 <_strtol_l.isra.0+0xca>
1000b26c:	2e00      	cmp	r6, #0
1000b26e:	db1f      	blt.n	1000b2b0 <_strtol_l.isra.0+0xc4>
1000b270:	45a9      	cmp	r9, r5
1000b272:	d31d      	bcc.n	1000b2b0 <_strtol_l.isra.0+0xc4>
1000b274:	d101      	bne.n	1000b27a <_strtol_l.isra.0+0x8e>
1000b276:	45a2      	cmp	sl, r4
1000b278:	db1a      	blt.n	1000b2b0 <_strtol_l.isra.0+0xc4>
1000b27a:	fb05 4503 	mla	r5, r5, r3, r4
1000b27e:	2601      	movs	r6, #1
1000b280:	f81e 4b01 	ldrb.w	r4, [lr], #1
1000b284:	e7eb      	b.n	1000b25e <_strtol_l.isra.0+0x72>
1000b286:	2c2b      	cmp	r4, #43	; 0x2b
1000b288:	bf08      	it	eq
1000b28a:	f89e 4000 	ldrbeq.w	r4, [lr]
1000b28e:	46a8      	mov	r8, r5
1000b290:	bf08      	it	eq
1000b292:	f106 0e02 	addeq.w	lr, r6, #2
1000b296:	e7c7      	b.n	1000b228 <_strtol_l.isra.0+0x3c>
1000b298:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
1000b29c:	2f19      	cmp	r7, #25
1000b29e:	d801      	bhi.n	1000b2a4 <_strtol_l.isra.0+0xb8>
1000b2a0:	3c37      	subs	r4, #55	; 0x37
1000b2a2:	e7e1      	b.n	1000b268 <_strtol_l.isra.0+0x7c>
1000b2a4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
1000b2a8:	2f19      	cmp	r7, #25
1000b2aa:	d804      	bhi.n	1000b2b6 <_strtol_l.isra.0+0xca>
1000b2ac:	3c57      	subs	r4, #87	; 0x57
1000b2ae:	e7db      	b.n	1000b268 <_strtol_l.isra.0+0x7c>
1000b2b0:	f04f 36ff 	mov.w	r6, #4294967295
1000b2b4:	e7e4      	b.n	1000b280 <_strtol_l.isra.0+0x94>
1000b2b6:	2e00      	cmp	r6, #0
1000b2b8:	da05      	bge.n	1000b2c6 <_strtol_l.isra.0+0xda>
1000b2ba:	2322      	movs	r3, #34	; 0x22
1000b2bc:	6003      	str	r3, [r0, #0]
1000b2be:	4665      	mov	r5, ip
1000b2c0:	b942      	cbnz	r2, 1000b2d4 <_strtol_l.isra.0+0xe8>
1000b2c2:	4628      	mov	r0, r5
1000b2c4:	e79d      	b.n	1000b202 <_strtol_l.isra.0+0x16>
1000b2c6:	f1b8 0f00 	cmp.w	r8, #0
1000b2ca:	d000      	beq.n	1000b2ce <_strtol_l.isra.0+0xe2>
1000b2cc:	426d      	negs	r5, r5
1000b2ce:	2a00      	cmp	r2, #0
1000b2d0:	d0f7      	beq.n	1000b2c2 <_strtol_l.isra.0+0xd6>
1000b2d2:	b10e      	cbz	r6, 1000b2d8 <_strtol_l.isra.0+0xec>
1000b2d4:	f10e 31ff 	add.w	r1, lr, #4294967295
1000b2d8:	6011      	str	r1, [r2, #0]
1000b2da:	e7f2      	b.n	1000b2c2 <_strtol_l.isra.0+0xd6>
1000b2dc:	2430      	movs	r4, #48	; 0x30
1000b2de:	2b00      	cmp	r3, #0
1000b2e0:	d1b3      	bne.n	1000b24a <_strtol_l.isra.0+0x5e>
1000b2e2:	2308      	movs	r3, #8
1000b2e4:	e7b1      	b.n	1000b24a <_strtol_l.isra.0+0x5e>
1000b2e6:	2c30      	cmp	r4, #48	; 0x30
1000b2e8:	d0a4      	beq.n	1000b234 <_strtol_l.isra.0+0x48>
1000b2ea:	230a      	movs	r3, #10
1000b2ec:	e7ad      	b.n	1000b24a <_strtol_l.isra.0+0x5e>
1000b2ee:	bf00      	nop
1000b2f0:	0800b84a 	.word	0x0800b84a

1000b2f4 <strtol>:
1000b2f4:	4613      	mov	r3, r2
1000b2f6:	460a      	mov	r2, r1
1000b2f8:	4601      	mov	r1, r0
1000b2fa:	4802      	ldr	r0, [pc, #8]	; (1000b304 <strtol+0x10>)
1000b2fc:	6800      	ldr	r0, [r0, #0]
1000b2fe:	f7ff bf75 	b.w	1000b1ec <_strtol_l.isra.0>
1000b302:	bf00      	nop
1000b304:	20000180 	.word	0x20000180

1000b308 <__utoa>:
1000b308:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b30a:	4c1f      	ldr	r4, [pc, #124]	; (1000b388 <__utoa+0x80>)
1000b30c:	b08b      	sub	sp, #44	; 0x2c
1000b30e:	4605      	mov	r5, r0
1000b310:	460b      	mov	r3, r1
1000b312:	466e      	mov	r6, sp
1000b314:	f104 0c20 	add.w	ip, r4, #32
1000b318:	6820      	ldr	r0, [r4, #0]
1000b31a:	6861      	ldr	r1, [r4, #4]
1000b31c:	4637      	mov	r7, r6
1000b31e:	c703      	stmia	r7!, {r0, r1}
1000b320:	3408      	adds	r4, #8
1000b322:	4564      	cmp	r4, ip
1000b324:	463e      	mov	r6, r7
1000b326:	d1f7      	bne.n	1000b318 <__utoa+0x10>
1000b328:	7921      	ldrb	r1, [r4, #4]
1000b32a:	7139      	strb	r1, [r7, #4]
1000b32c:	1e91      	subs	r1, r2, #2
1000b32e:	6820      	ldr	r0, [r4, #0]
1000b330:	6038      	str	r0, [r7, #0]
1000b332:	2922      	cmp	r1, #34	; 0x22
1000b334:	f04f 0100 	mov.w	r1, #0
1000b338:	d904      	bls.n	1000b344 <__utoa+0x3c>
1000b33a:	7019      	strb	r1, [r3, #0]
1000b33c:	460b      	mov	r3, r1
1000b33e:	4618      	mov	r0, r3
1000b340:	b00b      	add	sp, #44	; 0x2c
1000b342:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b344:	1e58      	subs	r0, r3, #1
1000b346:	4684      	mov	ip, r0
1000b348:	fbb5 f7f2 	udiv	r7, r5, r2
1000b34c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
1000b350:	fb02 5617 	mls	r6, r2, r7, r5
1000b354:	4476      	add	r6, lr
1000b356:	460c      	mov	r4, r1
1000b358:	f816 6c28 	ldrb.w	r6, [r6, #-40]
1000b35c:	f80c 6f01 	strb.w	r6, [ip, #1]!
1000b360:	462e      	mov	r6, r5
1000b362:	42b2      	cmp	r2, r6
1000b364:	f101 0101 	add.w	r1, r1, #1
1000b368:	463d      	mov	r5, r7
1000b36a:	d9ed      	bls.n	1000b348 <__utoa+0x40>
1000b36c:	2200      	movs	r2, #0
1000b36e:	545a      	strb	r2, [r3, r1]
1000b370:	1919      	adds	r1, r3, r4
1000b372:	1aa5      	subs	r5, r4, r2
1000b374:	42aa      	cmp	r2, r5
1000b376:	dae2      	bge.n	1000b33e <__utoa+0x36>
1000b378:	f810 5f01 	ldrb.w	r5, [r0, #1]!
1000b37c:	780e      	ldrb	r6, [r1, #0]
1000b37e:	7006      	strb	r6, [r0, #0]
1000b380:	3201      	adds	r2, #1
1000b382:	f801 5901 	strb.w	r5, [r1], #-1
1000b386:	e7f4      	b.n	1000b372 <__utoa+0x6a>
1000b388:	0800b824 	.word	0x0800b824

1000b38c <__malloc_lock>:
1000b38c:	4801      	ldr	r0, [pc, #4]	; (1000b394 <__malloc_lock+0x8>)
1000b38e:	f000 b809 	b.w	1000b3a4 <__retarget_lock_acquire_recursive>
1000b392:	bf00      	nop
1000b394:	20001e68 	.word	0x20001e68

1000b398 <__malloc_unlock>:
1000b398:	4801      	ldr	r0, [pc, #4]	; (1000b3a0 <__malloc_unlock+0x8>)
1000b39a:	f000 b804 	b.w	1000b3a6 <__retarget_lock_release_recursive>
1000b39e:	bf00      	nop
1000b3a0:	20001e68 	.word	0x20001e68

1000b3a4 <__retarget_lock_acquire_recursive>:
1000b3a4:	4770      	bx	lr

1000b3a6 <__retarget_lock_release_recursive>:
1000b3a6:	4770      	bx	lr

1000b3a8 <ceil>:
1000b3a8:	ec51 0b10 	vmov	r0, r1, d0
1000b3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000b3b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
1000b3b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
1000b3b8:	2e13      	cmp	r6, #19
1000b3ba:	ee10 5a10 	vmov	r5, s0
1000b3be:	ee10 8a10 	vmov	r8, s0
1000b3c2:	460c      	mov	r4, r1
1000b3c4:	dc30      	bgt.n	1000b428 <ceil+0x80>
1000b3c6:	2e00      	cmp	r6, #0
1000b3c8:	da12      	bge.n	1000b3f0 <ceil+0x48>
1000b3ca:	a335      	add	r3, pc, #212	; (adr r3, 1000b4a0 <ceil+0xf8>)
1000b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
1000b3d0:	f7f4 fe44 	bl	1000005c <__adddf3>
1000b3d4:	2200      	movs	r2, #0
1000b3d6:	2300      	movs	r3, #0
1000b3d8:	f7f5 fa86 	bl	100008e8 <__aeabi_dcmpgt>
1000b3dc:	b128      	cbz	r0, 1000b3ea <ceil+0x42>
1000b3de:	2c00      	cmp	r4, #0
1000b3e0:	db55      	blt.n	1000b48e <ceil+0xe6>
1000b3e2:	432c      	orrs	r4, r5
1000b3e4:	d057      	beq.n	1000b496 <ceil+0xee>
1000b3e6:	4c30      	ldr	r4, [pc, #192]	; (1000b4a8 <ceil+0x100>)
1000b3e8:	2500      	movs	r5, #0
1000b3ea:	4621      	mov	r1, r4
1000b3ec:	4628      	mov	r0, r5
1000b3ee:	e025      	b.n	1000b43c <ceil+0x94>
1000b3f0:	4f2e      	ldr	r7, [pc, #184]	; (1000b4ac <ceil+0x104>)
1000b3f2:	4137      	asrs	r7, r6
1000b3f4:	ea01 0307 	and.w	r3, r1, r7
1000b3f8:	4303      	orrs	r3, r0
1000b3fa:	d01f      	beq.n	1000b43c <ceil+0x94>
1000b3fc:	a328      	add	r3, pc, #160	; (adr r3, 1000b4a0 <ceil+0xf8>)
1000b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
1000b402:	f7f4 fe2b 	bl	1000005c <__adddf3>
1000b406:	2200      	movs	r2, #0
1000b408:	2300      	movs	r3, #0
1000b40a:	f7f5 fa6d 	bl	100008e8 <__aeabi_dcmpgt>
1000b40e:	2800      	cmp	r0, #0
1000b410:	d0eb      	beq.n	1000b3ea <ceil+0x42>
1000b412:	2c00      	cmp	r4, #0
1000b414:	bfc2      	ittt	gt
1000b416:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
1000b41a:	fa43 f606 	asrgt.w	r6, r3, r6
1000b41e:	19a4      	addgt	r4, r4, r6
1000b420:	ea24 0407 	bic.w	r4, r4, r7
1000b424:	2500      	movs	r5, #0
1000b426:	e7e0      	b.n	1000b3ea <ceil+0x42>
1000b428:	2e33      	cmp	r6, #51	; 0x33
1000b42a:	dd0b      	ble.n	1000b444 <ceil+0x9c>
1000b42c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
1000b430:	d104      	bne.n	1000b43c <ceil+0x94>
1000b432:	ee10 2a10 	vmov	r2, s0
1000b436:	460b      	mov	r3, r1
1000b438:	f7f4 fe10 	bl	1000005c <__adddf3>
1000b43c:	ec41 0b10 	vmov	d0, r0, r1
1000b440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000b444:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
1000b448:	f04f 33ff 	mov.w	r3, #4294967295
1000b44c:	fa23 f707 	lsr.w	r7, r3, r7
1000b450:	4207      	tst	r7, r0
1000b452:	d0f3      	beq.n	1000b43c <ceil+0x94>
1000b454:	a312      	add	r3, pc, #72	; (adr r3, 1000b4a0 <ceil+0xf8>)
1000b456:	e9d3 2300 	ldrd	r2, r3, [r3]
1000b45a:	f7f4 fdff 	bl	1000005c <__adddf3>
1000b45e:	2200      	movs	r2, #0
1000b460:	2300      	movs	r3, #0
1000b462:	f7f5 fa41 	bl	100008e8 <__aeabi_dcmpgt>
1000b466:	2800      	cmp	r0, #0
1000b468:	d0bf      	beq.n	1000b3ea <ceil+0x42>
1000b46a:	2c00      	cmp	r4, #0
1000b46c:	dd02      	ble.n	1000b474 <ceil+0xcc>
1000b46e:	2e14      	cmp	r6, #20
1000b470:	d103      	bne.n	1000b47a <ceil+0xd2>
1000b472:	3401      	adds	r4, #1
1000b474:	ea25 0507 	bic.w	r5, r5, r7
1000b478:	e7b7      	b.n	1000b3ea <ceil+0x42>
1000b47a:	2301      	movs	r3, #1
1000b47c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
1000b480:	fa03 f606 	lsl.w	r6, r3, r6
1000b484:	4435      	add	r5, r6
1000b486:	4545      	cmp	r5, r8
1000b488:	bf38      	it	cc
1000b48a:	18e4      	addcc	r4, r4, r3
1000b48c:	e7f2      	b.n	1000b474 <ceil+0xcc>
1000b48e:	2500      	movs	r5, #0
1000b490:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
1000b494:	e7a9      	b.n	1000b3ea <ceil+0x42>
1000b496:	4625      	mov	r5, r4
1000b498:	e7a7      	b.n	1000b3ea <ceil+0x42>
1000b49a:	bf00      	nop
1000b49c:	f3af 8000 	nop.w
1000b4a0:	8800759c 	.word	0x8800759c
1000b4a4:	7e37e43c 	.word	0x7e37e43c
1000b4a8:	3ff00000 	.word	0x3ff00000
1000b4ac:	000fffff 	.word	0x000fffff

1000b4b0 <round>:
1000b4b0:	ec51 0b10 	vmov	r0, r1, d0
1000b4b4:	b570      	push	{r4, r5, r6, lr}
1000b4b6:	f3c1 550a 	ubfx	r5, r1, #20, #11
1000b4ba:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
1000b4be:	2c13      	cmp	r4, #19
1000b4c0:	ee10 2a10 	vmov	r2, s0
1000b4c4:	460b      	mov	r3, r1
1000b4c6:	dc19      	bgt.n	1000b4fc <round+0x4c>
1000b4c8:	2c00      	cmp	r4, #0
1000b4ca:	da09      	bge.n	1000b4e0 <round+0x30>
1000b4cc:	3401      	adds	r4, #1
1000b4ce:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
1000b4d2:	d103      	bne.n	1000b4dc <round+0x2c>
1000b4d4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
1000b4d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1000b4dc:	2100      	movs	r1, #0
1000b4de:	e028      	b.n	1000b532 <round+0x82>
1000b4e0:	4d15      	ldr	r5, [pc, #84]	; (1000b538 <round+0x88>)
1000b4e2:	4125      	asrs	r5, r4
1000b4e4:	ea01 0605 	and.w	r6, r1, r5
1000b4e8:	4332      	orrs	r2, r6
1000b4ea:	d00e      	beq.n	1000b50a <round+0x5a>
1000b4ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
1000b4f0:	fa42 f404 	asr.w	r4, r2, r4
1000b4f4:	4423      	add	r3, r4
1000b4f6:	ea23 0305 	bic.w	r3, r3, r5
1000b4fa:	e7ef      	b.n	1000b4dc <round+0x2c>
1000b4fc:	2c33      	cmp	r4, #51	; 0x33
1000b4fe:	dd07      	ble.n	1000b510 <round+0x60>
1000b500:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
1000b504:	d101      	bne.n	1000b50a <round+0x5a>
1000b506:	f7f4 fda9 	bl	1000005c <__adddf3>
1000b50a:	ec41 0b10 	vmov	d0, r0, r1
1000b50e:	bd70      	pop	{r4, r5, r6, pc}
1000b510:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
1000b514:	f04f 35ff 	mov.w	r5, #4294967295
1000b518:	40f5      	lsrs	r5, r6
1000b51a:	4228      	tst	r0, r5
1000b51c:	d0f5      	beq.n	1000b50a <round+0x5a>
1000b51e:	2101      	movs	r1, #1
1000b520:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
1000b524:	fa01 f404 	lsl.w	r4, r1, r4
1000b528:	1912      	adds	r2, r2, r4
1000b52a:	bf28      	it	cs
1000b52c:	185b      	addcs	r3, r3, r1
1000b52e:	ea22 0105 	bic.w	r1, r2, r5
1000b532:	4608      	mov	r0, r1
1000b534:	4619      	mov	r1, r3
1000b536:	e7e8      	b.n	1000b50a <round+0x5a>
1000b538:	000fffff 	.word	0x000fffff

1000b53c <_init>:
1000b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b53e:	bf00      	nop
1000b540:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000b542:	bc08      	pop	{r3}
1000b544:	469e      	mov	lr, r3
1000b546:	4770      	bx	lr

1000b548 <_fini>:
1000b548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b54a:	bf00      	nop
1000b54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000b54e:	bc08      	pop	{r3}
1000b550:	469e      	mov	lr, r3
1000b552:	4770      	bx	lr
