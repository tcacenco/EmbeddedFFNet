
FeedForwardNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007330  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007728  08007728  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007730  08007730  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b8c  200001e4  0800791c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d70  0800791c  00021d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d35  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bf  00000000  00000000  00034f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00038508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00039280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225d6  00000000  00000000  00039e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b7e  00000000  00000000  0005c456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c998a  00000000  00000000  0006dfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013795e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003884  00000000  00000000  001379b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080074a0 	.word	0x080074a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	080074a0 	.word	0x080074a0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f99a 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f808 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8b0 	bl	8000640 <MX_GPIO_Init>
  MX_RTC_Init();
 80004e0:	f000 f888 	bl	80005f4 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f005 ff22 	bl	800632c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x18>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b098      	sub	sp, #96	; 0x60
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f006 fe66 	bl	80071cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 031c 	add.w	r3, r7, #28
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b32      	ldr	r3, [pc, #200]	; (80005ec <SystemClock_Config+0x100>)
 8000524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000526:	4a31      	ldr	r2, [pc, #196]	; (80005ec <SystemClock_Config+0x100>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	6413      	str	r3, [r2, #64]	; 0x40
 800052e:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <SystemClock_Config+0x100>)
 8000530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <SystemClock_Config+0x104>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a2b      	ldr	r2, [pc, #172]	; (80005f0 <SystemClock_Config+0x104>)
 8000544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000548:	6013      	str	r3, [r2, #0]
 800054a:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <SystemClock_Config+0x104>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000556:	2309      	movs	r3, #9
 8000558:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800056e:	2304      	movs	r3, #4
 8000570:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000572:	23a8      	movs	r3, #168	; 0xa8
 8000574:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000582:	4618      	mov	r0, r3
 8000584:	f002 f8e2 	bl	800274c <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800058e:	f000 f87f 	bl	8000690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2302      	movs	r3, #2
 8000598:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2105      	movs	r1, #5
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fb43 	bl	8002c3c <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005bc:	f000 f868 	bl	8000690 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005c0:	2302      	movs	r3, #2
 80005c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fd30 	bl	8003034 <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005da:	f000 f859 	bl	8000690 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005de:	f002 fc13 	bl	8002e08 <HAL_RCC_EnableCSS>
}
 80005e2:	bf00      	nop
 80005e4:	3760      	adds	r7, #96	; 0x60
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_RTC_Init+0x44>)
 80005fa:	4a10      	ldr	r2, [pc, #64]	; (800063c <MX_RTC_Init+0x48>)
 80005fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_RTC_Init+0x44>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_RTC_Init+0x44>)
 8000606:	227f      	movs	r2, #127	; 0x7f
 8000608:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_RTC_Init+0x44>)
 800060c:	22ff      	movs	r2, #255	; 0xff
 800060e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_RTC_Init+0x44>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MX_RTC_Init+0x44>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_RTC_Init+0x44>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_RTC_Init+0x44>)
 8000624:	f002 fde8 	bl	80031f8 <HAL_RTC_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800062e:	f000 f82f 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000448 	.word	0x20000448
 800063c:	40002800 	.word	0x40002800

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_GPIO_Init+0x4c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <MX_GPIO_Init+0x4c>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_GPIO_Init+0x4c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_GPIO_Init+0x4c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <MX_GPIO_Init+0x4c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_GPIO_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <HAL_MspInit+0x4c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <HAL_MspInit+0x4c>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6453      	str	r3, [r2, #68]	; 0x44
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <HAL_MspInit+0x4c>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_MspInit+0x4c>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_MspInit+0x4c>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	6413      	str	r3, [r2, #64]	; 0x40
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_MspInit+0x4c>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <HAL_RTC_MspInit+0x24>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d102      	bne.n	8000708 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_RTC_MspInit+0x28>)
 8000704:	2201      	movs	r2, #1
 8000706:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40002800 	.word	0x40002800
 8000718:	42470e3c 	.word	0x42470e3c

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000720:	f002 fc6c 	bl	8002ffc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <HardFault_Handler+0x4>

0800072e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <MemManage_Handler+0x4>

08000734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <BusFault_Handler+0x4>

0800073a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <UsageFault_Handler+0x4>

08000740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076e:	f000 f89f 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <OTG_FS_IRQHandler+0x10>)
 800077e:	f000 ffb1 	bl	80016e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000195c 	.word	0x2000195c

0800078c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <SystemInit+0x28>)
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <SystemInit+0x28>)
 8000798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800079c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SystemInit+0x28>)
 80007a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007a6:	609a      	str	r2, [r3, #8]
#endif
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007be:	e003      	b.n	80007c8 <LoopCopyDataInit>

080007c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80007c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007c6:	3104      	adds	r1, #4

080007c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007c8:	480b      	ldr	r0, [pc, #44]	; (80007f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80007cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007d0:	d3f6      	bcc.n	80007c0 <CopyDataInit>
  ldr  r2, =_sbss
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80007d4:	e002      	b.n	80007dc <LoopFillZerobss>

080007d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007d8:	f842 3b04 	str.w	r3, [r2], #4

080007dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80007de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007e0:	d3f9      	bcc.n	80007d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007e2:	f7ff ffd3 	bl	800078c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007e6:	f006 fcab 	bl	8007140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ea:	f7ff fe71 	bl	80004d0 <main>
  bx  lr    
 80007ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80007f4:	08007738 	.word	0x08007738
  ldr  r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007fc:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000800:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000804:	20001d70 	.word	0x20001d70

08000808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC_IRQHandler>
	...

0800080c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <HAL_Init+0x40>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <HAL_Init+0x40>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_Init+0x40>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_Init+0x40>)
 8000822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_Init+0x40>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <HAL_Init+0x40>)
 800082e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000834:	2003      	movs	r0, #3
 8000836:	f000 f94f 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083a:	2000      	movs	r0, #0
 800083c:	f000 f808 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000840:	f7ff ff2e 	bl	80006a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023c00 	.word	0x40023c00

08000850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_InitTick+0x54>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_InitTick+0x58>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000866:	fbb3 f3f1 	udiv	r3, r3, r1
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f967 	bl	8000b42 <HAL_SYSTICK_Config>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e00e      	b.n	800089c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	d80a      	bhi.n	800089a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f000 f92f 	bl	8000aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <HAL_InitTick+0x5c>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	e000      	b.n	800089c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_IncTick+0x20>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_IncTick+0x24>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_IncTick+0x24>)
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000468 	.word	0x20000468

080008d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <HAL_GetTick+0x14>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	20000468 	.word	0x20000468

080008f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f8:	f7ff ffee 	bl	80008d8 <HAL_GetTick>
 80008fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000908:	d005      	beq.n	8000916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_Delay+0x44>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000916:	bf00      	nop
 8000918:	f7ff ffde 	bl	80008d8 <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	429a      	cmp	r2, r3
 8000926:	d8f7      	bhi.n	8000918 <HAL_Delay+0x28>
  {
  }
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008

08000938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <__NVIC_GetPriorityGrouping+0x18>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	f003 0307 	and.w	r3, r3, #7
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	db0b      	blt.n	80009c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	f003 021f 	and.w	r2, r3, #31
 80009b4:	4907      	ldr	r1, [pc, #28]	; (80009d4 <__NVIC_EnableIRQ+0x38>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	2001      	movs	r0, #1
 80009be:	fa00 f202 	lsl.w	r2, r0, r2
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa4:	d301      	bcc.n	8000aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00f      	b.n	8000aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <SysTick_Config+0x40>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f7ff ff8e 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <SysTick_Config+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SysTick_Config+0x40>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff29 	bl	8000938 <__NVIC_SetPriorityGrouping>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b00:	f7ff ff3e 	bl	8000980 <__NVIC_GetPriorityGrouping>
 8000b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff ff8e 	bl	8000a2c <NVIC_EncodePriority>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff5d 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff31 	bl	800099c <__NVIC_EnableIRQ>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffa2 	bl	8000a94 <SysTick_Config>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <HAL_FLASH_Program+0xa0>)
 8000b70:	7e1b      	ldrb	r3, [r3, #24]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d101      	bne.n	8000b7a <HAL_FLASH_Program+0x1e>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e03b      	b.n	8000bf2 <HAL_FLASH_Program+0x96>
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <HAL_FLASH_Program+0xa0>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b84:	f000 f870 	bl	8000c68 <FLASH_WaitForLastOperation>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d12b      	bne.n	8000bea <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000b98:	783b      	ldrb	r3, [r7, #0]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f000 f91b 	bl	8000dd8 <FLASH_Program_Byte>
 8000ba2:	e016      	b.n	8000bd2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d105      	bne.n	8000bb6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000baa:	883b      	ldrh	r3, [r7, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	68b8      	ldr	r0, [r7, #8]
 8000bb0:	f000 f8ee 	bl	8000d90 <FLASH_Program_HalfWord>
 8000bb4:	e00d      	b.n	8000bd2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d105      	bne.n	8000bc8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	68b8      	ldr	r0, [r7, #8]
 8000bc2:	f000 f8c3 	bl	8000d4c <FLASH_Program_Word>
 8000bc6:	e004      	b.n	8000bd2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bcc:	68b8      	ldr	r0, [r7, #8]
 8000bce:	f000 f88b 	bl	8000ce8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bd2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bd6:	f000 f847 	bl	8000c68 <FLASH_WaitForLastOperation>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_FLASH_Program+0xa4>)
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_FLASH_Program+0xa4>)
 8000be4:	f023 0301 	bic.w	r3, r3, #1
 8000be8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <HAL_FLASH_Program+0xa0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000046c 	.word	0x2000046c
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <HAL_FLASH_Unlock+0x38>)
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da0b      	bge.n	8000c2e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_FLASH_Unlock+0x38>)
 8000c18:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <HAL_FLASH_Unlock+0x3c>)
 8000c1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <HAL_FLASH_Unlock+0x38>)
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <HAL_FLASH_Unlock+0x40>)
 8000c20:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_FLASH_Unlock+0x38>)
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da01      	bge.n	8000c2e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40023c00 	.word	0x40023c00
 8000c40:	45670123 	.word	0x45670123
 8000c44:	cdef89ab 	.word	0xcdef89ab

08000c48 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_FLASH_Lock+0x1c>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_FLASH_Lock+0x1c>)
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <FLASH_WaitForLastOperation+0x78>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c7a:	f7ff fe2d 	bl	80008d8 <HAL_GetTick>
 8000c7e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000c80:	e010      	b.n	8000ca4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d00c      	beq.n	8000ca4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d007      	beq.n	8000ca0 <FLASH_WaitForLastOperation+0x38>
 8000c90:	f7ff fe22 	bl	80008d8 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d201      	bcs.n	8000ca4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e019      	b.n	8000cd8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <FLASH_WaitForLastOperation+0x7c>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1e8      	bne.n	8000c82 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <FLASH_WaitForLastOperation+0x7c>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <FLASH_WaitForLastOperation+0x7c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <FLASH_WaitForLastOperation+0x7c>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000cce:	f000 f8a5 	bl	8000e1c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
  
}  
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000046c 	.word	0x2000046c
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <FLASH_Program_DoubleWord+0x60>)
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <FLASH_Program_DoubleWord+0x60>)
 8000cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <FLASH_Program_DoubleWord+0x60>)
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <FLASH_Program_DoubleWord+0x60>)
 8000d06:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <FLASH_Program_DoubleWord+0x60>)
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <FLASH_Program_DoubleWord+0x60>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000d1e:	f3bf 8f6f 	isb	sy
}
 8000d22:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000d24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d28:	f04f 0200 	mov.w	r2, #0
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	000a      	movs	r2, r1
 8000d32:	2300      	movs	r3, #0
 8000d34:	68f9      	ldr	r1, [r7, #12]
 8000d36:	3104      	adds	r1, #4
 8000d38:	4613      	mov	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <FLASH_Program_Word+0x40>)
 8000d58:	691b      	ldr	r3, [r3, #16]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <FLASH_Program_Word+0x40>)
 8000d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <FLASH_Program_Word+0x40>)
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <FLASH_Program_Word+0x40>)
 8000d68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <FLASH_Program_Word+0x40>)
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <FLASH_Program_Word+0x40>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40023c00 	.word	0x40023c00

08000d90 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <FLASH_Program_HalfWord+0x44>)
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <FLASH_Program_HalfWord+0x44>)
 8000da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000da6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <FLASH_Program_HalfWord+0x44>)
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <FLASH_Program_HalfWord+0x44>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <FLASH_Program_HalfWord+0x44>)
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <FLASH_Program_HalfWord+0x44>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	801a      	strh	r2, [r3, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023c00 	.word	0x40023c00

08000dd8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <FLASH_Program_Byte+0x40>)
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <FLASH_Program_Byte+0x40>)
 8000dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <FLASH_Program_Byte+0x40>)
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <FLASH_Program_Byte+0x40>)
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <FLASH_Program_Byte+0x40>)
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <FLASH_Program_Byte+0x40>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	78fa      	ldrb	r2, [r7, #3]
 8000e08:	701a      	strb	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <FLASH_SetErrorCode+0xa4>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d008      	beq.n	8000e3e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <FLASH_SetErrorCode+0xa8>)
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	f043 0310 	orr.w	r3, r3, #16
 8000e34:	4a23      	ldr	r2, [pc, #140]	; (8000ec4 <FLASH_SetErrorCode+0xa8>)
 8000e36:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <FLASH_SetErrorCode+0xa4>)
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <FLASH_SetErrorCode+0xa4>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	f003 0320 	and.w	r3, r3, #32
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d008      	beq.n	8000e5c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <FLASH_SetErrorCode+0xa8>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <FLASH_SetErrorCode+0xa8>)
 8000e54:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <FLASH_SetErrorCode+0xa4>)
 8000e58:	2220      	movs	r2, #32
 8000e5a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <FLASH_SetErrorCode+0xa4>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d008      	beq.n	8000e7a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <FLASH_SetErrorCode+0xa8>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <FLASH_SetErrorCode+0xa8>)
 8000e72:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <FLASH_SetErrorCode+0xa4>)
 8000e76:	2240      	movs	r2, #64	; 0x40
 8000e78:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <FLASH_SetErrorCode+0xa4>)
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d008      	beq.n	8000e98 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <FLASH_SetErrorCode+0xa8>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <FLASH_SetErrorCode+0xa8>)
 8000e90:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <FLASH_SetErrorCode+0xa4>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <FLASH_SetErrorCode+0xa4>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d008      	beq.n	8000eb6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <FLASH_SetErrorCode+0xa8>)
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	f043 0320 	orr.w	r3, r3, #32
 8000eac:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <FLASH_SetErrorCode+0xa8>)
 8000eae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <FLASH_SetErrorCode+0xa4>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	60da      	str	r2, [r3, #12]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40023c00 	.word	0x40023c00
 8000ec4:	2000046c 	.word	0x2000046c

08000ec8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_FLASHEx_Erase+0xd8>)
 8000edc:	7e1b      	ldrb	r3, [r3, #24]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_FLASHEx_Erase+0x1e>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e058      	b.n	8000f98 <HAL_FLASHEx_Erase+0xd0>
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_FLASHEx_Erase+0xd8>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000eec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ef0:	f7ff feba 	bl	8000c68 <FLASH_WaitForLastOperation>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d148      	bne.n	8000f90 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d115      	bne.n	8000f3a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	f000 f844 	bl	8000fa8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f24:	f7ff fea0 	bl	8000c68 <FLASH_WaitForLastOperation>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f32:	f023 0304 	bic.w	r3, r3, #4
 8000f36:	6113      	str	r3, [r2, #16]
 8000f38:	e028      	b.n	8000f8c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e01c      	b.n	8000f7c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	68b8      	ldr	r0, [r7, #8]
 8000f4c:	f000 f850 	bl	8000ff0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f54:	f7ff fe88 	bl	8000c68 <FLASH_WaitForLastOperation>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f62:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000f66:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	601a      	str	r2, [r3, #0]
          break;
 8000f74:	e00a      	b.n	8000f8c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3da      	bcc.n	8000f42 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8000f8c:	f000 f878 	bl	8001080 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_FLASHEx_Erase+0xd8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	761a      	strb	r2, [r3, #24]

  return status;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000046c 	.word	0x2000046c
 8000fa4:	40023c00 	.word	0x40023c00

08000fa8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <FLASH_MassErase+0x44>)
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <FLASH_MassErase+0x44>)
 8000fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <FLASH_MassErase+0x44>)
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <FLASH_MassErase+0x44>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <FLASH_MassErase+0x44>)
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <FLASH_MassErase+0x44>)
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fdc:	6113      	str	r3, [r2, #16]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e010      	b.n	800102e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d103      	bne.n	800101a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e009      	b.n	800102e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d103      	bne.n	8001028 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e002      	b.n	800102e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001028:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001038:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <FLASH_Erase_Sector+0x8c>)
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	490f      	ldr	r1, [pc, #60]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	4a0c      	ldr	r2, [pc, #48]	; (800107c <FLASH_Erase_Sector+0x8c>)
 800104c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001050:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4313      	orrs	r3, r2
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <FLASH_Erase_Sector+0x8c>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <FLASH_Erase_Sector+0x8c>)
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	6113      	str	r3, [r2, #16]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40023c00 	.word	0x40023c00

08001080 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <FLASH_FlushCaches+0x88>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800108c:	2b00      	cmp	r3, #0
 800108e:	d017      	beq.n	80010c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <FLASH_FlushCaches+0x88>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <FLASH_FlushCaches+0x88>)
 8001096:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800109a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <FLASH_FlushCaches+0x88>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a19      	ldr	r2, [pc, #100]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a13      	ldr	r2, [pc, #76]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010be:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d017      	beq.n	80010fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fa:	6013      	str	r3, [r2, #0]
  }
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e16b      	b.n	8001400 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 815a 	bne.w	80013fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d005      	beq.n	800115e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	2b02      	cmp	r3, #2
 800115c:	d130      	bne.n	80011c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d017      	beq.n	80011fc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d123      	bne.n	8001250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	08da      	lsrs	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3208      	adds	r2, #8
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	69b9      	ldr	r1, [r7, #24]
 800124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0203 	and.w	r2, r3, #3
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80b4 	beq.w	80013fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b60      	ldr	r3, [pc, #384]	; (8001418 <HAL_GPIO_Init+0x30c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a5f      	ldr	r2, [pc, #380]	; (8001418 <HAL_GPIO_Init+0x30c>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b5d      	ldr	r3, [pc, #372]	; (8001418 <HAL_GPIO_Init+0x30c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ae:	4a5b      	ldr	r2, [pc, #364]	; (800141c <HAL_GPIO_Init+0x310>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a52      	ldr	r2, [pc, #328]	; (8001420 <HAL_GPIO_Init+0x314>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d02b      	beq.n	8001332 <HAL_GPIO_Init+0x226>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a51      	ldr	r2, [pc, #324]	; (8001424 <HAL_GPIO_Init+0x318>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d025      	beq.n	800132e <HAL_GPIO_Init+0x222>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a50      	ldr	r2, [pc, #320]	; (8001428 <HAL_GPIO_Init+0x31c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01f      	beq.n	800132a <HAL_GPIO_Init+0x21e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4f      	ldr	r2, [pc, #316]	; (800142c <HAL_GPIO_Init+0x320>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0x21a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4e      	ldr	r2, [pc, #312]	; (8001430 <HAL_GPIO_Init+0x324>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x216>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4d      	ldr	r2, [pc, #308]	; (8001434 <HAL_GPIO_Init+0x328>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00d      	beq.n	800131e <HAL_GPIO_Init+0x212>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4c      	ldr	r2, [pc, #304]	; (8001438 <HAL_GPIO_Init+0x32c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x20e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4b      	ldr	r2, [pc, #300]	; (800143c <HAL_GPIO_Init+0x330>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x20a>
 8001312:	2307      	movs	r3, #7
 8001314:	e00e      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001316:	2308      	movs	r3, #8
 8001318:	e00c      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800131a:	2306      	movs	r3, #6
 800131c:	e00a      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800131e:	2305      	movs	r3, #5
 8001320:	e008      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001322:	2304      	movs	r3, #4
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001326:	2303      	movs	r3, #3
 8001328:	e004      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800132a:	2302      	movs	r3, #2
 800132c:	e002      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001332:	2300      	movs	r3, #0
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	f002 0203 	and.w	r2, r2, #3
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	4093      	lsls	r3, r2
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001344:	4935      	ldr	r1, [pc, #212]	; (800141c <HAL_GPIO_Init+0x310>)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_GPIO_Init+0x334>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001376:	4a32      	ldr	r2, [pc, #200]	; (8001440 <HAL_GPIO_Init+0x334>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800137c:	4b30      	ldr	r3, [pc, #192]	; (8001440 <HAL_GPIO_Init+0x334>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <HAL_GPIO_Init+0x334>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <HAL_GPIO_Init+0x334>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ca:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <HAL_GPIO_Init+0x334>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_GPIO_Init+0x334>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <HAL_GPIO_Init+0x334>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3301      	adds	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2b0f      	cmp	r3, #15
 8001404:	f67f ae90 	bls.w	8001128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40013800 	.word	0x40013800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	40020800 	.word	0x40020800
 800142c:	40020c00 	.word	0x40020c00
 8001430:	40021000 	.word	0x40021000
 8001434:	40021400 	.word	0x40021400
 8001438:	40021800 	.word	0x40021800
 800143c:	40021c00 	.word	0x40021c00
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	b08f      	sub	sp, #60	; 0x3c
 8001448:	af0a      	add	r7, sp, #40	; 0x28
 800144a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e10f      	b.n	8001676 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d106      	bne.n	8001476 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f005 fb47 	bl	8006b04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2203      	movs	r2, #3
 800147a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 f8a8 	bl	80035ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	687e      	ldr	r6, [r7, #4]
 80014a2:	466d      	mov	r5, sp
 80014a4:	f106 0410 	add.w	r4, r6, #16
 80014a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014b8:	1d33      	adds	r3, r6, #4
 80014ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f001 ff80 	bl	80033c2 <USB_CoreInit>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2202      	movs	r2, #2
 80014cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0d0      	b.n	8001676 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 f896 	bl	800360c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e04a      	b.n	800157c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	1a9b      	subs	r3, r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	333d      	adds	r3, #61	; 0x3d
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	333c      	adds	r3, #60	; 0x3c
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	b298      	uxth	r0, r3
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3342      	adds	r3, #66	; 0x42
 8001522:	4602      	mov	r2, r0
 8001524:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	333f      	adds	r3, #63	; 0x3f
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	3344      	adds	r3, #68	; 0x44
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	1a9b      	subs	r3, r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	3348      	adds	r3, #72	; 0x48
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3350      	adds	r3, #80	; 0x50
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	3301      	adds	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	d3af      	bcc.n	80014e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	e044      	b.n	8001616 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	1a9b      	subs	r3, r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	3301      	adds	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	d3b5      	bcc.n	800158c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	687e      	ldr	r6, [r7, #4]
 8001628:	466d      	mov	r5, sp
 800162a:	f106 0410 	add.w	r4, r6, #16
 800162e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800163a:	e885 0003 	stmia.w	r5, {r0, r1}
 800163e:	1d33      	adds	r3, r6, #4
 8001640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f002 f80c 	bl	8003660 <USB_DevInit>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2202      	movs	r2, #2
 8001652:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e00d      	b.n	8001676 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f003 f854 	bl	800471c <USB_DevDisconnect>

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800167e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_PCD_Start+0x1c>
 8001696:	2302      	movs	r3, #2
 8001698:	e020      	b.n	80016dc <HAL_PCD_Start+0x5e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d109      	bne.n	80016be <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d005      	beq.n	80016be <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 ff80 	bl	80035c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 f804 	bl	80046da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b08d      	sub	sp, #52	; 0x34
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 f8c2 	bl	8004884 <USB_GetMode>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 839d 	bne.w	8001e42 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 f826 	bl	800475e <USB_ReadInterrupts>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8393 	beq.w	8001e40 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 f81d 	bl	800475e <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b02      	cmp	r3, #2
 800172c:	d107      	bne.n	800173e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f002 0202 	and.w	r2, r2, #2
 800173c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f003 f80b 	bl	800475e <USB_ReadInterrupts>
 8001748:	4603      	mov	r3, r0
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b10      	cmp	r3, #16
 8001750:	d161      	bne.n	8001816 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	699a      	ldr	r2, [r3, #24]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0210 	bic.w	r2, r2, #16
 8001760:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f003 020f 	and.w	r2, r3, #15
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	3304      	adds	r3, #4
 8001780:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	0c5b      	lsrs	r3, r3, #17
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	2b02      	cmp	r3, #2
 800178c:	d124      	bne.n	80017d8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d035      	beq.n	8001806 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	6a38      	ldr	r0, [r7, #32]
 80017ae:	f002 fe71 	bl	8004494 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017be:	441a      	add	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017d0:	441a      	add	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	619a      	str	r2, [r3, #24]
 80017d6:	e016      	b.n	8001806 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	0c5b      	lsrs	r3, r3, #17
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	2b06      	cmp	r3, #6
 80017e2:	d110      	bne.n	8001806 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017ea:	2208      	movs	r2, #8
 80017ec:	4619      	mov	r1, r3
 80017ee:	6a38      	ldr	r0, [r7, #32]
 80017f0:	f002 fe50 	bl	8004494 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	699a      	ldr	r2, [r3, #24]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001800:	441a      	add	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	699a      	ldr	r2, [r3, #24]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0210 	orr.w	r2, r2, #16
 8001814:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f002 ff9f 	bl	800475e <USB_ReadInterrupts>
 8001820:	4603      	mov	r3, r0
 8001822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001826:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800182a:	d16e      	bne.n	800190a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f002 ffa5 	bl	8004784 <USB_ReadDevAllOutEpInterrupt>
 800183a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800183c:	e062      	b.n	8001904 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800183e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d057      	beq.n	80018f8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f002 ffca 	bl	80047ec <USB_ReadDevOutEPInterrupt>
 8001858:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00c      	beq.n	800187e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	015a      	lsls	r2, r3, #5
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	4413      	add	r3, r2
 800186c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001870:	461a      	mov	r2, r3
 8001872:	2301      	movs	r3, #1
 8001874:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fdb1 	bl	80023e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00c      	beq.n	80018a2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	015a      	lsls	r2, r3, #5
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	4413      	add	r3, r2
 8001890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001894:	461a      	mov	r2, r3
 8001896:	2308      	movs	r3, #8
 8001898:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800189a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 feab 	bl	80025f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	015a      	lsls	r2, r3, #5
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b8:	461a      	mov	r2, r3
 80018ba:	2310      	movs	r3, #16
 80018bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d4:	461a      	mov	r2, r3
 80018d6:	2320      	movs	r3, #32
 80018d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f0:	461a      	mov	r2, r3
 80018f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	3301      	adds	r3, #1
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	d199      	bne.n	800183e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f002 ff25 	bl	800475e <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800191a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800191e:	f040 80c0 	bne.w	8001aa2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 ff46 	bl	80047b8 <USB_ReadDevAllInEpInterrupt>
 800192c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001932:	e0b2      	b.n	8001a9a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80a7 	beq.w	8001a8e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f002 ff6c 	bl	8004828 <USB_ReadDevInEPInterrupt>
 8001950:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d057      	beq.n	8001a0c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	2201      	movs	r2, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43db      	mvns	r3, r3
 8001976:	69f9      	ldr	r1, [r7, #28]
 8001978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800197c:	4013      	ands	r3, r2
 800197e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800198c:	461a      	mov	r2, r3
 800198e:	2301      	movs	r3, #1
 8001990:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d132      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	3348      	adds	r3, #72	; 0x48
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4403      	add	r3, r0
 80019ba:	3344      	adds	r3, #68	; 0x44
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4419      	add	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4403      	add	r3, r0
 80019ce:	3348      	adds	r3, #72	; 0x48
 80019d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d113      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x31c>
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	3350      	adds	r3, #80	; 0x50
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d108      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80019f8:	461a      	mov	r2, r3
 80019fa:	2101      	movs	r1, #1
 80019fc:	f002 ff74 	bl	80048e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f005 f8fd 	bl	8006c06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a22:	461a      	mov	r2, r3
 8001a24:	2308      	movs	r3, #8
 8001a26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d008      	beq.n	8001a44 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2310      	movs	r3, #16
 8001a42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d008      	beq.n	8001a60 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2340      	movs	r3, #64	; 0x40
 8001a5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	015a      	lsls	r2, r3, #5
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a76:	461a      	mov	r2, r3
 8001a78:	2302      	movs	r3, #2
 8001a7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fc1b 	bl	80022c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f47f af49 	bne.w	8001934 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fe59 	bl	800475e <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ab6:	d122      	bne.n	8001afe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d108      	bne.n	8001ae8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fe27 	bl	8002734 <HAL_PCDEx_LPM_Callback>
 8001ae6:	e002      	b.n	8001aee <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f005 f903 	bl	8006cf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 fe2b 	bl	800475e <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b12:	d112      	bne.n	8001b3a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d102      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f005 f8bf 	bl	8006ca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b38:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fe0d 	bl	800475e <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b4e:	f040 80c7 	bne.w	8001ce0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 fedb 	bl	8003928 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b76:	e056      	b.n	8001c26 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	015a      	lsls	r2, r3, #5
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b84:	461a      	mov	r2, r3
 8001b86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b8a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8e:	015a      	lsls	r2, r3, #5
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b9c:	0151      	lsls	r1, r2, #5
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	440a      	add	r2, r1
 8001ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ba6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001baa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bbc:	0151      	lsls	r1, r2, #5
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	440a      	add	r2, r1
 8001bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bde:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf0:	0151      	lsls	r1, r2, #5
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	440a      	add	r2, r1
 8001bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bfe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c02:	015a      	lsls	r2, r3, #5
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	4413      	add	r3, r2
 8001c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c10:	0151      	lsls	r1, r2, #5
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	440a      	add	r2, r1
 8001c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c1e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c22:	3301      	adds	r3, #1
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d3a3      	bcc.n	8001b78 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c3e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c42:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d016      	beq.n	8001c7a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c5c:	f043 030b 	orr.w	r3, r3, #11
 8001c60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c72:	f043 030b 	orr.w	r3, r3, #11
 8001c76:	6453      	str	r3, [r2, #68]	; 0x44
 8001c78:	e015      	b.n	8001ca6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c8c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c90:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca0:	f043 030b 	orr.w	r3, r3, #11
 8001ca4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cb8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f002 fe0c 	bl	80048e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fd3a 	bl	800475e <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf4:	d124      	bne.n	8001d40 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 fdd0 	bl	80048a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 fe70 	bl	80039ea <USB_GetDevSpeed>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681c      	ldr	r4, [r3, #0]
 8001d16:	f001 f965 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 8001d1a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	4620      	mov	r0, r4
 8001d26:	f001 fbad 	bl	8003484 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f004 ff93 	bl	8006c56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fd0a 	bl	800475e <USB_ReadInterrupts>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d10a      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f004 ff70 	bl	8006c3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695a      	ldr	r2, [r3, #20]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f002 0208 	and.w	r2, r2, #8
 8001d68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 fcf5 	bl	800475e <USB_ReadInterrupts>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d7e:	d10f      	bne.n	8001da0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f004 ffd2 	bl	8006d34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 fcda 	bl	800475e <USB_ReadInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001db4:	d10f      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f004 ffa5 	bl	8006d10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 fcbf 	bl	800475e <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dea:	d10a      	bne.n	8001e02 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f004 ffb3 	bl	8006d58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 fca9 	bl	800475e <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d115      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f004 ffa3 	bl	8006d74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	e000      	b.n	8001e42 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001e40:	bf00      	nop
    }
  }
}
 8001e42:	3734      	adds	r7, #52	; 0x34
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd90      	pop	{r4, r7, pc}

08001e48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_PCD_SetAddress+0x1a>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e013      	b.n	8001e8a <HAL_PCD_SetAddress+0x42>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f002 fc07 	bl	800468e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	4608      	mov	r0, r1
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	70fb      	strb	r3, [r7, #3]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	803b      	strh	r3, [r7, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	da0f      	bge.n	8001ed8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 020f 	and.w	r2, r3, #15
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	3338      	adds	r3, #56	; 0x38
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	3304      	adds	r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	705a      	strb	r2, [r3, #1]
 8001ed6:	e00f      	b.n	8001ef8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f04:	883a      	ldrh	r2, [r7, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	78ba      	ldrb	r2, [r7, #2]
 8001f0e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f22:	78bb      	ldrb	r3, [r7, #2]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d102      	bne.n	8001f2e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_PCD_EP_Open+0xaa>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e00e      	b.n	8001f5a <HAL_PCD_EP_Open+0xc8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 fd72 	bl	8003a34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f58:	7afb      	ldrb	r3, [r7, #11]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	da0f      	bge.n	8001f96 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3338      	adds	r3, #56	; 0x38
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	705a      	strb	r2, [r3, #1]
 8001f94:	e00f      	b.n	8001fb6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 020f 	and.w	r2, r3, #15
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	3304      	adds	r3, #4
 8001fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_PCD_EP_Close+0x6e>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e00e      	b.n	8001fee <HAL_PCD_EP_Close+0x8c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 fdb0 	bl	8003b44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
 8002002:	460b      	mov	r3, r1
 8002004:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002006:	7afb      	ldrb	r3, [r7, #11]
 8002008:	f003 020f 	and.w	r2, r3, #15
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	3304      	adds	r3, #4
 800201e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2200      	movs	r2, #0
 8002030:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2200      	movs	r2, #0
 8002036:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	b2da      	uxtb	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d102      	bne.n	8002052 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	6979      	ldr	r1, [r7, #20]
 800206a:	f002 f88b 	bl	8004184 <USB_EP0StartXfer>
 800206e:	e008      	b.n	8002082 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6979      	ldr	r1, [r7, #20]
 800207e:	f001 fe3d 	bl	8003cfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 020f 	and.w	r2, r3, #15
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	460b      	mov	r3, r1
 80020ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	f003 020f 	and.w	r2, r3, #15
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	3338      	adds	r3, #56	; 0x38
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	3304      	adds	r3, #4
 80020e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2201      	movs	r2, #1
 80020fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	b2da      	uxtb	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d102      	bne.n	8002116 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	2b00      	cmp	r3, #0
 800211e:	d109      	bne.n	8002134 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	6979      	ldr	r1, [r7, #20]
 800212e:	f002 f829 	bl	8004184 <USB_EP0StartXfer>
 8002132:	e008      	b.n	8002146 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	6979      	ldr	r1, [r7, #20]
 8002142:	f001 fddb 	bl	8003cfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 020f 	and.w	r2, r3, #15
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d901      	bls.n	800216e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e050      	b.n	8002210 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800216e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002172:	2b00      	cmp	r3, #0
 8002174:	da0f      	bge.n	8002196 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	3338      	adds	r3, #56	; 0x38
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	3304      	adds	r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	705a      	strb	r2, [r3, #1]
 8002194:	e00d      	b.n	80021b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	3304      	adds	r3, #4
 80021aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_PCD_EP_SetStall+0x82>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e01e      	b.n	8002210 <HAL_PCD_EP_SetStall+0xc0>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68f9      	ldr	r1, [r7, #12]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 f980 	bl	80044e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	b2d9      	uxtb	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002200:	461a      	mov	r2, r3
 8002202:	f002 fb71 	bl	80048e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 020f 	and.w	r2, r3, #15
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d901      	bls.n	8002236 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e042      	b.n	80022bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	da0f      	bge.n	800225e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	3338      	adds	r3, #56	; 0x38
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	3304      	adds	r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	705a      	strb	r2, [r3, #1]
 800225c:	e00f      	b.n	800227e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 020f 	and.w	r2, r3, #15
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	3304      	adds	r3, #4
 8002276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_PCD_EP_ClrStall+0x86>
 800229a:	2302      	movs	r3, #2
 800229c:	e00e      	b.n	80022bc <HAL_PCD_EP_ClrStall+0xa4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68f9      	ldr	r1, [r7, #12]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 f988 	bl	80045c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	3338      	adds	r3, #56	; 0x38
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	3304      	adds	r3, #4
 80022ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d901      	bls.n	80022fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e06c      	b.n	80023d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	429a      	cmp	r2, r3
 8002310:	d902      	bls.n	8002318 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	3303      	adds	r3, #3
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002320:	e02b      	b.n	800237a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	429a      	cmp	r2, r3
 8002336:	d902      	bls.n	800233e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3303      	adds	r3, #3
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	68d9      	ldr	r1, [r3, #12]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002356:	b2db      	uxtb	r3, r3
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4603      	mov	r3, r0
 800235c:	6978      	ldr	r0, [r7, #20]
 800235e:	f002 f864 	bl	800442a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	441a      	add	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	441a      	add	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	b29b      	uxth	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	429a      	cmp	r2, r3
 800238e:	d809      	bhi.n	80023a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002398:	429a      	cmp	r2, r3
 800239a:	d203      	bcs.n	80023a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1be      	bne.n	8002322 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d811      	bhi.n	80023d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	2201      	movs	r2, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	6939      	ldr	r1, [r7, #16]
 80023cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023d0:	4013      	ands	r3, r2
 80023d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3720      	adds	r7, #32
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	333c      	adds	r3, #60	; 0x3c
 80023f8:	3304      	adds	r3, #4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b01      	cmp	r3, #1
 8002414:	f040 80a0 	bne.w	8002558 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d015      	beq.n	800244e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4a72      	ldr	r2, [pc, #456]	; (80025f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002426:	4293      	cmp	r3, r2
 8002428:	f240 80dd 	bls.w	80025e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80d7 	beq.w	80025e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002444:	461a      	mov	r2, r3
 8002446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800244a:	6093      	str	r3, [r2, #8]
 800244c:	e0cb      	b.n	80025e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002464:	461a      	mov	r2, r3
 8002466:	2320      	movs	r3, #32
 8002468:	6093      	str	r3, [r2, #8]
 800246a:	e0bc      	b.n	80025e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 80b7 	bne.w	80025e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a5d      	ldr	r2, [pc, #372]	; (80025f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d90f      	bls.n	80024a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002496:	461a      	mov	r2, r3
 8002498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800249c:	6093      	str	r3, [r2, #8]
 800249e:	e0a2      	b.n	80025e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	0159      	lsls	r1, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	440b      	add	r3, r1
 80024bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80024c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4403      	add	r3, r0
 80024d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80024da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4403      	add	r3, r0
 80024fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4419      	add	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4403      	add	r3, r0
 8002514:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002518:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d114      	bne.n	800254a <PCD_EP_OutXfrComplete_int+0x16a>
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d108      	bne.n	800254a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002542:	461a      	mov	r2, r3
 8002544:	2101      	movs	r1, #1
 8002546:	f002 f9cf 	bl	80048e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4619      	mov	r1, r3
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f004 fb3d 	bl	8006bd0 <HAL_PCD_DataOutStageCallback>
 8002556:	e046      	b.n	80025e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d124      	bne.n	80025aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002576:	461a      	mov	r2, r3
 8002578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800257c:	6093      	str	r3, [r2, #8]
 800257e:	e032      	b.n	80025e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002596:	461a      	mov	r2, r3
 8002598:	2320      	movs	r3, #32
 800259a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f004 fb14 	bl	8006bd0 <HAL_PCD_DataOutStageCallback>
 80025a8:	e01d      	b.n	80025e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d114      	bne.n	80025da <PCD_EP_OutXfrComplete_int+0x1fa>
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d108      	bne.n	80025da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025d2:	461a      	mov	r2, r3
 80025d4:	2100      	movs	r1, #0
 80025d6:	f002 f987 	bl	80048e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4619      	mov	r1, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f004 faf5 	bl	8006bd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	4f54300a 	.word	0x4f54300a
 80025f4:	4f54310a 	.word	0x4f54310a

080025f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	333c      	adds	r3, #60	; 0x3c
 8002610:	3304      	adds	r3, #4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a15      	ldr	r2, [pc, #84]	; (8002680 <PCD_EP_OutSetupPacket_int+0x88>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d90e      	bls.n	800264c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002644:	461a      	mov	r2, r3
 8002646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800264a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f004 faad 	bl	8006bac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <PCD_EP_OutSetupPacket_int+0x88>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d90c      	bls.n	8002674 <PCD_EP_OutSetupPacket_int+0x7c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d108      	bne.n	8002674 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800266c:	461a      	mov	r2, r3
 800266e:	2101      	movs	r1, #1
 8002670:	f002 f93a 	bl	80048e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	4f54300a 	.word	0x4f54300a

08002684 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
 8002690:	4613      	mov	r3, r2
 8002692:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d107      	bne.n	80026b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026a2:	883b      	ldrh	r3, [r7, #0]
 80026a4:	0419      	lsls	r1, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28
 80026b0:	e028      	b.n	8002704 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	4413      	add	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e00d      	b.n	80026e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	3340      	adds	r3, #64	; 0x40
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4413      	add	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	3301      	adds	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d3ec      	bcc.n	80026c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026ec:	883b      	ldrh	r3, [r7, #0]
 80026ee:	0418      	lsls	r0, r3, #16
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	4302      	orrs	r2, r0
 80026fc:	3340      	adds	r3, #64	; 0x40
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e264      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d075      	beq.n	8002856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800276a:	4ba3      	ldr	r3, [pc, #652]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b04      	cmp	r3, #4
 8002774:	d00c      	beq.n	8002790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4ba0      	ldr	r3, [pc, #640]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800277e:	2b08      	cmp	r3, #8
 8002780:	d112      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002782:	4b9d      	ldr	r3, [pc, #628]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800278e:	d10b      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	4b99      	ldr	r3, [pc, #612]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d05b      	beq.n	8002854 <HAL_RCC_OscConfig+0x108>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d157      	bne.n	8002854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e23f      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d106      	bne.n	80027c0 <HAL_RCC_OscConfig+0x74>
 80027b2:	4b91      	ldr	r3, [pc, #580]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a90      	ldr	r2, [pc, #576]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e01d      	b.n	80027fc <HAL_RCC_OscConfig+0xb0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x98>
 80027ca:	4b8b      	ldr	r3, [pc, #556]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a8a      	ldr	r2, [pc, #552]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a87      	ldr	r2, [pc, #540]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0xb0>
 80027e4:	4b84      	ldr	r3, [pc, #528]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a83      	ldr	r2, [pc, #524]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a80      	ldr	r2, [pc, #512]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7fe f868 	bl	80008d8 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7fe f864 	bl	80008d8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e204      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0xc0>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe f854 	bl	80008d8 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002834:	f7fe f850 	bl	80008d8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e1f0      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	4b6c      	ldr	r3, [pc, #432]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0xe8>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d063      	beq.n	800292a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002862:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b62      	ldr	r3, [pc, #392]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002876:	2b08      	cmp	r3, #8
 8002878:	d11c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287a:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d116      	bne.n	80028b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	4b5c      	ldr	r3, [pc, #368]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_RCC_OscConfig+0x152>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d001      	beq.n	800289e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e1c4      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289e:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4952      	ldr	r1, [pc, #328]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b2:	e03a      	b.n	800292a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028bc:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <HAL_RCC_OscConfig+0x2b0>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7fe f809 	bl	80008d8 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ca:	f7fe f805 	bl	80008d8 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e1a5      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	4b46      	ldr	r3, [pc, #280]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b43      	ldr	r3, [pc, #268]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4940      	ldr	r1, [pc, #256]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
 80028fc:	e015      	b.n	800292a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fe:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCC_OscConfig+0x2b0>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fd ffe8 	bl	80008d8 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290c:	f7fd ffe4 	bl	80008d8 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e184      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d030      	beq.n	8002998 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d016      	beq.n	800296c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293e:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <HAL_RCC_OscConfig+0x2b4>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fd ffc8 	bl	80008d8 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294c:	f7fd ffc4 	bl	80008d8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e164      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x200>
 800296a:	e015      	b.n	8002998 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296c:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <HAL_RCC_OscConfig+0x2b4>)
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7fd ffb1 	bl	80008d8 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297a:	f7fd ffad 	bl	80008d8 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e14d      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 800298e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f0      	bne.n	800297a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a0 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_OscConfig+0x2b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d121      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_RCC_OscConfig+0x2b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <HAL_RCC_OscConfig+0x2b8>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7fd ff73 	bl	80008d8 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e011      	b.n	8002a1a <HAL_RCC_OscConfig+0x2ce>
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470000 	.word	0x42470000
 8002a00:	42470e80 	.word	0x42470e80
 8002a04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a08:	f7fd ff66 	bl	80008d8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e106      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b85      	ldr	r3, [pc, #532]	; (8002c30 <HAL_RCC_OscConfig+0x4e4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
 8002a2e:	4b81      	ldr	r3, [pc, #516]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	4a80      	ldr	r2, [pc, #512]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3a:	e01c      	b.n	8002a76 <HAL_RCC_OscConfig+0x32a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCC_OscConfig+0x312>
 8002a44:	4b7b      	ldr	r3, [pc, #492]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a7a      	ldr	r2, [pc, #488]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a50:	4b78      	ldr	r3, [pc, #480]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	4a77      	ldr	r2, [pc, #476]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5c:	e00b      	b.n	8002a76 <HAL_RCC_OscConfig+0x32a>
 8002a5e:	4b75      	ldr	r3, [pc, #468]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a74      	ldr	r2, [pc, #464]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6a:	4b72      	ldr	r3, [pc, #456]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4a71      	ldr	r2, [pc, #452]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d015      	beq.n	8002aaa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7e:	f7fd ff2b 	bl	80008d8 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fd ff27 	bl	80008d8 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e0c5      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9c:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ee      	beq.n	8002a86 <HAL_RCC_OscConfig+0x33a>
 8002aa8:	e014      	b.n	8002ad4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7fd ff15 	bl	80008d8 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fd ff11 	bl	80008d8 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0af      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	4b5a      	ldr	r3, [pc, #360]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ee      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ada:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 809b 	beq.w	8002c26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002af0:	4b50      	ldr	r3, [pc, #320]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d05c      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d141      	bne.n	8002b88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	4b4c      	ldr	r3, [pc, #304]	; (8002c38 <HAL_RCC_OscConfig+0x4ec>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7fd fee5 	bl	80008d8 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b12:	f7fd fee1 	bl	80008d8 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e081      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b24:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	019b      	lsls	r3, r3, #6
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	041b      	lsls	r3, r3, #16
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	4937      	ldr	r1, [pc, #220]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b5a:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <HAL_RCC_OscConfig+0x4ec>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fd feba 	bl	80008d8 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fd feb6 	bl	80008d8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e056      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b2e      	ldr	r3, [pc, #184]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x41c>
 8002b86:	e04e      	b.n	8002c26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b88:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <HAL_RCC_OscConfig+0x4ec>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7fd fea3 	bl	80008d8 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b96:	f7fd fe9f 	bl	80008d8 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e03f      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba8:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x44a>
 8002bb4:	e037      	b.n	8002c26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e032      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d028      	beq.n	8002c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d121      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d11a      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bf8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d111      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40007000 	.word	0x40007000
 8002c34:	40023800 	.word	0x40023800
 8002c38:	42470060 	.word	0x42470060

08002c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0cc      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b68      	ldr	r3, [pc, #416]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d90c      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b65      	ldr	r3, [pc, #404]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0b8      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c90:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca8:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a52      	ldr	r2, [pc, #328]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	494d      	ldr	r1, [pc, #308]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d044      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d119      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e07f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e06f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e067      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4934      	ldr	r1, [pc, #208]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d2c:	f7fd fdd4 	bl	80008d8 <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7fd fdd0 	bl	80008d8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e04f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 020c 	and.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1eb      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d20c      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e032      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4916      	ldr	r1, [pc, #88]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	490e      	ldr	r1, [pc, #56]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dc2:	f000 f82d 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	490a      	ldr	r1, [pc, #40]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	5ccb      	ldrb	r3, [r1, r3]
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1c8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fd34 	bl	8000850 <HAL_InitTick>

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023c00 	.word	0x40023c00
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	080075f0 	.word	0x080075f0
 8002e00:	20000000 	.word	0x20000000
 8002e04:	20000004 	.word	0x20000004

08002e08 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_RCC_EnableCSS+0x14>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	4247004c 	.word	0x4247004c

08002e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	2300      	movs	r3, #0
 8002e32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e38:	4b67      	ldr	r3, [pc, #412]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d00d      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x40>
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	f200 80bd 	bhi.w	8002fc4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x34>
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d003      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e52:	e0b7      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e54:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e56:	60bb      	str	r3, [r7, #8]
       break;
 8002e58:	e0b7      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5a:	4b61      	ldr	r3, [pc, #388]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e5c:	60bb      	str	r3, [r7, #8]
      break;
 8002e5e:	e0b4      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e60:	4b5d      	ldr	r3, [pc, #372]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6a:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d04d      	beq.n	8002f12 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e76:	4b58      	ldr	r3, [pc, #352]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	ea02 0800 	and.w	r8, r2, r0
 8002e8e:	ea03 0901 	and.w	r9, r3, r1
 8002e92:	4640      	mov	r0, r8
 8002e94:	4649      	mov	r1, r9
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	014b      	lsls	r3, r1, #5
 8002ea0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ea4:	0142      	lsls	r2, r0, #5
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	ebb0 0008 	subs.w	r0, r0, r8
 8002eae:	eb61 0109 	sbc.w	r1, r1, r9
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	018b      	lsls	r3, r1, #6
 8002ebc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ec0:	0182      	lsls	r2, r0, #6
 8002ec2:	1a12      	subs	r2, r2, r0
 8002ec4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec8:	f04f 0000 	mov.w	r0, #0
 8002ecc:	f04f 0100 	mov.w	r1, #0
 8002ed0:	00d9      	lsls	r1, r3, #3
 8002ed2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ed6:	00d0      	lsls	r0, r2, #3
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	eb12 0208 	adds.w	r2, r2, r8
 8002ee0:	eb43 0309 	adc.w	r3, r3, r9
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	0259      	lsls	r1, r3, #9
 8002eee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ef2:	0250      	lsls	r0, r2, #9
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f7fd f968 	bl	80001d8 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e04a      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f12:	4b31      	ldr	r3, [pc, #196]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	ea02 0400 	and.w	r4, r2, r0
 8002f2a:	ea03 0501 	and.w	r5, r3, r1
 8002f2e:	4620      	mov	r0, r4
 8002f30:	4629      	mov	r1, r5
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	014b      	lsls	r3, r1, #5
 8002f3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f40:	0142      	lsls	r2, r0, #5
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	1b00      	subs	r0, r0, r4
 8002f48:	eb61 0105 	sbc.w	r1, r1, r5
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	018b      	lsls	r3, r1, #6
 8002f56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f5a:	0182      	lsls	r2, r0, #6
 8002f5c:	1a12      	subs	r2, r2, r0
 8002f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	00d9      	lsls	r1, r3, #3
 8002f6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f70:	00d0      	lsls	r0, r2, #3
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	1912      	adds	r2, r2, r4
 8002f78:	eb45 0303 	adc.w	r3, r5, r3
 8002f7c:	f04f 0000 	mov.w	r0, #0
 8002f80:	f04f 0100 	mov.w	r1, #0
 8002f84:	0299      	lsls	r1, r3, #10
 8002f86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f8a:	0290      	lsls	r0, r2, #10
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	f7fd f91c 	bl	80001d8 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc0:	60bb      	str	r3, [r7, #8]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fc6:	60bb      	str	r3, [r7, #8]
      break;
 8002fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fca:	68bb      	ldr	r3, [r7, #8]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	00f42400 	.word	0x00f42400
 8002fe0:	007a1200 	.word	0x007a1200

08002fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000000 	.word	0x20000000

08002ffc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003008:	2b80      	cmp	r3, #128	; 0x80
 800300a:	d104      	bne.n	8003016 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800300c:	f000 f80a 	bl	8003024 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	701a      	strb	r2, [r3, #0]
  }
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	4002380e 	.word	0x4002380e

08003024 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003058:	2b00      	cmp	r3, #0
 800305a:	d035      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800305c:	4b62      	ldr	r3, [pc, #392]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003062:	f7fd fc39 	bl	80008d8 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800306a:	f7fd fc35 	bl	80008d8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0b0      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800307c:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	019a      	lsls	r2, r3, #6
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	071b      	lsls	r3, r3, #28
 8003094:	4955      	ldr	r1, [pc, #340]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800309c:	4b52      	ldr	r3, [pc, #328]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030a2:	f7fd fc19 	bl	80008d8 <HAL_GetTick>
 80030a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030aa:	f7fd fc15 	bl	80008d8 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e090      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030bc:	4b4b      	ldr	r3, [pc, #300]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8083 	beq.w	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b44      	ldr	r3, [pc, #272]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a43      	ldr	r2, [pc, #268]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80030f2:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a3e      	ldr	r2, [pc, #248]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030fe:	f7fd fbeb 	bl	80008d8 <HAL_GetTick>
 8003102:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003106:	f7fd fbe7 	bl	80008d8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e062      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003118:	4b35      	ldr	r3, [pc, #212]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d02f      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	429a      	cmp	r2, r3
 8003140:	d028      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003142:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800314c:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003152:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003158:	4a24      	ldr	r2, [pc, #144]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800315e:	4b23      	ldr	r3, [pc, #140]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d114      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800316a:	f7fd fbb5 	bl	80008d8 <HAL_GetTick>
 800316e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fd fbb1 	bl	80008d8 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e02a      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ee      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a0:	d10d      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80031b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b6:	490d      	ldr	r1, [pc, #52]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]
 80031bc:	e005      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031c8:	6093      	str	r3, [r2, #8]
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d6:	4905      	ldr	r1, [pc, #20]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	42470068 	.word	0x42470068
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40007000 	.word	0x40007000
 80031f4:	42470e40 	.word	0x42470e40

080031f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e083      	b.n	8003312 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	7f5b      	ldrb	r3, [r3, #29]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd fa68 	bl	80006f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	22ca      	movs	r2, #202	; 0xca
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2253      	movs	r2, #83	; 0x53
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f897 	bl	800336a <RTC_EnterInitMode>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	22ff      	movs	r2, #255	; 0xff
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2204      	movs	r2, #4
 800324e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e05e      	b.n	8003312 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003266:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6899      	ldr	r1, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68d2      	ldr	r2, [r2, #12]
 800328e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6919      	ldr	r1, [r3, #16]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	041a      	lsls	r2, r3, #16
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10e      	bne.n	80032e0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f829 	bl	800331a <HAL_RTC_WaitForSynchro>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	22ff      	movs	r2, #255	; 0xff
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2204      	movs	r2, #4
 80032da:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e018      	b.n	8003312 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003310:	2300      	movs	r3, #0
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003334:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003336:	f7fd facf 	bl	80008d8 <HAL_GetTick>
 800333a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800333c:	e009      	b.n	8003352 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800333e:	f7fd facb 	bl	80008d8 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334c:	d901      	bls.n	8003352 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e007      	b.n	8003362 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ee      	beq.n	800333e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d119      	bne.n	80033b8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f04f 32ff 	mov.w	r2, #4294967295
 800338c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800338e:	f7fd faa3 	bl	80008d8 <HAL_GetTick>
 8003392:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003394:	e009      	b.n	80033aa <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003396:	f7fd fa9f 	bl	80008d8 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a4:	d901      	bls.n	80033aa <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e007      	b.n	80033ba <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ee      	beq.n	8003396 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033c2:	b084      	sub	sp, #16
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	f107 001c 	add.w	r0, r7, #28
 80033d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d122      	bne.n	8003420 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f001 fac5 	bl	80049a4 <USB_CoreReset>
 800341a:	4603      	mov	r3, r0
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	e01a      	b.n	8003456 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f001 fab9 	bl	80049a4 <USB_CoreReset>
 8003432:	4603      	mov	r3, r0
 8003434:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d106      	bne.n	800344a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	639a      	str	r2, [r3, #56]	; 0x38
 8003448:	e005      	b.n	8003456 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10b      	bne.n	8003474 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f043 0206 	orr.w	r2, r3, #6
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003474:	7bfb      	ldrb	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003480:	b004      	add	sp, #16
 8003482:	4770      	bx	lr

08003484 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d165      	bne.n	8003564 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4a41      	ldr	r2, [pc, #260]	; (80035a0 <USB_SetTurnaroundTime+0x11c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d906      	bls.n	80034ae <USB_SetTurnaroundTime+0x2a>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4a40      	ldr	r2, [pc, #256]	; (80035a4 <USB_SetTurnaroundTime+0x120>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d202      	bcs.n	80034ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80034a8:	230f      	movs	r3, #15
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e062      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4a3c      	ldr	r2, [pc, #240]	; (80035a4 <USB_SetTurnaroundTime+0x120>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d306      	bcc.n	80034c4 <USB_SetTurnaroundTime+0x40>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4a3b      	ldr	r2, [pc, #236]	; (80035a8 <USB_SetTurnaroundTime+0x124>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d202      	bcs.n	80034c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80034be:	230e      	movs	r3, #14
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e057      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4a38      	ldr	r2, [pc, #224]	; (80035a8 <USB_SetTurnaroundTime+0x124>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d306      	bcc.n	80034da <USB_SetTurnaroundTime+0x56>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4a37      	ldr	r2, [pc, #220]	; (80035ac <USB_SetTurnaroundTime+0x128>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d202      	bcs.n	80034da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034d4:	230d      	movs	r3, #13
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e04c      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a33      	ldr	r2, [pc, #204]	; (80035ac <USB_SetTurnaroundTime+0x128>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d306      	bcc.n	80034f0 <USB_SetTurnaroundTime+0x6c>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4a32      	ldr	r2, [pc, #200]	; (80035b0 <USB_SetTurnaroundTime+0x12c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d802      	bhi.n	80034f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80034ea:	230c      	movs	r3, #12
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	e041      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4a2f      	ldr	r2, [pc, #188]	; (80035b0 <USB_SetTurnaroundTime+0x12c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d906      	bls.n	8003506 <USB_SetTurnaroundTime+0x82>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a2e      	ldr	r2, [pc, #184]	; (80035b4 <USB_SetTurnaroundTime+0x130>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d802      	bhi.n	8003506 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003500:	230b      	movs	r3, #11
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e036      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <USB_SetTurnaroundTime+0x130>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d906      	bls.n	800351c <USB_SetTurnaroundTime+0x98>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a29      	ldr	r2, [pc, #164]	; (80035b8 <USB_SetTurnaroundTime+0x134>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d802      	bhi.n	800351c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003516:	230a      	movs	r3, #10
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e02b      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a26      	ldr	r2, [pc, #152]	; (80035b8 <USB_SetTurnaroundTime+0x134>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d906      	bls.n	8003532 <USB_SetTurnaroundTime+0xae>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4a25      	ldr	r2, [pc, #148]	; (80035bc <USB_SetTurnaroundTime+0x138>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d202      	bcs.n	8003532 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800352c:	2309      	movs	r3, #9
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e020      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4a21      	ldr	r2, [pc, #132]	; (80035bc <USB_SetTurnaroundTime+0x138>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d306      	bcc.n	8003548 <USB_SetTurnaroundTime+0xc4>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4a20      	ldr	r2, [pc, #128]	; (80035c0 <USB_SetTurnaroundTime+0x13c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d802      	bhi.n	8003548 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003542:	2308      	movs	r3, #8
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e015      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <USB_SetTurnaroundTime+0x13c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d906      	bls.n	800355e <USB_SetTurnaroundTime+0xda>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <USB_SetTurnaroundTime+0x140>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d202      	bcs.n	800355e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003558:	2307      	movs	r3, #7
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e00a      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800355e:	2306      	movs	r3, #6
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e007      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800356a:	2309      	movs	r3, #9
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e001      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003570:	2309      	movs	r3, #9
 8003572:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	029b      	lsls	r3, r3, #10
 8003588:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	00d8acbf 	.word	0x00d8acbf
 80035a4:	00e4e1c0 	.word	0x00e4e1c0
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	01067380 	.word	0x01067380
 80035b0:	011a499f 	.word	0x011a499f
 80035b4:	01312cff 	.word	0x01312cff
 80035b8:	014ca43f 	.word	0x014ca43f
 80035bc:	016e3600 	.word	0x016e3600
 80035c0:	01a6ab1f 	.word	0x01a6ab1f
 80035c4:	01e84800 	.word	0x01e84800

080035c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f023 0201 	bic.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d106      	bne.n	8003638 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	e00b      	b.n	8003650 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	e001      	b.n	8003650 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e003      	b.n	8003658 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003650:	2032      	movs	r0, #50	; 0x32
 8003652:	f7fd f94d 	bl	80008f0 <HAL_Delay>

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003660:	b084      	sub	sp, #16
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800366e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	e009      	b.n	8003694 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	3340      	adds	r3, #64	; 0x40
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	2200      	movs	r2, #0
 800368c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	3301      	adds	r3, #1
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b0e      	cmp	r3, #14
 8003698:	d9f2      	bls.n	8003680 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11c      	bne.n	80036da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
 80036d8:	e00b      	b.n	80036f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036f8:	461a      	mov	r2, r3
 80036fa:	2300      	movs	r3, #0
 80036fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003704:	4619      	mov	r1, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370c:	461a      	mov	r2, r3
 800370e:	680b      	ldr	r3, [r1, #0]
 8003710:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	2b01      	cmp	r3, #1
 8003716:	d10c      	bne.n	8003732 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d104      	bne.n	8003728 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800371e:	2100      	movs	r1, #0
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f949 	bl	80039b8 <USB_SetDevSpeed>
 8003726:	e008      	b.n	800373a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003728:	2101      	movs	r1, #1
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f944 	bl	80039b8 <USB_SetDevSpeed>
 8003730:	e003      	b.n	800373a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003732:	2103      	movs	r1, #3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f93f 	bl	80039b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800373a:	2110      	movs	r1, #16
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f8f3 	bl	8003928 <USB_FlushTxFifo>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f911 	bl	8003974 <USB_FlushRxFifo>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003762:	461a      	mov	r2, r3
 8003764:	2300      	movs	r3, #0
 8003766:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376e:	461a      	mov	r2, r3
 8003770:	2300      	movs	r3, #0
 8003772:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377a:	461a      	mov	r2, r3
 800377c:	2300      	movs	r3, #0
 800377e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	e043      	b.n	800380e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800379c:	d118      	bne.n	80037d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b0:	461a      	mov	r2, r3
 80037b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e013      	b.n	80037e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c6:	461a      	mov	r2, r3
 80037c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e008      	b.n	80037e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	461a      	mov	r2, r3
 80037de:	2300      	movs	r3, #0
 80037e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ee:	461a      	mov	r2, r3
 80037f0:	2300      	movs	r3, #0
 80037f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003800:	461a      	mov	r2, r3
 8003802:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003806:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	3301      	adds	r3, #1
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	429a      	cmp	r2, r3
 8003814:	d3b7      	bcc.n	8003786 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	e043      	b.n	80038a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800382e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003832:	d118      	bne.n	8003866 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003846:	461a      	mov	r2, r3
 8003848:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e013      	b.n	8003878 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	461a      	mov	r2, r3
 800385e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	e008      	b.n	8003878 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	2300      	movs	r3, #0
 8003876:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003884:	461a      	mov	r2, r3
 8003886:	2300      	movs	r3, #0
 8003888:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	461a      	mov	r2, r3
 8003898:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800389c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	3301      	adds	r3, #1
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d3b7      	bcc.n	800381c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f043 0210 	orr.w	r2, r3, #16
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699a      	ldr	r2, [r3, #24]
 80038e4:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <USB_DevInit+0x2c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f043 0208 	orr.w	r2, r3, #8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800390c:	f043 0304 	orr.w	r3, r3, #4
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003914:	7dfb      	ldrb	r3, [r7, #23]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003920:	b004      	add	sp, #16
 8003922:	4770      	bx	lr
 8003924:	803c3800 	.word	0x803c3800

08003928 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	019b      	lsls	r3, r3, #6
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3301      	adds	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a09      	ldr	r2, [pc, #36]	; (8003970 <USB_FlushTxFifo+0x48>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e006      	b.n	8003962 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b20      	cmp	r3, #32
 800395e:	d0f0      	beq.n	8003942 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	00030d40 	.word	0x00030d40

08003974 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2210      	movs	r2, #16
 8003984:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3301      	adds	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <USB_FlushRxFifo+0x40>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e006      	b.n	80039a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d0f0      	beq.n	8003986 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	00030d40 	.word	0x00030d40

080039b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	68f9      	ldr	r1, [r7, #12]
 80039d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b087      	sub	sp, #28
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0306 	and.w	r3, r3, #6
 8003a02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	75fb      	strb	r3, [r7, #23]
 8003a0e:	e00a      	b.n	8003a26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d002      	beq.n	8003a1c <USB_GetDevSpeed+0x32>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b06      	cmp	r3, #6
 8003a1a:	d102      	bne.n	8003a22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	75fb      	strb	r3, [r7, #23]
 8003a20:	e001      	b.n	8003a26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a22:	230f      	movs	r3, #15
 8003a24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d13a      	bne.n	8003ac6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	2101      	movs	r1, #1
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d155      	bne.n	8003b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	78db      	ldrb	r3, [r3, #3]
 8003aa2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003aa4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	059b      	lsls	r3, r3, #22
 8003aaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003aac:	4313      	orrs	r3, r2
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	0151      	lsls	r1, r2, #5
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	440a      	add	r2, r1
 8003ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e036      	b.n	8003b34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	041b      	lsls	r3, r3, #16
 8003ade:	68f9      	ldr	r1, [r7, #12]
 8003ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d11a      	bne.n	8003b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	78db      	ldrb	r3, [r3, #3]
 8003b18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	0151      	lsls	r1, r2, #5
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	440a      	add	r2, r1
 8003b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	785b      	ldrb	r3, [r3, #1]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d161      	bne.n	8003c24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b76:	d11f      	bne.n	8003bb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	0151      	lsls	r1, r2, #5
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	440a      	add	r2, r1
 8003b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	0151      	lsls	r1, r2, #5
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	440a      	add	r2, r1
 8003bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	2101      	movs	r1, #1
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	68f9      	ldr	r1, [r7, #12]
 8003bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bd8:	4013      	ands	r3, r2
 8003bda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	2101      	movs	r1, #1
 8003bee:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	68f9      	ldr	r1, [r7, #12]
 8003bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	0159      	lsls	r1, r3, #5
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	440b      	add	r3, r1
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <USB_DeactivateEndpoint+0x1b0>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
 8003c22:	e060      	b.n	8003ce6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c3a:	d11f      	bne.n	8003c7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	0151      	lsls	r1, r2, #5
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	440a      	add	r2, r1
 8003c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	0151      	lsls	r1, r2, #5
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	440a      	add	r2, r1
 8003c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	43db      	mvns	r3, r3
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	0159      	lsls	r1, r3, #5
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	440b      	add	r3, r1
 8003cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <USB_DeactivateEndpoint+0x1b4>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	ec337800 	.word	0xec337800
 8003cf8:	eff37800 	.word	0xeff37800

08003cfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	; 0x28
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 815c 	bne.w	8003fd6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d132      	bne.n	8003d8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	0151      	lsls	r1, r2, #5
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	440a      	add	r2, r1
 8003d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	0151      	lsls	r1, r2, #5
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	440a      	add	r2, r1
 8003d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d84:	0cdb      	lsrs	r3, r3, #19
 8003d86:	04db      	lsls	r3, r3, #19
 8003d88:	6113      	str	r3, [r2, #16]
 8003d8a:	e074      	b.n	8003e76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	0151      	lsls	r1, r2, #5
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	440a      	add	r2, r1
 8003da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da6:	0cdb      	lsrs	r3, r3, #19
 8003da8:	04db      	lsls	r3, r3, #19
 8003daa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	0151      	lsls	r1, r2, #5
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	440a      	add	r2, r1
 8003dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	6959      	ldr	r1, [r3, #20]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	440b      	add	r3, r1
 8003de8:	1e59      	subs	r1, r3, #1
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df2:	04d9      	lsls	r1, r3, #19
 8003df4:	4b9d      	ldr	r3, [pc, #628]	; (800406c <USB_EPStartXfer+0x370>)
 8003df6:	400b      	ands	r3, r1
 8003df8:	69b9      	ldr	r1, [r7, #24]
 8003dfa:	0148      	lsls	r0, r1, #5
 8003dfc:	69f9      	ldr	r1, [r7, #28]
 8003dfe:	4401      	add	r1, r0
 8003e00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e04:	4313      	orrs	r3, r2
 8003e06:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1e:	69b9      	ldr	r1, [r7, #24]
 8003e20:	0148      	lsls	r0, r1, #5
 8003e22:	69f9      	ldr	r1, [r7, #28]
 8003e24:	4401      	add	r1, r0
 8003e26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	78db      	ldrb	r3, [r3, #3]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d11f      	bne.n	8003e76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d14b      	bne.n	8003f14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e90:	461a      	mov	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	78db      	ldrb	r3, [r3, #3]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d128      	bne.n	8003ef2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d110      	bne.n	8003ed2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	0151      	lsls	r1, r2, #5
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	440a      	add	r2, r1
 8003ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e00f      	b.n	8003ef2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	0151      	lsls	r1, r2, #5
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	440a      	add	r2, r1
 8003f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e12f      	b.n	8004174 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	0151      	lsls	r1, r2, #5
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	440a      	add	r2, r1
 8003f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	78db      	ldrb	r3, [r3, #3]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d015      	beq.n	8003f68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8117 	beq.w	8004174 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	2101      	movs	r1, #1
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	69f9      	ldr	r1, [r7, #28]
 8003f5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f62:	4313      	orrs	r3, r2
 8003f64:	634b      	str	r3, [r1, #52]	; 0x34
 8003f66:	e105      	b.n	8004174 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d110      	bne.n	8003f9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	0151      	lsls	r1, r2, #5
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	440a      	add	r2, r1
 8003f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	e00f      	b.n	8003fba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	0151      	lsls	r1, r2, #5
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	440a      	add	r2, r1
 8003fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	68d9      	ldr	r1, [r3, #12]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	b298      	uxth	r0, r3
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4603      	mov	r3, r0
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fa2b 	bl	800442a <USB_WritePacket>
 8003fd4:	e0ce      	b.n	8004174 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	0151      	lsls	r1, r2, #5
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	440a      	add	r2, r1
 8003fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff0:	0cdb      	lsrs	r3, r3, #19
 8003ff2:	04db      	lsls	r3, r3, #19
 8003ff4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	440a      	add	r2, r1
 800400c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004018:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d126      	bne.n	8004070 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004038:	69b9      	ldr	r1, [r7, #24]
 800403a:	0148      	lsls	r0, r1, #5
 800403c:	69f9      	ldr	r1, [r7, #28]
 800403e:	4401      	add	r1, r0
 8004040:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004044:	4313      	orrs	r3, r2
 8004046:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004062:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004066:	6113      	str	r3, [r2, #16]
 8004068:	e036      	b.n	80040d8 <USB_EPStartXfer+0x3dc>
 800406a:	bf00      	nop
 800406c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4413      	add	r3, r2
 800407a:	1e5a      	subs	r2, r3, #1
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	8afb      	ldrh	r3, [r7, #22]
 8004096:	04d9      	lsls	r1, r3, #19
 8004098:	4b39      	ldr	r3, [pc, #228]	; (8004180 <USB_EPStartXfer+0x484>)
 800409a:	400b      	ands	r3, r1
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	0148      	lsls	r0, r1, #5
 80040a0:	69f9      	ldr	r1, [r7, #28]
 80040a2:	4401      	add	r1, r0
 80040a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040a8:	4313      	orrs	r3, r2
 80040aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	8af9      	ldrh	r1, [r7, #22]
 80040c0:	fb01 f303 	mul.w	r3, r1, r3
 80040c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c8:	69b9      	ldr	r1, [r7, #24]
 80040ca:	0148      	lsls	r0, r1, #5
 80040cc:	69f9      	ldr	r1, [r7, #28]
 80040ce:	4401      	add	r1, r0
 80040d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040d4:	4313      	orrs	r3, r2
 80040d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d10d      	bne.n	80040fa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	68d9      	ldr	r1, [r3, #12]
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	460a      	mov	r2, r1
 80040f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	78db      	ldrb	r3, [r3, #3]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d128      	bne.n	8004154 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d110      	bne.n	8004134 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	440a      	add	r2, r1
 8004128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800412c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e00f      	b.n	8004154 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004152:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	1ff80000 	.word	0x1ff80000

08004184 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	f040 80cd 	bne.w	8004340 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d132      	bne.n	8004214 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	0151      	lsls	r1, r2, #5
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	440a      	add	r2, r1
 80041e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	0151      	lsls	r1, r2, #5
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	440a      	add	r2, r1
 8004208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420c:	0cdb      	lsrs	r3, r3, #19
 800420e:	04db      	lsls	r3, r3, #19
 8004210:	6113      	str	r3, [r2, #16]
 8004212:	e04e      	b.n	80042b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422e:	0cdb      	lsrs	r3, r3, #19
 8004230:	04db      	lsls	r3, r3, #19
 8004232:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	0151      	lsls	r1, r2, #5
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	440a      	add	r2, r1
 800424a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004252:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004256:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	429a      	cmp	r2, r3
 8004262:	d903      	bls.n	800426c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800428a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a2:	6939      	ldr	r1, [r7, #16]
 80042a4:	0148      	lsls	r0, r1, #5
 80042a6:	6979      	ldr	r1, [r7, #20]
 80042a8:	4401      	add	r1, r0
 80042aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042ae:	4313      	orrs	r3, r2
 80042b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d11e      	bne.n	80042f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042cc:	461a      	mov	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	e092      	b.n	800441c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	0151      	lsls	r1, r2, #5
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	440a      	add	r2, r1
 800430c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004310:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004314:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d07e      	beq.n	800441c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	6979      	ldr	r1, [r7, #20]
 8004336:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800433a:	4313      	orrs	r3, r2
 800433c:	634b      	str	r3, [r1, #52]	; 0x34
 800433e:	e06d      	b.n	800441c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	440a      	add	r2, r1
 8004356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800435a:	0cdb      	lsrs	r3, r3, #19
 800435c:	04db      	lsls	r3, r3, #19
 800435e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	0151      	lsls	r1, r2, #5
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	440a      	add	r2, r1
 8004376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800437e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004382:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ca:	6939      	ldr	r1, [r7, #16]
 80043cc:	0148      	lsls	r0, r1, #5
 80043ce:	6979      	ldr	r1, [r7, #20]
 80043d0:	4401      	add	r1, r0
 80043d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043d6:	4313      	orrs	r3, r2
 80043d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d10d      	bne.n	80043fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d009      	beq.n	80043fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	68d9      	ldr	r1, [r3, #12]
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	460a      	mov	r2, r1
 80043fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004416:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800441a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800442a:	b480      	push	{r7}
 800442c:	b089      	sub	sp, #36	; 0x24
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	4611      	mov	r1, r2
 8004436:	461a      	mov	r2, r3
 8004438:	460b      	mov	r3, r1
 800443a:	71fb      	strb	r3, [r7, #7]
 800443c:	4613      	mov	r3, r2
 800443e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004448:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800444c:	2b00      	cmp	r3, #0
 800444e:	d11a      	bne.n	8004486 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004450:	88bb      	ldrh	r3, [r7, #4]
 8004452:	3303      	adds	r3, #3
 8004454:	089b      	lsrs	r3, r3, #2
 8004456:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	e00f      	b.n	800447e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	031a      	lsls	r2, r3, #12
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	4413      	add	r3, r2
 8004466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446a:	461a      	mov	r2, r3
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3304      	adds	r3, #4
 8004476:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	3301      	adds	r3, #1
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	429a      	cmp	r2, r3
 8004484:	d3eb      	bcc.n	800445e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3724      	adds	r7, #36	; 0x24
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004494:	b480      	push	{r7}
 8004496:	b089      	sub	sp, #36	; 0x24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	3303      	adds	r3, #3
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	e00b      	b.n	80044d0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	3304      	adds	r3, #4
 80044c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	3301      	adds	r3, #1
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d3ef      	bcc.n	80044b8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80044d8:	69fb      	ldr	r3, [r7, #28]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3724      	adds	r7, #36	; 0x24
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	785b      	ldrb	r3, [r3, #1]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d12c      	bne.n	800455c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	db12      	blt.n	800453a <USB_EPSetStall+0x54>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00f      	beq.n	800453a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	0151      	lsls	r1, r2, #5
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	440a      	add	r2, r1
 8004530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004534:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004538:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	0151      	lsls	r1, r2, #5
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	440a      	add	r2, r1
 8004550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e02b      	b.n	80045b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	db12      	blt.n	8004594 <USB_EPSetStall+0xae>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00f      	beq.n	8004594 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	440a      	add	r2, r1
 800458a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004592:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	785b      	ldrb	r3, [r3, #1]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d128      	bne.n	8004630 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	0151      	lsls	r1, r2, #5
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	440a      	add	r2, r1
 80045f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	78db      	ldrb	r3, [r3, #3]
 8004602:	2b03      	cmp	r3, #3
 8004604:	d003      	beq.n	800460e <USB_EPClearStall+0x4c>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	78db      	ldrb	r3, [r3, #3]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d138      	bne.n	8004680 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e027      	b.n	8004680 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800464e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	78db      	ldrb	r3, [r3, #3]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d003      	beq.n	8004660 <USB_EPClearStall+0x9e>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	78db      	ldrb	r3, [r3, #3]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d10f      	bne.n	8004680 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	440a      	add	r2, r1
 8004676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80046c2:	68f9      	ldr	r1, [r7, #12]
 80046c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046f4:	f023 0303 	bic.w	r3, r3, #3
 80046f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004708:	f023 0302 	bic.w	r3, r3, #2
 800470c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800474a:	f043 0302 	orr.w	r3, r3, #2
 800474e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4013      	ands	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004776:	68fb      	ldr	r3, [r7, #12]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4013      	ands	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	0c1b      	lsrs	r3, r3, #16
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	b29b      	uxth	r3, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800481a:	68bb      	ldr	r3, [r7, #8]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	01db      	lsls	r3, r3, #7
 800485a:	b2db      	uxtb	r3, r3
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4013      	ands	r3, r2
 8004874:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004876:	68bb      	ldr	r3, [r7, #8]
}
 8004878:	4618      	mov	r0, r3
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f003 0301 	and.w	r3, r3, #1
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	460b      	mov	r3, r1
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	333c      	adds	r3, #60	; 0x3c
 80048fe:	3304      	adds	r3, #4
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4a26      	ldr	r2, [pc, #152]	; (80049a0 <USB_EP0_OutStart+0xb8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d90a      	bls.n	8004922 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800491c:	d101      	bne.n	8004922 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	e037      	b.n	8004992 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004928:	461a      	mov	r2, r3
 800492a:	2300      	movs	r3, #0
 800492c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004950:	f043 0318 	orr.w	r3, r3, #24
 8004954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004964:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004968:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800496a:	7afb      	ldrb	r3, [r7, #11]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d10f      	bne.n	8004990 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004976:	461a      	mov	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800498a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800498e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	4f54300a 	.word	0x4f54300a

080049a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <USB_CoreReset+0x64>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e01b      	b.n	80049fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	daf2      	bge.n	80049b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f043 0201 	orr.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <USB_CoreReset+0x64>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d901      	bls.n	80049ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e006      	b.n	80049fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d0f0      	beq.n	80049da <USB_CoreReset+0x36>

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	00030d40 	.word	0x00030d40

08004a0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a1c:	f002 fb42 	bl	80070a4 <USBD_static_malloc>
 8004a20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004a30:	2302      	movs	r3, #2
 8004a32:	e066      	b.n	8004b02 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	7c1b      	ldrb	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d119      	bne.n	8004a78 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a48:	2202      	movs	r2, #2
 8004a4a:	2181      	movs	r1, #129	; 0x81
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f002 fa06 	bl	8006e5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	2101      	movs	r1, #1
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f002 f9fc 	bl	8006e5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2210      	movs	r2, #16
 8004a72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004a76:	e016      	b.n	8004aa6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a78:	2340      	movs	r3, #64	; 0x40
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	2181      	movs	r1, #129	; 0x81
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f002 f9ed 	bl	8006e5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a8a:	2340      	movs	r3, #64	; 0x40
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	2101      	movs	r1, #1
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f002 f9e4 	bl	8006e5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	2182      	movs	r1, #130	; 0x82
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f002 f9d6 	bl	8006e5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7c1b      	ldrb	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f002 faa7 	bl	800703c <USBD_LL_PrepareReceive>
 8004aee:	e007      	b.n	8004b00 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004af6:	2340      	movs	r3, #64	; 0x40
 8004af8:	2101      	movs	r1, #1
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f002 fa9e 	bl	800703c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004b16:	2181      	movs	r1, #129	; 0x81
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f002 f9c6 	bl	8006eaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b24:	2101      	movs	r1, #1
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f002 f9bf 	bl	8006eaa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004b34:	2182      	movs	r1, #130	; 0x82
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f002 f9b7 	bl	8006eaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00e      	beq.n	8004b74 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b66:	4618      	mov	r0, r3
 8004b68:	f002 faaa 	bl	80070c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e0af      	b.n	8004d08 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d03f      	beq.n	8004c34 <USBD_CDC_Setup+0xb4>
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	f040 809f 	bne.w	8004cf8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	88db      	ldrh	r3, [r3, #6]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d02e      	beq.n	8004c20 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	b25b      	sxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	da16      	bge.n	8004bfa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004bd8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	88d2      	ldrh	r2, [r2, #6]
 8004bde:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	88db      	ldrh	r3, [r3, #6]
 8004be4:	2b07      	cmp	r3, #7
 8004be6:	bf28      	it	cs
 8004be8:	2307      	movcs	r3, #7
 8004bea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	89fa      	ldrh	r2, [r7, #14]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f001 fb19 	bl	800622a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004bf8:	e085      	b.n	8004d06 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	785a      	ldrb	r2, [r3, #1]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	88db      	ldrh	r3, [r3, #6]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004c10:	6939      	ldr	r1, [r7, #16]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	88db      	ldrh	r3, [r3, #6]
 8004c16:	461a      	mov	r2, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f001 fb32 	bl	8006282 <USBD_CtlPrepareRx>
      break;
 8004c1e:	e072      	b.n	8004d06 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	7850      	ldrb	r0, [r2, #1]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	6839      	ldr	r1, [r7, #0]
 8004c30:	4798      	blx	r3
      break;
 8004c32:	e068      	b.n	8004d06 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b0b      	cmp	r3, #11
 8004c3a:	d852      	bhi.n	8004ce2 <USBD_CDC_Setup+0x162>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <USBD_CDC_Setup+0xc4>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c75 	.word	0x08004c75
 8004c48:	08004cf1 	.word	0x08004cf1
 8004c4c:	08004ce3 	.word	0x08004ce3
 8004c50:	08004ce3 	.word	0x08004ce3
 8004c54:	08004ce3 	.word	0x08004ce3
 8004c58:	08004ce3 	.word	0x08004ce3
 8004c5c:	08004ce3 	.word	0x08004ce3
 8004c60:	08004ce3 	.word	0x08004ce3
 8004c64:	08004ce3 	.word	0x08004ce3
 8004c68:	08004ce3 	.word	0x08004ce3
 8004c6c:	08004c9f 	.word	0x08004c9f
 8004c70:	08004cc9 	.word	0x08004cc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d107      	bne.n	8004c90 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c80:	f107 030a 	add.w	r3, r7, #10
 8004c84:	2202      	movs	r2, #2
 8004c86:	4619      	mov	r1, r3
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f001 face 	bl	800622a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c8e:	e032      	b.n	8004cf6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f001 fa58 	bl	8006148 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	75fb      	strb	r3, [r7, #23]
          break;
 8004c9c:	e02b      	b.n	8004cf6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d107      	bne.n	8004cba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004caa:	f107 030d 	add.w	r3, r7, #13
 8004cae:	2201      	movs	r2, #1
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 fab9 	bl	800622a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cb8:	e01d      	b.n	8004cf6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f001 fa43 	bl	8006148 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004cc6:	e016      	b.n	8004cf6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d00f      	beq.n	8004cf4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004cd4:	6839      	ldr	r1, [r7, #0]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f001 fa36 	bl	8006148 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004ce0:	e008      	b.n	8004cf4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f001 fa2f 	bl	8006148 <USBD_CtlError>
          ret = USBD_FAIL;
 8004cea:	2303      	movs	r3, #3
 8004cec:	75fb      	strb	r3, [r7, #23]
          break;
 8004cee:	e002      	b.n	8004cf6 <USBD_CDC_Setup+0x176>
          break;
 8004cf0:	bf00      	nop
 8004cf2:	e008      	b.n	8004d06 <USBD_CDC_Setup+0x186>
          break;
 8004cf4:	bf00      	nop
      }
      break;
 8004cf6:	e006      	b.n	8004d06 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f001 fa24 	bl	8006148 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d00:	2303      	movs	r3, #3
 8004d02:	75fb      	strb	r3, [r7, #23]
      break;
 8004d04:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004d22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e04f      	b.n	8004dd2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3318      	adds	r3, #24
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d029      	beq.n	8004da4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	3318      	adds	r3, #24
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	78f9      	ldrb	r1, [r7, #3]
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	460b      	mov	r3, r1
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	1a5b      	subs	r3, r3, r1
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4403      	add	r3, r0
 8004d70:	3344      	adds	r3, #68	; 0x44
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d78:	fb03 f301 	mul.w	r3, r3, r1
 8004d7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d110      	bne.n	8004da4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3318      	adds	r3, #24
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d96:	78f9      	ldrb	r1, [r7, #3]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f002 f92c 	bl	8006ffa <USBD_LL_Transmit>
 8004da2:	e015      	b.n	8004dd0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004dcc:	78fa      	ldrb	r2, [r7, #3]
 8004dce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e015      	b.n	8004e28 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f002 f93c 	bl	800707e <USBD_LL_GetRxDataSize>
 8004e06:	4602      	mov	r2, r0
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e22:	4611      	mov	r1, r2
 8004e24:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e01b      	b.n	8004e82 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d015      	beq.n	8004e80 <USBD_CDC_EP0_RxReady+0x50>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e5a:	2bff      	cmp	r3, #255	; 0xff
 8004e5c:	d010      	beq.n	8004e80 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004e6c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e74:	b292      	uxth	r2, r2
 8004e76:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	22ff      	movs	r2, #255	; 0xff
 8004e7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2243      	movs	r2, #67	; 0x43
 8004e98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004e9a:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	20000094 	.word	0x20000094

08004eac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2243      	movs	r2, #67	; 0x43
 8004eb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004eba:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	20000050 	.word	0x20000050

08004ecc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2243      	movs	r2, #67	; 0x43
 8004ed8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004eda:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	200000d8 	.word	0x200000d8

08004eec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	220a      	movs	r2, #10
 8004ef8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004efa:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	2000000c 	.word	0x2000000c

08004f0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e004      	b.n	8004f2a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b087      	sub	sp, #28
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f48:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e008      	b.n	8004f66 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e004      	b.n	8004f98 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fb2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e01a      	b.n	8004ffc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d114      	bne.n	8004ffa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fee:	2181      	movs	r1, #129	; 0x81
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f002 f802 	bl	8006ffa <USBD_LL_Transmit>

    ret = USBD_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005012:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800501e:	2303      	movs	r3, #3
 8005020:	e016      	b.n	8005050 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	7c1b      	ldrb	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005034:	2101      	movs	r1, #1
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f002 f800 	bl	800703c <USBD_LL_PrepareReceive>
 800503c:	e007      	b.n	800504e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005044:	2340      	movs	r3, #64	; 0x40
 8005046:	2101      	movs	r1, #1
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f001 fff7 	bl	800703c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800506c:	2303      	movs	r3, #3
 800506e:	e01f      	b.n	80050b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	79fa      	ldrb	r2, [r7, #7]
 80050a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f001 fe73 	bl	8006d90 <USBD_LL_Init>
 80050aa:	4603      	mov	r3, r0
 80050ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e016      	b.n	80050fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	f107 020e 	add.w	r2, r7, #14
 80050f0:	4610      	mov	r0, r2
 80050f2:	4798      	blx	r3
 80050f4:	4602      	mov	r2, r0
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f001 fe8a 	bl	8006e28 <USBD_LL_Start>
 8005114:	4603      	mov	r3, r0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005140:	2303      	movs	r3, #3
 8005142:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	4611      	mov	r1, r2
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	4798      	blx	r3
 800515e:	4603      	mov	r3, r0
 8005160:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	4611      	mov	r1, r2
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
  }

  return USBD_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 ff90 	bl	80060d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80051c2:	461a      	mov	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d01a      	beq.n	800520e <USBD_LL_SetupStage+0x72>
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d822      	bhi.n	8005222 <USBD_LL_SetupStage+0x86>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <USBD_LL_SetupStage+0x4a>
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d00a      	beq.n	80051fa <USBD_LL_SetupStage+0x5e>
 80051e4:	e01d      	b.n	8005222 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa62 	bl	80056b8 <USBD_StdDevReq>
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
      break;
 80051f8:	e020      	b.n	800523c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fac6 	bl	8005794 <USBD_StdItfReq>
 8005208:	4603      	mov	r3, r0
 800520a:	73fb      	strb	r3, [r7, #15]
      break;
 800520c:	e016      	b.n	800523c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fb05 	bl	8005826 <USBD_StdEPReq>
 800521c:	4603      	mov	r3, r0
 800521e:	73fb      	strb	r3, [r7, #15]
      break;
 8005220:	e00c      	b.n	800523c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005228:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800522c:	b2db      	uxtb	r3, r3
 800522e:	4619      	mov	r1, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f001 fe59 	bl	8006ee8 <USBD_LL_StallEP>
 8005236:	4603      	mov	r3, r0
 8005238:	73fb      	strb	r3, [r7, #15]
      break;
 800523a:	bf00      	nop
  }

  return ret;
 800523c:	7bfb      	ldrb	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	460b      	mov	r3, r1
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005254:	7afb      	ldrb	r3, [r7, #11]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d138      	bne.n	80052cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005260:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005268:	2b03      	cmp	r3, #3
 800526a:	d14a      	bne.n	8005302 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	429a      	cmp	r2, r3
 8005276:	d913      	bls.n	80052a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	1ad2      	subs	r2, r2, r3
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	4293      	cmp	r3, r2
 8005290:	bf28      	it	cs
 8005292:	4613      	movcs	r3, r2
 8005294:	461a      	mov	r2, r3
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f001 f80f 	bl	80062bc <USBD_CtlContinueRx>
 800529e:	e030      	b.n	8005302 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d10b      	bne.n	80052c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f001 f80a 	bl	80062de <USBD_CtlSendStatus>
 80052ca:	e01a      	b.n	8005302 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d114      	bne.n	8005302 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00e      	beq.n	8005302 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	7afa      	ldrb	r2, [r7, #11]
 80052ee:	4611      	mov	r1, r2
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	4798      	blx	r3
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
 8005300:	e000      	b.n	8005304 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	460b      	mov	r3, r1
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800531a:	7afb      	ldrb	r3, [r7, #11]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d16b      	bne.n	80053f8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3314      	adds	r3, #20
 8005324:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800532c:	2b02      	cmp	r3, #2
 800532e:	d156      	bne.n	80053de <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	429a      	cmp	r2, r3
 800533a:	d914      	bls.n	8005366 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	1ad2      	subs	r2, r2, r3
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	461a      	mov	r2, r3
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 ff84 	bl	8006260 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005358:	2300      	movs	r3, #0
 800535a:	2200      	movs	r2, #0
 800535c:	2100      	movs	r1, #0
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f001 fe6c 	bl	800703c <USBD_LL_PrepareReceive>
 8005364:	e03b      	b.n	80053de <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	d11c      	bne.n	80053ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800537a:	429a      	cmp	r2, r3
 800537c:	d316      	bcc.n	80053ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005388:	429a      	cmp	r2, r3
 800538a:	d20f      	bcs.n	80053ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800538c:	2200      	movs	r2, #0
 800538e:	2100      	movs	r1, #0
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 ff65 	bl	8006260 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800539e:	2300      	movs	r3, #0
 80053a0:	2200      	movs	r2, #0
 80053a2:	2100      	movs	r1, #0
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f001 fe49 	bl	800703c <USBD_LL_PrepareReceive>
 80053aa:	e018      	b.n	80053de <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d10b      	bne.n	80053d0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80053d0:	2180      	movs	r1, #128	; 0x80
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f001 fd88 	bl	8006ee8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 ff93 	bl	8006304 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d122      	bne.n	800542e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff fe98 	bl	800511e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80053f6:	e01a      	b.n	800542e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b03      	cmp	r3, #3
 8005402:	d114      	bne.n	800542e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00e      	beq.n	800542e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	7afa      	ldrb	r2, [r7, #11]
 800541a:	4611      	mov	r1, r2
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	4798      	blx	r3
 8005420:	4603      	mov	r3, r0
 8005422:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
 800542c:	e000      	b.n	8005430 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005468:	2303      	movs	r3, #3
 800546a:	e02f      	b.n	80054cc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00f      	beq.n	8005496 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6852      	ldr	r2, [r2, #4]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	4611      	mov	r1, r2
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005496:	2340      	movs	r3, #64	; 0x40
 8005498:	2200      	movs	r2, #0
 800549a:	2100      	movs	r1, #0
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f001 fcde 	bl	8006e5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2240      	movs	r2, #64	; 0x40
 80054ae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054b2:	2340      	movs	r3, #64	; 0x40
 80054b4:	2200      	movs	r2, #0
 80054b6:	2180      	movs	r1, #128	; 0x80
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f001 fcd0 	bl	8006e5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2240      	movs	r2, #64	; 0x40
 80054c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005502:	b2da      	uxtb	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2204      	movs	r2, #4
 800550e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b04      	cmp	r3, #4
 8005532:	d106      	bne.n	8005542 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800553a:	b2da      	uxtb	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005562:	2303      	movs	r3, #3
 8005564:	e012      	b.n	800558c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b03      	cmp	r3, #3
 8005570:	d10b      	bne.n	800558a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e014      	b.n	80055d8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d10d      	bne.n	80055d6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	4611      	mov	r1, r2
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e014      	b.n	8005624 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b03      	cmp	r3, #3
 8005604:	d10d      	bne.n	8005622 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	4611      	mov	r1, r2
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d009      	beq.n	8005670 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6852      	ldr	r2, [r2, #4]
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	4611      	mov	r1, r2
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3
  }

  return USBD_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800567a:	b480      	push	{r7}
 800567c:	b087      	sub	sp, #28
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	3301      	adds	r3, #1
 8005690:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005698:	8a3b      	ldrh	r3, [r7, #16]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	b21a      	sxth	r2, r3
 800569e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	b21b      	sxth	r3, r3
 80056a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80056a8:	89fb      	ldrh	r3, [r7, #14]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056ce:	2b40      	cmp	r3, #64	; 0x40
 80056d0:	d005      	beq.n	80056de <USBD_StdDevReq+0x26>
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d853      	bhi.n	800577e <USBD_StdDevReq+0xc6>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00b      	beq.n	80056f2 <USBD_StdDevReq+0x3a>
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d14f      	bne.n	800577e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]
      break;
 80056f0:	e04a      	b.n	8005788 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	2b09      	cmp	r3, #9
 80056f8:	d83b      	bhi.n	8005772 <USBD_StdDevReq+0xba>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <USBD_StdDevReq+0x48>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005755 	.word	0x08005755
 8005704:	08005769 	.word	0x08005769
 8005708:	08005773 	.word	0x08005773
 800570c:	0800575f 	.word	0x0800575f
 8005710:	08005773 	.word	0x08005773
 8005714:	08005733 	.word	0x08005733
 8005718:	08005729 	.word	0x08005729
 800571c:	08005773 	.word	0x08005773
 8005720:	0800574b 	.word	0x0800574b
 8005724:	0800573d 	.word	0x0800573d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005728:	6839      	ldr	r1, [r7, #0]
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f9de 	bl	8005aec <USBD_GetDescriptor>
          break;
 8005730:	e024      	b.n	800577c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fb43 	bl	8005dc0 <USBD_SetAddress>
          break;
 800573a:	e01f      	b.n	800577c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fb82 	bl	8005e48 <USBD_SetConfig>
 8005744:	4603      	mov	r3, r0
 8005746:	73fb      	strb	r3, [r7, #15]
          break;
 8005748:	e018      	b.n	800577c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fc21 	bl	8005f94 <USBD_GetConfig>
          break;
 8005752:	e013      	b.n	800577c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fc52 	bl	8006000 <USBD_GetStatus>
          break;
 800575c:	e00e      	b.n	800577c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fc81 	bl	8006068 <USBD_SetFeature>
          break;
 8005766:	e009      	b.n	800577c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fc90 	bl	8006090 <USBD_ClrFeature>
          break;
 8005770:	e004      	b.n	800577c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fce7 	bl	8006148 <USBD_CtlError>
          break;
 800577a:	bf00      	nop
      }
      break;
 800577c:	e004      	b.n	8005788 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fce1 	bl	8006148 <USBD_CtlError>
      break;
 8005786:	bf00      	nop
  }

  return ret;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop

08005794 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d005      	beq.n	80057ba <USBD_StdItfReq+0x26>
 80057ae:	2b40      	cmp	r3, #64	; 0x40
 80057b0:	d82f      	bhi.n	8005812 <USBD_StdItfReq+0x7e>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <USBD_StdItfReq+0x26>
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d12b      	bne.n	8005812 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d81d      	bhi.n	8005804 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	889b      	ldrh	r3, [r3, #4]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d813      	bhi.n	80057fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
 80057e0:	4603      	mov	r3, r0
 80057e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	88db      	ldrh	r3, [r3, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d110      	bne.n	800580e <USBD_StdItfReq+0x7a>
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10d      	bne.n	800580e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fd73 	bl	80062de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80057f8:	e009      	b.n	800580e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fca3 	bl	8006148 <USBD_CtlError>
          break;
 8005802:	e004      	b.n	800580e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fc9e 	bl	8006148 <USBD_CtlError>
          break;
 800580c:	e000      	b.n	8005810 <USBD_StdItfReq+0x7c>
          break;
 800580e:	bf00      	nop
      }
      break;
 8005810:	e004      	b.n	800581c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fc97 	bl	8006148 <USBD_CtlError>
      break;
 800581a:	bf00      	nop
  }

  return ret;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	889b      	ldrh	r3, [r3, #4]
 8005838:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d007      	beq.n	8005856 <USBD_StdEPReq+0x30>
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	f200 8145 	bhi.w	8005ad6 <USBD_StdEPReq+0x2b0>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00c      	beq.n	800586a <USBD_StdEPReq+0x44>
 8005850:	2b20      	cmp	r3, #32
 8005852:	f040 8140 	bne.w	8005ad6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4798      	blx	r3
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]
      break;
 8005868:	e13a      	b.n	8005ae0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	785b      	ldrb	r3, [r3, #1]
 800586e:	2b03      	cmp	r3, #3
 8005870:	d007      	beq.n	8005882 <USBD_StdEPReq+0x5c>
 8005872:	2b03      	cmp	r3, #3
 8005874:	f300 8129 	bgt.w	8005aca <USBD_StdEPReq+0x2a4>
 8005878:	2b00      	cmp	r3, #0
 800587a:	d07f      	beq.n	800597c <USBD_StdEPReq+0x156>
 800587c:	2b01      	cmp	r3, #1
 800587e:	d03c      	beq.n	80058fa <USBD_StdEPReq+0xd4>
 8005880:	e123      	b.n	8005aca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d002      	beq.n	8005894 <USBD_StdEPReq+0x6e>
 800588e:	2b03      	cmp	r3, #3
 8005890:	d016      	beq.n	80058c0 <USBD_StdEPReq+0x9a>
 8005892:	e02c      	b.n	80058ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00d      	beq.n	80058b6 <USBD_StdEPReq+0x90>
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	2b80      	cmp	r3, #128	; 0x80
 800589e:	d00a      	beq.n	80058b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058a0:	7bbb      	ldrb	r3, [r7, #14]
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 fb1f 	bl	8006ee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058aa:	2180      	movs	r1, #128	; 0x80
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 fb1b 	bl	8006ee8 <USBD_LL_StallEP>
 80058b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058b4:	e020      	b.n	80058f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fc45 	bl	8006148 <USBD_CtlError>
              break;
 80058be:	e01b      	b.n	80058f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	885b      	ldrh	r3, [r3, #2]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10e      	bne.n	80058e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00b      	beq.n	80058e6 <USBD_StdEPReq+0xc0>
 80058ce:	7bbb      	ldrb	r3, [r7, #14]
 80058d0:	2b80      	cmp	r3, #128	; 0x80
 80058d2:	d008      	beq.n	80058e6 <USBD_StdEPReq+0xc0>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	88db      	ldrh	r3, [r3, #6]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d104      	bne.n	80058e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80058dc:	7bbb      	ldrb	r3, [r7, #14]
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 fb01 	bl	8006ee8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fcf9 	bl	80062de <USBD_CtlSendStatus>

              break;
 80058ec:	e004      	b.n	80058f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fc29 	bl	8006148 <USBD_CtlError>
              break;
 80058f6:	bf00      	nop
          }
          break;
 80058f8:	e0ec      	b.n	8005ad4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d002      	beq.n	800590c <USBD_StdEPReq+0xe6>
 8005906:	2b03      	cmp	r3, #3
 8005908:	d016      	beq.n	8005938 <USBD_StdEPReq+0x112>
 800590a:	e030      	b.n	800596e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800590c:	7bbb      	ldrb	r3, [r7, #14]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00d      	beq.n	800592e <USBD_StdEPReq+0x108>
 8005912:	7bbb      	ldrb	r3, [r7, #14]
 8005914:	2b80      	cmp	r3, #128	; 0x80
 8005916:	d00a      	beq.n	800592e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005918:	7bbb      	ldrb	r3, [r7, #14]
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 fae3 	bl	8006ee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005922:	2180      	movs	r1, #128	; 0x80
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 fadf 	bl	8006ee8 <USBD_LL_StallEP>
 800592a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800592c:	e025      	b.n	800597a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fc09 	bl	8006148 <USBD_CtlError>
              break;
 8005936:	e020      	b.n	800597a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	885b      	ldrh	r3, [r3, #2]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11b      	bne.n	8005978 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005940:	7bbb      	ldrb	r3, [r7, #14]
 8005942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800594a:	7bbb      	ldrb	r3, [r7, #14]
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 fae9 	bl	8006f26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fcc2 	bl	80062de <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800596c:	e004      	b.n	8005978 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fbe9 	bl	8006148 <USBD_CtlError>
              break;
 8005976:	e000      	b.n	800597a <USBD_StdEPReq+0x154>
              break;
 8005978:	bf00      	nop
          }
          break;
 800597a:	e0ab      	b.n	8005ad4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d002      	beq.n	800598e <USBD_StdEPReq+0x168>
 8005988:	2b03      	cmp	r3, #3
 800598a:	d032      	beq.n	80059f2 <USBD_StdEPReq+0x1cc>
 800598c:	e097      	b.n	8005abe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800598e:	7bbb      	ldrb	r3, [r7, #14]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <USBD_StdEPReq+0x17e>
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	2b80      	cmp	r3, #128	; 0x80
 8005998:	d004      	beq.n	80059a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fbd3 	bl	8006148 <USBD_CtlError>
                break;
 80059a2:	e091      	b.n	8005ac8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	da0b      	bge.n	80059c4 <USBD_StdEPReq+0x19e>
 80059ac:	7bbb      	ldrb	r3, [r7, #14]
 80059ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	3310      	adds	r3, #16
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4413      	add	r3, r2
 80059c0:	3304      	adds	r3, #4
 80059c2:	e00b      	b.n	80059dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059c4:	7bbb      	ldrb	r3, [r7, #14]
 80059c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	3304      	adds	r3, #4
 80059dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2202      	movs	r2, #2
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fc1d 	bl	800622a <USBD_CtlSendData>
              break;
 80059f0:	e06a      	b.n	8005ac8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80059f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	da11      	bge.n	8005a1e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	f003 020f 	and.w	r2, r3, #15
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3324      	adds	r3, #36	; 0x24
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d117      	bne.n	8005a44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fb96 	bl	8006148 <USBD_CtlError>
                  break;
 8005a1c:	e054      	b.n	8005ac8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a1e:	7bbb      	ldrb	r3, [r7, #14]
 8005a20:	f003 020f 	and.w	r2, r3, #15
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4613      	mov	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d104      	bne.n	8005a44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fb83 	bl	8006148 <USBD_CtlError>
                  break;
 8005a42:	e041      	b.n	8005ac8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	da0b      	bge.n	8005a64 <USBD_StdEPReq+0x23e>
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	3310      	adds	r3, #16
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4413      	add	r3, r2
 8005a60:	3304      	adds	r3, #4
 8005a62:	e00b      	b.n	8005a7c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a7e:	7bbb      	ldrb	r3, [r7, #14]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <USBD_StdEPReq+0x264>
 8005a84:	7bbb      	ldrb	r3, [r7, #14]
 8005a86:	2b80      	cmp	r3, #128	; 0x80
 8005a88:	d103      	bne.n	8005a92 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e00e      	b.n	8005ab0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fa64 	bl	8006f64 <USBD_LL_IsStallEP>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e002      	b.n	8005ab0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fbb7 	bl	800622a <USBD_CtlSendData>
              break;
 8005abc:	e004      	b.n	8005ac8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fb41 	bl	8006148 <USBD_CtlError>
              break;
 8005ac6:	bf00      	nop
          }
          break;
 8005ac8:	e004      	b.n	8005ad4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fb3b 	bl	8006148 <USBD_CtlError>
          break;
 8005ad2:	bf00      	nop
      }
      break;
 8005ad4:	e004      	b.n	8005ae0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fb35 	bl	8006148 <USBD_CtlError>
      break;
 8005ade:	bf00      	nop
  }

  return ret;
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	885b      	ldrh	r3, [r3, #2]
 8005b06:	0a1b      	lsrs	r3, r3, #8
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	2b06      	cmp	r3, #6
 8005b0e:	f200 8128 	bhi.w	8005d62 <USBD_GetDescriptor+0x276>
 8005b12:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <USBD_GetDescriptor+0x2c>)
 8005b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b18:	08005b35 	.word	0x08005b35
 8005b1c:	08005b4d 	.word	0x08005b4d
 8005b20:	08005b8d 	.word	0x08005b8d
 8005b24:	08005d63 	.word	0x08005d63
 8005b28:	08005d63 	.word	0x08005d63
 8005b2c:	08005d03 	.word	0x08005d03
 8005b30:	08005d2f 	.word	0x08005d2f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	7c12      	ldrb	r2, [r2, #16]
 8005b40:	f107 0108 	add.w	r1, r7, #8
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
 8005b48:	60f8      	str	r0, [r7, #12]
      break;
 8005b4a:	e112      	b.n	8005d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	7c1b      	ldrb	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10d      	bne.n	8005b70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	f107 0208 	add.w	r2, r7, #8
 8005b60:	4610      	mov	r0, r2
 8005b62:	4798      	blx	r3
 8005b64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b6e:	e100      	b.n	8005d72 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	f107 0208 	add.w	r2, r7, #8
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3301      	adds	r3, #1
 8005b86:	2202      	movs	r2, #2
 8005b88:	701a      	strb	r2, [r3, #0]
      break;
 8005b8a:	e0f2      	b.n	8005d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	885b      	ldrh	r3, [r3, #2]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	f200 80ac 	bhi.w	8005cf0 <USBD_GetDescriptor+0x204>
 8005b98:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <USBD_GetDescriptor+0xb4>)
 8005b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9e:	bf00      	nop
 8005ba0:	08005bb9 	.word	0x08005bb9
 8005ba4:	08005bed 	.word	0x08005bed
 8005ba8:	08005c21 	.word	0x08005c21
 8005bac:	08005c55 	.word	0x08005c55
 8005bb0:	08005c89 	.word	0x08005c89
 8005bb4:	08005cbd 	.word	0x08005cbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	7c12      	ldrb	r2, [r2, #16]
 8005bd0:	f107 0108 	add.w	r1, r7, #8
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4798      	blx	r3
 8005bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bda:	e091      	b.n	8005d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fab2 	bl	8006148 <USBD_CtlError>
            err++;
 8005be4:	7afb      	ldrb	r3, [r7, #11]
 8005be6:	3301      	adds	r3, #1
 8005be8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bea:	e089      	b.n	8005d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	7c12      	ldrb	r2, [r2, #16]
 8005c04:	f107 0108 	add.w	r1, r7, #8
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
 8005c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c0e:	e077      	b.n	8005d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa98 	bl	8006148 <USBD_CtlError>
            err++;
 8005c18:	7afb      	ldrb	r3, [r7, #11]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c1e:	e06f      	b.n	8005d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00b      	beq.n	8005c44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	7c12      	ldrb	r2, [r2, #16]
 8005c38:	f107 0108 	add.w	r1, r7, #8
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4798      	blx	r3
 8005c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c42:	e05d      	b.n	8005d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fa7e 	bl	8006148 <USBD_CtlError>
            err++;
 8005c4c:	7afb      	ldrb	r3, [r7, #11]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	72fb      	strb	r3, [r7, #11]
          break;
 8005c52:	e055      	b.n	8005d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00b      	beq.n	8005c78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	7c12      	ldrb	r2, [r2, #16]
 8005c6c:	f107 0108 	add.w	r1, r7, #8
 8005c70:	4610      	mov	r0, r2
 8005c72:	4798      	blx	r3
 8005c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c76:	e043      	b.n	8005d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fa64 	bl	8006148 <USBD_CtlError>
            err++;
 8005c80:	7afb      	ldrb	r3, [r7, #11]
 8005c82:	3301      	adds	r3, #1
 8005c84:	72fb      	strb	r3, [r7, #11]
          break;
 8005c86:	e03b      	b.n	8005d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	7c12      	ldrb	r2, [r2, #16]
 8005ca0:	f107 0108 	add.w	r1, r7, #8
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	4798      	blx	r3
 8005ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005caa:	e029      	b.n	8005d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa4a 	bl	8006148 <USBD_CtlError>
            err++;
 8005cb4:	7afb      	ldrb	r3, [r7, #11]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8005cba:	e021      	b.n	8005d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	7c12      	ldrb	r2, [r2, #16]
 8005cd4:	f107 0108 	add.w	r1, r7, #8
 8005cd8:	4610      	mov	r0, r2
 8005cda:	4798      	blx	r3
 8005cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cde:	e00f      	b.n	8005d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa30 	bl	8006148 <USBD_CtlError>
            err++;
 8005ce8:	7afb      	ldrb	r3, [r7, #11]
 8005cea:	3301      	adds	r3, #1
 8005cec:	72fb      	strb	r3, [r7, #11]
          break;
 8005cee:	e007      	b.n	8005d00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa28 	bl	8006148 <USBD_CtlError>
          err++;
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005cfe:	bf00      	nop
      }
      break;
 8005d00:	e037      	b.n	8005d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	7c1b      	ldrb	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d12:	f107 0208 	add.w	r2, r7, #8
 8005d16:	4610      	mov	r0, r2
 8005d18:	4798      	blx	r3
 8005d1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d1c:	e029      	b.n	8005d72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fa11 	bl	8006148 <USBD_CtlError>
        err++;
 8005d26:	7afb      	ldrb	r3, [r7, #11]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	72fb      	strb	r3, [r7, #11]
      break;
 8005d2c:	e021      	b.n	8005d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7c1b      	ldrb	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10d      	bne.n	8005d52 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	f107 0208 	add.w	r2, r7, #8
 8005d42:	4610      	mov	r0, r2
 8005d44:	4798      	blx	r3
 8005d46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	2207      	movs	r2, #7
 8005d4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d50:	e00f      	b.n	8005d72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f9f7 	bl	8006148 <USBD_CtlError>
        err++;
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d60:	e007      	b.n	8005d72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005d62:	6839      	ldr	r1, [r7, #0]
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f9ef 	bl	8006148 <USBD_CtlError>
      err++;
 8005d6a:	7afb      	ldrb	r3, [r7, #11]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d70:	bf00      	nop
  }

  if (err != 0U)
 8005d72:	7afb      	ldrb	r3, [r7, #11]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11e      	bne.n	8005db6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	88db      	ldrh	r3, [r3, #6]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d016      	beq.n	8005dae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005d80:	893b      	ldrh	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00e      	beq.n	8005da4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	88da      	ldrh	r2, [r3, #6]
 8005d8a:	893b      	ldrh	r3, [r7, #8]
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	bf28      	it	cs
 8005d90:	4613      	movcs	r3, r2
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d96:	893b      	ldrh	r3, [r7, #8]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fa44 	bl	800622a <USBD_CtlSendData>
 8005da2:	e009      	b.n	8005db8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f9ce 	bl	8006148 <USBD_CtlError>
 8005dac:	e004      	b.n	8005db8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa95 	bl	80062de <USBD_CtlSendStatus>
 8005db4:	e000      	b.n	8005db8 <USBD_GetDescriptor+0x2cc>
    return;
 8005db6:	bf00      	nop
  }
}
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop

08005dc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	889b      	ldrh	r3, [r3, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d131      	bne.n	8005e36 <USBD_SetAddress+0x76>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	88db      	ldrh	r3, [r3, #6]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d12d      	bne.n	8005e36 <USBD_SetAddress+0x76>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	885b      	ldrh	r3, [r3, #2]
 8005dde:	2b7f      	cmp	r3, #127	; 0x7f
 8005de0:	d829      	bhi.n	8005e36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	885b      	ldrh	r3, [r3, #2]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d104      	bne.n	8005e04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f9a3 	bl	8006148 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e02:	e01d      	b.n	8005e40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	7bfa      	ldrb	r2, [r7, #15]
 8005e08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 f8d3 	bl	8006fbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fa61 	bl	80062de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d004      	beq.n	8005e2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e2a:	e009      	b.n	8005e40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e34:	e004      	b.n	8005e40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f985 	bl	8006148 <USBD_CtlError>
  }
}
 8005e3e:	bf00      	nop
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	885b      	ldrh	r3, [r3, #2]
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	4b4c      	ldr	r3, [pc, #304]	; (8005f90 <USBD_SetConfig+0x148>)
 8005e5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e60:	4b4b      	ldr	r3, [pc, #300]	; (8005f90 <USBD_SetConfig+0x148>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d905      	bls.n	8005e74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f96c 	bl	8006148 <USBD_CtlError>
    return USBD_FAIL;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e088      	b.n	8005f86 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d002      	beq.n	8005e86 <USBD_SetConfig+0x3e>
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d025      	beq.n	8005ed0 <USBD_SetConfig+0x88>
 8005e84:	e071      	b.n	8005f6a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005e86:	4b42      	ldr	r3, [pc, #264]	; (8005f90 <USBD_SetConfig+0x148>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d01c      	beq.n	8005ec8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005e8e:	4b40      	ldr	r3, [pc, #256]	; (8005f90 <USBD_SetConfig+0x148>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e98:	4b3d      	ldr	r3, [pc, #244]	; (8005f90 <USBD_SetConfig+0x148>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff f948 	bl	8005134 <USBD_SetClassConfig>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d004      	beq.n	8005eb8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f949 	bl	8006148 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005eb6:	e065      	b.n	8005f84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fa10 	bl	80062de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005ec6:	e05d      	b.n	8005f84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fa08 	bl	80062de <USBD_CtlSendStatus>
      break;
 8005ece:	e059      	b.n	8005f84 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ed0:	4b2f      	ldr	r3, [pc, #188]	; (8005f90 <USBD_SetConfig+0x148>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d112      	bne.n	8005efe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005ee0:	4b2b      	ldr	r3, [pc, #172]	; (8005f90 <USBD_SetConfig+0x148>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005eea:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <USBD_SetConfig+0x148>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff f93b 	bl	800516c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f9f1 	bl	80062de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005efc:	e042      	b.n	8005f84 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005efe:	4b24      	ldr	r3, [pc, #144]	; (8005f90 <USBD_SetConfig+0x148>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d02a      	beq.n	8005f62 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff f929 	bl	800516c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f1a:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <USBD_SetConfig+0x148>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f24:	4b1a      	ldr	r3, [pc, #104]	; (8005f90 <USBD_SetConfig+0x148>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff f902 	bl	8005134 <USBD_SetClassConfig>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00f      	beq.n	8005f5a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f903 	bl	8006148 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff f90e 	bl	800516c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f58:	e014      	b.n	8005f84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f9bf 	bl	80062de <USBD_CtlSendStatus>
      break;
 8005f60:	e010      	b.n	8005f84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f9bb 	bl	80062de <USBD_CtlSendStatus>
      break;
 8005f68:	e00c      	b.n	8005f84 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8eb 	bl	8006148 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f72:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <USBD_SetConfig+0x148>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff f8f7 	bl	800516c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	73fb      	strb	r3, [r7, #15]
      break;
 8005f82:	bf00      	nop
  }

  return ret;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000200 	.word	0x20000200

08005f94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	88db      	ldrh	r3, [r3, #6]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d004      	beq.n	8005fb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f8cd 	bl	8006148 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005fae:	e023      	b.n	8005ff8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	dc02      	bgt.n	8005fc2 <USBD_GetConfig+0x2e>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dc03      	bgt.n	8005fc8 <USBD_GetConfig+0x34>
 8005fc0:	e015      	b.n	8005fee <USBD_GetConfig+0x5a>
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d00b      	beq.n	8005fde <USBD_GetConfig+0x4a>
 8005fc6:	e012      	b.n	8005fee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f927 	bl	800622a <USBD_CtlSendData>
        break;
 8005fdc:	e00c      	b.n	8005ff8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f91f 	bl	800622a <USBD_CtlSendData>
        break;
 8005fec:	e004      	b.n	8005ff8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8a9 	bl	8006148 <USBD_CtlError>
        break;
 8005ff6:	bf00      	nop
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006010:	b2db      	uxtb	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	2b02      	cmp	r3, #2
 8006016:	d81e      	bhi.n	8006056 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	88db      	ldrh	r3, [r3, #6]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d004      	beq.n	800602a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f890 	bl	8006148 <USBD_CtlError>
        break;
 8006028:	e01a      	b.n	8006060 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f043 0202 	orr.w	r2, r3, #2
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	330c      	adds	r3, #12
 800604a:	2202      	movs	r2, #2
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f8eb 	bl	800622a <USBD_CtlSendData>
      break;
 8006054:	e004      	b.n	8006060 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f875 	bl	8006148 <USBD_CtlError>
      break;
 800605e:	bf00      	nop
  }
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	885b      	ldrh	r3, [r3, #2]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d106      	bne.n	8006088 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f92b 	bl	80062de <USBD_CtlSendStatus>
  }
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d80b      	bhi.n	80060c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	885b      	ldrh	r3, [r3, #2]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d10c      	bne.n	80060ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f910 	bl	80062de <USBD_CtlSendStatus>
      }
      break;
 80060be:	e004      	b.n	80060ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f840 	bl	8006148 <USBD_CtlError>
      break;
 80060c8:	e000      	b.n	80060cc <USBD_ClrFeature+0x3c>
      break;
 80060ca:	bf00      	nop
  }
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	781a      	ldrb	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3301      	adds	r3, #1
 80060ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7ff fabb 	bl	800567a <SWAPBYTE>
 8006104:	4603      	mov	r3, r0
 8006106:	461a      	mov	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3301      	adds	r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7ff faae 	bl	800567a <SWAPBYTE>
 800611e:	4603      	mov	r3, r0
 8006120:	461a      	mov	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3301      	adds	r3, #1
 800612a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff faa1 	bl	800567a <SWAPBYTE>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	80da      	strh	r2, [r3, #6]
}
 8006140:	bf00      	nop
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006152:	2180      	movs	r1, #128	; 0x80
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fec7 	bl	8006ee8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800615a:	2100      	movs	r1, #0
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fec3 	bl	8006ee8 <USBD_LL_StallEP>
}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b086      	sub	sp, #24
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d036      	beq.n	80061ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006184:	6938      	ldr	r0, [r7, #16]
 8006186:	f000 f836 	bl	80061f6 <USBD_GetLen>
 800618a:	4603      	mov	r3, r0
 800618c:	3301      	adds	r3, #1
 800618e:	b29b      	uxth	r3, r3
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006198:	7dfb      	ldrb	r3, [r7, #23]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4413      	add	r3, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	7812      	ldrb	r2, [r2, #0]
 80061a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
 80061a6:	3301      	adds	r3, #1
 80061a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	4413      	add	r3, r2
 80061b0:	2203      	movs	r2, #3
 80061b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	3301      	adds	r3, #1
 80061b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80061ba:	e013      	b.n	80061e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	7812      	ldrb	r2, [r2, #0]
 80061c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	3301      	adds	r3, #1
 80061cc:	613b      	str	r3, [r7, #16]
    idx++;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	3301      	adds	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	4413      	add	r3, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	3301      	adds	r3, #1
 80061e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e7      	bne.n	80061bc <USBD_GetString+0x52>
 80061ec:	e000      	b.n	80061f0 <USBD_GetString+0x86>
    return;
 80061ee:	bf00      	nop
  }
}
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006206:	e005      	b.n	8006214 <USBD_GetLen+0x1e>
  {
    len++;
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	3301      	adds	r3, #1
 800620c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	3301      	adds	r3, #1
 8006212:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f5      	bne.n	8006208 <USBD_GetLen+0x12>
  }

  return len;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2202      	movs	r2, #2
 800623a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	2100      	movs	r1, #0
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fed2 	bl	8006ffa <USBD_LL_Transmit>

  return USBD_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	2100      	movs	r1, #0
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fec1 	bl	8006ffa <USBD_LL_Transmit>

  return USBD_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2203      	movs	r2, #3
 8006292:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	2100      	movs	r1, #0
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fec5 	bl	800703c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	2100      	movs	r1, #0
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 feb4 	bl	800703c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2204      	movs	r2, #4
 80062ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80062ee:	2300      	movs	r3, #0
 80062f0:	2200      	movs	r2, #0
 80062f2:	2100      	movs	r1, #0
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fe80 	bl	8006ffa <USBD_LL_Transmit>

  return USBD_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2205      	movs	r2, #5
 8006310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006314:	2300      	movs	r3, #0
 8006316:	2200      	movs	r2, #0
 8006318:	2100      	movs	r1, #0
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fe8e 	bl	800703c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006330:	2200      	movs	r2, #0
 8006332:	4912      	ldr	r1, [pc, #72]	; (800637c <MX_USB_DEVICE_Init+0x50>)
 8006334:	4812      	ldr	r0, [pc, #72]	; (8006380 <MX_USB_DEVICE_Init+0x54>)
 8006336:	f7fe fe8f 	bl	8005058 <USBD_Init>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006340:	f7fa f9a6 	bl	8000690 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006344:	490f      	ldr	r1, [pc, #60]	; (8006384 <MX_USB_DEVICE_Init+0x58>)
 8006346:	480e      	ldr	r0, [pc, #56]	; (8006380 <MX_USB_DEVICE_Init+0x54>)
 8006348:	f7fe feb6 	bl	80050b8 <USBD_RegisterClass>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006352:	f7fa f99d 	bl	8000690 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006356:	490c      	ldr	r1, [pc, #48]	; (8006388 <MX_USB_DEVICE_Init+0x5c>)
 8006358:	4809      	ldr	r0, [pc, #36]	; (8006380 <MX_USB_DEVICE_Init+0x54>)
 800635a:	f7fe fdd7 	bl	8004f0c <USBD_CDC_RegisterInterface>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006364:	f7fa f994 	bl	8000690 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006368:	4805      	ldr	r0, [pc, #20]	; (8006380 <MX_USB_DEVICE_Init+0x54>)
 800636a:	f7fe fecc 	bl	8005106 <USBD_Start>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006374:	f7fa f98c 	bl	8000690 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006378:	bf00      	nop
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20000130 	.word	0x20000130
 8006380:	2000048c 	.word	0x2000048c
 8006384:	20000018 	.word	0x20000018
 8006388:	2000011c 	.word	0x2000011c

0800638c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006390:	2200      	movs	r2, #0
 8006392:	4905      	ldr	r1, [pc, #20]	; (80063a8 <CDC_Init_FS+0x1c>)
 8006394:	4805      	ldr	r0, [pc, #20]	; (80063ac <CDC_Init_FS+0x20>)
 8006396:	f7fe fdce 	bl	8004f36 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800639a:	4905      	ldr	r1, [pc, #20]	; (80063b0 <CDC_Init_FS+0x24>)
 800639c:	4803      	ldr	r0, [pc, #12]	; (80063ac <CDC_Init_FS+0x20>)
 800639e:	f7fe fde8 	bl	8004f72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80063a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20000f5c 	.word	0x20000f5c
 80063ac:	2000048c 	.word	0x2000048c
 80063b0:	2000075c 	.word	0x2000075c

080063b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80063b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	6039      	str	r1, [r7, #0]
 80063ce:	71fb      	strb	r3, [r7, #7]
 80063d0:	4613      	mov	r3, r2
 80063d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	2b23      	cmp	r3, #35	; 0x23
 80063d8:	d84a      	bhi.n	8006470 <CDC_Control_FS+0xac>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <CDC_Control_FS+0x1c>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	08006471 	.word	0x08006471
 80063e4:	08006471 	.word	0x08006471
 80063e8:	08006471 	.word	0x08006471
 80063ec:	08006471 	.word	0x08006471
 80063f0:	08006471 	.word	0x08006471
 80063f4:	08006471 	.word	0x08006471
 80063f8:	08006471 	.word	0x08006471
 80063fc:	08006471 	.word	0x08006471
 8006400:	08006471 	.word	0x08006471
 8006404:	08006471 	.word	0x08006471
 8006408:	08006471 	.word	0x08006471
 800640c:	08006471 	.word	0x08006471
 8006410:	08006471 	.word	0x08006471
 8006414:	08006471 	.word	0x08006471
 8006418:	08006471 	.word	0x08006471
 800641c:	08006471 	.word	0x08006471
 8006420:	08006471 	.word	0x08006471
 8006424:	08006471 	.word	0x08006471
 8006428:	08006471 	.word	0x08006471
 800642c:	08006471 	.word	0x08006471
 8006430:	08006471 	.word	0x08006471
 8006434:	08006471 	.word	0x08006471
 8006438:	08006471 	.word	0x08006471
 800643c:	08006471 	.word	0x08006471
 8006440:	08006471 	.word	0x08006471
 8006444:	08006471 	.word	0x08006471
 8006448:	08006471 	.word	0x08006471
 800644c:	08006471 	.word	0x08006471
 8006450:	08006471 	.word	0x08006471
 8006454:	08006471 	.word	0x08006471
 8006458:	08006471 	.word	0x08006471
 800645c:	08006471 	.word	0x08006471
 8006460:	08006471 	.word	0x08006471
 8006464:	08006471 	.word	0x08006471
 8006468:	08006471 	.word	0x08006471
 800646c:	08006471 	.word	0x08006471
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006470:	bf00      	nop
  }

  return (USBD_OK);
 8006472:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b09f      	sub	sp, #124	; 0x7c
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
	uint8_t	Tx_Buffer[64];
	uint8_t	Aux_Buffer[16];
	static	uint16_t	PacketCount = 0;
	static	uint8_t		DataType;
	static uint32_t		Flash_BaseAddr;
	int i = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	677b      	str	r3, [r7, #116]	; 0x74
	static uint32_t		flash_cont = 0;

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	48be      	ldr	r0, [pc, #760]	; (800678c <CDC_Receive_FS+0x30c>)
 8006492:	f7fe fd6e 	bl	8004f72 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006496:	48bd      	ldr	r0, [pc, #756]	; (800678c <CDC_Receive_FS+0x30c>)
 8006498:	f7fe fdb4 	bl	8005004 <USBD_CDC_ReceivePacket>

	if(xUSBDownloadVar.RxMode == true)
 800649c:	4bbc      	ldr	r3, [pc, #752]	; (8006790 <CDC_Receive_FS+0x310>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d05b      	beq.n	800655e <CDC_Receive_FS+0xde>
	{
		USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	48b8      	ldr	r0, [pc, #736]	; (800678c <CDC_Receive_FS+0x30c>)
 80064aa:	f7fe fd62 	bl	8004f72 <USBD_CDC_SetRxBuffer>
		USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80064ae:	48b7      	ldr	r0, [pc, #732]	; (800678c <CDC_Receive_FS+0x30c>)
 80064b0:	f7fe fda8 	bl	8005004 <USBD_CDC_ReceivePacket>
		//	flash_cont += PACKET_SIZE;
		//}
		//else
		//{
			//for(i = 0; i<(PACKET_SIZE-BUG_FACTOR); i++)
			for(i = 0; i<(*Len); i++)
 80064b4:	2300      	movs	r3, #0
 80064b6:	677b      	str	r3, [r7, #116]	; 0x74
 80064b8:	e019      	b.n	80064ee <CDC_Receive_FS+0x6e>
			{
				HAL_FLASH_Unlock();
 80064ba:	f7fa fba3 	bl	8000c04 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (flash_cont + i), Buf[i]);
 80064be:	4bb5      	ldr	r3, [pc, #724]	; (8006794 <CDC_Receive_FS+0x314>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064c4:	18d1      	adds	r1, r2, r3
 80064c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	4413      	add	r3, r2
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	2000      	movs	r0, #0
 80064d6:	f7fa fb41 	bl	8000b5c <HAL_FLASH_Program>
				HAL_FLASH_Lock();
 80064da:	f7fa fbb5 	bl	8000c48 <HAL_FLASH_Lock>
				Buf[i]=0;
 80064de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
			for(i = 0; i<(*Len); i++)
 80064e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ea:	3301      	adds	r3, #1
 80064ec:	677b      	str	r3, [r7, #116]	; 0x74
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d8e0      	bhi.n	80064ba <CDC_Receive_FS+0x3a>
			}
			//flash_cont += PACKET_SIZE-BUG_FACTOR;
			flash_cont += *Len;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	4ba5      	ldr	r3, [pc, #660]	; (8006794 <CDC_Receive_FS+0x314>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4413      	add	r3, r2
 8006502:	4aa4      	ldr	r2, [pc, #656]	; (8006794 <CDC_Receive_FS+0x314>)
 8006504:	6013      	str	r3, [r2, #0]
		//}

		PacketCount++;
 8006506:	4ba4      	ldr	r3, [pc, #656]	; (8006798 <CDC_Receive_FS+0x318>)
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	3301      	adds	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	4ba2      	ldr	r3, [pc, #648]	; (8006798 <CDC_Receive_FS+0x318>)
 8006510:	801a      	strh	r2, [r3, #0]
		//if(PacketCount >= ((xUSBDownloadVar.Size+(PACKET_SIZE-1))/PACKET_SIZE))
		if((flash_cont - Flash_BaseAddr) >= xUSBDownloadVar.Size)
 8006512:	4ba0      	ldr	r3, [pc, #640]	; (8006794 <CDC_Receive_FS+0x314>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4ba1      	ldr	r3, [pc, #644]	; (800679c <CDC_Receive_FS+0x31c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	4b9c      	ldr	r3, [pc, #624]	; (8006790 <CDC_Receive_FS+0x310>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	429a      	cmp	r2, r3
 8006522:	f0c0 8194 	bcc.w	800684e <CDC_Receive_FS+0x3ce>
		{
			xUSBDownloadVar.RxMode	=	false;
 8006526:	4b9a      	ldr	r3, [pc, #616]	; (8006790 <CDC_Receive_FS+0x310>)
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
			strncpy((char*)Tx_Buffer, "File Received\n", 15);
 800652c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006530:	4a9b      	ldr	r2, [pc, #620]	; (80067a0 <CDC_Receive_FS+0x320>)
 8006532:	461c      	mov	r4, r3
 8006534:	4613      	mov	r3, r2
 8006536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006538:	c407      	stmia	r4!, {r0, r1, r2}
 800653a:	8023      	strh	r3, [r4, #0]
 800653c:	3402      	adds	r4, #2
 800653e:	0c1b      	lsrs	r3, r3, #16
 8006540:	7023      	strb	r3, [r4, #0]
			CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 8006542:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006546:	4618      	mov	r0, r3
 8006548:	f7f9 fe3e 	bl	80001c8 <strlen>
 800654c:	4603      	mov	r3, r0
 800654e:	b29a      	uxth	r2, r3
 8006550:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f000 f98c 	bl	8006874 <CDC_Transmit_FS>
 800655c:	e177      	b.n	800684e <CDC_Receive_FS+0x3ce>
		}
	}
	else
	{
		switch(Buf[0])
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b53      	cmp	r3, #83	; 0x53
 8006564:	d008      	beq.n	8006578 <CDC_Receive_FS+0xf8>
 8006566:	2b53      	cmp	r3, #83	; 0x53
 8006568:	f300 8170 	bgt.w	800684c <CDC_Receive_FS+0x3cc>
 800656c:	2b44      	cmp	r3, #68	; 0x44
 800656e:	d04d      	beq.n	800660c <CDC_Receive_FS+0x18c>
 8006570:	2b49      	cmp	r3, #73	; 0x49
 8006572:	f000 80a9 	beq.w	80066c8 <CDC_Receive_FS+0x248>
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
				flash_cont = Flash_BaseAddr;
			break;

			default:
			break;
 8006576:	e169      	b.n	800684c <CDC_Receive_FS+0x3cc>
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	4884      	ldr	r0, [pc, #528]	; (800678c <CDC_Receive_FS+0x30c>)
 800657c:	f7fe fcf9 	bl	8004f72 <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006580:	4882      	ldr	r0, [pc, #520]	; (800678c <CDC_Receive_FS+0x30c>)
 8006582:	f7fe fd3f 	bl	8005004 <USBD_CDC_ReceivePacket>
				free(xUSBDownloadVar.DataBuffer);
 8006586:	4b82      	ldr	r3, [pc, #520]	; (8006790 <CDC_Receive_FS+0x310>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fe16 	bl	80071bc <free>
				xUSBDownloadVar.Size = atoi((char*)&Buf[POS_TRANSFER_SIZE]);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3302      	adds	r3, #2
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fdc9 	bl	800712c <atoi>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	4b7c      	ldr	r3, [pc, #496]	; (8006790 <CDC_Receive_FS+0x310>)
 80065a0:	605a      	str	r2, [r3, #4]
				strncpy((char*)Tx_Buffer, "Size Received for Data Transfer: ", 36);
 80065a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065a6:	2224      	movs	r2, #36	; 0x24
 80065a8:	497e      	ldr	r1, [pc, #504]	; (80067a4 <CDC_Receive_FS+0x324>)
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fe87 	bl	80072be <strncpy>
				itoa(xUSBDownloadVar.Size, (char*)Aux_Buffer,10);
 80065b0:	4b77      	ldr	r3, [pc, #476]	; (8006790 <CDC_Receive_FS+0x310>)
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065ba:	220a      	movs	r2, #10
 80065bc:	4619      	mov	r1, r3
 80065be:	f000 fdfb 	bl	80071b8 <itoa>
				strcat((char*)Tx_Buffer, (char*)Aux_Buffer);
 80065c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80065c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fe55 	bl	800727c <strcat>
				strcat((char*)Tx_Buffer, "\n\0");
 80065d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7f9 fdf6 	bl	80001c8 <strlen>
 80065dc:	4603      	mov	r3, r0
 80065de:	461a      	mov	r2, r3
 80065e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065e4:	4413      	add	r3, r2
 80065e6:	4970      	ldr	r1, [pc, #448]	; (80067a8 <CDC_Receive_FS+0x328>)
 80065e8:	461a      	mov	r2, r3
 80065ea:	460b      	mov	r3, r1
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	8013      	strh	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 80065f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7f9 fde7 	bl	80001c8 <strlen>
 80065fa:	4603      	mov	r3, r0
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006602:	4611      	mov	r1, r2
 8006604:	4618      	mov	r0, r3
 8006606:	f000 f935 	bl	8006874 <CDC_Transmit_FS>
			break;
 800660a:	e120      	b.n	800684e <CDC_Receive_FS+0x3ce>
				if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "dataset", 7) == 0)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3302      	adds	r3, #2
 8006610:	2207      	movs	r2, #7
 8006612:	4966      	ldr	r1, [pc, #408]	; (80067ac <CDC_Receive_FS+0x32c>)
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fe40 	bl	800729a <strncmp>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <CDC_Receive_FS+0x1b6>
					DataType = DATATYPE_DATASET;
 8006620:	4b63      	ldr	r3, [pc, #396]	; (80067b0 <CDC_Receive_FS+0x330>)
 8006622:	2200      	movs	r2, #0
 8006624:	701a      	strb	r2, [r3, #0]
					strncpy((char*)Tx_Buffer, "Data Type: dataset\n", 33);
 8006626:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800662a:	2221      	movs	r2, #33	; 0x21
 800662c:	4961      	ldr	r1, [pc, #388]	; (80067b4 <CDC_Receive_FS+0x334>)
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fe45 	bl	80072be <strncpy>
 8006634:	e033      	b.n	800669e <CDC_Receive_FS+0x21e>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "float model", 11) == 0)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3302      	adds	r3, #2
 800663a:	220b      	movs	r2, #11
 800663c:	495e      	ldr	r1, [pc, #376]	; (80067b8 <CDC_Receive_FS+0x338>)
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fe2b 	bl	800729a <strncmp>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <CDC_Receive_FS+0x1e0>
					DataType = DATATYPE_FLOATMODEL;
 800664a:	4b59      	ldr	r3, [pc, #356]	; (80067b0 <CDC_Receive_FS+0x330>)
 800664c:	2201      	movs	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]
					strncpy((char*)Tx_Buffer, "Data Type: float model\n", 33);
 8006650:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006654:	2221      	movs	r2, #33	; 0x21
 8006656:	4959      	ldr	r1, [pc, #356]	; (80067bc <CDC_Receive_FS+0x33c>)
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fe30 	bl	80072be <strncpy>
 800665e:	e01e      	b.n	800669e <CDC_Receive_FS+0x21e>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int model", 9) == 0)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3302      	adds	r3, #2
 8006664:	2209      	movs	r2, #9
 8006666:	4956      	ldr	r1, [pc, #344]	; (80067c0 <CDC_Receive_FS+0x340>)
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fe16 	bl	800729a <strncmp>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <CDC_Receive_FS+0x20a>
					DataType = DATATYPE_INTMODEL;
 8006674:	4b4e      	ldr	r3, [pc, #312]	; (80067b0 <CDC_Receive_FS+0x330>)
 8006676:	2202      	movs	r2, #2
 8006678:	701a      	strb	r2, [r3, #0]
					strncpy((char*)Tx_Buffer, "Data Type: int model\n", 33);
 800667a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800667e:	2221      	movs	r2, #33	; 0x21
 8006680:	4950      	ldr	r1, [pc, #320]	; (80067c4 <CDC_Receive_FS+0x344>)
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fe1b 	bl	80072be <strncpy>
 8006688:	e009      	b.n	800669e <CDC_Receive_FS+0x21e>
					DataType = 0xff;
 800668a:	4b49      	ldr	r3, [pc, #292]	; (80067b0 <CDC_Receive_FS+0x330>)
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	701a      	strb	r2, [r3, #0]
					strncpy((char*)Tx_Buffer, "Data Type: Error\n", 33);
 8006690:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006694:	2221      	movs	r2, #33	; 0x21
 8006696:	494c      	ldr	r1, [pc, #304]	; (80067c8 <CDC_Receive_FS+0x348>)
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fe10 	bl	80072be <strncpy>
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	483a      	ldr	r0, [pc, #232]	; (800678c <CDC_Receive_FS+0x30c>)
 80066a2:	f7fe fc66 	bl	8004f72 <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80066a6:	4839      	ldr	r0, [pc, #228]	; (800678c <CDC_Receive_FS+0x30c>)
 80066a8:	f7fe fcac 	bl	8005004 <USBD_CDC_ReceivePacket>
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 80066ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7f9 fd89 	bl	80001c8 <strlen>
 80066b6:	4603      	mov	r3, r0
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 f8d7 	bl	8006874 <CDC_Transmit_FS>
			break;
 80066c6:	e0c2      	b.n	800684e <CDC_Receive_FS+0x3ce>
				xFlash_Erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
				xFlash_Erase.NbSectors = 1;
 80066cc:	2301      	movs	r3, #1
 80066ce:	61bb      	str	r3, [r7, #24]
				xFlash_Erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80066d0:	2302      	movs	r3, #2
 80066d2:	61fb      	str	r3, [r7, #28]
				strncpy((char*)Tx_Buffer, "Erasing FLASH Sections...\n", 64);
 80066d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066d8:	2240      	movs	r2, #64	; 0x40
 80066da:	493c      	ldr	r1, [pc, #240]	; (80067cc <CDC_Receive_FS+0x34c>)
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fdee 	bl	80072be <strncpy>
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 80066e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7f9 fd6e 	bl	80001c8 <strlen>
 80066ec:	4603      	mov	r3, r0
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066f4:	4611      	mov	r1, r2
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f8bc 	bl	8006874 <CDC_Transmit_FS>
				HAL_FLASH_Unlock();
 80066fc:	f7fa fa82 	bl	8000c04 <HAL_FLASH_Unlock>
				switch(DataType)
 8006700:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <CDC_Receive_FS+0x330>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d067      	beq.n	80067d8 <CDC_Receive_FS+0x358>
 8006708:	2b02      	cmp	r3, #2
 800670a:	dc73      	bgt.n	80067f4 <CDC_Receive_FS+0x374>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <CDC_Receive_FS+0x296>
 8006710:	2b01      	cmp	r3, #1
 8006712:	d02c      	beq.n	800676e <CDC_Receive_FS+0x2ee>
 8006714:	e06e      	b.n	80067f4 <CDC_Receive_FS+0x374>
					xFlash_Erase.Sector = FLASH_SECTOR_6;
 8006716:	2306      	movs	r3, #6
 8006718:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 800671a:	f107 0220 	add.w	r2, r7, #32
 800671e:	f107 030c 	add.w	r3, r7, #12
 8006722:	4611      	mov	r1, r2
 8006724:	4618      	mov	r0, r3
 8006726:	f7fa fbcf 	bl	8000ec8 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_7;
 800672a:	2307      	movs	r3, #7
 800672c:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 800672e:	f107 0220 	add.w	r2, r7, #32
 8006732:	f107 030c 	add.w	r3, r7, #12
 8006736:	4611      	mov	r1, r2
 8006738:	4618      	mov	r0, r3
 800673a:	f7fa fbc5 	bl	8000ec8 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_8;
 800673e:	2308      	movs	r3, #8
 8006740:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 8006742:	f107 0220 	add.w	r2, r7, #32
 8006746:	f107 030c 	add.w	r3, r7, #12
 800674a:	4611      	mov	r1, r2
 800674c:	4618      	mov	r0, r3
 800674e:	f7fa fbbb 	bl	8000ec8 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_9;
 8006752:	2309      	movs	r3, #9
 8006754:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 8006756:	f107 0220 	add.w	r2, r7, #32
 800675a:	f107 030c 	add.w	r3, r7, #12
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f7fa fbb1 	bl	8000ec8 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_DATASET;
 8006766:	4b0d      	ldr	r3, [pc, #52]	; (800679c <CDC_Receive_FS+0x31c>)
 8006768:	4a19      	ldr	r2, [pc, #100]	; (80067d0 <CDC_Receive_FS+0x350>)
 800676a:	601a      	str	r2, [r3, #0]
					break;
 800676c:	e042      	b.n	80067f4 <CDC_Receive_FS+0x374>
					xFlash_Erase.Sector = FLASH_SECTOR_10;
 800676e:	230a      	movs	r3, #10
 8006770:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 8006772:	f107 0220 	add.w	r2, r7, #32
 8006776:	f107 030c 	add.w	r3, r7, #12
 800677a:	4611      	mov	r1, r2
 800677c:	4618      	mov	r0, r3
 800677e:	f7fa fba3 	bl	8000ec8 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_FLOATMODEL;
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <CDC_Receive_FS+0x31c>)
 8006784:	4a13      	ldr	r2, [pc, #76]	; (80067d4 <CDC_Receive_FS+0x354>)
 8006786:	601a      	str	r2, [r3, #0]
					break;
 8006788:	e034      	b.n	80067f4 <CDC_Receive_FS+0x374>
 800678a:	bf00      	nop
 800678c:	2000048c 	.word	0x2000048c
 8006790:	20000204 	.word	0x20000204
 8006794:	20000214 	.word	0x20000214
 8006798:	20000218 	.word	0x20000218
 800679c:	2000021c 	.word	0x2000021c
 80067a0:	080074b8 	.word	0x080074b8
 80067a4:	080074c8 	.word	0x080074c8
 80067a8:	080074ec 	.word	0x080074ec
 80067ac:	080074f0 	.word	0x080074f0
 80067b0:	20000220 	.word	0x20000220
 80067b4:	080074f8 	.word	0x080074f8
 80067b8:	0800750c 	.word	0x0800750c
 80067bc:	08007518 	.word	0x08007518
 80067c0:	08007530 	.word	0x08007530
 80067c4:	0800753c 	.word	0x0800753c
 80067c8:	08007554 	.word	0x08007554
 80067cc:	08007568 	.word	0x08007568
 80067d0:	08040000 	.word	0x08040000
 80067d4:	080c0000 	.word	0x080c0000
					xFlash_Erase.Sector = FLASH_SECTOR_11;
 80067d8:	230b      	movs	r3, #11
 80067da:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 80067dc:	f107 0220 	add.w	r2, r7, #32
 80067e0:	f107 030c 	add.w	r3, r7, #12
 80067e4:	4611      	mov	r1, r2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fa fb6e 	bl	8000ec8 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_INTMODEL;
 80067ec:	4b1a      	ldr	r3, [pc, #104]	; (8006858 <CDC_Receive_FS+0x3d8>)
 80067ee:	4a1b      	ldr	r2, [pc, #108]	; (800685c <CDC_Receive_FS+0x3dc>)
 80067f0:	601a      	str	r2, [r3, #0]
					break;
 80067f2:	bf00      	nop
				HAL_FLASH_Lock();
 80067f4:	f7fa fa28 	bl	8000c48 <HAL_FLASH_Lock>
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	4819      	ldr	r0, [pc, #100]	; (8006860 <CDC_Receive_FS+0x3e0>)
 80067fc:	f7fe fbb9 	bl	8004f72 <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006800:	4817      	ldr	r0, [pc, #92]	; (8006860 <CDC_Receive_FS+0x3e0>)
 8006802:	f7fe fbff 	bl	8005004 <USBD_CDC_ReceivePacket>
				PacketCount					=	0;
 8006806:	4b17      	ldr	r3, [pc, #92]	; (8006864 <CDC_Receive_FS+0x3e4>)
 8006808:	2200      	movs	r2, #0
 800680a:	801a      	strh	r2, [r3, #0]
				xUSBDownloadVar.RxMode		=	true;
 800680c:	4b16      	ldr	r3, [pc, #88]	; (8006868 <CDC_Receive_FS+0x3e8>)
 800680e:	2201      	movs	r2, #1
 8006810:	701a      	strb	r2, [r3, #0]
				xUSBDownloadVar.DataType   	= Buf[POS_TRANSFER_DATATYPE];
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	789a      	ldrb	r2, [r3, #2]
 8006816:	4b14      	ldr	r3, [pc, #80]	; (8006868 <CDC_Receive_FS+0x3e8>)
 8006818:	721a      	strb	r2, [r3, #8]
				strncpy((char*)Tx_Buffer, "FLASH Sections Erased, Startup OK\n", 64);
 800681a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800681e:	2240      	movs	r2, #64	; 0x40
 8006820:	4912      	ldr	r1, [pc, #72]	; (800686c <CDC_Receive_FS+0x3ec>)
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fd4b 	bl	80072be <strncpy>
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 8006828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800682c:	4618      	mov	r0, r3
 800682e:	f7f9 fccb 	bl	80001c8 <strlen>
 8006832:	4603      	mov	r3, r0
 8006834:	b29a      	uxth	r2, r3
 8006836:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800683a:	4611      	mov	r1, r2
 800683c:	4618      	mov	r0, r3
 800683e:	f000 f819 	bl	8006874 <CDC_Transmit_FS>
				flash_cont = Flash_BaseAddr;
 8006842:	4b05      	ldr	r3, [pc, #20]	; (8006858 <CDC_Receive_FS+0x3d8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a0a      	ldr	r2, [pc, #40]	; (8006870 <CDC_Receive_FS+0x3f0>)
 8006848:	6013      	str	r3, [r2, #0]
			break;
 800684a:	e000      	b.n	800684e <CDC_Receive_FS+0x3ce>
			break;
 800684c:	bf00      	nop
		}
	}
	return (USBD_OK);
 800684e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006850:	4618      	mov	r0, r3
 8006852:	377c      	adds	r7, #124	; 0x7c
 8006854:	46bd      	mov	sp, r7
 8006856:	bd90      	pop	{r4, r7, pc}
 8006858:	2000021c 	.word	0x2000021c
 800685c:	080e0000 	.word	0x080e0000
 8006860:	2000048c 	.word	0x2000048c
 8006864:	20000218 	.word	0x20000218
 8006868:	20000204 	.word	0x20000204
 800686c:	08007584 	.word	0x08007584
 8006870:	20000214 	.word	0x20000214

08006874 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006884:	4b0d      	ldr	r3, [pc, #52]	; (80068bc <CDC_Transmit_FS+0x48>)
 8006886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800688a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006896:	2301      	movs	r3, #1
 8006898:	e00b      	b.n	80068b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800689a:	887b      	ldrh	r3, [r7, #2]
 800689c:	461a      	mov	r2, r3
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	4806      	ldr	r0, [pc, #24]	; (80068bc <CDC_Transmit_FS+0x48>)
 80068a2:	f7fe fb48 	bl	8004f36 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80068a6:	4805      	ldr	r0, [pc, #20]	; (80068bc <CDC_Transmit_FS+0x48>)
 80068a8:	f7fe fb7c 	bl	8004fa4 <USBD_CDC_TransmitPacket>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	2000048c 	.word	0x2000048c

080068c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80068d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
	...

080068e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	4603      	mov	r3, r0
 80068ec:	6039      	str	r1, [r7, #0]
 80068ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2212      	movs	r2, #18
 80068f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80068f6:	4b03      	ldr	r3, [pc, #12]	; (8006904 <USBD_FS_DeviceDescriptor+0x20>)
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	2000014c 	.word	0x2000014c

08006908 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	6039      	str	r1, [r7, #0]
 8006912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2204      	movs	r2, #4
 8006918:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800691a:	4b03      	ldr	r3, [pc, #12]	; (8006928 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	20000160 	.word	0x20000160

0800692c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	6039      	str	r1, [r7, #0]
 8006936:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d105      	bne.n	800694a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	4907      	ldr	r1, [pc, #28]	; (8006960 <USBD_FS_ProductStrDescriptor+0x34>)
 8006942:	4808      	ldr	r0, [pc, #32]	; (8006964 <USBD_FS_ProductStrDescriptor+0x38>)
 8006944:	f7ff fc11 	bl	800616a <USBD_GetString>
 8006948:	e004      	b.n	8006954 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	4904      	ldr	r1, [pc, #16]	; (8006960 <USBD_FS_ProductStrDescriptor+0x34>)
 800694e:	4805      	ldr	r0, [pc, #20]	; (8006964 <USBD_FS_ProductStrDescriptor+0x38>)
 8006950:	f7ff fc0b 	bl	800616a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006954:	4b02      	ldr	r3, [pc, #8]	; (8006960 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	2000175c 	.word	0x2000175c
 8006964:	080075a8 	.word	0x080075a8

08006968 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	6039      	str	r1, [r7, #0]
 8006972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	4904      	ldr	r1, [pc, #16]	; (8006988 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006978:	4804      	ldr	r0, [pc, #16]	; (800698c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800697a:	f7ff fbf6 	bl	800616a <USBD_GetString>
  return USBD_StrDesc;
 800697e:	4b02      	ldr	r3, [pc, #8]	; (8006988 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	2000175c 	.word	0x2000175c
 800698c:	080075c0 	.word	0x080075c0

08006990 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	6039      	str	r1, [r7, #0]
 800699a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	221a      	movs	r2, #26
 80069a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80069a2:	f000 f843 	bl	8006a2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80069a6:	4b02      	ldr	r3, [pc, #8]	; (80069b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20000164 	.word	0x20000164

080069b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	6039      	str	r1, [r7, #0]
 80069be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d105      	bne.n	80069d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	4907      	ldr	r1, [pc, #28]	; (80069e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069ca:	4808      	ldr	r0, [pc, #32]	; (80069ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80069cc:	f7ff fbcd 	bl	800616a <USBD_GetString>
 80069d0:	e004      	b.n	80069dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	4904      	ldr	r1, [pc, #16]	; (80069e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069d6:	4805      	ldr	r0, [pc, #20]	; (80069ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80069d8:	f7ff fbc7 	bl	800616a <USBD_GetString>
  }
  return USBD_StrDesc;
 80069dc:	4b02      	ldr	r3, [pc, #8]	; (80069e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	2000175c 	.word	0x2000175c
 80069ec:	080075d4 	.word	0x080075d4

080069f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	4603      	mov	r3, r0
 80069f8:	6039      	str	r1, [r7, #0]
 80069fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d105      	bne.n	8006a0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	4907      	ldr	r1, [pc, #28]	; (8006a24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a06:	4808      	ldr	r0, [pc, #32]	; (8006a28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a08:	f7ff fbaf 	bl	800616a <USBD_GetString>
 8006a0c:	e004      	b.n	8006a18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	4904      	ldr	r1, [pc, #16]	; (8006a24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a12:	4805      	ldr	r0, [pc, #20]	; (8006a28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a14:	f7ff fba9 	bl	800616a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a18:	4b02      	ldr	r3, [pc, #8]	; (8006a24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	2000175c 	.word	0x2000175c
 8006a28:	080075e0 	.word	0x080075e0

08006a2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a32:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <Get_SerialNum+0x44>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a38:	4b0e      	ldr	r3, [pc, #56]	; (8006a74 <Get_SerialNum+0x48>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a3e:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <Get_SerialNum+0x4c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4413      	add	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a52:	2208      	movs	r2, #8
 8006a54:	4909      	ldr	r1, [pc, #36]	; (8006a7c <Get_SerialNum+0x50>)
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f814 	bl	8006a84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a5c:	2204      	movs	r2, #4
 8006a5e:	4908      	ldr	r1, [pc, #32]	; (8006a80 <Get_SerialNum+0x54>)
 8006a60:	68b8      	ldr	r0, [r7, #8]
 8006a62:	f000 f80f 	bl	8006a84 <IntToUnicode>
  }
}
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	1fff7a10 	.word	0x1fff7a10
 8006a74:	1fff7a14 	.word	0x1fff7a14
 8006a78:	1fff7a18 	.word	0x1fff7a18
 8006a7c:	20000166 	.word	0x20000166
 8006a80:	20000176 	.word	0x20000176

08006a84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a96:	2300      	movs	r3, #0
 8006a98:	75fb      	strb	r3, [r7, #23]
 8006a9a:	e027      	b.n	8006aec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	0f1b      	lsrs	r3, r3, #28
 8006aa0:	2b09      	cmp	r3, #9
 8006aa2:	d80b      	bhi.n	8006abc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	0f1b      	lsrs	r3, r3, #28
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	7dfb      	ldrb	r3, [r7, #23]
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	4619      	mov	r1, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	440b      	add	r3, r1
 8006ab4:	3230      	adds	r2, #48	; 0x30
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	e00a      	b.n	8006ad2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	0f1b      	lsrs	r3, r3, #28
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	440b      	add	r3, r1
 8006acc:	3237      	adds	r2, #55	; 0x37
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	3301      	adds	r3, #1
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	75fb      	strb	r3, [r7, #23]
 8006aec:	7dfa      	ldrb	r2, [r7, #23]
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d3d3      	bcc.n	8006a9c <IntToUnicode+0x18>
  }
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
	...

08006b04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08a      	sub	sp, #40	; 0x28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b0c:	f107 0314 	add.w	r3, r7, #20
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	609a      	str	r2, [r3, #8]
 8006b18:	60da      	str	r2, [r3, #12]
 8006b1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b24:	d13a      	bne.n	8006b9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b26:	2300      	movs	r3, #0
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	4b1e      	ldr	r3, [pc, #120]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	6313      	str	r3, [r2, #48]	; 0x30
 8006b36:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b50:	2303      	movs	r3, #3
 8006b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b54:	230a      	movs	r3, #10
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b58:	f107 0314 	add.w	r3, r7, #20
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4812      	ldr	r0, [pc, #72]	; (8006ba8 <HAL_PCD_MspInit+0xa4>)
 8006b60:	f7fa fad4 	bl	800110c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b64:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b68:	4a0e      	ldr	r2, [pc, #56]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6e:	6353      	str	r3, [r2, #52]	; 0x34
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b78:	4a0a      	ldr	r2, [pc, #40]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b7e:	6453      	str	r3, [r2, #68]	; 0x44
 8006b80:	4b08      	ldr	r3, [pc, #32]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2100      	movs	r1, #0
 8006b90:	2043      	movs	r0, #67	; 0x43
 8006b92:	f7f9 ffac 	bl	8000aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b96:	2043      	movs	r0, #67	; 0x43
 8006b98:	f7f9 ffc5 	bl	8000b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3728      	adds	r7, #40	; 0x28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	40020000 	.word	0x40020000

08006bac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fe faea 	bl	800519c <USBD_LL_SetupStage>
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	f7fe fb24 	bl	8005246 <USBD_LL_DataOutStage>
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b082      	sub	sp, #8
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006c18:	78fa      	ldrb	r2, [r7, #3]
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	1a9b      	subs	r3, r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	3348      	adds	r3, #72	; 0x48
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f7fe fb6d 	bl	800530c <USBD_LL_DataInStage>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe fc81 	bl	8005550 <USBD_LL_SOF>
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d102      	bne.n	8006c70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]
 8006c6e:	e008      	b.n	8006c82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d102      	bne.n	8006c7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	73fb      	strb	r3, [r7, #15]
 8006c7c:	e001      	b.n	8006c82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006c7e:	f7f9 fd07 	bl	8000690 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c88:	7bfa      	ldrb	r2, [r7, #15]
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fe fc21 	bl	80054d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fe fbcd 	bl	8005438 <USBD_LL_Reset>
}
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe fc1c 	bl	80054f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cce:	f043 0301 	orr.w	r3, r3, #1
 8006cd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <HAL_PCD_SuspendCallback+0x48>)
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	4a03      	ldr	r2, [pc, #12]	; (8006cf0 <HAL_PCD_SuspendCallback+0x48>)
 8006ce2:	f043 0306 	orr.w	r3, r3, #6
 8006ce6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	e000ed00 	.word	0xe000ed00

08006cf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fc0c 	bl	8005520 <USBD_LL_Resume>
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d22:	78fa      	ldrb	r2, [r7, #3]
 8006d24:	4611      	mov	r1, r2
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fc5a 	bl	80055e0 <USBD_LL_IsoOUTIncomplete>
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fc22 	bl	8005594 <USBD_LL_IsoINIncomplete>
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fc60 	bl	800562c <USBD_LL_DevConnected>
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe fc5d 	bl	8005642 <USBD_LL_DevDisconnected>
}
 8006d88:	bf00      	nop
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d13c      	bne.n	8006e1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006da0:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <USBD_LL_Init+0x94>)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006db0:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <USBD_LL_Init+0x94>)
 8006db2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006db6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006db8:	4b1a      	ldr	r3, [pc, #104]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dba:	2204      	movs	r2, #4
 8006dbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006dbe:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006dc4:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006dca:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dcc:	2202      	movs	r2, #2
 8006dce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006dd0:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006dd6:	4b13      	ldr	r3, [pc, #76]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006ddc:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006de2:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <USBD_LL_Init+0x94>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006de8:	4b0e      	ldr	r3, [pc, #56]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006dee:	480d      	ldr	r0, [pc, #52]	; (8006e24 <USBD_LL_Init+0x94>)
 8006df0:	f7fa fb28 	bl	8001444 <HAL_PCD_Init>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006dfa:	f7f9 fc49 	bl	8000690 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006dfe:	2180      	movs	r1, #128	; 0x80
 8006e00:	4808      	ldr	r0, [pc, #32]	; (8006e24 <USBD_LL_Init+0x94>)
 8006e02:	f7fb fc86 	bl	8002712 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006e06:	2240      	movs	r2, #64	; 0x40
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4806      	ldr	r0, [pc, #24]	; (8006e24 <USBD_LL_Init+0x94>)
 8006e0c:	f7fb fc3a 	bl	8002684 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006e10:	2280      	movs	r2, #128	; 0x80
 8006e12:	2101      	movs	r1, #1
 8006e14:	4803      	ldr	r0, [pc, #12]	; (8006e24 <USBD_LL_Init+0x94>)
 8006e16:	f7fb fc35 	bl	8002684 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	2000195c 	.word	0x2000195c

08006e28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fa fc1d 	bl	800167e <HAL_PCD_Start>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 f942 	bl	80070d4 <USBD_Get_USB_Status>
 8006e50:	4603      	mov	r3, r0
 8006e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	4608      	mov	r0, r1
 8006e68:	4611      	mov	r1, r2
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	70fb      	strb	r3, [r7, #3]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70bb      	strb	r3, [r7, #2]
 8006e74:	4613      	mov	r3, r2
 8006e76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006e86:	78bb      	ldrb	r3, [r7, #2]
 8006e88:	883a      	ldrh	r2, [r7, #0]
 8006e8a:	78f9      	ldrb	r1, [r7, #3]
 8006e8c:	f7fb f801 	bl	8001e92 <HAL_PCD_EP_Open>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f91c 	bl	80070d4 <USBD_Get_USB_Status>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fb f84a 	bl	8001f62 <HAL_PCD_EP_Close>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 f8fd 	bl	80070d4 <USBD_Get_USB_Status>
 8006eda:	4603      	mov	r3, r0
 8006edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fb f922 	bl	8002150 <HAL_PCD_EP_SetStall>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f8de 	bl	80070d4 <USBD_Get_USB_Status>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fb f967 	bl	8002218 <HAL_PCD_EP_ClrStall>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 f8bf 	bl	80070d4 <USBD_Get_USB_Status>
 8006f56:	4603      	mov	r3, r0
 8006f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	da0b      	bge.n	8006f98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	1a9b      	subs	r3, r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	333e      	adds	r3, #62	; 0x3e
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	e00b      	b.n	8006fb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f9e:	68f9      	ldr	r1, [r7, #12]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006fae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fd6:	78fa      	ldrb	r2, [r7, #3]
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fa ff34 	bl	8001e48 <HAL_PCD_SetAddress>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f874 	bl	80070d4 <USBD_Get_USB_Status>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b086      	sub	sp, #24
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	460b      	mov	r3, r1
 8007008:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007018:	7af9      	ldrb	r1, [r7, #11]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	f7fb f84d 	bl	80020bc <HAL_PCD_EP_Transmit>
 8007022:	4603      	mov	r3, r0
 8007024:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 f853 	bl	80070d4 <USBD_Get_USB_Status>
 800702e:	4603      	mov	r3, r0
 8007030:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007032:	7dbb      	ldrb	r3, [r7, #22]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	607a      	str	r2, [r7, #4]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	460b      	mov	r3, r1
 800704a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800705a:	7af9      	ldrb	r1, [r7, #11]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	f7fa ffc9 	bl	8001ff6 <HAL_PCD_EP_Receive>
 8007064:	4603      	mov	r3, r0
 8007066:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 f832 	bl	80070d4 <USBD_Get_USB_Status>
 8007070:	4603      	mov	r3, r0
 8007072:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007074:	7dbb      	ldrb	r3, [r7, #22]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	460b      	mov	r3, r1
 8007088:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007090:	78fa      	ldrb	r2, [r7, #3]
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f7fa fff9 	bl	800208c <HAL_PCD_EP_GetRxCount>
 800709a:	4603      	mov	r3, r0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80070ac:	4b03      	ldr	r3, [pc, #12]	; (80070bc <USBD_static_malloc+0x18>)
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20000224 	.word	0x20000224

080070c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]

}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d817      	bhi.n	8007118 <USBD_Get_USB_Status+0x44>
 80070e8:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <USBD_Get_USB_Status+0x1c>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007101 	.word	0x08007101
 80070f4:	08007107 	.word	0x08007107
 80070f8:	0800710d 	.word	0x0800710d
 80070fc:	08007113 	.word	0x08007113
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]
    break;
 8007104:	e00b      	b.n	800711e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007106:	2303      	movs	r3, #3
 8007108:	73fb      	strb	r3, [r7, #15]
    break;
 800710a:	e008      	b.n	800711e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800710c:	2301      	movs	r3, #1
 800710e:	73fb      	strb	r3, [r7, #15]
    break;
 8007110:	e005      	b.n	800711e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007112:	2303      	movs	r3, #3
 8007114:	73fb      	strb	r3, [r7, #15]
    break;
 8007116:	e002      	b.n	800711e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007118:	2303      	movs	r3, #3
 800711a:	73fb      	strb	r3, [r7, #15]
    break;
 800711c:	bf00      	nop
  }
  return usb_status;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <atoi>:
 800712c:	220a      	movs	r2, #10
 800712e:	2100      	movs	r1, #0
 8007130:	f000 b95c 	b.w	80073ec <strtol>

08007134 <__errno>:
 8007134:	4b01      	ldr	r3, [pc, #4]	; (800713c <__errno+0x8>)
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	20000180 	.word	0x20000180

08007140 <__libc_init_array>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	4d0d      	ldr	r5, [pc, #52]	; (8007178 <__libc_init_array+0x38>)
 8007144:	4c0d      	ldr	r4, [pc, #52]	; (800717c <__libc_init_array+0x3c>)
 8007146:	1b64      	subs	r4, r4, r5
 8007148:	10a4      	asrs	r4, r4, #2
 800714a:	2600      	movs	r6, #0
 800714c:	42a6      	cmp	r6, r4
 800714e:	d109      	bne.n	8007164 <__libc_init_array+0x24>
 8007150:	4d0b      	ldr	r5, [pc, #44]	; (8007180 <__libc_init_array+0x40>)
 8007152:	4c0c      	ldr	r4, [pc, #48]	; (8007184 <__libc_init_array+0x44>)
 8007154:	f000 f9a4 	bl	80074a0 <_init>
 8007158:	1b64      	subs	r4, r4, r5
 800715a:	10a4      	asrs	r4, r4, #2
 800715c:	2600      	movs	r6, #0
 800715e:	42a6      	cmp	r6, r4
 8007160:	d105      	bne.n	800716e <__libc_init_array+0x2e>
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	f855 3b04 	ldr.w	r3, [r5], #4
 8007168:	4798      	blx	r3
 800716a:	3601      	adds	r6, #1
 800716c:	e7ee      	b.n	800714c <__libc_init_array+0xc>
 800716e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007172:	4798      	blx	r3
 8007174:	3601      	adds	r6, #1
 8007176:	e7f2      	b.n	800715e <__libc_init_array+0x1e>
 8007178:	08007730 	.word	0x08007730
 800717c:	08007730 	.word	0x08007730
 8007180:	08007730 	.word	0x08007730
 8007184:	08007734 	.word	0x08007734

08007188 <__itoa>:
 8007188:	1e93      	subs	r3, r2, #2
 800718a:	2b22      	cmp	r3, #34	; 0x22
 800718c:	b510      	push	{r4, lr}
 800718e:	460c      	mov	r4, r1
 8007190:	d904      	bls.n	800719c <__itoa+0x14>
 8007192:	2300      	movs	r3, #0
 8007194:	700b      	strb	r3, [r1, #0]
 8007196:	461c      	mov	r4, r3
 8007198:	4620      	mov	r0, r4
 800719a:	bd10      	pop	{r4, pc}
 800719c:	2a0a      	cmp	r2, #10
 800719e:	d109      	bne.n	80071b4 <__itoa+0x2c>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	da07      	bge.n	80071b4 <__itoa+0x2c>
 80071a4:	232d      	movs	r3, #45	; 0x2d
 80071a6:	700b      	strb	r3, [r1, #0]
 80071a8:	4240      	negs	r0, r0
 80071aa:	2101      	movs	r1, #1
 80071ac:	4421      	add	r1, r4
 80071ae:	f000 f927 	bl	8007400 <__utoa>
 80071b2:	e7f1      	b.n	8007198 <__itoa+0x10>
 80071b4:	2100      	movs	r1, #0
 80071b6:	e7f9      	b.n	80071ac <__itoa+0x24>

080071b8 <itoa>:
 80071b8:	f7ff bfe6 	b.w	8007188 <__itoa>

080071bc <free>:
 80071bc:	4b02      	ldr	r3, [pc, #8]	; (80071c8 <free+0xc>)
 80071be:	4601      	mov	r1, r0
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	f000 b80b 	b.w	80071dc <_free_r>
 80071c6:	bf00      	nop
 80071c8:	20000180 	.word	0x20000180

080071cc <memset>:
 80071cc:	4402      	add	r2, r0
 80071ce:	4603      	mov	r3, r0
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d100      	bne.n	80071d6 <memset+0xa>
 80071d4:	4770      	bx	lr
 80071d6:	f803 1b01 	strb.w	r1, [r3], #1
 80071da:	e7f9      	b.n	80071d0 <memset+0x4>

080071dc <_free_r>:
 80071dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071de:	2900      	cmp	r1, #0
 80071e0:	d048      	beq.n	8007274 <_free_r+0x98>
 80071e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e6:	9001      	str	r0, [sp, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f1a1 0404 	sub.w	r4, r1, #4
 80071ee:	bfb8      	it	lt
 80071f0:	18e4      	addlt	r4, r4, r3
 80071f2:	f000 f947 	bl	8007484 <__malloc_lock>
 80071f6:	4a20      	ldr	r2, [pc, #128]	; (8007278 <_free_r+0x9c>)
 80071f8:	9801      	ldr	r0, [sp, #4]
 80071fa:	6813      	ldr	r3, [r2, #0]
 80071fc:	4615      	mov	r5, r2
 80071fe:	b933      	cbnz	r3, 800720e <_free_r+0x32>
 8007200:	6063      	str	r3, [r4, #4]
 8007202:	6014      	str	r4, [r2, #0]
 8007204:	b003      	add	sp, #12
 8007206:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800720a:	f000 b941 	b.w	8007490 <__malloc_unlock>
 800720e:	42a3      	cmp	r3, r4
 8007210:	d90b      	bls.n	800722a <_free_r+0x4e>
 8007212:	6821      	ldr	r1, [r4, #0]
 8007214:	1862      	adds	r2, r4, r1
 8007216:	4293      	cmp	r3, r2
 8007218:	bf04      	itt	eq
 800721a:	681a      	ldreq	r2, [r3, #0]
 800721c:	685b      	ldreq	r3, [r3, #4]
 800721e:	6063      	str	r3, [r4, #4]
 8007220:	bf04      	itt	eq
 8007222:	1852      	addeq	r2, r2, r1
 8007224:	6022      	streq	r2, [r4, #0]
 8007226:	602c      	str	r4, [r5, #0]
 8007228:	e7ec      	b.n	8007204 <_free_r+0x28>
 800722a:	461a      	mov	r2, r3
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	b10b      	cbz	r3, 8007234 <_free_r+0x58>
 8007230:	42a3      	cmp	r3, r4
 8007232:	d9fa      	bls.n	800722a <_free_r+0x4e>
 8007234:	6811      	ldr	r1, [r2, #0]
 8007236:	1855      	adds	r5, r2, r1
 8007238:	42a5      	cmp	r5, r4
 800723a:	d10b      	bne.n	8007254 <_free_r+0x78>
 800723c:	6824      	ldr	r4, [r4, #0]
 800723e:	4421      	add	r1, r4
 8007240:	1854      	adds	r4, r2, r1
 8007242:	42a3      	cmp	r3, r4
 8007244:	6011      	str	r1, [r2, #0]
 8007246:	d1dd      	bne.n	8007204 <_free_r+0x28>
 8007248:	681c      	ldr	r4, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	6053      	str	r3, [r2, #4]
 800724e:	4421      	add	r1, r4
 8007250:	6011      	str	r1, [r2, #0]
 8007252:	e7d7      	b.n	8007204 <_free_r+0x28>
 8007254:	d902      	bls.n	800725c <_free_r+0x80>
 8007256:	230c      	movs	r3, #12
 8007258:	6003      	str	r3, [r0, #0]
 800725a:	e7d3      	b.n	8007204 <_free_r+0x28>
 800725c:	6825      	ldr	r5, [r4, #0]
 800725e:	1961      	adds	r1, r4, r5
 8007260:	428b      	cmp	r3, r1
 8007262:	bf04      	itt	eq
 8007264:	6819      	ldreq	r1, [r3, #0]
 8007266:	685b      	ldreq	r3, [r3, #4]
 8007268:	6063      	str	r3, [r4, #4]
 800726a:	bf04      	itt	eq
 800726c:	1949      	addeq	r1, r1, r5
 800726e:	6021      	streq	r1, [r4, #0]
 8007270:	6054      	str	r4, [r2, #4]
 8007272:	e7c7      	b.n	8007204 <_free_r+0x28>
 8007274:	b003      	add	sp, #12
 8007276:	bd30      	pop	{r4, r5, pc}
 8007278:	20000444 	.word	0x20000444

0800727c <strcat>:
 800727c:	b510      	push	{r4, lr}
 800727e:	4602      	mov	r2, r0
 8007280:	7814      	ldrb	r4, [r2, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	3201      	adds	r2, #1
 8007286:	2c00      	cmp	r4, #0
 8007288:	d1fa      	bne.n	8007280 <strcat+0x4>
 800728a:	3b01      	subs	r3, #1
 800728c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007290:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007294:	2a00      	cmp	r2, #0
 8007296:	d1f9      	bne.n	800728c <strcat+0x10>
 8007298:	bd10      	pop	{r4, pc}

0800729a <strncmp>:
 800729a:	b510      	push	{r4, lr}
 800729c:	b16a      	cbz	r2, 80072ba <strncmp+0x20>
 800729e:	3901      	subs	r1, #1
 80072a0:	1884      	adds	r4, r0, r2
 80072a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80072a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d103      	bne.n	80072b6 <strncmp+0x1c>
 80072ae:	42a0      	cmp	r0, r4
 80072b0:	d001      	beq.n	80072b6 <strncmp+0x1c>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1f5      	bne.n	80072a2 <strncmp+0x8>
 80072b6:	1a98      	subs	r0, r3, r2
 80072b8:	bd10      	pop	{r4, pc}
 80072ba:	4610      	mov	r0, r2
 80072bc:	e7fc      	b.n	80072b8 <strncmp+0x1e>

080072be <strncpy>:
 80072be:	b510      	push	{r4, lr}
 80072c0:	3901      	subs	r1, #1
 80072c2:	4603      	mov	r3, r0
 80072c4:	b132      	cbz	r2, 80072d4 <strncpy+0x16>
 80072c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80072ca:	f803 4b01 	strb.w	r4, [r3], #1
 80072ce:	3a01      	subs	r2, #1
 80072d0:	2c00      	cmp	r4, #0
 80072d2:	d1f7      	bne.n	80072c4 <strncpy+0x6>
 80072d4:	441a      	add	r2, r3
 80072d6:	2100      	movs	r1, #0
 80072d8:	4293      	cmp	r3, r2
 80072da:	d100      	bne.n	80072de <strncpy+0x20>
 80072dc:	bd10      	pop	{r4, pc}
 80072de:	f803 1b01 	strb.w	r1, [r3], #1
 80072e2:	e7f9      	b.n	80072d8 <strncpy+0x1a>

080072e4 <_strtol_l.isra.0>:
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ea:	d001      	beq.n	80072f0 <_strtol_l.isra.0+0xc>
 80072ec:	2b24      	cmp	r3, #36	; 0x24
 80072ee:	d906      	bls.n	80072fe <_strtol_l.isra.0+0x1a>
 80072f0:	f7ff ff20 	bl	8007134 <__errno>
 80072f4:	2316      	movs	r3, #22
 80072f6:	6003      	str	r3, [r0, #0]
 80072f8:	2000      	movs	r0, #0
 80072fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fe:	4f3a      	ldr	r7, [pc, #232]	; (80073e8 <_strtol_l.isra.0+0x104>)
 8007300:	468e      	mov	lr, r1
 8007302:	4676      	mov	r6, lr
 8007304:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007308:	5de5      	ldrb	r5, [r4, r7]
 800730a:	f015 0508 	ands.w	r5, r5, #8
 800730e:	d1f8      	bne.n	8007302 <_strtol_l.isra.0+0x1e>
 8007310:	2c2d      	cmp	r4, #45	; 0x2d
 8007312:	d134      	bne.n	800737e <_strtol_l.isra.0+0x9a>
 8007314:	f89e 4000 	ldrb.w	r4, [lr]
 8007318:	f04f 0801 	mov.w	r8, #1
 800731c:	f106 0e02 	add.w	lr, r6, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d05c      	beq.n	80073de <_strtol_l.isra.0+0xfa>
 8007324:	2b10      	cmp	r3, #16
 8007326:	d10c      	bne.n	8007342 <_strtol_l.isra.0+0x5e>
 8007328:	2c30      	cmp	r4, #48	; 0x30
 800732a:	d10a      	bne.n	8007342 <_strtol_l.isra.0+0x5e>
 800732c:	f89e 4000 	ldrb.w	r4, [lr]
 8007330:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007334:	2c58      	cmp	r4, #88	; 0x58
 8007336:	d14d      	bne.n	80073d4 <_strtol_l.isra.0+0xf0>
 8007338:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800733c:	2310      	movs	r3, #16
 800733e:	f10e 0e02 	add.w	lr, lr, #2
 8007342:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007346:	f10c 3cff 	add.w	ip, ip, #4294967295
 800734a:	2600      	movs	r6, #0
 800734c:	fbbc f9f3 	udiv	r9, ip, r3
 8007350:	4635      	mov	r5, r6
 8007352:	fb03 ca19 	mls	sl, r3, r9, ip
 8007356:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800735a:	2f09      	cmp	r7, #9
 800735c:	d818      	bhi.n	8007390 <_strtol_l.isra.0+0xac>
 800735e:	463c      	mov	r4, r7
 8007360:	42a3      	cmp	r3, r4
 8007362:	dd24      	ble.n	80073ae <_strtol_l.isra.0+0xca>
 8007364:	2e00      	cmp	r6, #0
 8007366:	db1f      	blt.n	80073a8 <_strtol_l.isra.0+0xc4>
 8007368:	45a9      	cmp	r9, r5
 800736a:	d31d      	bcc.n	80073a8 <_strtol_l.isra.0+0xc4>
 800736c:	d101      	bne.n	8007372 <_strtol_l.isra.0+0x8e>
 800736e:	45a2      	cmp	sl, r4
 8007370:	db1a      	blt.n	80073a8 <_strtol_l.isra.0+0xc4>
 8007372:	fb05 4503 	mla	r5, r5, r3, r4
 8007376:	2601      	movs	r6, #1
 8007378:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800737c:	e7eb      	b.n	8007356 <_strtol_l.isra.0+0x72>
 800737e:	2c2b      	cmp	r4, #43	; 0x2b
 8007380:	bf08      	it	eq
 8007382:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007386:	46a8      	mov	r8, r5
 8007388:	bf08      	it	eq
 800738a:	f106 0e02 	addeq.w	lr, r6, #2
 800738e:	e7c7      	b.n	8007320 <_strtol_l.isra.0+0x3c>
 8007390:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007394:	2f19      	cmp	r7, #25
 8007396:	d801      	bhi.n	800739c <_strtol_l.isra.0+0xb8>
 8007398:	3c37      	subs	r4, #55	; 0x37
 800739a:	e7e1      	b.n	8007360 <_strtol_l.isra.0+0x7c>
 800739c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80073a0:	2f19      	cmp	r7, #25
 80073a2:	d804      	bhi.n	80073ae <_strtol_l.isra.0+0xca>
 80073a4:	3c57      	subs	r4, #87	; 0x57
 80073a6:	e7db      	b.n	8007360 <_strtol_l.isra.0+0x7c>
 80073a8:	f04f 36ff 	mov.w	r6, #4294967295
 80073ac:	e7e4      	b.n	8007378 <_strtol_l.isra.0+0x94>
 80073ae:	2e00      	cmp	r6, #0
 80073b0:	da05      	bge.n	80073be <_strtol_l.isra.0+0xda>
 80073b2:	2322      	movs	r3, #34	; 0x22
 80073b4:	6003      	str	r3, [r0, #0]
 80073b6:	4665      	mov	r5, ip
 80073b8:	b942      	cbnz	r2, 80073cc <_strtol_l.isra.0+0xe8>
 80073ba:	4628      	mov	r0, r5
 80073bc:	e79d      	b.n	80072fa <_strtol_l.isra.0+0x16>
 80073be:	f1b8 0f00 	cmp.w	r8, #0
 80073c2:	d000      	beq.n	80073c6 <_strtol_l.isra.0+0xe2>
 80073c4:	426d      	negs	r5, r5
 80073c6:	2a00      	cmp	r2, #0
 80073c8:	d0f7      	beq.n	80073ba <_strtol_l.isra.0+0xd6>
 80073ca:	b10e      	cbz	r6, 80073d0 <_strtol_l.isra.0+0xec>
 80073cc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80073d0:	6011      	str	r1, [r2, #0]
 80073d2:	e7f2      	b.n	80073ba <_strtol_l.isra.0+0xd6>
 80073d4:	2430      	movs	r4, #48	; 0x30
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1b3      	bne.n	8007342 <_strtol_l.isra.0+0x5e>
 80073da:	2308      	movs	r3, #8
 80073dc:	e7b1      	b.n	8007342 <_strtol_l.isra.0+0x5e>
 80073de:	2c30      	cmp	r4, #48	; 0x30
 80073e0:	d0a4      	beq.n	800732c <_strtol_l.isra.0+0x48>
 80073e2:	230a      	movs	r3, #10
 80073e4:	e7ad      	b.n	8007342 <_strtol_l.isra.0+0x5e>
 80073e6:	bf00      	nop
 80073e8:	08007626 	.word	0x08007626

080073ec <strtol>:
 80073ec:	4613      	mov	r3, r2
 80073ee:	460a      	mov	r2, r1
 80073f0:	4601      	mov	r1, r0
 80073f2:	4802      	ldr	r0, [pc, #8]	; (80073fc <strtol+0x10>)
 80073f4:	6800      	ldr	r0, [r0, #0]
 80073f6:	f7ff bf75 	b.w	80072e4 <_strtol_l.isra.0>
 80073fa:	bf00      	nop
 80073fc:	20000180 	.word	0x20000180

08007400 <__utoa>:
 8007400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007402:	4c1f      	ldr	r4, [pc, #124]	; (8007480 <__utoa+0x80>)
 8007404:	b08b      	sub	sp, #44	; 0x2c
 8007406:	4605      	mov	r5, r0
 8007408:	460b      	mov	r3, r1
 800740a:	466e      	mov	r6, sp
 800740c:	f104 0c20 	add.w	ip, r4, #32
 8007410:	6820      	ldr	r0, [r4, #0]
 8007412:	6861      	ldr	r1, [r4, #4]
 8007414:	4637      	mov	r7, r6
 8007416:	c703      	stmia	r7!, {r0, r1}
 8007418:	3408      	adds	r4, #8
 800741a:	4564      	cmp	r4, ip
 800741c:	463e      	mov	r6, r7
 800741e:	d1f7      	bne.n	8007410 <__utoa+0x10>
 8007420:	7921      	ldrb	r1, [r4, #4]
 8007422:	7139      	strb	r1, [r7, #4]
 8007424:	1e91      	subs	r1, r2, #2
 8007426:	6820      	ldr	r0, [r4, #0]
 8007428:	6038      	str	r0, [r7, #0]
 800742a:	2922      	cmp	r1, #34	; 0x22
 800742c:	f04f 0100 	mov.w	r1, #0
 8007430:	d904      	bls.n	800743c <__utoa+0x3c>
 8007432:	7019      	strb	r1, [r3, #0]
 8007434:	460b      	mov	r3, r1
 8007436:	4618      	mov	r0, r3
 8007438:	b00b      	add	sp, #44	; 0x2c
 800743a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800743c:	1e58      	subs	r0, r3, #1
 800743e:	4684      	mov	ip, r0
 8007440:	fbb5 f7f2 	udiv	r7, r5, r2
 8007444:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007448:	fb02 5617 	mls	r6, r2, r7, r5
 800744c:	4476      	add	r6, lr
 800744e:	460c      	mov	r4, r1
 8007450:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007454:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007458:	462e      	mov	r6, r5
 800745a:	42b2      	cmp	r2, r6
 800745c:	f101 0101 	add.w	r1, r1, #1
 8007460:	463d      	mov	r5, r7
 8007462:	d9ed      	bls.n	8007440 <__utoa+0x40>
 8007464:	2200      	movs	r2, #0
 8007466:	545a      	strb	r2, [r3, r1]
 8007468:	1919      	adds	r1, r3, r4
 800746a:	1aa5      	subs	r5, r4, r2
 800746c:	42aa      	cmp	r2, r5
 800746e:	dae2      	bge.n	8007436 <__utoa+0x36>
 8007470:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007474:	780e      	ldrb	r6, [r1, #0]
 8007476:	7006      	strb	r6, [r0, #0]
 8007478:	3201      	adds	r2, #1
 800747a:	f801 5901 	strb.w	r5, [r1], #-1
 800747e:	e7f4      	b.n	800746a <__utoa+0x6a>
 8007480:	08007600 	.word	0x08007600

08007484 <__malloc_lock>:
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <__malloc_lock+0x8>)
 8007486:	f000 b809 	b.w	800749c <__retarget_lock_acquire_recursive>
 800748a:	bf00      	nop
 800748c:	20001d68 	.word	0x20001d68

08007490 <__malloc_unlock>:
 8007490:	4801      	ldr	r0, [pc, #4]	; (8007498 <__malloc_unlock+0x8>)
 8007492:	f000 b804 	b.w	800749e <__retarget_lock_release_recursive>
 8007496:	bf00      	nop
 8007498:	20001d68 	.word	0x20001d68

0800749c <__retarget_lock_acquire_recursive>:
 800749c:	4770      	bx	lr

0800749e <__retarget_lock_release_recursive>:
 800749e:	4770      	bx	lr

080074a0 <_init>:
 80074a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a2:	bf00      	nop
 80074a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a6:	bc08      	pop	{r3}
 80074a8:	469e      	mov	lr, r3
 80074aa:	4770      	bx	lr

080074ac <_fini>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	bf00      	nop
 80074b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b2:	bc08      	pop	{r3}
 80074b4:	469e      	mov	lr, r3
 80074b6:	4770      	bx	lr
