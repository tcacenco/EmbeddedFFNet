
FeedForwardNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e80  08006e80  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006e80  08006e80  00016e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e88  08006e88  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b6c  200001e4  08007074  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d50  08007074  00021d50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b68  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c7  00000000  00000000  00034d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00038048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00038cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022546  00000000  00000000  000397b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b6e  00000000  00000000  0005bcf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca18f  00000000  00000000  0006c864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001369f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033dc  00000000  00000000  00136a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d8c 	.word	0x08006d8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08006d8c 	.word	0x08006d8c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/+

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9f6 	bl	80008c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f808 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8b0 	bl	8000640 <MX_GPIO_Init>
  MX_RTC_Init();
 80004e0:	f000 f888 	bl	80005f4 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f005 fca6 	bl	8005e34 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x18>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b098      	sub	sp, #96	; 0x60
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f006 fb24 	bl	8006b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 031c 	add.w	r3, r7, #28
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b32      	ldr	r3, [pc, #200]	; (80005ec <SystemClock_Config+0x100>)
 8000524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000526:	4a31      	ldr	r2, [pc, #196]	; (80005ec <SystemClock_Config+0x100>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	6413      	str	r3, [r2, #64]	; 0x40
 800052e:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <SystemClock_Config+0x100>)
 8000530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <SystemClock_Config+0x104>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a2b      	ldr	r2, [pc, #172]	; (80005f0 <SystemClock_Config+0x104>)
 8000544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000548:	6013      	str	r3, [r2, #0]
 800054a:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <SystemClock_Config+0x104>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000556:	2309      	movs	r3, #9
 8000558:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800056e:	2304      	movs	r3, #4
 8000570:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000572:	23a8      	movs	r3, #168	; 0xa8
 8000574:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fe66 	bl	8002254 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800058e:	f000 f87f 	bl	8000690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2302      	movs	r3, #2
 8000598:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2105      	movs	r1, #5
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 f8c7 	bl	8002744 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005bc:	f000 f868 	bl	8000690 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005c0:	2302      	movs	r3, #2
 80005c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fab4 	bl	8002b3c <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005da:	f000 f859 	bl	8000690 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005de:	f002 f997 	bl	8002910 <HAL_RCC_EnableCSS>
}
 80005e2:	bf00      	nop
 80005e4:	3760      	adds	r7, #96	; 0x60
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_RTC_Init+0x44>)
 80005fa:	4a10      	ldr	r2, [pc, #64]	; (800063c <MX_RTC_Init+0x48>)
 80005fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_RTC_Init+0x44>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_RTC_Init+0x44>)
 8000606:	227f      	movs	r2, #127	; 0x7f
 8000608:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_RTC_Init+0x44>)
 800060c:	22ff      	movs	r2, #255	; 0xff
 800060e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_RTC_Init+0x44>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MX_RTC_Init+0x44>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_RTC_Init+0x44>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_RTC_Init+0x44>)
 8000624:	f002 fb6c 	bl	8002d00 <HAL_RTC_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800062e:	f000 f82f 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000444 	.word	0x20000444
 800063c:	40002800 	.word	0x40002800

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_GPIO_Init+0x4c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <MX_GPIO_Init+0x4c>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_GPIO_Init+0x4c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_GPIO_Init+0x4c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <MX_GPIO_Init+0x4c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_GPIO_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <HAL_MspInit+0x4c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <HAL_MspInit+0x4c>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6453      	str	r3, [r2, #68]	; 0x44
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <HAL_MspInit+0x4c>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_MspInit+0x4c>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_MspInit+0x4c>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	6413      	str	r3, [r2, #64]	; 0x40
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_MspInit+0x4c>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <HAL_RTC_MspInit+0x24>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d102      	bne.n	8000708 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_RTC_MspInit+0x28>)
 8000704:	2201      	movs	r2, #1
 8000706:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40002800 	.word	0x40002800
 8000718:	42470e3c 	.word	0x42470e3c

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000720:	f002 f9f0 	bl	8002b04 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <HardFault_Handler+0x4>

0800072e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <MemManage_Handler+0x4>

08000734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <BusFault_Handler+0x4>

0800073a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <UsageFault_Handler+0x4>

08000740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076e:	f000 f8fb 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <OTG_FS_WKUP_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS wake-up interrupt through EXTI line 18.
  */
void OTG_FS_WKUP_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 0 */

  /* USER CODE END OTG_FS_WKUP_IRQn 0 */
  if ((&hpcd_USB_OTG_FS)->Init.low_power_enable) {
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <OTG_FS_WKUP_IRQHandler+0x40>)
 800077e:	6a1b      	ldr	r3, [r3, #32]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d007      	beq.n	8000794 <OTG_FS_WKUP_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <OTG_FS_WKUP_IRQHandler+0x44>)
 8000786:	691b      	ldr	r3, [r3, #16]
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <OTG_FS_WKUP_IRQHandler+0x44>)
 800078a:	f023 0306 	bic.w	r3, r3, #6
 800078e:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 8000790:	f7ff feac 	bl	80004ec <SystemClock_Config>
  }
  __HAL_PCD_UNGATE_PHYCLOCK(&hpcd_USB_OTG_FS);
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <OTG_FS_WKUP_IRQHandler+0x40>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a06      	ldr	r2, [pc, #24]	; (80007b8 <OTG_FS_WKUP_IRQHandler+0x40>)
 80007a0:	6812      	ldr	r2, [r2, #0]
 80007a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80007a6:	f023 0301 	bic.w	r3, r3, #1
 80007aa:	6013      	str	r3, [r2, #0]
  /* Clear EXTI pending bit */
  __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <OTG_FS_WKUP_IRQHandler+0x48>)
 80007ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007b2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 1 */

  /* USER CODE END OTG_FS_WKUP_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20001938 	.word	0x20001938
 80007bc:	e000ed00 	.word	0xe000ed00
 80007c0:	40013c00 	.word	0x40013c00

080007c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <OTG_FS_IRQHandler+0x10>)
 80007ca:	f000 fd0f 	bl	80011ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20001938 	.word	0x20001938

080007d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e0:	4a14      	ldr	r2, [pc, #80]	; (8000834 <_sbrk+0x5c>)
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <_sbrk+0x60>)
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <_sbrk+0x64>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <_sbrk+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	429a      	cmp	r2, r3
 8000806:	d207      	bcs.n	8000818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000808:	f006 f93c 	bl	8006a84 <__errno>
 800080c:	4603      	mov	r3, r0
 800080e:	220c      	movs	r2, #12
 8000810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	e009      	b.n	800082c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <_sbrk+0x64>)
 8000828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800082a:	68fb      	ldr	r3, [r7, #12]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20020000 	.word	0x20020000
 8000838:	00000400 	.word	0x00000400
 800083c:	20000200 	.word	0x20000200
 8000840:	20001d50 	.word	0x20001d50

08000844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <SystemInit+0x28>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084e:	4a07      	ldr	r2, [pc, #28]	; (800086c <SystemInit+0x28>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <SystemInit+0x28>)
 800085a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800085e:	609a      	str	r2, [r3, #8]
#endif
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000874:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000876:	e003      	b.n	8000880 <LoopCopyDataInit>

08000878 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800087a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800087c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800087e:	3104      	adds	r1, #4

08000880 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000884:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000886:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000888:	d3f6      	bcc.n	8000878 <CopyDataInit>
  ldr  r2, =_sbss
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800088c:	e002      	b.n	8000894 <LoopFillZerobss>

0800088e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800088e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000890:	f842 3b04 	str.w	r3, [r2], #4

08000894 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000896:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000898:	d3f9      	bcc.n	800088e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800089a:	f7ff ffd3 	bl	8000844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089e:	f006 f8f7 	bl	8006a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a2:	f7ff fe15 	bl	80004d0 <main>
  bx  lr    
 80008a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008ac:	08006e90 	.word	0x08006e90
  ldr  r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008b4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80008b8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80008bc:	20001d50 	.word	0x20001d50

080008c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_Init+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <HAL_Init+0x40>)
 80008ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_Init+0x40>)
 80008da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_Init+0x40>)
 80008e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f94f 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 f808 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f8:	f7ff fed2 	bl	80006a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023c00 	.word	0x40023c00

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x54>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_InitTick+0x58>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f967 	bl	8000bfa <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f92f 	bl	8000ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_InitTick+0x5c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000000 	.word	0x20000000
 8000960:	20000008 	.word	0x20000008
 8000964:	20000004 	.word	0x20000004

08000968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008
 800098c:	20000464 	.word	0x20000464

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000464 	.word	0x20000464

080009a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b0:	f7ff ffee 	bl	8000990 <HAL_GetTick>
 80009b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c0:	d005      	beq.n	80009ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_Delay+0x44>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ce:	bf00      	nop
 80009d0:	f7ff ffde 	bl	8000990 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8f7      	bhi.n	80009d0 <HAL_Delay+0x28>
  {
  }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <__NVIC_EnableIRQ+0x38>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff8e 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff29 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff3e 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff8e 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5d 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff31 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa2 	bl	8000b4c <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e16b      	b.n	8000f08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c30:	2201      	movs	r2, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 815a 	bne.w	8000f02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d005      	beq.n	8000c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d130      	bne.n	8000cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d017      	beq.n	8000d04 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d123      	bne.n	8000d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	08da      	lsrs	r2, r3, #3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	691a      	ldr	r2, [r3, #16]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	69b9      	ldr	r1, [r7, #24]
 8000d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0203 	and.w	r2, r3, #3
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80b4 	beq.w	8000f02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a5f      	ldr	r2, [pc, #380]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db6:	4a5b      	ldr	r2, [pc, #364]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a52      	ldr	r2, [pc, #328]	; (8000f28 <HAL_GPIO_Init+0x314>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d02b      	beq.n	8000e3a <HAL_GPIO_Init+0x226>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a51      	ldr	r2, [pc, #324]	; (8000f2c <HAL_GPIO_Init+0x318>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d025      	beq.n	8000e36 <HAL_GPIO_Init+0x222>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a50      	ldr	r2, [pc, #320]	; (8000f30 <HAL_GPIO_Init+0x31c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01f      	beq.n	8000e32 <HAL_GPIO_Init+0x21e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4f      	ldr	r2, [pc, #316]	; (8000f34 <HAL_GPIO_Init+0x320>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d019      	beq.n	8000e2e <HAL_GPIO_Init+0x21a>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4e      	ldr	r2, [pc, #312]	; (8000f38 <HAL_GPIO_Init+0x324>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0x216>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4d      	ldr	r2, [pc, #308]	; (8000f3c <HAL_GPIO_Init+0x328>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d00d      	beq.n	8000e26 <HAL_GPIO_Init+0x212>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4c      	ldr	r2, [pc, #304]	; (8000f40 <HAL_GPIO_Init+0x32c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d007      	beq.n	8000e22 <HAL_GPIO_Init+0x20e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4b      	ldr	r2, [pc, #300]	; (8000f44 <HAL_GPIO_Init+0x330>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_GPIO_Init+0x20a>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e00e      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e1e:	2308      	movs	r3, #8
 8000e20:	e00c      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e22:	2306      	movs	r3, #6
 8000e24:	e00a      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4c:	4935      	ldr	r1, [pc, #212]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e7e:	4a32      	ldr	r2, [pc, #200]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ea8:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	f67f ae90 	bls.w	8000c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40013800 	.word	0x40013800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40021400 	.word	0x40021400
 8000f40:	40021800 	.word	0x40021800
 8000f44:	40021c00 	.word	0x40021c00
 8000f48:	40013c00 	.word	0x40013c00

08000f4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	b08f      	sub	sp, #60	; 0x3c
 8000f50:	af0a      	add	r7, sp, #40	; 0x28
 8000f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e10f      	b.n	800117e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d106      	bne.n	8000f7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f005 fa4b 	bl	8006414 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2203      	movs	r2, #3
 8000f82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 f8a8 	bl	80030f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	687e      	ldr	r6, [r7, #4]
 8000faa:	466d      	mov	r5, sp
 8000fac:	f106 0410 	add.w	r4, r6, #16
 8000fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fc0:	1d33      	adds	r3, r6, #4
 8000fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f001 ff80 	bl	8002eca <USB_CoreInit>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0d0      	b.n	800117e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 f896 	bl	8003114 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e04a      	b.n	8001084 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	333d      	adds	r3, #61	; 0x3d
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	1a9b      	subs	r3, r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	333c      	adds	r3, #60	; 0x3c
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	b298      	uxth	r0, r3
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	1a9b      	subs	r3, r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	3342      	adds	r3, #66	; 0x42
 800102a:	4602      	mov	r2, r0
 800102c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	333f      	adds	r3, #63	; 0x3f
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	3344      	adds	r3, #68	; 0x44
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001056:	7bfa      	ldrb	r2, [r7, #15]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	1a9b      	subs	r3, r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	3348      	adds	r3, #72	; 0x48
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	3350      	adds	r3, #80	; 0x50
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	3301      	adds	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	d3af      	bcc.n	8000fee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e044      	b.n	800111e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	1a9b      	subs	r3, r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	d3b5      	bcc.n	8001094 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	687e      	ldr	r6, [r7, #4]
 8001130:	466d      	mov	r5, sp
 8001132:	f106 0410 	add.w	r4, r6, #16
 8001136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001142:	e885 0003 	stmia.w	r5, {r0, r1}
 8001146:	1d33      	adds	r3, r6, #4
 8001148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800114a:	6838      	ldr	r0, [r7, #0]
 800114c:	f002 f80c 	bl	8003168 <USB_DevInit>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2202      	movs	r2, #2
 800115a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00d      	b.n	800117e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f003 f854 	bl	8004224 <USB_DevDisconnect>

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001186 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800119a:	2b01      	cmp	r3, #1
 800119c:	d101      	bne.n	80011a2 <HAL_PCD_Start+0x1c>
 800119e:	2302      	movs	r3, #2
 80011a0:	e020      	b.n	80011e4 <HAL_PCD_Start+0x5e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d109      	bne.n	80011c6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d005      	beq.n	80011c6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 ff80 	bl	80030d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 f804 	bl	80041e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b08d      	sub	sp, #52	; 0x34
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f003 f8c2 	bl	800438c <USB_GetMode>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	f040 839d 	bne.w	800194a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f003 f826 	bl	8004266 <USB_ReadInterrupts>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8393 	beq.w	8001948 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f003 f81d 	bl	8004266 <USB_ReadInterrupts>
 800122c:	4603      	mov	r3, r0
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b02      	cmp	r3, #2
 8001234:	d107      	bne.n	8001246 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	695a      	ldr	r2, [r3, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f002 0202 	and.w	r2, r2, #2
 8001244:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f003 f80b 	bl	8004266 <USB_ReadInterrupts>
 8001250:	4603      	mov	r3, r0
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b10      	cmp	r3, #16
 8001258:	d161      	bne.n	800131e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	699a      	ldr	r2, [r3, #24]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0210 	bic.w	r2, r2, #16
 8001268:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	f003 020f 	and.w	r2, r3, #15
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	1a9b      	subs	r3, r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	3304      	adds	r3, #4
 8001288:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	0c5b      	lsrs	r3, r3, #17
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	2b02      	cmp	r3, #2
 8001294:	d124      	bne.n	80012e0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d035      	beq.n	800130e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	6a38      	ldr	r0, [r7, #32]
 80012b6:	f002 fe71 	bl	8003f9c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c6:	441a      	add	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d8:	441a      	add	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	619a      	str	r2, [r3, #24]
 80012de:	e016      	b.n	800130e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	0c5b      	lsrs	r3, r3, #17
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	2b06      	cmp	r3, #6
 80012ea:	d110      	bne.n	800130e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012f2:	2208      	movs	r2, #8
 80012f4:	4619      	mov	r1, r3
 80012f6:	6a38      	ldr	r0, [r7, #32]
 80012f8:	f002 fe50 	bl	8003f9c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	091b      	lsrs	r3, r3, #4
 8001304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001308:	441a      	add	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0210 	orr.w	r2, r2, #16
 800131c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f002 ff9f 	bl	8004266 <USB_ReadInterrupts>
 8001328:	4603      	mov	r3, r0
 800132a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800132e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001332:	d16e      	bne.n	8001412 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f002 ffa5 	bl	800428c <USB_ReadDevAllOutEpInterrupt>
 8001342:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001344:	e062      	b.n	800140c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d057      	beq.n	8001400 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f002 ffca 	bl	80042f4 <USB_ReadDevOutEPInterrupt>
 8001360:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00c      	beq.n	8001386 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	015a      	lsls	r2, r3, #5
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	4413      	add	r3, r2
 8001374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001378:	461a      	mov	r2, r3
 800137a:	2301      	movs	r3, #1
 800137c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800137e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fdb1 	bl	8001ee8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00c      	beq.n	80013aa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	015a      	lsls	r2, r3, #5
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	4413      	add	r3, r2
 8001398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800139c:	461a      	mov	r2, r3
 800139e:	2308      	movs	r3, #8
 80013a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 feab 	bl	8002100 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	015a      	lsls	r2, r3, #5
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	4413      	add	r3, r2
 80013bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013c0:	461a      	mov	r2, r3
 80013c2:	2310      	movs	r3, #16
 80013c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	015a      	lsls	r2, r3, #5
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	4413      	add	r3, r2
 80013d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013dc:	461a      	mov	r2, r3
 80013de:	2320      	movs	r3, #32
 80013e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d009      	beq.n	8001400 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	015a      	lsls	r2, r3, #5
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	4413      	add	r3, r2
 80013f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f8:	461a      	mov	r2, r3
 80013fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	3301      	adds	r3, #1
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	2b00      	cmp	r3, #0
 8001410:	d199      	bne.n	8001346 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f002 ff25 	bl	8004266 <USB_ReadInterrupts>
 800141c:	4603      	mov	r3, r0
 800141e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001426:	f040 80c0 	bne.w	80015aa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f002 ff46 	bl	80042c0 <USB_ReadDevAllInEpInterrupt>
 8001434:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800143a:	e0b2      	b.n	80015a2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80a7 	beq.w	8001596 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f002 ff6c 	bl	8004330 <USB_ReadDevInEPInterrupt>
 8001458:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d057      	beq.n	8001514 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	2201      	movs	r2, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	69f9      	ldr	r1, [r7, #28]
 8001480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001484:	4013      	ands	r3, r2
 8001486:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	015a      	lsls	r2, r3, #5
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	4413      	add	r3, r2
 8001490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001494:	461a      	mov	r2, r3
 8001496:	2301      	movs	r3, #1
 8001498:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d132      	bne.n	8001508 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	3348      	adds	r3, #72	; 0x48
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4403      	add	r3, r0
 80014c2:	3344      	adds	r3, #68	; 0x44
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4419      	add	r1, r3
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4403      	add	r3, r0
 80014d6:	3348      	adds	r3, #72	; 0x48
 80014d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d113      	bne.n	8001508 <HAL_PCD_IRQHandler+0x31c>
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	3350      	adds	r3, #80	; 0x50
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d108      	bne.n	8001508 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001500:	461a      	mov	r2, r3
 8001502:	2101      	movs	r1, #1
 8001504:	f002 ff74 	bl	80043f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f005 f825 	bl	800655e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800152a:	461a      	mov	r2, r3
 800152c:	2308      	movs	r3, #8
 800152e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	015a      	lsls	r2, r3, #5
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	4413      	add	r3, r2
 8001542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001546:	461a      	mov	r2, r3
 8001548:	2310      	movs	r3, #16
 800154a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001552:	2b00      	cmp	r3, #0
 8001554:	d008      	beq.n	8001568 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	015a      	lsls	r2, r3, #5
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	4413      	add	r3, r2
 800155e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001562:	461a      	mov	r2, r3
 8001564:	2340      	movs	r3, #64	; 0x40
 8001566:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d008      	beq.n	8001584 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	015a      	lsls	r2, r3, #5
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	4413      	add	r3, r2
 800157a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800157e:	461a      	mov	r2, r3
 8001580:	2302      	movs	r3, #2
 8001582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800158e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 fc1b 	bl	8001dcc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	3301      	adds	r3, #1
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159e:	085b      	lsrs	r3, r3, #1
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f47f af49 	bne.w	800143c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fe59 	bl	8004266 <USB_ReadInterrupts>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015be:	d122      	bne.n	8001606 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d108      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015e6:	2100      	movs	r1, #0
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fe27 	bl	800223c <HAL_PCDEx_LPM_Callback>
 80015ee:	e002      	b.n	80015f6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f005 f82b 	bl	800664c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f002 fe2b 	bl	8004266 <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800161a:	d112      	bne.n	8001642 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f004 ffe7 	bl	8006600 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001640:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fe0d 	bl	8004266 <USB_ReadInterrupts>
 800164c:	4603      	mov	r3, r0
 800164e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001656:	f040 80c7 	bne.w	80017e8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2110      	movs	r1, #16
 8001674:	4618      	mov	r0, r3
 8001676:	f001 fedb 	bl	8003430 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800167e:	e056      	b.n	800172e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168c:	461a      	mov	r2, r3
 800168e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001692:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	015a      	lsls	r2, r3, #5
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	4413      	add	r3, r2
 800169c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a4:	0151      	lsls	r1, r2, #5
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	440a      	add	r2, r1
 80016aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016b2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c4:	0151      	lsls	r1, r2, #5
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	440a      	add	r2, r1
 80016ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e0:	461a      	mov	r2, r3
 80016e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ea:	015a      	lsls	r2, r3, #5
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f8:	0151      	lsls	r1, r2, #5
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	440a      	add	r2, r1
 80016fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001706:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001718:	0151      	lsls	r1, r2, #5
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	440a      	add	r2, r1
 800171e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001722:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001726:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172a:	3301      	adds	r3, #1
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001734:	429a      	cmp	r2, r3
 8001736:	d3a3      	bcc.n	8001680 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001746:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800174a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	2b00      	cmp	r3, #0
 8001752:	d016      	beq.n	8001782 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001764:	f043 030b 	orr.w	r3, r3, #11
 8001768:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800177a:	f043 030b 	orr.w	r3, r3, #11
 800177e:	6453      	str	r3, [r2, #68]	; 0x44
 8001780:	e015      	b.n	80017ae <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001790:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001794:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001798:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a8:	f043 030b 	orr.w	r3, r3, #11
 80017ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017d2:	461a      	mov	r2, r3
 80017d4:	f002 fe0c 	bl	80043f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fd3a 	bl	8004266 <USB_ReadInterrupts>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017fc:	d124      	bne.n	8001848 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fdd0 	bl	80043a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f001 fe70 	bl	80034f2 <USB_GetDevSpeed>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681c      	ldr	r4, [r3, #0]
 800181e:	f001 f965 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8001822:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	4620      	mov	r0, r4
 800182e:	f001 fbad 	bl	8002f8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f004 febb 	bl	80065ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001846:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fd0a 	bl	8004266 <USB_ReadInterrupts>
 8001852:	4603      	mov	r3, r0
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b08      	cmp	r3, #8
 800185a:	d10a      	bne.n	8001872 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f004 fe98 	bl	8006592 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f002 0208 	and.w	r2, r2, #8
 8001870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fcf5 	bl	8004266 <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001886:	d10f      	bne.n	80018a8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f004 fefa 	bl	800668c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fcda 	bl	8004266 <USB_ReadInterrupts>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018bc:	d10f      	bne.n	80018de <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f004 fecd 	bl	8006668 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80018dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fcbf 	bl	8004266 <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f2:	d10a      	bne.n	800190a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f004 fedb 	bl	80066b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f002 fca9 	bl	8004266 <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b04      	cmp	r3, #4
 800191c:	d115      	bne.n	800194a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f004 fecb 	bl	80066cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	e000      	b.n	800194a <HAL_PCD_IRQHandler+0x75e>
      return;
 8001948:	bf00      	nop
    }
  }
}
 800194a:	3734      	adds	r7, #52	; 0x34
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}

08001950 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_PCD_SetAddress+0x1a>
 8001966:	2302      	movs	r3, #2
 8001968:	e013      	b.n	8001992 <HAL_PCD_SetAddress+0x42>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fc07 	bl	8004196 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	4608      	mov	r0, r1
 80019a4:	4611      	mov	r1, r2
 80019a6:	461a      	mov	r2, r3
 80019a8:	4603      	mov	r3, r0
 80019aa:	70fb      	strb	r3, [r7, #3]
 80019ac:	460b      	mov	r3, r1
 80019ae:	803b      	strh	r3, [r7, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	da0f      	bge.n	80019e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	f003 020f 	and.w	r2, r3, #15
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	3338      	adds	r3, #56	; 0x38
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	3304      	adds	r3, #4
 80019d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2201      	movs	r2, #1
 80019dc:	705a      	strb	r2, [r3, #1]
 80019de:	e00f      	b.n	8001a00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	f003 020f 	and.w	r2, r3, #15
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	3304      	adds	r3, #4
 80019f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a0c:	883a      	ldrh	r2, [r7, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	78ba      	ldrb	r2, [r7, #2]
 8001a16:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	785b      	ldrb	r3, [r3, #1]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a2a:	78bb      	ldrb	r3, [r7, #2]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d102      	bne.n	8001a36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_PCD_EP_Open+0xaa>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e00e      	b.n	8001a62 <HAL_PCD_EP_Open+0xc8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68f9      	ldr	r1, [r7, #12]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 fd72 	bl	800353c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a60:	7afb      	ldrb	r3, [r7, #11]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da0f      	bge.n	8001a9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 020f 	and.w	r2, r3, #15
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	3338      	adds	r3, #56	; 0x38
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	3304      	adds	r3, #4
 8001a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	705a      	strb	r2, [r3, #1]
 8001a9c:	e00f      	b.n	8001abe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	f003 020f 	and.w	r2, r3, #15
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_PCD_EP_Close+0x6e>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e00e      	b.n	8001af6 <HAL_PCD_EP_Close+0x8c>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 fdb0 	bl	800364c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	f003 020f 	and.w	r2, r3, #15
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	3304      	adds	r3, #4
 8001b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d102      	bne.n	8001b5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	6979      	ldr	r1, [r7, #20]
 8001b72:	f002 f88b 	bl	8003c8c <USB_EP0StartXfer>
 8001b76:	e008      	b.n	8001b8a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	6979      	ldr	r1, [r7, #20]
 8001b86:	f001 fe3d 	bl	8003804 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	f003 020f 	and.w	r2, r3, #15
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd4:	7afb      	ldrb	r3, [r7, #11]
 8001bd6:	f003 020f 	and.w	r2, r3, #15
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	3338      	adds	r3, #56	; 0x38
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	3304      	adds	r3, #4
 8001bea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2201      	movs	r2, #1
 8001c02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c04:	7afb      	ldrb	r3, [r7, #11]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d102      	bne.n	8001c1e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	6979      	ldr	r1, [r7, #20]
 8001c36:	f002 f829 	bl	8003c8c <USB_EP0StartXfer>
 8001c3a:	e008      	b.n	8001c4e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	6979      	ldr	r1, [r7, #20]
 8001c4a:	f001 fddb 	bl	8003804 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	f003 020f 	and.w	r2, r3, #15
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d901      	bls.n	8001c76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e050      	b.n	8001d18 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da0f      	bge.n	8001c9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	f003 020f 	and.w	r2, r3, #15
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	3338      	adds	r3, #56	; 0x38
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	3304      	adds	r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	705a      	strb	r2, [r3, #1]
 8001c9c:	e00d      	b.n	8001cba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_PCD_EP_SetStall+0x82>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e01e      	b.n	8001d18 <HAL_PCD_EP_SetStall+0xc0>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68f9      	ldr	r1, [r7, #12]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 f980 	bl	8003fee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10a      	bne.n	8001d0e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	b2d9      	uxtb	r1, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f002 fb71 	bl	80043f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 020f 	and.w	r2, r3, #15
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d901      	bls.n	8001d3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e042      	b.n	8001dc4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	da0f      	bge.n	8001d66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 020f 	and.w	r2, r3, #15
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	3338      	adds	r3, #56	; 0x38
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	705a      	strb	r2, [r3, #1]
 8001d64:	e00f      	b.n	8001d86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_PCD_EP_ClrStall+0x86>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e00e      	b.n	8001dc4 <HAL_PCD_EP_ClrStall+0xa4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68f9      	ldr	r1, [r7, #12]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 f988 	bl	80040ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	3338      	adds	r3, #56	; 0x38
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	3304      	adds	r3, #4
 8001df2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	699a      	ldr	r2, [r3, #24]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d901      	bls.n	8001e04 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e06c      	b.n	8001ede <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d902      	bls.n	8001e20 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	3303      	adds	r3, #3
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e28:	e02b      	b.n	8001e82 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d902      	bls.n	8001e46 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3303      	adds	r3, #3
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	68d9      	ldr	r1, [r3, #12]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	4603      	mov	r3, r0
 8001e64:	6978      	ldr	r0, [r7, #20]
 8001e66:	f002 f864 	bl	8003f32 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	441a      	add	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	441a      	add	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d809      	bhi.n	8001eac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d203      	bcs.n	8001eac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1be      	bne.n	8001e2a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d811      	bhi.n	8001edc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	6939      	ldr	r1, [r7, #16]
 8001ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ed8:	4013      	ands	r3, r2
 8001eda:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	333c      	adds	r3, #60	; 0x3c
 8001f00:	3304      	adds	r3, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	f040 80a0 	bne.w	8002060 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d015      	beq.n	8001f56 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a72      	ldr	r2, [pc, #456]	; (80020f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	f240 80dd 	bls.w	80020ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80d7 	beq.w	80020ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f52:	6093      	str	r3, [r2, #8]
 8001f54:	e0cb      	b.n	80020ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	2320      	movs	r3, #32
 8001f70:	6093      	str	r3, [r2, #8]
 8001f72:	e0bc      	b.n	80020ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 80b7 	bne.w	80020ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a5d      	ldr	r2, [pc, #372]	; (80020f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d90f      	bls.n	8001fa8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa4:	6093      	str	r3, [r2, #8]
 8001fa6:	e0a2      	b.n	80020ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	0159      	lsls	r1, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001fce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4403      	add	r3, r0
 8001fde:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fe2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4403      	add	r3, r0
 8002006:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4419      	add	r1, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4403      	add	r3, r0
 800201c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002020:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d114      	bne.n	8002052 <PCD_EP_OutXfrComplete_int+0x16a>
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d108      	bne.n	8002052 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800204a:	461a      	mov	r2, r3
 800204c:	2101      	movs	r1, #1
 800204e:	f002 f9cf 	bl	80043f0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4619      	mov	r1, r3
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f004 fa65 	bl	8006528 <HAL_PCD_DataOutStageCallback>
 800205e:	e046      	b.n	80020ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4a26      	ldr	r2, [pc, #152]	; (80020fc <PCD_EP_OutXfrComplete_int+0x214>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d124      	bne.n	80020b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207e:	461a      	mov	r2, r3
 8002080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002084:	6093      	str	r3, [r2, #8]
 8002086:	e032      	b.n	80020ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209e:	461a      	mov	r2, r3
 80020a0:	2320      	movs	r3, #32
 80020a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	4619      	mov	r1, r3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f004 fa3c 	bl	8006528 <HAL_PCD_DataOutStageCallback>
 80020b0:	e01d      	b.n	80020ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d114      	bne.n	80020e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020da:	461a      	mov	r2, r3
 80020dc:	2100      	movs	r1, #0
 80020de:	f002 f987 	bl	80043f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	4619      	mov	r1, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f004 fa1d 	bl	8006528 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	4f54300a 	.word	0x4f54300a
 80020fc:	4f54310a 	.word	0x4f54310a

08002100 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	333c      	adds	r3, #60	; 0x3c
 8002118:	3304      	adds	r3, #4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4a15      	ldr	r2, [pc, #84]	; (8002188 <PCD_EP_OutSetupPacket_int+0x88>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d90e      	bls.n	8002154 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800213c:	2b00      	cmp	r3, #0
 800213e:	d009      	beq.n	8002154 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214c:	461a      	mov	r2, r3
 800214e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002152:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f004 f9d5 	bl	8006504 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <PCD_EP_OutSetupPacket_int+0x88>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d90c      	bls.n	800217c <PCD_EP_OutSetupPacket_int+0x7c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d108      	bne.n	800217c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002174:	461a      	mov	r2, r3
 8002176:	2101      	movs	r1, #1
 8002178:	f002 f93a 	bl	80043f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	4f54300a 	.word	0x4f54300a

0800218c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
 8002198:	4613      	mov	r3, r2
 800219a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d107      	bne.n	80021ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021aa:	883b      	ldrh	r3, [r7, #0]
 80021ac:	0419      	lsls	r1, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
 80021b8:	e028      	b.n	800220c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	4413      	add	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e00d      	b.n	80021ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	3340      	adds	r3, #64	; 0x40
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4413      	add	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	3301      	adds	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d3ec      	bcc.n	80021ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80021f4:	883b      	ldrh	r3, [r7, #0]
 80021f6:	0418      	lsls	r0, r3, #16
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6819      	ldr	r1, [r3, #0]
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	3b01      	subs	r3, #1
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	4302      	orrs	r2, r0
 8002204:	3340      	adds	r3, #64	; 0x40
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e264      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d075      	beq.n	800235e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002272:	4ba3      	ldr	r3, [pc, #652]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b04      	cmp	r3, #4
 800227c:	d00c      	beq.n	8002298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002286:	2b08      	cmp	r3, #8
 8002288:	d112      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228a:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002296:	d10b      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	4b99      	ldr	r3, [pc, #612]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d05b      	beq.n	800235c <HAL_RCC_OscConfig+0x108>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d157      	bne.n	800235c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e23f      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_OscConfig+0x74>
 80022ba:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a90      	ldr	r2, [pc, #576]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e01d      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x98>
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a87      	ldr	r2, [pc, #540]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022ec:	4b84      	ldr	r3, [pc, #528]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a83      	ldr	r2, [pc, #524]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a80      	ldr	r2, [pc, #512]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe fb40 	bl	8000990 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7fe fb3c 	bl	8000990 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e204      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0xc0>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fb2c 	bl	8000990 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233c:	f7fe fb28 	bl	8000990 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1f0      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0xe8>
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d063      	beq.n	8002432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	2b08      	cmp	r3, #8
 8002380:	d11c      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002382:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d116      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e1c4      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b56      	ldr	r3, [pc, #344]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4952      	ldr	r1, [pc, #328]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ba:	e03a      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c4:	4b4f      	ldr	r3, [pc, #316]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fae1 	bl	8000990 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d2:	f7fe fadd 	bl	8000990 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1a5      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b43      	ldr	r3, [pc, #268]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4940      	ldr	r1, [pc, #256]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e015      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fac0 	bl	8000990 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002414:	f7fe fabc 	bl	8000990 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e184      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d030      	beq.n	80024a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d016      	beq.n	8002474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7fe faa0 	bl	8000990 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002454:	f7fe fa9c 	bl	8000990 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e164      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x200>
 8002472:	e015      	b.n	80024a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7fe fa89 	bl	8000990 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7fe fa85 	bl	8000990 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e14d      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80a0 	beq.w	80025ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d121      	bne.n	800252e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fa4b 	bl	8000990 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	e011      	b.n	8002522 <HAL_RCC_OscConfig+0x2ce>
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	42470000 	.word	0x42470000
 8002508:	42470e80 	.word	0x42470e80
 800250c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002510:	f7fe fa3e 	bl	8000990 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e106      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <HAL_RCC_OscConfig+0x4e4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x2f0>
 8002536:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a80      	ldr	r2, [pc, #512]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x312>
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a7a      	ldr	r2, [pc, #488]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	4b78      	ldr	r3, [pc, #480]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a77      	ldr	r2, [pc, #476]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	; 0x70
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002566:	4b75      	ldr	r3, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a74      	ldr	r2, [pc, #464]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
 8002572:	4b72      	ldr	r3, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a71      	ldr	r2, [pc, #452]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7fe fa03 	bl	8000990 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe f9ff 	bl	8000990 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0c5      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x33a>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe f9ed 	bl	8000990 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe f9e9 	bl	8000990 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0af      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b5a      	ldr	r3, [pc, #360]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 809b 	beq.w	800272e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d05c      	beq.n	80026be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d141      	bne.n	8002690 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe f9bd 	bl	8000990 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe f9b9 	bl	8000990 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e081      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	019b      	lsls	r3, r3, #6
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe f992 	bl	8000990 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe f98e 	bl	8000990 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e056      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x41c>
 800268e:	e04e      	b.n	800272e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe f97b 	bl	8000990 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe f977 	bl	8000990 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e03f      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x44a>
 80026bc:	e037      	b.n	800272e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e032      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d028      	beq.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d121      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d11a      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026fa:	4013      	ands	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002700:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002702:	4293      	cmp	r3, r2
 8002704:	d111      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	3b01      	subs	r3, #1
 8002714:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d107      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40007000 	.word	0x40007000
 800273c:	40023800 	.word	0x40023800
 8002740:	42470060 	.word	0x42470060

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0cc      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d90c      	bls.n	8002780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0b8      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b59      	ldr	r3, [pc, #356]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b0:	4b53      	ldr	r3, [pc, #332]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	494d      	ldr	r1, [pc, #308]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d044      	beq.n	8002864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d119      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e067      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4934      	ldr	r1, [pc, #208]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002834:	f7fe f8ac 	bl	8000990 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe f8a8 	bl	8000990 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e04f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d20c      	bcs.n	800288c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e032      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4916      	ldr	r1, [pc, #88]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490e      	ldr	r1, [pc, #56]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ca:	f000 f82d 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 80028ce:	4602      	mov	r2, r0
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	490a      	ldr	r1, [pc, #40]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	5ccb      	ldrb	r3, [r1, r3]
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe f80c 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00
 8002900:	40023800 	.word	0x40023800
 8002904:	08006e48 	.word	0x08006e48
 8002908:	20000000 	.word	0x20000000
 800290c:	20000004 	.word	0x20000004

08002910 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCC_EnableCSS+0x14>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	4247004c 	.word	0x4247004c

08002928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	2300      	movs	r3, #0
 800293a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002940:	4b67      	ldr	r3, [pc, #412]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b08      	cmp	r3, #8
 800294a:	d00d      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x40>
 800294c:	2b08      	cmp	r3, #8
 800294e:	f200 80bd 	bhi.w	8002acc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x34>
 8002956:	2b04      	cmp	r3, #4
 8002958:	d003      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x3a>
 800295a:	e0b7      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800295e:	60bb      	str	r3, [r7, #8]
       break;
 8002960:	e0b7      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002962:	4b61      	ldr	r3, [pc, #388]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002964:	60bb      	str	r3, [r7, #8]
      break;
 8002966:	e0b4      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002968:	4b5d      	ldr	r3, [pc, #372]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002970:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002972:	4b5b      	ldr	r3, [pc, #364]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d04d      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297e:	4b58      	ldr	r3, [pc, #352]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	461a      	mov	r2, r3
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	ea02 0800 	and.w	r8, r2, r0
 8002996:	ea03 0901 	and.w	r9, r3, r1
 800299a:	4640      	mov	r0, r8
 800299c:	4649      	mov	r1, r9
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	014b      	lsls	r3, r1, #5
 80029a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029ac:	0142      	lsls	r2, r0, #5
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	ebb0 0008 	subs.w	r0, r0, r8
 80029b6:	eb61 0109 	sbc.w	r1, r1, r9
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	018b      	lsls	r3, r1, #6
 80029c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029c8:	0182      	lsls	r2, r0, #6
 80029ca:	1a12      	subs	r2, r2, r0
 80029cc:	eb63 0301 	sbc.w	r3, r3, r1
 80029d0:	f04f 0000 	mov.w	r0, #0
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	00d9      	lsls	r1, r3, #3
 80029da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029de:	00d0      	lsls	r0, r2, #3
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	eb12 0208 	adds.w	r2, r2, r8
 80029e8:	eb43 0309 	adc.w	r3, r3, r9
 80029ec:	f04f 0000 	mov.w	r0, #0
 80029f0:	f04f 0100 	mov.w	r1, #0
 80029f4:	0259      	lsls	r1, r3, #9
 80029f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029fa:	0250      	lsls	r0, r2, #9
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	461a      	mov	r2, r3
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	f7fd fbe4 	bl	80001d8 <__aeabi_uldivmod>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4613      	mov	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e04a      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1a:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	099b      	lsrs	r3, r3, #6
 8002a20:	461a      	mov	r2, r3
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a2a:	f04f 0100 	mov.w	r1, #0
 8002a2e:	ea02 0400 	and.w	r4, r2, r0
 8002a32:	ea03 0501 	and.w	r5, r3, r1
 8002a36:	4620      	mov	r0, r4
 8002a38:	4629      	mov	r1, r5
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a48:	0142      	lsls	r2, r0, #5
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	1b00      	subs	r0, r0, r4
 8002a50:	eb61 0105 	sbc.w	r1, r1, r5
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a62:	0182      	lsls	r2, r0, #6
 8002a64:	1a12      	subs	r2, r2, r0
 8002a66:	eb63 0301 	sbc.w	r3, r3, r1
 8002a6a:	f04f 0000 	mov.w	r0, #0
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a78:	00d0      	lsls	r0, r2, #3
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	1912      	adds	r2, r2, r4
 8002a80:	eb45 0303 	adc.w	r3, r5, r3
 8002a84:	f04f 0000 	mov.w	r0, #0
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a92:	0290      	lsls	r0, r2, #10
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	f7fd fb98 	bl	80001d8 <__aeabi_uldivmod>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4613      	mov	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	3301      	adds	r3, #1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ace:	60bb      	str	r3, [r7, #8]
      break;
 8002ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	007a1200 	.word	0x007a1200

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000000 	.word	0x20000000

08002b04 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b10:	2b80      	cmp	r3, #128	; 0x80
 8002b12:	d104      	bne.n	8002b1e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002b14:	f000 f80a 	bl	8002b2c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002b1a:	2280      	movs	r2, #128	; 0x80
 8002b1c:	701a      	strb	r2, [r3, #0]
  }
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800
 8002b28:	4002380e 	.word	0x4002380e

08002b2c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d035      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b64:	4b62      	ldr	r3, [pc, #392]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b6a:	f7fd ff11 	bl	8000990 <HAL_GetTick>
 8002b6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b72:	f7fd ff0d 	bl	8000990 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0b0      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b84:	4b5b      	ldr	r3, [pc, #364]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	019a      	lsls	r2, r3, #6
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	071b      	lsls	r3, r3, #28
 8002b9c:	4955      	ldr	r1, [pc, #340]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ba4:	4b52      	ldr	r3, [pc, #328]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002baa:	f7fd fef1 	bl	8000990 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bb2:	f7fd feed 	bl	8000990 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e090      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bc4:	4b4b      	ldr	r3, [pc, #300]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8083 	beq.w	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b44      	ldr	r3, [pc, #272]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a43      	ldr	r2, [pc, #268]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a3e      	ldr	r2, [pc, #248]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c06:	f7fd fec3 	bl	8000990 <HAL_GetTick>
 8002c0a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c0e:	f7fd febf 	bl	8000990 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e062      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c20:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c2c:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c34:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d02f      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d028      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c4a:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c52:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c54:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c5a:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c60:	4a24      	ldr	r2, [pc, #144]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c66:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d114      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c72:	f7fd fe8d 	bl	8000990 <HAL_GetTick>
 8002c76:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fd fe89 	bl	8000990 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e02a      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ee      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbe:	490d      	ldr	r1, [pc, #52]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]
 8002cc4:	e005      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ccc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cd0:	6093      	str	r3, [r2, #8]
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cde:	4905      	ldr	r1, [pc, #20]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	42470068 	.word	0x42470068
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	42470e40 	.word	0x42470e40

08002d00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e083      	b.n	8002e1a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7f5b      	ldrb	r3, [r3, #29]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd fce4 	bl	80006f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	22ca      	movs	r2, #202	; 0xca
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2253      	movs	r2, #83	; 0x53
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f897 	bl	8002e72 <RTC_EnterInitMode>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	22ff      	movs	r2, #255	; 0xff
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2204      	movs	r2, #4
 8002d56:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e05e      	b.n	8002e1a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68d2      	ldr	r2, [r2, #12]
 8002d96:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6919      	ldr	r1, [r3, #16]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	041a      	lsls	r2, r3, #16
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10e      	bne.n	8002de8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f829 	bl	8002e22 <HAL_RTC_WaitForSynchro>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	22ff      	movs	r2, #255	; 0xff
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2204      	movs	r2, #4
 8002de2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e018      	b.n	8002e1a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	22ff      	movs	r2, #255	; 0xff
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e3c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e3e:	f7fd fda7 	bl	8000990 <HAL_GetTick>
 8002e42:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e44:	e009      	b.n	8002e5a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e46:	f7fd fda3 	bl	8000990 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e54:	d901      	bls.n	8002e5a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e007      	b.n	8002e6a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d119      	bne.n	8002ec0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e96:	f7fd fd7b 	bl	8000990 <HAL_GetTick>
 8002e9a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e9c:	e009      	b.n	8002eb2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e9e:	f7fd fd77 	bl	8000990 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eac:	d901      	bls.n	8002eb2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e007      	b.n	8002ec2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0ee      	beq.n	8002e9e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002eca:	b084      	sub	sp, #16
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	f107 001c 	add.w	r0, r7, #28
 8002ed8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d122      	bne.n	8002f28 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f001 fac5 	bl	80044ac <USB_CoreReset>
 8002f22:	4603      	mov	r3, r0
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	e01a      	b.n	8002f5e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f001 fab9 	bl	80044ac <USB_CoreReset>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d106      	bne.n	8002f52 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
 8002f50:	e005      	b.n	8002f5e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d10b      	bne.n	8002f7c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f043 0206 	orr.w	r2, r3, #6
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f88:	b004      	add	sp, #16
 8002f8a:	4770      	bx	lr

08002f8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	4613      	mov	r3, r2
 8002f98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d165      	bne.n	800306c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4a41      	ldr	r2, [pc, #260]	; (80030a8 <USB_SetTurnaroundTime+0x11c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d906      	bls.n	8002fb6 <USB_SetTurnaroundTime+0x2a>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4a40      	ldr	r2, [pc, #256]	; (80030ac <USB_SetTurnaroundTime+0x120>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d202      	bcs.n	8002fb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002fb0:	230f      	movs	r3, #15
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e062      	b.n	800307c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4a3c      	ldr	r2, [pc, #240]	; (80030ac <USB_SetTurnaroundTime+0x120>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d306      	bcc.n	8002fcc <USB_SetTurnaroundTime+0x40>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4a3b      	ldr	r2, [pc, #236]	; (80030b0 <USB_SetTurnaroundTime+0x124>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d202      	bcs.n	8002fcc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002fc6:	230e      	movs	r3, #14
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e057      	b.n	800307c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4a38      	ldr	r2, [pc, #224]	; (80030b0 <USB_SetTurnaroundTime+0x124>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d306      	bcc.n	8002fe2 <USB_SetTurnaroundTime+0x56>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4a37      	ldr	r2, [pc, #220]	; (80030b4 <USB_SetTurnaroundTime+0x128>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d202      	bcs.n	8002fe2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002fdc:	230d      	movs	r3, #13
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e04c      	b.n	800307c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4a33      	ldr	r2, [pc, #204]	; (80030b4 <USB_SetTurnaroundTime+0x128>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d306      	bcc.n	8002ff8 <USB_SetTurnaroundTime+0x6c>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4a32      	ldr	r2, [pc, #200]	; (80030b8 <USB_SetTurnaroundTime+0x12c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d802      	bhi.n	8002ff8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e041      	b.n	800307c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <USB_SetTurnaroundTime+0x12c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d906      	bls.n	800300e <USB_SetTurnaroundTime+0x82>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4a2e      	ldr	r2, [pc, #184]	; (80030bc <USB_SetTurnaroundTime+0x130>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d802      	bhi.n	800300e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003008:	230b      	movs	r3, #11
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e036      	b.n	800307c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	4a2a      	ldr	r2, [pc, #168]	; (80030bc <USB_SetTurnaroundTime+0x130>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d906      	bls.n	8003024 <USB_SetTurnaroundTime+0x98>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4a29      	ldr	r2, [pc, #164]	; (80030c0 <USB_SetTurnaroundTime+0x134>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d802      	bhi.n	8003024 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800301e:	230a      	movs	r3, #10
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	e02b      	b.n	800307c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <USB_SetTurnaroundTime+0x134>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d906      	bls.n	800303a <USB_SetTurnaroundTime+0xae>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4a25      	ldr	r2, [pc, #148]	; (80030c4 <USB_SetTurnaroundTime+0x138>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d202      	bcs.n	800303a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003034:	2309      	movs	r3, #9
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e020      	b.n	800307c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4a21      	ldr	r2, [pc, #132]	; (80030c4 <USB_SetTurnaroundTime+0x138>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d306      	bcc.n	8003050 <USB_SetTurnaroundTime+0xc4>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4a20      	ldr	r2, [pc, #128]	; (80030c8 <USB_SetTurnaroundTime+0x13c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d802      	bhi.n	8003050 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800304a:	2308      	movs	r3, #8
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e015      	b.n	800307c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <USB_SetTurnaroundTime+0x13c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d906      	bls.n	8003066 <USB_SetTurnaroundTime+0xda>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4a1c      	ldr	r2, [pc, #112]	; (80030cc <USB_SetTurnaroundTime+0x140>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d202      	bcs.n	8003066 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003060:	2307      	movs	r3, #7
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	e00a      	b.n	800307c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003066:	2306      	movs	r3, #6
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e007      	b.n	800307c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003072:	2309      	movs	r3, #9
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e001      	b.n	800307c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003078:	2309      	movs	r3, #9
 800307a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	029b      	lsls	r3, r3, #10
 8003090:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003094:	431a      	orrs	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	00d8acbf 	.word	0x00d8acbf
 80030ac:	00e4e1c0 	.word	0x00e4e1c0
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	01067380 	.word	0x01067380
 80030b8:	011a499f 	.word	0x011a499f
 80030bc:	01312cff 	.word	0x01312cff
 80030c0:	014ca43f 	.word	0x014ca43f
 80030c4:	016e3600 	.word	0x016e3600
 80030c8:	01a6ab1f 	.word	0x01a6ab1f
 80030cc:	01e84800 	.word	0x01e84800

080030d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f043 0201 	orr.w	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f023 0201 	bic.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d106      	bne.n	8003140 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	e00b      	b.n	8003158 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	e001      	b.n	8003158 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e003      	b.n	8003160 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003158:	2032      	movs	r0, #50	; 0x32
 800315a:	f7fd fc25 	bl	80009a8 <HAL_Delay>

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003168:	b084      	sub	sp, #16
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	e009      	b.n	800319c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	3340      	adds	r3, #64	; 0x40
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	2200      	movs	r2, #0
 8003194:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3301      	adds	r3, #1
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b0e      	cmp	r3, #14
 80031a0:	d9f2      	bls.n	8003188 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80031a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d11c      	bne.n	80031e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b6:	f043 0302 	orr.w	r3, r3, #2
 80031ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
 80031e0:	e00b      	b.n	80031fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003200:	461a      	mov	r2, r3
 8003202:	2300      	movs	r3, #0
 8003204:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320c:	4619      	mov	r1, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003214:	461a      	mov	r2, r3
 8003216:	680b      	ldr	r3, [r1, #0]
 8003218:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10c      	bne.n	800323a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003226:	2100      	movs	r1, #0
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f949 	bl	80034c0 <USB_SetDevSpeed>
 800322e:	e008      	b.n	8003242 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003230:	2101      	movs	r1, #1
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f944 	bl	80034c0 <USB_SetDevSpeed>
 8003238:	e003      	b.n	8003242 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800323a:	2103      	movs	r1, #3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f93f 	bl	80034c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003242:	2110      	movs	r1, #16
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f8f3 	bl	8003430 <USB_FlushTxFifo>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f911 	bl	800347c <USB_FlushRxFifo>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326a:	461a      	mov	r2, r3
 800326c:	2300      	movs	r3, #0
 800326e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003276:	461a      	mov	r2, r3
 8003278:	2300      	movs	r3, #0
 800327a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003282:	461a      	mov	r2, r3
 8003284:	2300      	movs	r3, #0
 8003286:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e043      	b.n	8003316 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032a4:	d118      	bne.n	80032d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b8:	461a      	mov	r2, r3
 80032ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	e013      	b.n	80032ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ce:	461a      	mov	r2, r3
 80032d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e008      	b.n	80032ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e4:	461a      	mov	r2, r3
 80032e6:	2300      	movs	r3, #0
 80032e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f6:	461a      	mov	r2, r3
 80032f8:	2300      	movs	r3, #0
 80032fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003308:	461a      	mov	r2, r3
 800330a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800330e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	3301      	adds	r3, #1
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	429a      	cmp	r2, r3
 800331c:	d3b7      	bcc.n	800328e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	e043      	b.n	80033ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800333a:	d118      	bne.n	800336e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334e:	461a      	mov	r2, r3
 8003350:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e013      	b.n	8003380 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003364:	461a      	mov	r2, r3
 8003366:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e008      	b.n	8003380 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337a:	461a      	mov	r2, r3
 800337c:	2300      	movs	r3, #0
 800337e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	461a      	mov	r2, r3
 800338e:	2300      	movs	r3, #0
 8003390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	461a      	mov	r2, r3
 80033a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	3301      	adds	r3, #1
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d3b7      	bcc.n	8003324 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80033d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f043 0210 	orr.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <USB_DevInit+0x2c4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f043 0208 	orr.w	r2, r3, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003428:	b004      	add	sp, #16
 800342a:	4770      	bx	lr
 800342c:	803c3800 	.word	0x803c3800

08003430 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	f043 0220 	orr.w	r2, r3, #32
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3301      	adds	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a09      	ldr	r2, [pc, #36]	; (8003478 <USB_FlushTxFifo+0x48>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e006      	b.n	800346a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b20      	cmp	r3, #32
 8003466:	d0f0      	beq.n	800344a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	00030d40 	.word	0x00030d40

0800347c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2210      	movs	r2, #16
 800348c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3301      	adds	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a09      	ldr	r2, [pc, #36]	; (80034bc <USB_FlushRxFifo+0x40>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e006      	b.n	80034ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d0f0      	beq.n	800348e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	00030d40 	.word	0x00030d40

080034c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	68f9      	ldr	r1, [r7, #12]
 80034dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b087      	sub	sp, #28
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0306 	and.w	r3, r3, #6
 800350a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003512:	2300      	movs	r3, #0
 8003514:	75fb      	strb	r3, [r7, #23]
 8003516:	e00a      	b.n	800352e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d002      	beq.n	8003524 <USB_GetDevSpeed+0x32>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b06      	cmp	r3, #6
 8003522:	d102      	bne.n	800352a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003524:	2302      	movs	r3, #2
 8003526:	75fb      	strb	r3, [r7, #23]
 8003528:	e001      	b.n	800352e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800352a:	230f      	movs	r3, #15
 800352c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800352e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003530:	4618      	mov	r0, r3
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	785b      	ldrb	r3, [r3, #1]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d13a      	bne.n	80035ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	b29b      	uxth	r3, r3
 8003570:	68f9      	ldr	r1, [r7, #12]
 8003572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003576:	4313      	orrs	r3, r2
 8003578:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d155      	bne.n	800363c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	78db      	ldrb	r3, [r3, #3]
 80035aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	059b      	lsls	r3, r3, #22
 80035b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035b4:	4313      	orrs	r3, r2
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	0151      	lsls	r1, r2, #5
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	440a      	add	r2, r1
 80035be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e036      	b.n	800363c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11a      	bne.n	800363c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	78db      	ldrb	r3, [r3, #3]
 8003620:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003622:	430b      	orrs	r3, r1
 8003624:	4313      	orrs	r3, r2
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	0151      	lsls	r1, r2, #5
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	440a      	add	r2, r1
 800362e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800363a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d161      	bne.n	800372c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800367a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800367e:	d11f      	bne.n	80036c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	0151      	lsls	r1, r2, #5
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	440a      	add	r2, r1
 8003696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800369a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800369e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	0151      	lsls	r1, r2, #5
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	440a      	add	r2, r1
 80036b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	68f9      	ldr	r1, [r7, #12]
 80036dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036e0:	4013      	ands	r3, r2
 80036e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	2101      	movs	r1, #1
 80036f6:	fa01 f303 	lsl.w	r3, r1, r3
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	68f9      	ldr	r1, [r7, #12]
 8003700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003704:	4013      	ands	r3, r2
 8003706:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	0159      	lsls	r1, r3, #5
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	440b      	add	r3, r1
 800371e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003722:	4619      	mov	r1, r3
 8003724:	4b35      	ldr	r3, [pc, #212]	; (80037fc <USB_DeactivateEndpoint+0x1b0>)
 8003726:	4013      	ands	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
 800372a:	e060      	b.n	80037ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800373e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003742:	d11f      	bne.n	8003784 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	0151      	lsls	r1, r2, #5
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	440a      	add	r2, r1
 800375a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800375e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003762:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	0151      	lsls	r1, r2, #5
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	440a      	add	r2, r1
 800377a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800377e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003782:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	2101      	movs	r1, #1
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	43db      	mvns	r3, r3
 800379e:	68f9      	ldr	r1, [r7, #12]
 80037a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a4:	4013      	ands	r3, r2
 80037a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	2101      	movs	r1, #1
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	041b      	lsls	r3, r3, #16
 80037c0:	43db      	mvns	r3, r3
 80037c2:	68f9      	ldr	r1, [r7, #12]
 80037c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037c8:	4013      	ands	r3, r2
 80037ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	0159      	lsls	r1, r3, #5
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	440b      	add	r3, r1
 80037e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e6:	4619      	mov	r1, r3
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <USB_DeactivateEndpoint+0x1b4>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	ec337800 	.word	0xec337800
 8003800:	eff37800 	.word	0xeff37800

08003804 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	785b      	ldrb	r3, [r3, #1]
 8003820:	2b01      	cmp	r3, #1
 8003822:	f040 815c 	bne.w	8003ade <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d132      	bne.n	8003894 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	440a      	add	r2, r1
 8003844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003848:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800384c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003850:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	0151      	lsls	r1, r2, #5
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	440a      	add	r2, r1
 8003868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800386c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003870:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	0151      	lsls	r1, r2, #5
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	440a      	add	r2, r1
 8003888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800388c:	0cdb      	lsrs	r3, r3, #19
 800388e:	04db      	lsls	r3, r3, #19
 8003890:	6113      	str	r3, [r2, #16]
 8003892:	e074      	b.n	800397e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	0151      	lsls	r1, r2, #5
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	440a      	add	r2, r1
 80038aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ae:	0cdb      	lsrs	r3, r3, #19
 80038b0:	04db      	lsls	r3, r3, #19
 80038b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	0151      	lsls	r1, r2, #5
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	440a      	add	r2, r1
 80038ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6959      	ldr	r1, [r3, #20]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	440b      	add	r3, r1
 80038f0:	1e59      	subs	r1, r3, #1
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fa:	04d9      	lsls	r1, r3, #19
 80038fc:	4b9d      	ldr	r3, [pc, #628]	; (8003b74 <USB_EPStartXfer+0x370>)
 80038fe:	400b      	ands	r3, r1
 8003900:	69b9      	ldr	r1, [r7, #24]
 8003902:	0148      	lsls	r0, r1, #5
 8003904:	69f9      	ldr	r1, [r7, #28]
 8003906:	4401      	add	r1, r0
 8003908:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800390c:	4313      	orrs	r3, r2
 800390e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	0148      	lsls	r0, r1, #5
 800392a:	69f9      	ldr	r1, [r7, #28]
 800392c:	4401      	add	r1, r0
 800392e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003932:	4313      	orrs	r3, r2
 8003934:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	78db      	ldrb	r3, [r3, #3]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d11f      	bne.n	800397e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	0151      	lsls	r1, r2, #5
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	440a      	add	r2, r1
 8003954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003958:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800395c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	0151      	lsls	r1, r2, #5
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	440a      	add	r2, r1
 8003974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003978:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800397c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d14b      	bne.n	8003a1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003998:	461a      	mov	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	78db      	ldrb	r3, [r3, #3]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d128      	bne.n	80039fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d110      	bne.n	80039da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	e00f      	b.n	80039fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	0151      	lsls	r1, r2, #5
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	440a      	add	r2, r1
 8003a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e12f      	b.n	8003c7c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	78db      	ldrb	r3, [r3, #3]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d015      	beq.n	8003a70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8117 	beq.w	8003c7c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	2101      	movs	r1, #1
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	69f9      	ldr	r1, [r7, #28]
 8003a66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	634b      	str	r3, [r1, #52]	; 0x34
 8003a6e:	e105      	b.n	8003c7c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d110      	bne.n	8003aa2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	e00f      	b.n	8003ac2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	0151      	lsls	r1, r2, #5
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	440a      	add	r2, r1
 8003ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	68d9      	ldr	r1, [r3, #12]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	b298      	uxth	r0, r3
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fa2b 	bl	8003f32 <USB_WritePacket>
 8003adc:	e0ce      	b.n	8003c7c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	0151      	lsls	r1, r2, #5
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	440a      	add	r2, r1
 8003af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af8:	0cdb      	lsrs	r3, r3, #19
 8003afa:	04db      	lsls	r3, r3, #19
 8003afc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	0151      	lsls	r1, r2, #5
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	440a      	add	r2, r1
 8003b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d126      	bne.n	8003b78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b40:	69b9      	ldr	r1, [r7, #24]
 8003b42:	0148      	lsls	r0, r1, #5
 8003b44:	69f9      	ldr	r1, [r7, #28]
 8003b46:	4401      	add	r1, r0
 8003b48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	0151      	lsls	r1, r2, #5
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	440a      	add	r2, r1
 8003b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b6e:	6113      	str	r3, [r2, #16]
 8003b70:	e036      	b.n	8003be0 <USB_EPStartXfer+0x3dc>
 8003b72:	bf00      	nop
 8003b74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4413      	add	r3, r2
 8003b82:	1e5a      	subs	r2, r3, #1
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	8afb      	ldrh	r3, [r7, #22]
 8003b9e:	04d9      	lsls	r1, r3, #19
 8003ba0:	4b39      	ldr	r3, [pc, #228]	; (8003c88 <USB_EPStartXfer+0x484>)
 8003ba2:	400b      	ands	r3, r1
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	0148      	lsls	r0, r1, #5
 8003ba8:	69f9      	ldr	r1, [r7, #28]
 8003baa:	4401      	add	r1, r0
 8003bac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	8af9      	ldrh	r1, [r7, #22]
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	0148      	lsls	r0, r1, #5
 8003bd4:	69f9      	ldr	r1, [r7, #28]
 8003bd6:	4401      	add	r1, r0
 8003bd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10d      	bne.n	8003c02 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	68d9      	ldr	r1, [r3, #12]
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfe:	460a      	mov	r2, r1
 8003c00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	78db      	ldrb	r3, [r3, #3]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d128      	bne.n	8003c5c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d110      	bne.n	8003c3c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	0151      	lsls	r1, r2, #5
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	440a      	add	r2, r1
 8003c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e00f      	b.n	8003c5c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	0151      	lsls	r1, r2, #5
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	440a      	add	r2, r1
 8003c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	0151      	lsls	r1, r2, #5
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	440a      	add	r2, r1
 8003c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	1ff80000 	.word	0x1ff80000

08003c8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	4613      	mov	r3, r2
 8003c98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	785b      	ldrb	r3, [r3, #1]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	f040 80cd 	bne.w	8003e48 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d132      	bne.n	8003d1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	0151      	lsls	r1, r2, #5
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	440a      	add	r2, r1
 8003ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d14:	0cdb      	lsrs	r3, r3, #19
 8003d16:	04db      	lsls	r3, r3, #19
 8003d18:	6113      	str	r3, [r2, #16]
 8003d1a:	e04e      	b.n	8003dba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	0151      	lsls	r1, r2, #5
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	440a      	add	r2, r1
 8003d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d36:	0cdb      	lsrs	r3, r3, #19
 8003d38:	04db      	lsls	r3, r3, #19
 8003d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	0151      	lsls	r1, r2, #5
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	440a      	add	r2, r1
 8003d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d5e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d903      	bls.n	8003d74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003daa:	6939      	ldr	r1, [r7, #16]
 8003dac:	0148      	lsls	r0, r1, #5
 8003dae:	6979      	ldr	r1, [r7, #20]
 8003db0:	4401      	add	r1, r0
 8003db2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003db6:	4313      	orrs	r3, r2
 8003db8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d11e      	bne.n	8003dfe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	e092      	b.n	8003f24 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	0151      	lsls	r1, r2, #5
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	440a      	add	r2, r1
 8003e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d07e      	beq.n	8003f24 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	6979      	ldr	r1, [r7, #20]
 8003e3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e42:	4313      	orrs	r3, r2
 8003e44:	634b      	str	r3, [r1, #52]	; 0x34
 8003e46:	e06d      	b.n	8003f24 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e62:	0cdb      	lsrs	r3, r3, #19
 8003e64:	04db      	lsls	r3, r3, #19
 8003e66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e8a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed2:	6939      	ldr	r1, [r7, #16]
 8003ed4:	0148      	lsls	r0, r1, #5
 8003ed6:	6979      	ldr	r1, [r7, #20]
 8003ed8:	4401      	add	r1, r0
 8003eda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d10d      	bne.n	8003f04 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	68d9      	ldr	r1, [r3, #12]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f00:	460a      	mov	r2, r1
 8003f02:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	0151      	lsls	r1, r2, #5
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	440a      	add	r2, r1
 8003f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b089      	sub	sp, #36	; 0x24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	461a      	mov	r2, r3
 8003f40:	460b      	mov	r3, r1
 8003f42:	71fb      	strb	r3, [r7, #7]
 8003f44:	4613      	mov	r3, r2
 8003f46:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003f50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d11a      	bne.n	8003f8e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f58:	88bb      	ldrh	r3, [r7, #4]
 8003f5a:	3303      	adds	r3, #3
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	e00f      	b.n	8003f86 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	031a      	lsls	r2, r3, #12
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f72:	461a      	mov	r2, r3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	3301      	adds	r3, #1
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d3eb      	bcc.n	8003f66 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3724      	adds	r7, #36	; 0x24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b089      	sub	sp, #36	; 0x24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	3303      	adds	r3, #3
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e00b      	b.n	8003fd8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	601a      	str	r2, [r3, #0]
    pDest++;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d3ef      	bcc.n	8003fc0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003fe0:	69fb      	ldr	r3, [r7, #28]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3724      	adds	r7, #36	; 0x24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b085      	sub	sp, #20
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d12c      	bne.n	8004064 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	db12      	blt.n	8004042 <USB_EPSetStall+0x54>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00f      	beq.n	8004042 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	0151      	lsls	r1, r2, #5
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	440a      	add	r2, r1
 8004038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004040:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	440a      	add	r2, r1
 8004058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e02b      	b.n	80040bc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	db12      	blt.n	800409c <USB_EPSetStall+0xae>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00f      	beq.n	800409c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	440a      	add	r2, r1
 8004092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004096:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800409a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	0151      	lsls	r1, r2, #5
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	440a      	add	r2, r1
 80040b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b085      	sub	sp, #20
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	785b      	ldrb	r3, [r3, #1]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d128      	bne.n	8004138 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004100:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004104:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	78db      	ldrb	r3, [r3, #3]
 800410a:	2b03      	cmp	r3, #3
 800410c:	d003      	beq.n	8004116 <USB_EPClearStall+0x4c>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	78db      	ldrb	r3, [r3, #3]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d138      	bne.n	8004188 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e027      	b.n	8004188 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	0151      	lsls	r1, r2, #5
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	440a      	add	r2, r1
 800414e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004156:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	78db      	ldrb	r3, [r3, #3]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d003      	beq.n	8004168 <USB_EPClearStall+0x9e>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	78db      	ldrb	r3, [r3, #3]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d10f      	bne.n	8004188 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	0151      	lsls	r1, r2, #5
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	440a      	add	r2, r1
 800417e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004186:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004196:	b480      	push	{r7}
 8004198:	b085      	sub	sp, #20
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041b8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80041ca:	68f9      	ldr	r1, [r7, #12]
 80041cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d0:	4313      	orrs	r3, r2
 80041d2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041fc:	f023 0303 	bic.w	r3, r3, #3
 8004200:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004210:	f023 0302 	bic.w	r3, r3, #2
 8004214:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004252:	f043 0302 	orr.w	r3, r3, #2
 8004256:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4013      	ands	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800427e:	68fb      	ldr	r3, [r7, #12]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4013      	ands	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	0c1b      	lsrs	r3, r3, #16
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4013      	ands	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	b29b      	uxth	r3, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	4013      	ands	r3, r2
 8004320:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004322:	68bb      	ldr	r3, [r7, #8]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004352:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	01db      	lsls	r3, r3, #7
 8004362:	b2db      	uxtb	r3, r3
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4013      	ands	r3, r2
 800437c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800437e:	68bb      	ldr	r3, [r7, #8]
}
 8004380:	4618      	mov	r0, r3
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0301 	and.w	r3, r3, #1
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043c6:	f023 0307 	bic.w	r3, r3, #7
 80043ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	460b      	mov	r3, r1
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	333c      	adds	r3, #60	; 0x3c
 8004406:	3304      	adds	r3, #4
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4a26      	ldr	r2, [pc, #152]	; (80044a8 <USB_EP0_OutStart+0xb8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d90a      	bls.n	800442a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004424:	d101      	bne.n	800442a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e037      	b.n	800449a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004430:	461a      	mov	r2, r3
 8004432:	2300      	movs	r3, #0
 8004434:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004458:	f043 0318 	orr.w	r3, r3, #24
 800445c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004470:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004472:	7afb      	ldrb	r3, [r7, #11]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10f      	bne.n	8004498 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447e:	461a      	mov	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004492:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004496:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	4f54300a 	.word	0x4f54300a

080044ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3301      	adds	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a13      	ldr	r2, [pc, #76]	; (8004510 <USB_CoreReset+0x64>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e01b      	b.n	8004502 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	daf2      	bge.n	80044b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f043 0201 	orr.w	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <USB_CoreReset+0x64>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d901      	bls.n	80044f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e006      	b.n	8004502 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d0f0      	beq.n	80044e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	00030d40 	.word	0x00030d40

08004514 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004520:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004524:	f002 fa6a 	bl	80069fc <USBD_static_malloc>
 8004528:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d105      	bne.n	800453c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004538:	2302      	movs	r3, #2
 800453a:	e066      	b.n	800460a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	7c1b      	ldrb	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d119      	bne.n	8004580 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800454c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004550:	2202      	movs	r2, #2
 8004552:	2181      	movs	r1, #129	; 0x81
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f002 f92e 	bl	80067b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004564:	2202      	movs	r2, #2
 8004566:	2101      	movs	r1, #1
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f002 f924 	bl	80067b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2210      	movs	r2, #16
 800457a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800457e:	e016      	b.n	80045ae <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004580:	2340      	movs	r3, #64	; 0x40
 8004582:	2202      	movs	r2, #2
 8004584:	2181      	movs	r1, #129	; 0x81
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f002 f915 	bl	80067b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004592:	2340      	movs	r3, #64	; 0x40
 8004594:	2202      	movs	r2, #2
 8004596:	2101      	movs	r1, #1
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f002 f90c 	bl	80067b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2210      	movs	r2, #16
 80045aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80045ae:	2308      	movs	r3, #8
 80045b0:	2203      	movs	r2, #3
 80045b2:	2182      	movs	r1, #130	; 0x82
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f002 f8fe 	bl	80067b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7c1b      	ldrb	r3, [r3, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045ee:	2101      	movs	r1, #1
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f002 f9cf 	bl	8006994 <USBD_LL_PrepareReceive>
 80045f6:	e007      	b.n	8004608 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045fe:	2340      	movs	r3, #64	; 0x40
 8004600:	2101      	movs	r1, #1
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f002 f9c6 	bl	8006994 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	460b      	mov	r3, r1
 800461c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800461e:	2181      	movs	r1, #129	; 0x81
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f002 f8ee 	bl	8006802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800462c:	2101      	movs	r1, #1
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f002 f8e7 	bl	8006802 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800463c:	2182      	movs	r1, #130	; 0x82
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f002 f8df 	bl	8006802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00e      	beq.n	800467c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800466e:	4618      	mov	r0, r3
 8004670:	f002 f9d2 	bl	8006a18 <USBD_static_free>
    pdev->pClassData = NULL;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004698:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e0af      	b.n	8004810 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d03f      	beq.n	800473c <USBD_CDC_Setup+0xb4>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	f040 809f 	bne.w	8004800 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	88db      	ldrh	r3, [r3, #6]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d02e      	beq.n	8004728 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	b25b      	sxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	da16      	bge.n	8004702 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80046e0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	88d2      	ldrh	r2, [r2, #6]
 80046e6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	88db      	ldrh	r3, [r3, #6]
 80046ec:	2b07      	cmp	r3, #7
 80046ee:	bf28      	it	cs
 80046f0:	2307      	movcs	r3, #7
 80046f2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	89fa      	ldrh	r2, [r7, #14]
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f001 fb19 	bl	8005d32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004700:	e085      	b.n	800480e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	785a      	ldrb	r2, [r3, #1]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	88db      	ldrh	r3, [r3, #6]
 8004710:	b2da      	uxtb	r2, r3
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004718:	6939      	ldr	r1, [r7, #16]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	88db      	ldrh	r3, [r3, #6]
 800471e:	461a      	mov	r2, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 fb32 	bl	8005d8a <USBD_CtlPrepareRx>
      break;
 8004726:	e072      	b.n	800480e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	7850      	ldrb	r0, [r2, #1]
 8004734:	2200      	movs	r2, #0
 8004736:	6839      	ldr	r1, [r7, #0]
 8004738:	4798      	blx	r3
      break;
 800473a:	e068      	b.n	800480e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b0b      	cmp	r3, #11
 8004742:	d852      	bhi.n	80047ea <USBD_CDC_Setup+0x162>
 8004744:	a201      	add	r2, pc, #4	; (adr r2, 800474c <USBD_CDC_Setup+0xc4>)
 8004746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474a:	bf00      	nop
 800474c:	0800477d 	.word	0x0800477d
 8004750:	080047f9 	.word	0x080047f9
 8004754:	080047eb 	.word	0x080047eb
 8004758:	080047eb 	.word	0x080047eb
 800475c:	080047eb 	.word	0x080047eb
 8004760:	080047eb 	.word	0x080047eb
 8004764:	080047eb 	.word	0x080047eb
 8004768:	080047eb 	.word	0x080047eb
 800476c:	080047eb 	.word	0x080047eb
 8004770:	080047eb 	.word	0x080047eb
 8004774:	080047a7 	.word	0x080047a7
 8004778:	080047d1 	.word	0x080047d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b03      	cmp	r3, #3
 8004786:	d107      	bne.n	8004798 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004788:	f107 030a 	add.w	r3, r7, #10
 800478c:	2202      	movs	r2, #2
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f001 face 	bl	8005d32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004796:	e032      	b.n	80047fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f001 fa58 	bl	8005c50 <USBD_CtlError>
            ret = USBD_FAIL;
 80047a0:	2303      	movs	r3, #3
 80047a2:	75fb      	strb	r3, [r7, #23]
          break;
 80047a4:	e02b      	b.n	80047fe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d107      	bne.n	80047c2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80047b2:	f107 030d 	add.w	r3, r7, #13
 80047b6:	2201      	movs	r2, #1
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f001 fab9 	bl	8005d32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047c0:	e01d      	b.n	80047fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80047c2:	6839      	ldr	r1, [r7, #0]
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f001 fa43 	bl	8005c50 <USBD_CtlError>
            ret = USBD_FAIL;
 80047ca:	2303      	movs	r3, #3
 80047cc:	75fb      	strb	r3, [r7, #23]
          break;
 80047ce:	e016      	b.n	80047fe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d00f      	beq.n	80047fc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80047dc:	6839      	ldr	r1, [r7, #0]
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f001 fa36 	bl	8005c50 <USBD_CtlError>
            ret = USBD_FAIL;
 80047e4:	2303      	movs	r3, #3
 80047e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80047e8:	e008      	b.n	80047fc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f001 fa2f 	bl	8005c50 <USBD_CtlError>
          ret = USBD_FAIL;
 80047f2:	2303      	movs	r3, #3
 80047f4:	75fb      	strb	r3, [r7, #23]
          break;
 80047f6:	e002      	b.n	80047fe <USBD_CDC_Setup+0x176>
          break;
 80047f8:	bf00      	nop
 80047fa:	e008      	b.n	800480e <USBD_CDC_Setup+0x186>
          break;
 80047fc:	bf00      	nop
      }
      break;
 80047fe:	e006      	b.n	800480e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f001 fa24 	bl	8005c50 <USBD_CtlError>
      ret = USBD_FAIL;
 8004808:	2303      	movs	r3, #3
 800480a:	75fb      	strb	r3, [r7, #23]
      break;
 800480c:	bf00      	nop
  }

  return (uint8_t)ret;
 800480e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800482a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004836:	2303      	movs	r3, #3
 8004838:	e04f      	b.n	80048da <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004840:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	3318      	adds	r3, #24
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d029      	beq.n	80048ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004858:	78fa      	ldrb	r2, [r7, #3]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	3318      	adds	r3, #24
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	78f9      	ldrb	r1, [r7, #3]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	460b      	mov	r3, r1
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	1a5b      	subs	r3, r3, r1
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4403      	add	r3, r0
 8004878:	3344      	adds	r3, #68	; 0x44
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004880:	fb03 f301 	mul.w	r3, r3, r1
 8004884:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004886:	2b00      	cmp	r3, #0
 8004888:	d110      	bne.n	80048ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	3318      	adds	r3, #24
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800489e:	78f9      	ldrb	r1, [r7, #3]
 80048a0:	2300      	movs	r3, #0
 80048a2:	2200      	movs	r2, #0
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f002 f854 	bl	8006952 <USBD_LL_Transmit>
 80048aa:	e015      	b.n	80048d8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	460b      	mov	r3, r1
 80048ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004900:	2303      	movs	r3, #3
 8004902:	e015      	b.n	8004930 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	4619      	mov	r1, r3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f002 f864 	bl	80069d6 <USBD_LL_GetRxDataSize>
 800490e:	4602      	mov	r2, r0
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800492a:	4611      	mov	r1, r2
 800492c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004946:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800494e:	2303      	movs	r3, #3
 8004950:	e01b      	b.n	800498a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d015      	beq.n	8004988 <USBD_CDC_EP0_RxReady+0x50>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004962:	2bff      	cmp	r3, #255	; 0xff
 8004964:	d010      	beq.n	8004988 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004974:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800497c:	b292      	uxth	r2, r2
 800497e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	22ff      	movs	r2, #255	; 0xff
 8004984:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2243      	movs	r2, #67	; 0x43
 80049a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80049a2:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	20000094 	.word	0x20000094

080049b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2243      	movs	r2, #67	; 0x43
 80049c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80049c2:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	20000050 	.word	0x20000050

080049d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2243      	movs	r2, #67	; 0x43
 80049e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80049e2:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	200000d8 	.word	0x200000d8

080049f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	220a      	movs	r2, #10
 8004a00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004a02:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	2000000c 	.word	0x2000000c

08004a14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e004      	b.n	8004a32 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b087      	sub	sp, #28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a50:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e008      	b.n	8004a6e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a8a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e004      	b.n	8004aa0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004aba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e01a      	b.n	8004b04 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d114      	bne.n	8004b02 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004af6:	2181      	movs	r1, #129	; 0x81
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f001 ff2a 	bl	8006952 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e016      	b.n	8004b58 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	7c1b      	ldrb	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f001 ff28 	bl	8006994 <USBD_LL_PrepareReceive>
 8004b44:	e007      	b.n	8004b56 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b4c:	2340      	movs	r3, #64	; 0x40
 8004b4e:	2101      	movs	r1, #1
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f001 ff1f 	bl	8006994 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e01f      	b.n	8004bb8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	79fa      	ldrb	r2, [r7, #7]
 8004baa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f001 fd9b 	bl	80066e8 <USBD_LL_Init>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e016      	b.n	8004c06 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00b      	beq.n	8004c04 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	f107 020e 	add.w	r2, r7, #14
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4798      	blx	r3
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f001 fdb2 	bl	8006780 <USBD_LL_Start>
 8004c1c:	4603      	mov	r3, r0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	4611      	mov	r1, r2
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
 8004c66:	4603      	mov	r3, r0
 8004c68:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	4611      	mov	r1, r2
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	4798      	blx	r3
  }

  return USBD_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 ff90 	bl	8005bdc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004cca:	461a      	mov	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d01a      	beq.n	8004d16 <USBD_LL_SetupStage+0x72>
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d822      	bhi.n	8004d2a <USBD_LL_SetupStage+0x86>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <USBD_LL_SetupStage+0x4a>
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d00a      	beq.n	8004d02 <USBD_LL_SetupStage+0x5e>
 8004cec:	e01d      	b.n	8004d2a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa62 	bl	80051c0 <USBD_StdDevReq>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004d00:	e020      	b.n	8004d44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fac6 	bl	800529c <USBD_StdItfReq>
 8004d10:	4603      	mov	r3, r0
 8004d12:	73fb      	strb	r3, [r7, #15]
      break;
 8004d14:	e016      	b.n	8004d44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fb05 	bl	800532e <USBD_StdEPReq>
 8004d24:	4603      	mov	r3, r0
 8004d26:	73fb      	strb	r3, [r7, #15]
      break;
 8004d28:	e00c      	b.n	8004d44 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004d30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f001 fd81 	bl	8006840 <USBD_LL_StallEP>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	73fb      	strb	r3, [r7, #15]
      break;
 8004d42:	bf00      	nop
  }

  return ret;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b086      	sub	sp, #24
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	460b      	mov	r3, r1
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004d5c:	7afb      	ldrb	r3, [r7, #11]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d138      	bne.n	8004dd4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004d68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d14a      	bne.n	8004e0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d913      	bls.n	8004da8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	1ad2      	subs	r2, r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	4293      	cmp	r3, r2
 8004d98:	bf28      	it	cs
 8004d9a:	4613      	movcs	r3, r2
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f001 f80f 	bl	8005dc4 <USBD_CtlContinueRx>
 8004da6:	e030      	b.n	8004e0a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d10b      	bne.n	8004dcc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f001 f80a 	bl	8005de6 <USBD_CtlSendStatus>
 8004dd2:	e01a      	b.n	8004e0a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d114      	bne.n	8004e0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00e      	beq.n	8004e0a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	7afa      	ldrb	r2, [r7, #11]
 8004df6:	4611      	mov	r1, r2
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	4798      	blx	r3
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004e06:	7dfb      	ldrb	r3, [r7, #23]
 8004e08:	e000      	b.n	8004e0c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004e22:	7afb      	ldrb	r3, [r7, #11]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d16b      	bne.n	8004f00 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3314      	adds	r3, #20
 8004e2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d156      	bne.n	8004ee6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d914      	bls.n	8004e6e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	1ad2      	subs	r2, r2, r3
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 ff84 	bl	8005d68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e60:	2300      	movs	r3, #0
 8004e62:	2200      	movs	r2, #0
 8004e64:	2100      	movs	r1, #0
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f001 fd94 	bl	8006994 <USBD_LL_PrepareReceive>
 8004e6c:	e03b      	b.n	8004ee6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d11c      	bne.n	8004eb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d316      	bcc.n	8004eb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d20f      	bcs.n	8004eb4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004e94:	2200      	movs	r2, #0
 8004e96:	2100      	movs	r1, #0
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 ff65 	bl	8005d68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2100      	movs	r1, #0
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f001 fd71 	bl	8006994 <USBD_LL_PrepareReceive>
 8004eb2:	e018      	b.n	8004ee6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d10b      	bne.n	8004ed8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ed8:	2180      	movs	r1, #128	; 0x80
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f001 fcb0 	bl	8006840 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 ff93 	bl	8005e0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d122      	bne.n	8004f36 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f7ff fe98 	bl	8004c26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004efe:	e01a      	b.n	8004f36 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d114      	bne.n	8004f36 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00e      	beq.n	8004f36 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	7afa      	ldrb	r2, [r7, #11]
 8004f22:	4611      	mov	r1, r2
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	4798      	blx	r3
 8004f28:	4603      	mov	r3, r0
 8004f2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	e000      	b.n	8004f38 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e02f      	b.n	8004fd4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00f      	beq.n	8004f9e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6852      	ldr	r2, [r2, #4]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	4611      	mov	r1, r2
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f9e:	2340      	movs	r3, #64	; 0x40
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f001 fc06 	bl	80067b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2240      	movs	r2, #64	; 0x40
 8004fb6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fba:	2340      	movs	r3, #64	; 0x40
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2180      	movs	r1, #128	; 0x80
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 fbf8 	bl	80067b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2240      	movs	r2, #64	; 0x40
 8004fd0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800500a:	b2da      	uxtb	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2204      	movs	r2, #4
 8005016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b04      	cmp	r3, #4
 800503a:	d106      	bne.n	800504a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005042:	b2da      	uxtb	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800506a:	2303      	movs	r3, #3
 800506c:	e012      	b.n	8005094 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b03      	cmp	r3, #3
 8005078:	d10b      	bne.n	8005092 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e014      	b.n	80050e0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d10d      	bne.n	80050de <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	4611      	mov	r1, r2
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80050fe:	2303      	movs	r3, #3
 8005100:	e014      	b.n	800512c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b03      	cmp	r3, #3
 800510c:	d10d      	bne.n	800512a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	4611      	mov	r1, r2
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6852      	ldr	r2, [r2, #4]
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	4611      	mov	r1, r2
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4798      	blx	r3
  }

  return USBD_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005182:	b480      	push	{r7}
 8005184:	b087      	sub	sp, #28
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3301      	adds	r3, #1
 8005198:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80051a0:	8a3b      	ldrh	r3, [r7, #16]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	b21a      	sxth	r2, r3
 80051a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b21b      	sxth	r3, r3
 80051ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80051b0:	89fb      	ldrh	r3, [r7, #14]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d005      	beq.n	80051e6 <USBD_StdDevReq+0x26>
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	d853      	bhi.n	8005286 <USBD_StdDevReq+0xc6>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <USBD_StdDevReq+0x3a>
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d14f      	bne.n	8005286 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	6839      	ldr	r1, [r7, #0]
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	4798      	blx	r3
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
      break;
 80051f8:	e04a      	b.n	8005290 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	2b09      	cmp	r3, #9
 8005200:	d83b      	bhi.n	800527a <USBD_StdDevReq+0xba>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <USBD_StdDevReq+0x48>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	0800525d 	.word	0x0800525d
 800520c:	08005271 	.word	0x08005271
 8005210:	0800527b 	.word	0x0800527b
 8005214:	08005267 	.word	0x08005267
 8005218:	0800527b 	.word	0x0800527b
 800521c:	0800523b 	.word	0x0800523b
 8005220:	08005231 	.word	0x08005231
 8005224:	0800527b 	.word	0x0800527b
 8005228:	08005253 	.word	0x08005253
 800522c:	08005245 	.word	0x08005245
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9de 	bl	80055f4 <USBD_GetDescriptor>
          break;
 8005238:	e024      	b.n	8005284 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fb43 	bl	80058c8 <USBD_SetAddress>
          break;
 8005242:	e01f      	b.n	8005284 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fb82 	bl	8005950 <USBD_SetConfig>
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]
          break;
 8005250:	e018      	b.n	8005284 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fc21 	bl	8005a9c <USBD_GetConfig>
          break;
 800525a:	e013      	b.n	8005284 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fc52 	bl	8005b08 <USBD_GetStatus>
          break;
 8005264:	e00e      	b.n	8005284 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fc81 	bl	8005b70 <USBD_SetFeature>
          break;
 800526e:	e009      	b.n	8005284 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fc90 	bl	8005b98 <USBD_ClrFeature>
          break;
 8005278:	e004      	b.n	8005284 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800527a:	6839      	ldr	r1, [r7, #0]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fce7 	bl	8005c50 <USBD_CtlError>
          break;
 8005282:	bf00      	nop
      }
      break;
 8005284:	e004      	b.n	8005290 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fce1 	bl	8005c50 <USBD_CtlError>
      break;
 800528e:	bf00      	nop
  }

  return ret;
 8005290:	7bfb      	ldrb	r3, [r7, #15]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop

0800529c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d005      	beq.n	80052c2 <USBD_StdItfReq+0x26>
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d82f      	bhi.n	800531a <USBD_StdItfReq+0x7e>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <USBD_StdItfReq+0x26>
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d12b      	bne.n	800531a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d81d      	bhi.n	800530c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	889b      	ldrh	r3, [r3, #4]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d813      	bhi.n	8005302 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
 80052e8:	4603      	mov	r3, r0
 80052ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	88db      	ldrh	r3, [r3, #6]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d110      	bne.n	8005316 <USBD_StdItfReq+0x7a>
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10d      	bne.n	8005316 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fd73 	bl	8005de6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005300:	e009      	b.n	8005316 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fca3 	bl	8005c50 <USBD_CtlError>
          break;
 800530a:	e004      	b.n	8005316 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fc9e 	bl	8005c50 <USBD_CtlError>
          break;
 8005314:	e000      	b.n	8005318 <USBD_StdItfReq+0x7c>
          break;
 8005316:	bf00      	nop
      }
      break;
 8005318:	e004      	b.n	8005324 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800531a:	6839      	ldr	r1, [r7, #0]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fc97 	bl	8005c50 <USBD_CtlError>
      break;
 8005322:	bf00      	nop
  }

  return ret;
 8005324:	7bfb      	ldrb	r3, [r7, #15]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	889b      	ldrh	r3, [r3, #4]
 8005340:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d007      	beq.n	800535e <USBD_StdEPReq+0x30>
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	f200 8145 	bhi.w	80055de <USBD_StdEPReq+0x2b0>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00c      	beq.n	8005372 <USBD_StdEPReq+0x44>
 8005358:	2b20      	cmp	r3, #32
 800535a:	f040 8140 	bne.w	80055de <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	6839      	ldr	r1, [r7, #0]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
 800536c:	4603      	mov	r3, r0
 800536e:	73fb      	strb	r3, [r7, #15]
      break;
 8005370:	e13a      	b.n	80055e8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	2b03      	cmp	r3, #3
 8005378:	d007      	beq.n	800538a <USBD_StdEPReq+0x5c>
 800537a:	2b03      	cmp	r3, #3
 800537c:	f300 8129 	bgt.w	80055d2 <USBD_StdEPReq+0x2a4>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d07f      	beq.n	8005484 <USBD_StdEPReq+0x156>
 8005384:	2b01      	cmp	r3, #1
 8005386:	d03c      	beq.n	8005402 <USBD_StdEPReq+0xd4>
 8005388:	e123      	b.n	80055d2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d002      	beq.n	800539c <USBD_StdEPReq+0x6e>
 8005396:	2b03      	cmp	r3, #3
 8005398:	d016      	beq.n	80053c8 <USBD_StdEPReq+0x9a>
 800539a:	e02c      	b.n	80053f6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <USBD_StdEPReq+0x90>
 80053a2:	7bbb      	ldrb	r3, [r7, #14]
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d00a      	beq.n	80053be <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80053a8:	7bbb      	ldrb	r3, [r7, #14]
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f001 fa47 	bl	8006840 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80053b2:	2180      	movs	r1, #128	; 0x80
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f001 fa43 	bl	8006840 <USBD_LL_StallEP>
 80053ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80053bc:	e020      	b.n	8005400 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80053be:	6839      	ldr	r1, [r7, #0]
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fc45 	bl	8005c50 <USBD_CtlError>
              break;
 80053c6:	e01b      	b.n	8005400 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	885b      	ldrh	r3, [r3, #2]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10e      	bne.n	80053ee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80053d0:	7bbb      	ldrb	r3, [r7, #14]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00b      	beq.n	80053ee <USBD_StdEPReq+0xc0>
 80053d6:	7bbb      	ldrb	r3, [r7, #14]
 80053d8:	2b80      	cmp	r3, #128	; 0x80
 80053da:	d008      	beq.n	80053ee <USBD_StdEPReq+0xc0>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	88db      	ldrh	r3, [r3, #6]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80053e4:	7bbb      	ldrb	r3, [r7, #14]
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 fa29 	bl	8006840 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fcf9 	bl	8005de6 <USBD_CtlSendStatus>

              break;
 80053f4:	e004      	b.n	8005400 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fc29 	bl	8005c50 <USBD_CtlError>
              break;
 80053fe:	bf00      	nop
          }
          break;
 8005400:	e0ec      	b.n	80055dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d002      	beq.n	8005414 <USBD_StdEPReq+0xe6>
 800540e:	2b03      	cmp	r3, #3
 8005410:	d016      	beq.n	8005440 <USBD_StdEPReq+0x112>
 8005412:	e030      	b.n	8005476 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005414:	7bbb      	ldrb	r3, [r7, #14]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00d      	beq.n	8005436 <USBD_StdEPReq+0x108>
 800541a:	7bbb      	ldrb	r3, [r7, #14]
 800541c:	2b80      	cmp	r3, #128	; 0x80
 800541e:	d00a      	beq.n	8005436 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f001 fa0b 	bl	8006840 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800542a:	2180      	movs	r1, #128	; 0x80
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 fa07 	bl	8006840 <USBD_LL_StallEP>
 8005432:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005434:	e025      	b.n	8005482 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005436:	6839      	ldr	r1, [r7, #0]
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fc09 	bl	8005c50 <USBD_CtlError>
              break;
 800543e:	e020      	b.n	8005482 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	885b      	ldrh	r3, [r3, #2]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11b      	bne.n	8005480 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005448:	7bbb      	ldrb	r3, [r7, #14]
 800544a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800544e:	2b00      	cmp	r3, #0
 8005450:	d004      	beq.n	800545c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005452:	7bbb      	ldrb	r3, [r7, #14]
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 fa11 	bl	800687e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fcc2 	bl	8005de6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	6839      	ldr	r1, [r7, #0]
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
 8005470:	4603      	mov	r3, r0
 8005472:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005474:	e004      	b.n	8005480 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fbe9 	bl	8005c50 <USBD_CtlError>
              break;
 800547e:	e000      	b.n	8005482 <USBD_StdEPReq+0x154>
              break;
 8005480:	bf00      	nop
          }
          break;
 8005482:	e0ab      	b.n	80055dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d002      	beq.n	8005496 <USBD_StdEPReq+0x168>
 8005490:	2b03      	cmp	r3, #3
 8005492:	d032      	beq.n	80054fa <USBD_StdEPReq+0x1cc>
 8005494:	e097      	b.n	80055c6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005496:	7bbb      	ldrb	r3, [r7, #14]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <USBD_StdEPReq+0x17e>
 800549c:	7bbb      	ldrb	r3, [r7, #14]
 800549e:	2b80      	cmp	r3, #128	; 0x80
 80054a0:	d004      	beq.n	80054ac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fbd3 	bl	8005c50 <USBD_CtlError>
                break;
 80054aa:	e091      	b.n	80055d0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da0b      	bge.n	80054cc <USBD_StdEPReq+0x19e>
 80054b4:	7bbb      	ldrb	r3, [r7, #14]
 80054b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	3310      	adds	r3, #16
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	4413      	add	r3, r2
 80054c8:	3304      	adds	r3, #4
 80054ca:	e00b      	b.n	80054e4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80054cc:	7bbb      	ldrb	r3, [r7, #14]
 80054ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	4413      	add	r3, r2
 80054e2:	3304      	adds	r3, #4
 80054e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2202      	movs	r2, #2
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fc1d 	bl	8005d32 <USBD_CtlSendData>
              break;
 80054f8:	e06a      	b.n	80055d0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80054fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	da11      	bge.n	8005526 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005502:	7bbb      	ldrb	r3, [r7, #14]
 8005504:	f003 020f 	and.w	r2, r3, #15
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3324      	adds	r3, #36	; 0x24
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d117      	bne.n	800554c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fb96 	bl	8005c50 <USBD_CtlError>
                  break;
 8005524:	e054      	b.n	80055d0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005526:	7bbb      	ldrb	r3, [r7, #14]
 8005528:	f003 020f 	and.w	r2, r3, #15
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fb83 	bl	8005c50 <USBD_CtlError>
                  break;
 800554a:	e041      	b.n	80055d0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800554c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005550:	2b00      	cmp	r3, #0
 8005552:	da0b      	bge.n	800556c <USBD_StdEPReq+0x23e>
 8005554:	7bbb      	ldrb	r3, [r7, #14]
 8005556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	3310      	adds	r3, #16
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4413      	add	r3, r2
 8005568:	3304      	adds	r3, #4
 800556a:	e00b      	b.n	8005584 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800556c:	7bbb      	ldrb	r3, [r7, #14]
 800556e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	3304      	adds	r3, #4
 8005584:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005586:	7bbb      	ldrb	r3, [r7, #14]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <USBD_StdEPReq+0x264>
 800558c:	7bbb      	ldrb	r3, [r7, #14]
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d103      	bne.n	800559a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	e00e      	b.n	80055b8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800559a:	7bbb      	ldrb	r3, [r7, #14]
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 f98c 	bl	80068bc <USBD_LL_IsStallEP>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2201      	movs	r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	e002      	b.n	80055b8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2202      	movs	r2, #2
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fbb7 	bl	8005d32 <USBD_CtlSendData>
              break;
 80055c4:	e004      	b.n	80055d0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fb41 	bl	8005c50 <USBD_CtlError>
              break;
 80055ce:	bf00      	nop
          }
          break;
 80055d0:	e004      	b.n	80055dc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80055d2:	6839      	ldr	r1, [r7, #0]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fb3b 	bl	8005c50 <USBD_CtlError>
          break;
 80055da:	bf00      	nop
      }
      break;
 80055dc:	e004      	b.n	80055e8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fb35 	bl	8005c50 <USBD_CtlError>
      break;
 80055e6:	bf00      	nop
  }

  return ret;
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	885b      	ldrh	r3, [r3, #2]
 800560e:	0a1b      	lsrs	r3, r3, #8
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b01      	subs	r3, #1
 8005614:	2b06      	cmp	r3, #6
 8005616:	f200 8128 	bhi.w	800586a <USBD_GetDescriptor+0x276>
 800561a:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <USBD_GetDescriptor+0x2c>)
 800561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005620:	0800563d 	.word	0x0800563d
 8005624:	08005655 	.word	0x08005655
 8005628:	08005695 	.word	0x08005695
 800562c:	0800586b 	.word	0x0800586b
 8005630:	0800586b 	.word	0x0800586b
 8005634:	0800580b 	.word	0x0800580b
 8005638:	08005837 	.word	0x08005837
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	7c12      	ldrb	r2, [r2, #16]
 8005648:	f107 0108 	add.w	r1, r7, #8
 800564c:	4610      	mov	r0, r2
 800564e:	4798      	blx	r3
 8005650:	60f8      	str	r0, [r7, #12]
      break;
 8005652:	e112      	b.n	800587a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	7c1b      	ldrb	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10d      	bne.n	8005678 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	f107 0208 	add.w	r2, r7, #8
 8005668:	4610      	mov	r0, r2
 800566a:	4798      	blx	r3
 800566c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	2202      	movs	r2, #2
 8005674:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005676:	e100      	b.n	800587a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	f107 0208 	add.w	r2, r7, #8
 8005684:	4610      	mov	r0, r2
 8005686:	4798      	blx	r3
 8005688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	2202      	movs	r2, #2
 8005690:	701a      	strb	r2, [r3, #0]
      break;
 8005692:	e0f2      	b.n	800587a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	885b      	ldrh	r3, [r3, #2]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b05      	cmp	r3, #5
 800569c:	f200 80ac 	bhi.w	80057f8 <USBD_GetDescriptor+0x204>
 80056a0:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <USBD_GetDescriptor+0xb4>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056c1 	.word	0x080056c1
 80056ac:	080056f5 	.word	0x080056f5
 80056b0:	08005729 	.word	0x08005729
 80056b4:	0800575d 	.word	0x0800575d
 80056b8:	08005791 	.word	0x08005791
 80056bc:	080057c5 	.word	0x080057c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	7c12      	ldrb	r2, [r2, #16]
 80056d8:	f107 0108 	add.w	r1, r7, #8
 80056dc:	4610      	mov	r0, r2
 80056de:	4798      	blx	r3
 80056e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056e2:	e091      	b.n	8005808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056e4:	6839      	ldr	r1, [r7, #0]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fab2 	bl	8005c50 <USBD_CtlError>
            err++;
 80056ec:	7afb      	ldrb	r3, [r7, #11]
 80056ee:	3301      	adds	r3, #1
 80056f0:	72fb      	strb	r3, [r7, #11]
          break;
 80056f2:	e089      	b.n	8005808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	7c12      	ldrb	r2, [r2, #16]
 800570c:	f107 0108 	add.w	r1, r7, #8
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
 8005714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005716:	e077      	b.n	8005808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa98 	bl	8005c50 <USBD_CtlError>
            err++;
 8005720:	7afb      	ldrb	r3, [r7, #11]
 8005722:	3301      	adds	r3, #1
 8005724:	72fb      	strb	r3, [r7, #11]
          break;
 8005726:	e06f      	b.n	8005808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	7c12      	ldrb	r2, [r2, #16]
 8005740:	f107 0108 	add.w	r1, r7, #8
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
 8005748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800574a:	e05d      	b.n	8005808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa7e 	bl	8005c50 <USBD_CtlError>
            err++;
 8005754:	7afb      	ldrb	r3, [r7, #11]
 8005756:	3301      	adds	r3, #1
 8005758:	72fb      	strb	r3, [r7, #11]
          break;
 800575a:	e055      	b.n	8005808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00b      	beq.n	8005780 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	7c12      	ldrb	r2, [r2, #16]
 8005774:	f107 0108 	add.w	r1, r7, #8
 8005778:	4610      	mov	r0, r2
 800577a:	4798      	blx	r3
 800577c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800577e:	e043      	b.n	8005808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa64 	bl	8005c50 <USBD_CtlError>
            err++;
 8005788:	7afb      	ldrb	r3, [r7, #11]
 800578a:	3301      	adds	r3, #1
 800578c:	72fb      	strb	r3, [r7, #11]
          break;
 800578e:	e03b      	b.n	8005808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00b      	beq.n	80057b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	7c12      	ldrb	r2, [r2, #16]
 80057a8:	f107 0108 	add.w	r1, r7, #8
 80057ac:	4610      	mov	r0, r2
 80057ae:	4798      	blx	r3
 80057b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057b2:	e029      	b.n	8005808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa4a 	bl	8005c50 <USBD_CtlError>
            err++;
 80057bc:	7afb      	ldrb	r3, [r7, #11]
 80057be:	3301      	adds	r3, #1
 80057c0:	72fb      	strb	r3, [r7, #11]
          break;
 80057c2:	e021      	b.n	8005808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00b      	beq.n	80057e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	7c12      	ldrb	r2, [r2, #16]
 80057dc:	f107 0108 	add.w	r1, r7, #8
 80057e0:	4610      	mov	r0, r2
 80057e2:	4798      	blx	r3
 80057e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057e6:	e00f      	b.n	8005808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa30 	bl	8005c50 <USBD_CtlError>
            err++;
 80057f0:	7afb      	ldrb	r3, [r7, #11]
 80057f2:	3301      	adds	r3, #1
 80057f4:	72fb      	strb	r3, [r7, #11]
          break;
 80057f6:	e007      	b.n	8005808 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa28 	bl	8005c50 <USBD_CtlError>
          err++;
 8005800:	7afb      	ldrb	r3, [r7, #11]
 8005802:	3301      	adds	r3, #1
 8005804:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005806:	bf00      	nop
      }
      break;
 8005808:	e037      	b.n	800587a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	7c1b      	ldrb	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d109      	bne.n	8005826 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	f107 0208 	add.w	r2, r7, #8
 800581e:	4610      	mov	r0, r2
 8005820:	4798      	blx	r3
 8005822:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005824:	e029      	b.n	800587a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fa11 	bl	8005c50 <USBD_CtlError>
        err++;
 800582e:	7afb      	ldrb	r3, [r7, #11]
 8005830:	3301      	adds	r3, #1
 8005832:	72fb      	strb	r3, [r7, #11]
      break;
 8005834:	e021      	b.n	800587a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	7c1b      	ldrb	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10d      	bne.n	800585a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f107 0208 	add.w	r2, r7, #8
 800584a:	4610      	mov	r0, r2
 800584c:	4798      	blx	r3
 800584e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3301      	adds	r3, #1
 8005854:	2207      	movs	r2, #7
 8005856:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005858:	e00f      	b.n	800587a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f9f7 	bl	8005c50 <USBD_CtlError>
        err++;
 8005862:	7afb      	ldrb	r3, [r7, #11]
 8005864:	3301      	adds	r3, #1
 8005866:	72fb      	strb	r3, [r7, #11]
      break;
 8005868:	e007      	b.n	800587a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f9ef 	bl	8005c50 <USBD_CtlError>
      err++;
 8005872:	7afb      	ldrb	r3, [r7, #11]
 8005874:	3301      	adds	r3, #1
 8005876:	72fb      	strb	r3, [r7, #11]
      break;
 8005878:	bf00      	nop
  }

  if (err != 0U)
 800587a:	7afb      	ldrb	r3, [r7, #11]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d11e      	bne.n	80058be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	88db      	ldrh	r3, [r3, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d016      	beq.n	80058b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005888:	893b      	ldrh	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00e      	beq.n	80058ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	88da      	ldrh	r2, [r3, #6]
 8005892:	893b      	ldrh	r3, [r7, #8]
 8005894:	4293      	cmp	r3, r2
 8005896:	bf28      	it	cs
 8005898:	4613      	movcs	r3, r2
 800589a:	b29b      	uxth	r3, r3
 800589c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800589e:	893b      	ldrh	r3, [r7, #8]
 80058a0:	461a      	mov	r2, r3
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fa44 	bl	8005d32 <USBD_CtlSendData>
 80058aa:	e009      	b.n	80058c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f9ce 	bl	8005c50 <USBD_CtlError>
 80058b4:	e004      	b.n	80058c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fa95 	bl	8005de6 <USBD_CtlSendStatus>
 80058bc:	e000      	b.n	80058c0 <USBD_GetDescriptor+0x2cc>
    return;
 80058be:	bf00      	nop
  }
}
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop

080058c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	889b      	ldrh	r3, [r3, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d131      	bne.n	800593e <USBD_SetAddress+0x76>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	88db      	ldrh	r3, [r3, #6]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d12d      	bne.n	800593e <USBD_SetAddress+0x76>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	885b      	ldrh	r3, [r3, #2]
 80058e6:	2b7f      	cmp	r3, #127	; 0x7f
 80058e8:	d829      	bhi.n	800593e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	885b      	ldrh	r3, [r3, #2]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d104      	bne.n	800590c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f9a3 	bl	8005c50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800590a:	e01d      	b.n	8005948 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	7bfa      	ldrb	r2, [r7, #15]
 8005910:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fffb 	bl	8006914 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fa61 	bl	8005de6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d004      	beq.n	8005934 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005932:	e009      	b.n	8005948 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800593c:	e004      	b.n	8005948 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f985 	bl	8005c50 <USBD_CtlError>
  }
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	885b      	ldrh	r3, [r3, #2]
 8005962:	b2da      	uxtb	r2, r3
 8005964:	4b4c      	ldr	r3, [pc, #304]	; (8005a98 <USBD_SetConfig+0x148>)
 8005966:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005968:	4b4b      	ldr	r3, [pc, #300]	; (8005a98 <USBD_SetConfig+0x148>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d905      	bls.n	800597c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f96c 	bl	8005c50 <USBD_CtlError>
    return USBD_FAIL;
 8005978:	2303      	movs	r3, #3
 800597a:	e088      	b.n	8005a8e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d002      	beq.n	800598e <USBD_SetConfig+0x3e>
 8005988:	2b03      	cmp	r3, #3
 800598a:	d025      	beq.n	80059d8 <USBD_SetConfig+0x88>
 800598c:	e071      	b.n	8005a72 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800598e:	4b42      	ldr	r3, [pc, #264]	; (8005a98 <USBD_SetConfig+0x148>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d01c      	beq.n	80059d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005996:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <USBD_SetConfig+0x148>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80059a0:	4b3d      	ldr	r3, [pc, #244]	; (8005a98 <USBD_SetConfig+0x148>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff f948 	bl	8004c3c <USBD_SetClassConfig>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d004      	beq.n	80059c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f949 	bl	8005c50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80059be:	e065      	b.n	8005a8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fa10 	bl	8005de6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2203      	movs	r2, #3
 80059ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80059ce:	e05d      	b.n	8005a8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fa08 	bl	8005de6 <USBD_CtlSendStatus>
      break;
 80059d6:	e059      	b.n	8005a8c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80059d8:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <USBD_SetConfig+0x148>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d112      	bne.n	8005a06 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80059e8:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <USBD_SetConfig+0x148>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	461a      	mov	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80059f2:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <USBD_SetConfig+0x148>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff f93b 	bl	8004c74 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9f1 	bl	8005de6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a04:	e042      	b.n	8005a8c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <USBD_SetConfig+0x148>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d02a      	beq.n	8005a6a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff f929 	bl	8004c74 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <USBD_SetConfig+0x148>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <USBD_SetConfig+0x148>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff f902 	bl	8004c3c <USBD_SetClassConfig>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00f      	beq.n	8005a62 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f903 	bl	8005c50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff f90e 	bl	8004c74 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005a60:	e014      	b.n	8005a8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f9bf 	bl	8005de6 <USBD_CtlSendStatus>
      break;
 8005a68:	e010      	b.n	8005a8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f9bb 	bl	8005de6 <USBD_CtlSendStatus>
      break;
 8005a70:	e00c      	b.n	8005a8c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f8eb 	bl	8005c50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a7a:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <USBD_SetConfig+0x148>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff f8f7 	bl	8004c74 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005a86:	2303      	movs	r3, #3
 8005a88:	73fb      	strb	r3, [r7, #15]
      break;
 8005a8a:	bf00      	nop
  }

  return ret;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20000204 	.word	0x20000204

08005a9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	88db      	ldrh	r3, [r3, #6]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d004      	beq.n	8005ab8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f8cd 	bl	8005c50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005ab6:	e023      	b.n	8005b00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	dc02      	bgt.n	8005aca <USBD_GetConfig+0x2e>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	dc03      	bgt.n	8005ad0 <USBD_GetConfig+0x34>
 8005ac8:	e015      	b.n	8005af6 <USBD_GetConfig+0x5a>
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d00b      	beq.n	8005ae6 <USBD_GetConfig+0x4a>
 8005ace:	e012      	b.n	8005af6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3308      	adds	r3, #8
 8005ada:	2201      	movs	r2, #1
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f927 	bl	8005d32 <USBD_CtlSendData>
        break;
 8005ae4:	e00c      	b.n	8005b00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	2201      	movs	r2, #1
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f91f 	bl	8005d32 <USBD_CtlSendData>
        break;
 8005af4:	e004      	b.n	8005b00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005af6:	6839      	ldr	r1, [r7, #0]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f8a9 	bl	8005c50 <USBD_CtlError>
        break;
 8005afe:	bf00      	nop
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d81e      	bhi.n	8005b5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	88db      	ldrh	r3, [r3, #6]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d004      	beq.n	8005b32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f890 	bl	8005c50 <USBD_CtlError>
        break;
 8005b30:	e01a      	b.n	8005b68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f043 0202 	orr.w	r2, r3, #2
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	330c      	adds	r3, #12
 8005b52:	2202      	movs	r2, #2
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f8eb 	bl	8005d32 <USBD_CtlSendData>
      break;
 8005b5c:	e004      	b.n	8005b68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f875 	bl	8005c50 <USBD_CtlError>
      break;
 8005b66:	bf00      	nop
  }
}
 8005b68:	bf00      	nop
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	885b      	ldrh	r3, [r3, #2]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d106      	bne.n	8005b90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f92b 	bl	8005de6 <USBD_CtlSendStatus>
  }
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d80b      	bhi.n	8005bc8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	885b      	ldrh	r3, [r3, #2]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d10c      	bne.n	8005bd2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f910 	bl	8005de6 <USBD_CtlSendStatus>
      }
      break;
 8005bc6:	e004      	b.n	8005bd2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f840 	bl	8005c50 <USBD_CtlError>
      break;
 8005bd0:	e000      	b.n	8005bd4 <USBD_ClrFeature+0x3c>
      break;
 8005bd2:	bf00      	nop
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	781a      	ldrb	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	781a      	ldrb	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3301      	adds	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff fabb 	bl	8005182 <SWAPBYTE>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7ff faae 	bl	8005182 <SWAPBYTE>
 8005c26:	4603      	mov	r3, r0
 8005c28:	461a      	mov	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f7ff faa1 	bl	8005182 <SWAPBYTE>
 8005c40:	4603      	mov	r3, r0
 8005c42:	461a      	mov	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	80da      	strh	r2, [r3, #6]
}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c5a:	2180      	movs	r1, #128	; 0x80
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fdef 	bl	8006840 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005c62:	2100      	movs	r1, #0
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fdeb 	bl	8006840 <USBD_LL_StallEP>
}
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b086      	sub	sp, #24
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d036      	beq.n	8005cf6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005c8c:	6938      	ldr	r0, [r7, #16]
 8005c8e:	f000 f836 	bl	8005cfe <USBD_GetLen>
 8005c92:	4603      	mov	r3, r0
 8005c94:	3301      	adds	r3, #1
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	7812      	ldrb	r2, [r2, #0]
 8005caa:	701a      	strb	r2, [r3, #0]
  idx++;
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	2203      	movs	r2, #3
 8005cba:	701a      	strb	r2, [r3, #0]
  idx++;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005cc2:	e013      	b.n	8005cec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	4413      	add	r3, r2
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	7812      	ldrb	r2, [r2, #0]
 8005cce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	613b      	str	r3, [r7, #16]
    idx++;
 8005cd6:	7dfb      	ldrb	r3, [r7, #23]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	701a      	strb	r2, [r3, #0]
    idx++;
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e7      	bne.n	8005cc4 <USBD_GetString+0x52>
 8005cf4:	e000      	b.n	8005cf8 <USBD_GetString+0x86>
    return;
 8005cf6:	bf00      	nop
  }
}
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d0e:	e005      	b.n	8005d1c <USBD_GetLen+0x1e>
  {
    len++;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	3301      	adds	r3, #1
 8005d14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1f5      	bne.n	8005d10 <USBD_GetLen+0x12>
  }

  return len;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	2100      	movs	r1, #0
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fdfa 	bl	8006952 <USBD_LL_Transmit>

  return USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	2100      	movs	r1, #0
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 fde9 	bl	8006952 <USBD_LL_Transmit>

  return USBD_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2203      	movs	r2, #3
 8005d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	2100      	movs	r1, #0
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fded 	bl	8006994 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fddc 	bl	8006994 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2204      	movs	r2, #4
 8005df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005df6:	2300      	movs	r3, #0
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fda8 	bl	8006952 <USBD_LL_Transmit>

  return USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2205      	movs	r2, #5
 8005e18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2100      	movs	r1, #0
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fdb6 	bl	8006994 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4912      	ldr	r1, [pc, #72]	; (8005e84 <MX_USB_DEVICE_Init+0x50>)
 8005e3c:	4812      	ldr	r0, [pc, #72]	; (8005e88 <MX_USB_DEVICE_Init+0x54>)
 8005e3e:	f7fe fe8f 	bl	8004b60 <USBD_Init>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005e48:	f7fa fc22 	bl	8000690 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005e4c:	490f      	ldr	r1, [pc, #60]	; (8005e8c <MX_USB_DEVICE_Init+0x58>)
 8005e4e:	480e      	ldr	r0, [pc, #56]	; (8005e88 <MX_USB_DEVICE_Init+0x54>)
 8005e50:	f7fe feb6 	bl	8004bc0 <USBD_RegisterClass>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005e5a:	f7fa fc19 	bl	8000690 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005e5e:	490c      	ldr	r1, [pc, #48]	; (8005e90 <MX_USB_DEVICE_Init+0x5c>)
 8005e60:	4809      	ldr	r0, [pc, #36]	; (8005e88 <MX_USB_DEVICE_Init+0x54>)
 8005e62:	f7fe fdd7 	bl	8004a14 <USBD_CDC_RegisterInterface>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005e6c:	f7fa fc10 	bl	8000690 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e70:	4805      	ldr	r0, [pc, #20]	; (8005e88 <MX_USB_DEVICE_Init+0x54>)
 8005e72:	f7fe fecc 	bl	8004c0e <USBD_Start>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005e7c:	f7fa fc08 	bl	8000690 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e80:	bf00      	nop
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20000130 	.word	0x20000130
 8005e88:	20000468 	.word	0x20000468
 8005e8c:	20000018 	.word	0x20000018
 8005e90:	2000011c 	.word	0x2000011c

08005e94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4905      	ldr	r1, [pc, #20]	; (8005eb0 <CDC_Init_FS+0x1c>)
 8005e9c:	4805      	ldr	r0, [pc, #20]	; (8005eb4 <CDC_Init_FS+0x20>)
 8005e9e:	f7fe fdce 	bl	8004a3e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005ea2:	4905      	ldr	r1, [pc, #20]	; (8005eb8 <CDC_Init_FS+0x24>)
 8005ea4:	4803      	ldr	r0, [pc, #12]	; (8005eb4 <CDC_Init_FS+0x20>)
 8005ea6:	f7fe fde8 	bl	8004a7a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005eaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000f38 	.word	0x20000f38
 8005eb4:	20000468 	.word	0x20000468
 8005eb8:	20000738 	.word	0x20000738

08005ebc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005ec0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	6039      	str	r1, [r7, #0]
 8005ed6:	71fb      	strb	r3, [r7, #7]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	2b23      	cmp	r3, #35	; 0x23
 8005ee0:	d84a      	bhi.n	8005f78 <CDC_Control_FS+0xac>
 8005ee2:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <CDC_Control_FS+0x1c>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005f79 	.word	0x08005f79
 8005eec:	08005f79 	.word	0x08005f79
 8005ef0:	08005f79 	.word	0x08005f79
 8005ef4:	08005f79 	.word	0x08005f79
 8005ef8:	08005f79 	.word	0x08005f79
 8005efc:	08005f79 	.word	0x08005f79
 8005f00:	08005f79 	.word	0x08005f79
 8005f04:	08005f79 	.word	0x08005f79
 8005f08:	08005f79 	.word	0x08005f79
 8005f0c:	08005f79 	.word	0x08005f79
 8005f10:	08005f79 	.word	0x08005f79
 8005f14:	08005f79 	.word	0x08005f79
 8005f18:	08005f79 	.word	0x08005f79
 8005f1c:	08005f79 	.word	0x08005f79
 8005f20:	08005f79 	.word	0x08005f79
 8005f24:	08005f79 	.word	0x08005f79
 8005f28:	08005f79 	.word	0x08005f79
 8005f2c:	08005f79 	.word	0x08005f79
 8005f30:	08005f79 	.word	0x08005f79
 8005f34:	08005f79 	.word	0x08005f79
 8005f38:	08005f79 	.word	0x08005f79
 8005f3c:	08005f79 	.word	0x08005f79
 8005f40:	08005f79 	.word	0x08005f79
 8005f44:	08005f79 	.word	0x08005f79
 8005f48:	08005f79 	.word	0x08005f79
 8005f4c:	08005f79 	.word	0x08005f79
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005f79 	.word	0x08005f79
 8005f5c:	08005f79 	.word	0x08005f79
 8005f60:	08005f79 	.word	0x08005f79
 8005f64:	08005f79 	.word	0x08005f79
 8005f68:	08005f79 	.word	0x08005f79
 8005f6c:	08005f79 	.word	0x08005f79
 8005f70:	08005f79 	.word	0x08005f79
 8005f74:	08005f79 	.word	0x08005f79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005f78:	bf00      	nop
  }

  return (USBD_OK);
 8005f7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005f88:	b5b0      	push	{r4, r5, r7, lr}
 8005f8a:	b096      	sub	sp, #88	; 0x58
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t	Tx_Buffer[64];
	uint8_t	Aux_Buffer[16];
	static	uint16_t	PacketCount = 0;

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4874      	ldr	r0, [pc, #464]	; (8006168 <CDC_Receive_FS+0x1e0>)
 8005f96:	f7fe fd70 	bl	8004a7a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005f9a:	4873      	ldr	r0, [pc, #460]	; (8006168 <CDC_Receive_FS+0x1e0>)
 8005f9c:	f7fe fdb6 	bl	8004b0c <USBD_CDC_ReceivePacket>

	if(xUSBDownloadVar.RxMode == true)
 8005fa0:	4b72      	ldr	r3, [pc, #456]	; (800616c <CDC_Receive_FS+0x1e4>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d036      	beq.n	8006018 <CDC_Receive_FS+0x90>
	{
		memcpy(&xUSBDownloadVar.DataBuffer[PACKET_SIZE*PacketCount], &Buf[0], PACKET_SIZE);
 8005faa:	4b70      	ldr	r3, [pc, #448]	; (800616c <CDC_Receive_FS+0x1e4>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	4a70      	ldr	r2, [pc, #448]	; (8006170 <CDC_Receive_FS+0x1e8>)
 8005fb0:	8812      	ldrh	r2, [r2, #0]
 8005fb2:	0192      	lsls	r2, r2, #6
 8005fb4:	4413      	add	r3, r2
 8005fb6:	2240      	movs	r2, #64	; 0x40
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fdb6 	bl	8006b2c <memcpy>
		PacketCount++;
 8005fc0:	4b6b      	ldr	r3, [pc, #428]	; (8006170 <CDC_Receive_FS+0x1e8>)
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	4b69      	ldr	r3, [pc, #420]	; (8006170 <CDC_Receive_FS+0x1e8>)
 8005fca:	801a      	strh	r2, [r3, #0]
		if(PacketCount >= ((xUSBDownloadVar.Size+(PACKET_SIZE-1))/PACKET_SIZE))
 8005fcc:	4b68      	ldr	r3, [pc, #416]	; (8006170 <CDC_Receive_FS+0x1e8>)
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	4b66      	ldr	r3, [pc, #408]	; (800616c <CDC_Receive_FS+0x1e4>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	333f      	adds	r3, #63	; 0x3f
 8005fd8:	099b      	lsrs	r3, r3, #6
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	f0c0 80be 	bcc.w	800615c <CDC_Receive_FS+0x1d4>
		{
			xUSBDownloadVar.RxMode	=	false;
 8005fe0:	4b62      	ldr	r3, [pc, #392]	; (800616c <CDC_Receive_FS+0x1e4>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
			strncpy((char*)Tx_Buffer, "File Received\n", 15);
 8005fe6:	f107 0318 	add.w	r3, r7, #24
 8005fea:	4a62      	ldr	r2, [pc, #392]	; (8006174 <CDC_Receive_FS+0x1ec>)
 8005fec:	461c      	mov	r4, r3
 8005fee:	4613      	mov	r3, r2
 8005ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ff2:	c407      	stmia	r4!, {r0, r1, r2}
 8005ff4:	8023      	strh	r3, [r4, #0]
 8005ff6:	3402      	adds	r4, #2
 8005ff8:	0c1b      	lsrs	r3, r3, #16
 8005ffa:	7023      	strb	r3, [r4, #0]
			CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 8005ffc:	f107 0318 	add.w	r3, r7, #24
 8006000:	4618      	mov	r0, r3
 8006002:	f7fa f8e1 	bl	80001c8 <strlen>
 8006006:	4603      	mov	r3, r0
 8006008:	b29a      	uxth	r2, r3
 800600a:	f107 0318 	add.w	r3, r7, #24
 800600e:	4611      	mov	r1, r2
 8006010:	4618      	mov	r0, r3
 8006012:	f000 f8b7 	bl	8006184 <CDC_Transmit_FS>
 8006016:	e0a1      	b.n	800615c <CDC_Receive_FS+0x1d4>
		}
	}
	else
	{
		switch(Buf[0])
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b34      	cmp	r3, #52	; 0x34
 800601e:	d072      	beq.n	8006106 <CDC_Receive_FS+0x17e>
 8006020:	2b34      	cmp	r3, #52	; 0x34
 8006022:	f300 809a 	bgt.w	800615a <CDC_Receive_FS+0x1d2>
 8006026:	2b30      	cmp	r3, #48	; 0x30
 8006028:	d002      	beq.n	8006030 <CDC_Receive_FS+0xa8>
 800602a:	2b31      	cmp	r3, #49	; 0x31
 800602c:	d063      	beq.n	80060f6 <CDC_Receive_FS+0x16e>
				strncpy((char*)Tx_Buffer, "Initialize Data Transmission OK\n", 33);
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
			break;

			default:
			break;
 800602e:	e094      	b.n	800615a <CDC_Receive_FS+0x1d2>
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	484d      	ldr	r0, [pc, #308]	; (8006168 <CDC_Receive_FS+0x1e0>)
 8006034:	f7fe fd21 	bl	8004a7a <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006038:	484b      	ldr	r0, [pc, #300]	; (8006168 <CDC_Receive_FS+0x1e0>)
 800603a:	f7fe fd67 	bl	8004b0c <USBD_CDC_ReceivePacket>
				free(xUSBDownloadVar.DataBuffer);
 800603e:	4b4b      	ldr	r3, [pc, #300]	; (800616c <CDC_Receive_FS+0x1e4>)
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fd6a 	bl	8006b1c <free>
				xUSBDownloadVar.Size = Buf[POS_TRANSFER_SIZE] << 24 | Buf[POS_TRANSFER_SIZE+1] << 16 | Buf[POS_TRANSFER_SIZE+2] << 8 | Buf[POS_TRANSFER_SIZE+3];
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3301      	adds	r3, #1
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	061a      	lsls	r2, r3, #24
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3302      	adds	r3, #2
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	041b      	lsls	r3, r3, #16
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3303      	adds	r3, #3
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	4313      	orrs	r3, r2
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	3204      	adds	r2, #4
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	4313      	orrs	r3, r2
 800606c:	461a      	mov	r2, r3
 800606e:	4b3f      	ldr	r3, [pc, #252]	; (800616c <CDC_Receive_FS+0x1e4>)
 8006070:	605a      	str	r2, [r3, #4]
				xUSBDownloadVar.DataBuffer = malloc(xUSBDownloadVar.Size);
 8006072:	4b3e      	ldr	r3, [pc, #248]	; (800616c <CDC_Receive_FS+0x1e4>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fd48 	bl	8006b0c <malloc>
 800607c:	4603      	mov	r3, r0
 800607e:	461a      	mov	r2, r3
 8006080:	4b3a      	ldr	r3, [pc, #232]	; (800616c <CDC_Receive_FS+0x1e4>)
 8006082:	60da      	str	r2, [r3, #12]
				strncpy((char*)Tx_Buffer, "Bytes Allocated for Data Transfer: ", 36);
 8006084:	f107 0318 	add.w	r3, r7, #24
 8006088:	4a3b      	ldr	r2, [pc, #236]	; (8006178 <CDC_Receive_FS+0x1f0>)
 800608a:	461c      	mov	r4, r3
 800608c:	4615      	mov	r5, r2
 800608e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006096:	682b      	ldr	r3, [r5, #0]
 8006098:	6023      	str	r3, [r4, #0]
				itoa(xUSBDownloadVar.Size, (char*)Aux_Buffer,10);
 800609a:	4b34      	ldr	r3, [pc, #208]	; (800616c <CDC_Receive_FS+0x1e4>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4618      	mov	r0, r3
 80060a0:	f107 0308 	add.w	r3, r7, #8
 80060a4:	220a      	movs	r2, #10
 80060a6:	4619      	mov	r1, r3
 80060a8:	f000 fd2e 	bl	8006b08 <itoa>
				strcat((char*)Tx_Buffer, (char*)Aux_Buffer);
 80060ac:	f107 0208 	add.w	r2, r7, #8
 80060b0:	f107 0318 	add.w	r3, r7, #24
 80060b4:	4611      	mov	r1, r2
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fe08 	bl	8006ccc <strcat>
				strcat((char*)Tx_Buffer, "\n\0");
 80060bc:	f107 0318 	add.w	r3, r7, #24
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fa f881 	bl	80001c8 <strlen>
 80060c6:	4603      	mov	r3, r0
 80060c8:	461a      	mov	r2, r3
 80060ca:	f107 0318 	add.w	r3, r7, #24
 80060ce:	4413      	add	r3, r2
 80060d0:	492a      	ldr	r1, [pc, #168]	; (800617c <CDC_Receive_FS+0x1f4>)
 80060d2:	461a      	mov	r2, r3
 80060d4:	460b      	mov	r3, r1
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	8013      	strh	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 80060da:	f107 0318 	add.w	r3, r7, #24
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fa f872 	bl	80001c8 <strlen>
 80060e4:	4603      	mov	r3, r0
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	f107 0318 	add.w	r3, r7, #24
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 f848 	bl	8006184 <CDC_Transmit_FS>
			break;
 80060f4:	e032      	b.n	800615c <CDC_Receive_FS+0x1d4>
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	481b      	ldr	r0, [pc, #108]	; (8006168 <CDC_Receive_FS+0x1e0>)
 80060fa:	f7fe fcbe 	bl	8004a7a <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80060fe:	481a      	ldr	r0, [pc, #104]	; (8006168 <CDC_Receive_FS+0x1e0>)
 8006100:	f7fe fd04 	bl	8004b0c <USBD_CDC_ReceivePacket>
			break;
 8006104:	e02a      	b.n	800615c <CDC_Receive_FS+0x1d4>
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	4817      	ldr	r0, [pc, #92]	; (8006168 <CDC_Receive_FS+0x1e0>)
 800610a:	f7fe fcb6 	bl	8004a7a <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800610e:	4816      	ldr	r0, [pc, #88]	; (8006168 <CDC_Receive_FS+0x1e0>)
 8006110:	f7fe fcfc 	bl	8004b0c <USBD_CDC_ReceivePacket>
				PacketCount					=	0;
 8006114:	4b16      	ldr	r3, [pc, #88]	; (8006170 <CDC_Receive_FS+0x1e8>)
 8006116:	2200      	movs	r2, #0
 8006118:	801a      	strh	r2, [r3, #0]
				xUSBDownloadVar.RxMode		=	true;
 800611a:	4b14      	ldr	r3, [pc, #80]	; (800616c <CDC_Receive_FS+0x1e4>)
 800611c:	2201      	movs	r2, #1
 800611e:	701a      	strb	r2, [r3, #0]
				xUSBDownloadVar.DataType   	= Buf[POS_TRANSFER_DATATYPE];
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	785a      	ldrb	r2, [r3, #1]
 8006124:	4b11      	ldr	r3, [pc, #68]	; (800616c <CDC_Receive_FS+0x1e4>)
 8006126:	721a      	strb	r2, [r3, #8]
				strncpy((char*)Tx_Buffer, "Initialize Data Transmission OK\n", 33);
 8006128:	f107 0318 	add.w	r3, r7, #24
 800612c:	4a14      	ldr	r2, [pc, #80]	; (8006180 <CDC_Receive_FS+0x1f8>)
 800612e:	461c      	mov	r4, r3
 8006130:	4615      	mov	r5, r2
 8006132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800613a:	682b      	ldr	r3, [r5, #0]
 800613c:	7023      	strb	r3, [r4, #0]
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 800613e:	f107 0318 	add.w	r3, r7, #24
 8006142:	4618      	mov	r0, r3
 8006144:	f7fa f840 	bl	80001c8 <strlen>
 8006148:	4603      	mov	r3, r0
 800614a:	b29a      	uxth	r2, r3
 800614c:	f107 0318 	add.w	r3, r7, #24
 8006150:	4611      	mov	r1, r2
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f816 	bl	8006184 <CDC_Transmit_FS>
			break;
 8006158:	e000      	b.n	800615c <CDC_Receive_FS+0x1d4>
			break;
 800615a:	bf00      	nop
		}
	}
	return (USBD_OK);
 800615c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800615e:	4618      	mov	r0, r3
 8006160:	3758      	adds	r7, #88	; 0x58
 8006162:	46bd      	mov	sp, r7
 8006164:	bdb0      	pop	{r4, r5, r7, pc}
 8006166:	bf00      	nop
 8006168:	20000468 	.word	0x20000468
 800616c:	20000208 	.word	0x20000208
 8006170:	20000218 	.word	0x20000218
 8006174:	08006da4 	.word	0x08006da4
 8006178:	08006db4 	.word	0x08006db4
 800617c:	08006dd8 	.word	0x08006dd8
 8006180:	08006ddc 	.word	0x08006ddc

08006184 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006194:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <CDC_Transmit_FS+0x48>)
 8006196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800619a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e00b      	b.n	80061c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80061aa:	887b      	ldrh	r3, [r7, #2]
 80061ac:	461a      	mov	r2, r3
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4806      	ldr	r0, [pc, #24]	; (80061cc <CDC_Transmit_FS+0x48>)
 80061b2:	f7fe fc44 	bl	8004a3e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80061b6:	4805      	ldr	r0, [pc, #20]	; (80061cc <CDC_Transmit_FS+0x48>)
 80061b8:	f7fe fc78 	bl	8004aac <USBD_CDC_TransmitPacket>
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000468 	.word	0x20000468

080061d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	4613      	mov	r3, r2
 80061dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80061e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	4603      	mov	r3, r0
 80061fc:	6039      	str	r1, [r7, #0]
 80061fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2212      	movs	r2, #18
 8006204:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006206:	4b03      	ldr	r3, [pc, #12]	; (8006214 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	2000014c 	.word	0x2000014c

08006218 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	6039      	str	r1, [r7, #0]
 8006222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2204      	movs	r2, #4
 8006228:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800622a:	4b03      	ldr	r3, [pc, #12]	; (8006238 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	20000160 	.word	0x20000160

0800623c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d105      	bne.n	800625a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	4907      	ldr	r1, [pc, #28]	; (8006270 <USBD_FS_ProductStrDescriptor+0x34>)
 8006252:	4808      	ldr	r0, [pc, #32]	; (8006274 <USBD_FS_ProductStrDescriptor+0x38>)
 8006254:	f7ff fd0d 	bl	8005c72 <USBD_GetString>
 8006258:	e004      	b.n	8006264 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	4904      	ldr	r1, [pc, #16]	; (8006270 <USBD_FS_ProductStrDescriptor+0x34>)
 800625e:	4805      	ldr	r0, [pc, #20]	; (8006274 <USBD_FS_ProductStrDescriptor+0x38>)
 8006260:	f7ff fd07 	bl	8005c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006264:	4b02      	ldr	r3, [pc, #8]	; (8006270 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20001738 	.word	0x20001738
 8006274:	08006e00 	.word	0x08006e00

08006278 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	6039      	str	r1, [r7, #0]
 8006282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	4904      	ldr	r1, [pc, #16]	; (8006298 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006288:	4804      	ldr	r0, [pc, #16]	; (800629c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800628a:	f7ff fcf2 	bl	8005c72 <USBD_GetString>
  return USBD_StrDesc;
 800628e:	4b02      	ldr	r3, [pc, #8]	; (8006298 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20001738 	.word	0x20001738
 800629c:	08006e18 	.word	0x08006e18

080062a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	6039      	str	r1, [r7, #0]
 80062aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	221a      	movs	r2, #26
 80062b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80062b2:	f000 f843 	bl	800633c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80062b6:	4b02      	ldr	r3, [pc, #8]	; (80062c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20000164 	.word	0x20000164

080062c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80062d0:	79fb      	ldrb	r3, [r7, #7]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d105      	bne.n	80062e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	4907      	ldr	r1, [pc, #28]	; (80062f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80062da:	4808      	ldr	r0, [pc, #32]	; (80062fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80062dc:	f7ff fcc9 	bl	8005c72 <USBD_GetString>
 80062e0:	e004      	b.n	80062ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	4904      	ldr	r1, [pc, #16]	; (80062f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80062e6:	4805      	ldr	r0, [pc, #20]	; (80062fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80062e8:	f7ff fcc3 	bl	8005c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 80062ec:	4b02      	ldr	r3, [pc, #8]	; (80062f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20001738 	.word	0x20001738
 80062fc:	08006e2c 	.word	0x08006e2c

08006300 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	6039      	str	r1, [r7, #0]
 800630a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d105      	bne.n	800631e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	4907      	ldr	r1, [pc, #28]	; (8006334 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006316:	4808      	ldr	r0, [pc, #32]	; (8006338 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006318:	f7ff fcab 	bl	8005c72 <USBD_GetString>
 800631c:	e004      	b.n	8006328 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	4904      	ldr	r1, [pc, #16]	; (8006334 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006322:	4805      	ldr	r0, [pc, #20]	; (8006338 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006324:	f7ff fca5 	bl	8005c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006328:	4b02      	ldr	r3, [pc, #8]	; (8006334 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20001738 	.word	0x20001738
 8006338:	08006e38 	.word	0x08006e38

0800633c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006342:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <Get_SerialNum+0x44>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006348:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <Get_SerialNum+0x48>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800634e:	4b0e      	ldr	r3, [pc, #56]	; (8006388 <Get_SerialNum+0x4c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006362:	2208      	movs	r2, #8
 8006364:	4909      	ldr	r1, [pc, #36]	; (800638c <Get_SerialNum+0x50>)
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f814 	bl	8006394 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800636c:	2204      	movs	r2, #4
 800636e:	4908      	ldr	r1, [pc, #32]	; (8006390 <Get_SerialNum+0x54>)
 8006370:	68b8      	ldr	r0, [r7, #8]
 8006372:	f000 f80f 	bl	8006394 <IntToUnicode>
  }
}
 8006376:	bf00      	nop
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	1fff7a10 	.word	0x1fff7a10
 8006384:	1fff7a14 	.word	0x1fff7a14
 8006388:	1fff7a18 	.word	0x1fff7a18
 800638c:	20000166 	.word	0x20000166
 8006390:	20000176 	.word	0x20000176

08006394 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80063a6:	2300      	movs	r3, #0
 80063a8:	75fb      	strb	r3, [r7, #23]
 80063aa:	e027      	b.n	80063fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	0f1b      	lsrs	r3, r3, #28
 80063b0:	2b09      	cmp	r3, #9
 80063b2:	d80b      	bhi.n	80063cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	0f1b      	lsrs	r3, r3, #28
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	4619      	mov	r1, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	440b      	add	r3, r1
 80063c4:	3230      	adds	r2, #48	; 0x30
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	e00a      	b.n	80063e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	0f1b      	lsrs	r3, r3, #28
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	4619      	mov	r1, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	440b      	add	r3, r1
 80063dc:	3237      	adds	r2, #55	; 0x37
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	3301      	adds	r3, #1
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4413      	add	r3, r2
 80063f2:	2200      	movs	r2, #0
 80063f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	3301      	adds	r3, #1
 80063fa:	75fb      	strb	r3, [r7, #23]
 80063fc:	7dfa      	ldrb	r2, [r7, #23]
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	429a      	cmp	r2, r3
 8006402:	d3d3      	bcc.n	80063ac <IntToUnicode+0x18>
  }
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08a      	sub	sp, #40	; 0x28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800641c:	f107 0314 	add.w	r3, r7, #20
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	605a      	str	r2, [r3, #4]
 8006426:	609a      	str	r2, [r3, #8]
 8006428:	60da      	str	r2, [r3, #12]
 800642a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006434:	d15c      	bne.n	80064f0 <HAL_PCD_MspInit+0xdc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006436:	2300      	movs	r3, #0
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	4b2f      	ldr	r3, [pc, #188]	; (80064f8 <HAL_PCD_MspInit+0xe4>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	4a2e      	ldr	r2, [pc, #184]	; (80064f8 <HAL_PCD_MspInit+0xe4>)
 8006440:	f043 0301 	orr.w	r3, r3, #1
 8006444:	6313      	str	r3, [r2, #48]	; 0x30
 8006446:	4b2c      	ldr	r3, [pc, #176]	; (80064f8 <HAL_PCD_MspInit+0xe4>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006452:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006458:	2302      	movs	r3, #2
 800645a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800645c:	2300      	movs	r3, #0
 800645e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006460:	2303      	movs	r3, #3
 8006462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006464:	230a      	movs	r3, #10
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006468:	f107 0314 	add.w	r3, r7, #20
 800646c:	4619      	mov	r1, r3
 800646e:	4823      	ldr	r0, [pc, #140]	; (80064fc <HAL_PCD_MspInit+0xe8>)
 8006470:	f7fa fbd0 	bl	8000c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006474:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <HAL_PCD_MspInit+0xe4>)
 8006476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006478:	4a1f      	ldr	r2, [pc, #124]	; (80064f8 <HAL_PCD_MspInit+0xe4>)
 800647a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647e:	6353      	str	r3, [r2, #52]	; 0x34
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	4b1c      	ldr	r3, [pc, #112]	; (80064f8 <HAL_PCD_MspInit+0xe4>)
 8006486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006488:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_PCD_MspInit+0xe4>)
 800648a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800648e:	6453      	str	r3, [r2, #68]	; 0x44
 8006490:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <HAL_PCD_MspInit+0xe4>)
 8006492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800649c:	2200      	movs	r2, #0
 800649e:	2100      	movs	r1, #0
 80064a0:	2043      	movs	r0, #67	; 0x43
 80064a2:	f7fa fb80 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80064a6:	2043      	movs	r0, #67	; 0x43
 80064a8:	f7fa fb99 	bl	8000bde <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d11d      	bne.n	80064f0 <HAL_PCD_MspInit+0xdc>
    {
      /* Enable EXTI Line 18 for USB wakeup */
      __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 80064b4:	4b12      	ldr	r3, [pc, #72]	; (8006500 <HAL_PCD_MspInit+0xec>)
 80064b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80064ba:	615a      	str	r2, [r3, #20]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 80064bc:	4b10      	ldr	r3, [pc, #64]	; (8006500 <HAL_PCD_MspInit+0xec>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	4a0f      	ldr	r2, [pc, #60]	; (8006500 <HAL_PCD_MspInit+0xec>)
 80064c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064c6:	60d3      	str	r3, [r2, #12]
 80064c8:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <HAL_PCD_MspInit+0xec>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	4a0c      	ldr	r2, [pc, #48]	; (8006500 <HAL_PCD_MspInit+0xec>)
 80064ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064d2:	6093      	str	r3, [r2, #8]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT();
 80064d4:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <HAL_PCD_MspInit+0xec>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a09      	ldr	r2, [pc, #36]	; (8006500 <HAL_PCD_MspInit+0xec>)
 80064da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064de:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(OTG_FS_WKUP_IRQn, 0, 0);
 80064e0:	2200      	movs	r2, #0
 80064e2:	2100      	movs	r1, #0
 80064e4:	202a      	movs	r0, #42	; 0x2a
 80064e6:	f7fa fb5e 	bl	8000ba6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(OTG_FS_WKUP_IRQn);
 80064ea:	202a      	movs	r0, #42	; 0x2a
 80064ec:	f7fa fb77 	bl	8000bde <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80064f0:	bf00      	nop
 80064f2:	3728      	adds	r7, #40	; 0x28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40023800 	.word	0x40023800
 80064fc:	40020000 	.word	0x40020000
 8006500:	40013c00 	.word	0x40013c00

08006504 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f7fe fbc2 	bl	8004ca4 <USBD_LL_SetupStage>
}
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800653a:	78fa      	ldrb	r2, [r7, #3]
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	4619      	mov	r1, r3
 8006552:	f7fe fbfc 	bl	8004d4e <USBD_LL_DataOutStage>
}
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006570:	78fa      	ldrb	r2, [r7, #3]
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	4613      	mov	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	1a9b      	subs	r3, r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	3348      	adds	r3, #72	; 0x48
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	4619      	mov	r1, r3
 8006586:	f7fe fc45 	bl	8004e14 <USBD_LL_DataInStage>
}
 800658a:	bf00      	nop
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b082      	sub	sp, #8
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe fd59 	bl	8005058 <USBD_LL_SOF>
}
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80065b6:	2301      	movs	r3, #1
 80065b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d102      	bne.n	80065c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
 80065c6:	e008      	b.n	80065da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d102      	bne.n	80065d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80065d0:	2301      	movs	r3, #1
 80065d2:	73fb      	strb	r3, [r7, #15]
 80065d4:	e001      	b.n	80065da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80065d6:	f7fa f85b 	bl	8000690 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065e0:	7bfa      	ldrb	r2, [r7, #15]
 80065e2:	4611      	mov	r1, r2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fcf9 	bl	8004fdc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe fca5 	bl	8004f40 <USBD_LL_Reset>
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe fcf4 	bl	8004ffc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6812      	ldr	r2, [r2, #0]
 8006622:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006634:	4b04      	ldr	r3, [pc, #16]	; (8006648 <HAL_PCD_SuspendCallback+0x48>)
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	4a03      	ldr	r2, [pc, #12]	; (8006648 <HAL_PCD_SuspendCallback+0x48>)
 800663a:	f043 0306 	orr.w	r3, r3, #6
 800663e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	e000ed00 	.word	0xe000ed00

0800664c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe fce4 	bl	8005028 <USBD_LL_Resume>
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800667a:	78fa      	ldrb	r2, [r7, #3]
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fd32 	bl	80050e8 <USBD_LL_IsoOUTIncomplete>
}
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800669e:	78fa      	ldrb	r2, [r7, #3]
 80066a0:	4611      	mov	r1, r2
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe fcfa 	bl	800509c <USBD_LL_IsoINIncomplete>
}
 80066a8:	bf00      	nop
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe fd38 	bl	8005134 <USBD_LL_DevConnected>
}
 80066c4:	bf00      	nop
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fd35 	bl	800514a <USBD_LL_DevDisconnected>
}
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d13c      	bne.n	8006772 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80066f8:	4a20      	ldr	r2, [pc, #128]	; (800677c <USBD_LL_Init+0x94>)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a1e      	ldr	r2, [pc, #120]	; (800677c <USBD_LL_Init+0x94>)
 8006704:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006708:	4b1c      	ldr	r3, [pc, #112]	; (800677c <USBD_LL_Init+0x94>)
 800670a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800670e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006710:	4b1a      	ldr	r3, [pc, #104]	; (800677c <USBD_LL_Init+0x94>)
 8006712:	2204      	movs	r2, #4
 8006714:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006716:	4b19      	ldr	r3, [pc, #100]	; (800677c <USBD_LL_Init+0x94>)
 8006718:	2202      	movs	r2, #2
 800671a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800671c:	4b17      	ldr	r3, [pc, #92]	; (800677c <USBD_LL_Init+0x94>)
 800671e:	2200      	movs	r2, #0
 8006720:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006722:	4b16      	ldr	r3, [pc, #88]	; (800677c <USBD_LL_Init+0x94>)
 8006724:	2202      	movs	r2, #2
 8006726:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006728:	4b14      	ldr	r3, [pc, #80]	; (800677c <USBD_LL_Init+0x94>)
 800672a:	2200      	movs	r2, #0
 800672c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = ENABLE;
 800672e:	4b13      	ldr	r3, [pc, #76]	; (800677c <USBD_LL_Init+0x94>)
 8006730:	2201      	movs	r2, #1
 8006732:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006734:	4b11      	ldr	r3, [pc, #68]	; (800677c <USBD_LL_Init+0x94>)
 8006736:	2200      	movs	r2, #0
 8006738:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800673a:	4b10      	ldr	r3, [pc, #64]	; (800677c <USBD_LL_Init+0x94>)
 800673c:	2200      	movs	r2, #0
 800673e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006740:	4b0e      	ldr	r3, [pc, #56]	; (800677c <USBD_LL_Init+0x94>)
 8006742:	2200      	movs	r2, #0
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006746:	480d      	ldr	r0, [pc, #52]	; (800677c <USBD_LL_Init+0x94>)
 8006748:	f7fa fc00 	bl	8000f4c <HAL_PCD_Init>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006752:	f7f9 ff9d 	bl	8000690 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006756:	2180      	movs	r1, #128	; 0x80
 8006758:	4808      	ldr	r0, [pc, #32]	; (800677c <USBD_LL_Init+0x94>)
 800675a:	f7fb fd5e 	bl	800221a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800675e:	2240      	movs	r2, #64	; 0x40
 8006760:	2100      	movs	r1, #0
 8006762:	4806      	ldr	r0, [pc, #24]	; (800677c <USBD_LL_Init+0x94>)
 8006764:	f7fb fd12 	bl	800218c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006768:	2280      	movs	r2, #128	; 0x80
 800676a:	2101      	movs	r1, #1
 800676c:	4803      	ldr	r0, [pc, #12]	; (800677c <USBD_LL_Init+0x94>)
 800676e:	f7fb fd0d 	bl	800218c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20001938 	.word	0x20001938

08006780 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006796:	4618      	mov	r0, r3
 8006798:	f7fa fcf5 	bl	8001186 <HAL_PCD_Start>
 800679c:	4603      	mov	r3, r0
 800679e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 f942 	bl	8006a2c <USBD_Get_USB_Status>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	4608      	mov	r0, r1
 80067c0:	4611      	mov	r1, r2
 80067c2:	461a      	mov	r2, r3
 80067c4:	4603      	mov	r3, r0
 80067c6:	70fb      	strb	r3, [r7, #3]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70bb      	strb	r3, [r7, #2]
 80067cc:	4613      	mov	r3, r2
 80067ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067de:	78bb      	ldrb	r3, [r7, #2]
 80067e0:	883a      	ldrh	r2, [r7, #0]
 80067e2:	78f9      	ldrb	r1, [r7, #3]
 80067e4:	f7fb f8d9 	bl	800199a <HAL_PCD_EP_Open>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f91c 	bl	8006a2c <USBD_Get_USB_Status>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800681c:	78fa      	ldrb	r2, [r7, #3]
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f7fb f922 	bl	8001a6a <HAL_PCD_EP_Close>
 8006826:	4603      	mov	r3, r0
 8006828:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	4618      	mov	r0, r3
 800682e:	f000 f8fd 	bl	8006a2c <USBD_Get_USB_Status>
 8006832:	4603      	mov	r3, r0
 8006834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006836:	7bbb      	ldrb	r3, [r7, #14]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	4611      	mov	r1, r2
 800685e:	4618      	mov	r0, r3
 8006860:	f7fb f9fa 	bl	8001c58 <HAL_PCD_EP_SetStall>
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f8de 	bl	8006a2c <USBD_Get_USB_Status>
 8006870:	4603      	mov	r3, r0
 8006872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006874:	7bbb      	ldrb	r3, [r7, #14]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	460b      	mov	r3, r1
 8006888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006898:	78fa      	ldrb	r2, [r7, #3]
 800689a:	4611      	mov	r1, r2
 800689c:	4618      	mov	r0, r3
 800689e:	f7fb fa3f 	bl	8001d20 <HAL_PCD_EP_ClrStall>
 80068a2:	4603      	mov	r3, r0
 80068a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f8bf 	bl	8006a2c <USBD_Get_USB_Status>
 80068ae:	4603      	mov	r3, r0
 80068b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80068d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	da0b      	bge.n	80068f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068de:	68f9      	ldr	r1, [r7, #12]
 80068e0:	4613      	mov	r3, r2
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	440b      	add	r3, r1
 80068ea:	333e      	adds	r3, #62	; 0x3e
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	e00b      	b.n	8006908 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068f6:	68f9      	ldr	r1, [r7, #12]
 80068f8:	4613      	mov	r3, r2
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	1a9b      	subs	r3, r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006906:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800692e:	78fa      	ldrb	r2, [r7, #3]
 8006930:	4611      	mov	r1, r2
 8006932:	4618      	mov	r0, r3
 8006934:	f7fb f80c 	bl	8001950 <HAL_PCD_SetAddress>
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 f874 	bl	8006a2c <USBD_Get_USB_Status>
 8006944:	4603      	mov	r3, r0
 8006946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006948:	7bbb      	ldrb	r3, [r7, #14]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b086      	sub	sp, #24
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	460b      	mov	r3, r1
 8006960:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006970:	7af9      	ldrb	r1, [r7, #11]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	f7fb f925 	bl	8001bc4 <HAL_PCD_EP_Transmit>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	4618      	mov	r0, r3
 8006982:	f000 f853 	bl	8006a2c <USBD_Get_USB_Status>
 8006986:	4603      	mov	r3, r0
 8006988:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800698a:	7dbb      	ldrb	r3, [r7, #22]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	460b      	mov	r3, r1
 80069a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80069b2:	7af9      	ldrb	r1, [r7, #11]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	f7fb f8a1 	bl	8001afe <HAL_PCD_EP_Receive>
 80069bc:	4603      	mov	r3, r0
 80069be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 f832 	bl	8006a2c <USBD_Get_USB_Status>
 80069c8:	4603      	mov	r3, r0
 80069ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80069cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069e8:	78fa      	ldrb	r2, [r7, #3]
 80069ea:	4611      	mov	r1, r2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fb f8d1 	bl	8001b94 <HAL_PCD_EP_GetRxCount>
 80069f2:	4603      	mov	r3, r0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006a04:	4b03      	ldr	r3, [pc, #12]	; (8006a14 <USBD_static_malloc+0x18>)
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	2000021c 	.word	0x2000021c

08006a18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]

}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d817      	bhi.n	8006a70 <USBD_Get_USB_Status+0x44>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <USBD_Get_USB_Status+0x1c>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a59 	.word	0x08006a59
 8006a4c:	08006a5f 	.word	0x08006a5f
 8006a50:	08006a65 	.word	0x08006a65
 8006a54:	08006a6b 	.word	0x08006a6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a5c:	e00b      	b.n	8006a76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	73fb      	strb	r3, [r7, #15]
    break;
 8006a62:	e008      	b.n	8006a76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006a64:	2301      	movs	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
    break;
 8006a68:	e005      	b.n	8006a76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006a6e:	e002      	b.n	8006a76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006a70:	2303      	movs	r3, #3
 8006a72:	73fb      	strb	r3, [r7, #15]
    break;
 8006a74:	bf00      	nop
  }
  return usb_status;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <__errno>:
 8006a84:	4b01      	ldr	r3, [pc, #4]	; (8006a8c <__errno+0x8>)
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	20000180 	.word	0x20000180

08006a90 <__libc_init_array>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	4d0d      	ldr	r5, [pc, #52]	; (8006ac8 <__libc_init_array+0x38>)
 8006a94:	4c0d      	ldr	r4, [pc, #52]	; (8006acc <__libc_init_array+0x3c>)
 8006a96:	1b64      	subs	r4, r4, r5
 8006a98:	10a4      	asrs	r4, r4, #2
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	42a6      	cmp	r6, r4
 8006a9e:	d109      	bne.n	8006ab4 <__libc_init_array+0x24>
 8006aa0:	4d0b      	ldr	r5, [pc, #44]	; (8006ad0 <__libc_init_array+0x40>)
 8006aa2:	4c0c      	ldr	r4, [pc, #48]	; (8006ad4 <__libc_init_array+0x44>)
 8006aa4:	f000 f972 	bl	8006d8c <_init>
 8006aa8:	1b64      	subs	r4, r4, r5
 8006aaa:	10a4      	asrs	r4, r4, #2
 8006aac:	2600      	movs	r6, #0
 8006aae:	42a6      	cmp	r6, r4
 8006ab0:	d105      	bne.n	8006abe <__libc_init_array+0x2e>
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab8:	4798      	blx	r3
 8006aba:	3601      	adds	r6, #1
 8006abc:	e7ee      	b.n	8006a9c <__libc_init_array+0xc>
 8006abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac2:	4798      	blx	r3
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	e7f2      	b.n	8006aae <__libc_init_array+0x1e>
 8006ac8:	08006e88 	.word	0x08006e88
 8006acc:	08006e88 	.word	0x08006e88
 8006ad0:	08006e88 	.word	0x08006e88
 8006ad4:	08006e8c 	.word	0x08006e8c

08006ad8 <__itoa>:
 8006ad8:	1e93      	subs	r3, r2, #2
 8006ada:	2b22      	cmp	r3, #34	; 0x22
 8006adc:	b510      	push	{r4, lr}
 8006ade:	460c      	mov	r4, r1
 8006ae0:	d904      	bls.n	8006aec <__itoa+0x14>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	700b      	strb	r3, [r1, #0]
 8006ae6:	461c      	mov	r4, r3
 8006ae8:	4620      	mov	r0, r4
 8006aea:	bd10      	pop	{r4, pc}
 8006aec:	2a0a      	cmp	r2, #10
 8006aee:	d109      	bne.n	8006b04 <__itoa+0x2c>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	da07      	bge.n	8006b04 <__itoa+0x2c>
 8006af4:	232d      	movs	r3, #45	; 0x2d
 8006af6:	700b      	strb	r3, [r1, #0]
 8006af8:	4240      	negs	r0, r0
 8006afa:	2101      	movs	r1, #1
 8006afc:	4421      	add	r1, r4
 8006afe:	f000 f8f5 	bl	8006cec <__utoa>
 8006b02:	e7f1      	b.n	8006ae8 <__itoa+0x10>
 8006b04:	2100      	movs	r1, #0
 8006b06:	e7f9      	b.n	8006afc <__itoa+0x24>

08006b08 <itoa>:
 8006b08:	f7ff bfe6 	b.w	8006ad8 <__itoa>

08006b0c <malloc>:
 8006b0c:	4b02      	ldr	r3, [pc, #8]	; (8006b18 <malloc+0xc>)
 8006b0e:	4601      	mov	r1, r0
 8006b10:	6818      	ldr	r0, [r3, #0]
 8006b12:	f000 b871 	b.w	8006bf8 <_malloc_r>
 8006b16:	bf00      	nop
 8006b18:	20000180 	.word	0x20000180

08006b1c <free>:
 8006b1c:	4b02      	ldr	r3, [pc, #8]	; (8006b28 <free+0xc>)
 8006b1e:	4601      	mov	r1, r0
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	f000 b819 	b.w	8006b58 <_free_r>
 8006b26:	bf00      	nop
 8006b28:	20000180 	.word	0x20000180

08006b2c <memcpy>:
 8006b2c:	440a      	add	r2, r1
 8006b2e:	4291      	cmp	r1, r2
 8006b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b34:	d100      	bne.n	8006b38 <memcpy+0xc>
 8006b36:	4770      	bx	lr
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b42:	4291      	cmp	r1, r2
 8006b44:	d1f9      	bne.n	8006b3a <memcpy+0xe>
 8006b46:	bd10      	pop	{r4, pc}

08006b48 <memset>:
 8006b48:	4402      	add	r2, r0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d100      	bne.n	8006b52 <memset+0xa>
 8006b50:	4770      	bx	lr
 8006b52:	f803 1b01 	strb.w	r1, [r3], #1
 8006b56:	e7f9      	b.n	8006b4c <memset+0x4>

08006b58 <_free_r>:
 8006b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	d048      	beq.n	8006bf0 <_free_r+0x98>
 8006b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b62:	9001      	str	r0, [sp, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f1a1 0404 	sub.w	r4, r1, #4
 8006b6a:	bfb8      	it	lt
 8006b6c:	18e4      	addlt	r4, r4, r3
 8006b6e:	f000 f8ff 	bl	8006d70 <__malloc_lock>
 8006b72:	4a20      	ldr	r2, [pc, #128]	; (8006bf4 <_free_r+0x9c>)
 8006b74:	9801      	ldr	r0, [sp, #4]
 8006b76:	6813      	ldr	r3, [r2, #0]
 8006b78:	4615      	mov	r5, r2
 8006b7a:	b933      	cbnz	r3, 8006b8a <_free_r+0x32>
 8006b7c:	6063      	str	r3, [r4, #4]
 8006b7e:	6014      	str	r4, [r2, #0]
 8006b80:	b003      	add	sp, #12
 8006b82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b86:	f000 b8f9 	b.w	8006d7c <__malloc_unlock>
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	d90b      	bls.n	8006ba6 <_free_r+0x4e>
 8006b8e:	6821      	ldr	r1, [r4, #0]
 8006b90:	1862      	adds	r2, r4, r1
 8006b92:	4293      	cmp	r3, r2
 8006b94:	bf04      	itt	eq
 8006b96:	681a      	ldreq	r2, [r3, #0]
 8006b98:	685b      	ldreq	r3, [r3, #4]
 8006b9a:	6063      	str	r3, [r4, #4]
 8006b9c:	bf04      	itt	eq
 8006b9e:	1852      	addeq	r2, r2, r1
 8006ba0:	6022      	streq	r2, [r4, #0]
 8006ba2:	602c      	str	r4, [r5, #0]
 8006ba4:	e7ec      	b.n	8006b80 <_free_r+0x28>
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	b10b      	cbz	r3, 8006bb0 <_free_r+0x58>
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	d9fa      	bls.n	8006ba6 <_free_r+0x4e>
 8006bb0:	6811      	ldr	r1, [r2, #0]
 8006bb2:	1855      	adds	r5, r2, r1
 8006bb4:	42a5      	cmp	r5, r4
 8006bb6:	d10b      	bne.n	8006bd0 <_free_r+0x78>
 8006bb8:	6824      	ldr	r4, [r4, #0]
 8006bba:	4421      	add	r1, r4
 8006bbc:	1854      	adds	r4, r2, r1
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	d1dd      	bne.n	8006b80 <_free_r+0x28>
 8006bc4:	681c      	ldr	r4, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	4421      	add	r1, r4
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	e7d7      	b.n	8006b80 <_free_r+0x28>
 8006bd0:	d902      	bls.n	8006bd8 <_free_r+0x80>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	e7d3      	b.n	8006b80 <_free_r+0x28>
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	1961      	adds	r1, r4, r5
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	bf04      	itt	eq
 8006be0:	6819      	ldreq	r1, [r3, #0]
 8006be2:	685b      	ldreq	r3, [r3, #4]
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	bf04      	itt	eq
 8006be8:	1949      	addeq	r1, r1, r5
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	6054      	str	r4, [r2, #4]
 8006bee:	e7c7      	b.n	8006b80 <_free_r+0x28>
 8006bf0:	b003      	add	sp, #12
 8006bf2:	bd30      	pop	{r4, r5, pc}
 8006bf4:	2000043c 	.word	0x2000043c

08006bf8 <_malloc_r>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	1ccd      	adds	r5, r1, #3
 8006bfc:	f025 0503 	bic.w	r5, r5, #3
 8006c00:	3508      	adds	r5, #8
 8006c02:	2d0c      	cmp	r5, #12
 8006c04:	bf38      	it	cc
 8006c06:	250c      	movcc	r5, #12
 8006c08:	2d00      	cmp	r5, #0
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	db01      	blt.n	8006c12 <_malloc_r+0x1a>
 8006c0e:	42a9      	cmp	r1, r5
 8006c10:	d903      	bls.n	8006c1a <_malloc_r+0x22>
 8006c12:	230c      	movs	r3, #12
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	2000      	movs	r0, #0
 8006c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1a:	f000 f8a9 	bl	8006d70 <__malloc_lock>
 8006c1e:	4921      	ldr	r1, [pc, #132]	; (8006ca4 <_malloc_r+0xac>)
 8006c20:	680a      	ldr	r2, [r1, #0]
 8006c22:	4614      	mov	r4, r2
 8006c24:	b99c      	cbnz	r4, 8006c4e <_malloc_r+0x56>
 8006c26:	4f20      	ldr	r7, [pc, #128]	; (8006ca8 <_malloc_r+0xb0>)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	b923      	cbnz	r3, 8006c36 <_malloc_r+0x3e>
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f000 f83c 	bl	8006cac <_sbrk_r>
 8006c34:	6038      	str	r0, [r7, #0]
 8006c36:	4629      	mov	r1, r5
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f000 f837 	bl	8006cac <_sbrk_r>
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d123      	bne.n	8006c8a <_malloc_r+0x92>
 8006c42:	230c      	movs	r3, #12
 8006c44:	6033      	str	r3, [r6, #0]
 8006c46:	4630      	mov	r0, r6
 8006c48:	f000 f898 	bl	8006d7c <__malloc_unlock>
 8006c4c:	e7e3      	b.n	8006c16 <_malloc_r+0x1e>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	1b5b      	subs	r3, r3, r5
 8006c52:	d417      	bmi.n	8006c84 <_malloc_r+0x8c>
 8006c54:	2b0b      	cmp	r3, #11
 8006c56:	d903      	bls.n	8006c60 <_malloc_r+0x68>
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	441c      	add	r4, r3
 8006c5c:	6025      	str	r5, [r4, #0]
 8006c5e:	e004      	b.n	8006c6a <_malloc_r+0x72>
 8006c60:	6863      	ldr	r3, [r4, #4]
 8006c62:	42a2      	cmp	r2, r4
 8006c64:	bf0c      	ite	eq
 8006c66:	600b      	streq	r3, [r1, #0]
 8006c68:	6053      	strne	r3, [r2, #4]
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 f886 	bl	8006d7c <__malloc_unlock>
 8006c70:	f104 000b 	add.w	r0, r4, #11
 8006c74:	1d23      	adds	r3, r4, #4
 8006c76:	f020 0007 	bic.w	r0, r0, #7
 8006c7a:	1ac2      	subs	r2, r0, r3
 8006c7c:	d0cc      	beq.n	8006c18 <_malloc_r+0x20>
 8006c7e:	1a1b      	subs	r3, r3, r0
 8006c80:	50a3      	str	r3, [r4, r2]
 8006c82:	e7c9      	b.n	8006c18 <_malloc_r+0x20>
 8006c84:	4622      	mov	r2, r4
 8006c86:	6864      	ldr	r4, [r4, #4]
 8006c88:	e7cc      	b.n	8006c24 <_malloc_r+0x2c>
 8006c8a:	1cc4      	adds	r4, r0, #3
 8006c8c:	f024 0403 	bic.w	r4, r4, #3
 8006c90:	42a0      	cmp	r0, r4
 8006c92:	d0e3      	beq.n	8006c5c <_malloc_r+0x64>
 8006c94:	1a21      	subs	r1, r4, r0
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 f808 	bl	8006cac <_sbrk_r>
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d1dd      	bne.n	8006c5c <_malloc_r+0x64>
 8006ca0:	e7cf      	b.n	8006c42 <_malloc_r+0x4a>
 8006ca2:	bf00      	nop
 8006ca4:	2000043c 	.word	0x2000043c
 8006ca8:	20000440 	.word	0x20000440

08006cac <_sbrk_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d06      	ldr	r5, [pc, #24]	; (8006cc8 <_sbrk_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7f9 fd8e 	bl	80007d8 <_sbrk>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_sbrk_r+0x1a>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_sbrk_r+0x1a>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	20001d40 	.word	0x20001d40

08006ccc <strcat>:
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	4602      	mov	r2, r0
 8006cd0:	7814      	ldrb	r4, [r2, #0]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	3201      	adds	r2, #1
 8006cd6:	2c00      	cmp	r4, #0
 8006cd8:	d1fa      	bne.n	8006cd0 <strcat+0x4>
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ce0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ce4:	2a00      	cmp	r2, #0
 8006ce6:	d1f9      	bne.n	8006cdc <strcat+0x10>
 8006ce8:	bd10      	pop	{r4, pc}
	...

08006cec <__utoa>:
 8006cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cee:	4c1f      	ldr	r4, [pc, #124]	; (8006d6c <__utoa+0x80>)
 8006cf0:	b08b      	sub	sp, #44	; 0x2c
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	466e      	mov	r6, sp
 8006cf8:	f104 0c20 	add.w	ip, r4, #32
 8006cfc:	6820      	ldr	r0, [r4, #0]
 8006cfe:	6861      	ldr	r1, [r4, #4]
 8006d00:	4637      	mov	r7, r6
 8006d02:	c703      	stmia	r7!, {r0, r1}
 8006d04:	3408      	adds	r4, #8
 8006d06:	4564      	cmp	r4, ip
 8006d08:	463e      	mov	r6, r7
 8006d0a:	d1f7      	bne.n	8006cfc <__utoa+0x10>
 8006d0c:	7921      	ldrb	r1, [r4, #4]
 8006d0e:	7139      	strb	r1, [r7, #4]
 8006d10:	1e91      	subs	r1, r2, #2
 8006d12:	6820      	ldr	r0, [r4, #0]
 8006d14:	6038      	str	r0, [r7, #0]
 8006d16:	2922      	cmp	r1, #34	; 0x22
 8006d18:	f04f 0100 	mov.w	r1, #0
 8006d1c:	d904      	bls.n	8006d28 <__utoa+0x3c>
 8006d1e:	7019      	strb	r1, [r3, #0]
 8006d20:	460b      	mov	r3, r1
 8006d22:	4618      	mov	r0, r3
 8006d24:	b00b      	add	sp, #44	; 0x2c
 8006d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d28:	1e58      	subs	r0, r3, #1
 8006d2a:	4684      	mov	ip, r0
 8006d2c:	fbb5 f7f2 	udiv	r7, r5, r2
 8006d30:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006d34:	fb02 5617 	mls	r6, r2, r7, r5
 8006d38:	4476      	add	r6, lr
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006d40:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006d44:	462e      	mov	r6, r5
 8006d46:	42b2      	cmp	r2, r6
 8006d48:	f101 0101 	add.w	r1, r1, #1
 8006d4c:	463d      	mov	r5, r7
 8006d4e:	d9ed      	bls.n	8006d2c <__utoa+0x40>
 8006d50:	2200      	movs	r2, #0
 8006d52:	545a      	strb	r2, [r3, r1]
 8006d54:	1919      	adds	r1, r3, r4
 8006d56:	1aa5      	subs	r5, r4, r2
 8006d58:	42aa      	cmp	r2, r5
 8006d5a:	dae2      	bge.n	8006d22 <__utoa+0x36>
 8006d5c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006d60:	780e      	ldrb	r6, [r1, #0]
 8006d62:	7006      	strb	r6, [r0, #0]
 8006d64:	3201      	adds	r2, #1
 8006d66:	f801 5901 	strb.w	r5, [r1], #-1
 8006d6a:	e7f4      	b.n	8006d56 <__utoa+0x6a>
 8006d6c:	08006e58 	.word	0x08006e58

08006d70 <__malloc_lock>:
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <__malloc_lock+0x8>)
 8006d72:	f000 b809 	b.w	8006d88 <__retarget_lock_acquire_recursive>
 8006d76:	bf00      	nop
 8006d78:	20001d48 	.word	0x20001d48

08006d7c <__malloc_unlock>:
 8006d7c:	4801      	ldr	r0, [pc, #4]	; (8006d84 <__malloc_unlock+0x8>)
 8006d7e:	f000 b804 	b.w	8006d8a <__retarget_lock_release_recursive>
 8006d82:	bf00      	nop
 8006d84:	20001d48 	.word	0x20001d48

08006d88 <__retarget_lock_acquire_recursive>:
 8006d88:	4770      	bx	lr

08006d8a <__retarget_lock_release_recursive>:
 8006d8a:	4770      	bx	lr

08006d8c <_init>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	bf00      	nop
 8006d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d92:	bc08      	pop	{r3}
 8006d94:	469e      	mov	lr, r3
 8006d96:	4770      	bx	lr

08006d98 <_fini>:
 8006d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9a:	bf00      	nop
 8006d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9e:	bc08      	pop	{r3}
 8006da0:	469e      	mov	lr, r3
 8006da2:	4770      	bx	lr
