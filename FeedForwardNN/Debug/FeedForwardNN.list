
FeedForwardNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008330  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080084b8  080084b8  000184b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800871c  0800871c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008724  08008724  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008724  08008724  00018724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008728  08008728  00018728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800872c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b98  200001e4  08008910  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d7c  08008910  00021d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001850a  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c76  00000000  00000000  0003871e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0003c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0003d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e06  00000000  00000000  0003de40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143a7  00000000  00000000  00062c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caa7d  00000000  00000000  00076fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141a6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc0  00000000  00000000  00141ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084a0 	.word	0x080084a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	080084a0 	.word	0x080084a0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b96e 	b.w	8000db8 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	468c      	mov	ip, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 8083 	bne.w	8000c0a <__udivmoddi4+0x116>
 8000b04:	428a      	cmp	r2, r1
 8000b06:	4617      	mov	r7, r2
 8000b08:	d947      	bls.n	8000b9a <__udivmoddi4+0xa6>
 8000b0a:	fab2 f282 	clz	r2, r2
 8000b0e:	b142      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b10:	f1c2 0020 	rsb	r0, r2, #32
 8000b14:	fa24 f000 	lsr.w	r0, r4, r0
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	4097      	lsls	r7, r2
 8000b1c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b20:	4094      	lsls	r4, r2
 8000b22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fbbc f6f8 	udiv	r6, ip, r8
 8000b2c:	fa1f fe87 	uxth.w	lr, r7
 8000b30:	fb08 c116 	mls	r1, r8, r6, ip
 8000b34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b38:	fb06 f10e 	mul.w	r1, r6, lr
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d909      	bls.n	8000b54 <__udivmoddi4+0x60>
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b46:	f080 8119 	bcs.w	8000d7c <__udivmoddi4+0x288>
 8000b4a:	4299      	cmp	r1, r3
 8000b4c:	f240 8116 	bls.w	8000d7c <__udivmoddi4+0x288>
 8000b50:	3e02      	subs	r6, #2
 8000b52:	443b      	add	r3, r7
 8000b54:	1a5b      	subs	r3, r3, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b68:	45a6      	cmp	lr, r4
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x8c>
 8000b6c:	193c      	adds	r4, r7, r4
 8000b6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b72:	f080 8105 	bcs.w	8000d80 <__udivmoddi4+0x28c>
 8000b76:	45a6      	cmp	lr, r4
 8000b78:	f240 8102 	bls.w	8000d80 <__udivmoddi4+0x28c>
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	443c      	add	r4, r7
 8000b80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b84:	eba4 040e 	sub.w	r4, r4, lr
 8000b88:	2600      	movs	r6, #0
 8000b8a:	b11d      	cbz	r5, 8000b94 <__udivmoddi4+0xa0>
 8000b8c:	40d4      	lsrs	r4, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e9c5 4300 	strd	r4, r3, [r5]
 8000b94:	4631      	mov	r1, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	b902      	cbnz	r2, 8000b9e <__udivmoddi4+0xaa>
 8000b9c:	deff      	udf	#255	; 0xff
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	d150      	bne.n	8000c48 <__udivmoddi4+0x154>
 8000ba6:	1bcb      	subs	r3, r1, r7
 8000ba8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bac:	fa1f f887 	uxth.w	r8, r7
 8000bb0:	2601      	movs	r6, #1
 8000bb2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bb6:	0c21      	lsrs	r1, r4, #16
 8000bb8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc0:	fb08 f30c 	mul.w	r3, r8, ip
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0xe4>
 8000bc8:	1879      	adds	r1, r7, r1
 8000bca:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0xe2>
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	f200 80e9 	bhi.w	8000da8 <__udivmoddi4+0x2b4>
 8000bd6:	4684      	mov	ip, r0
 8000bd8:	1ac9      	subs	r1, r1, r3
 8000bda:	b2a3      	uxth	r3, r4
 8000bdc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000be4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be8:	fb08 f800 	mul.w	r8, r8, r0
 8000bec:	45a0      	cmp	r8, r4
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x10c>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x10a>
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	f200 80d9 	bhi.w	8000db0 <__udivmoddi4+0x2bc>
 8000bfe:	4618      	mov	r0, r3
 8000c00:	eba4 0408 	sub.w	r4, r4, r8
 8000c04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c08:	e7bf      	b.n	8000b8a <__udivmoddi4+0x96>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x12e>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	f000 80b1 	beq.w	8000d76 <__udivmoddi4+0x282>
 8000c14:	2600      	movs	r6, #0
 8000c16:	e9c5 0100 	strd	r0, r1, [r5]
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	fab3 f683 	clz	r6, r3
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d14a      	bne.n	8000cc0 <__udivmoddi4+0x1cc>
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d302      	bcc.n	8000c34 <__udivmoddi4+0x140>
 8000c2e:	4282      	cmp	r2, r0
 8000c30:	f200 80b8 	bhi.w	8000da4 <__udivmoddi4+0x2b0>
 8000c34:	1a84      	subs	r4, r0, r2
 8000c36:	eb61 0103 	sbc.w	r1, r1, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	468c      	mov	ip, r1
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d0a8      	beq.n	8000b94 <__udivmoddi4+0xa0>
 8000c42:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c46:	e7a5      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000c48:	f1c2 0320 	rsb	r3, r2, #32
 8000c4c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c50:	4097      	lsls	r7, r2
 8000c52:	fa01 f002 	lsl.w	r0, r1, r2
 8000c56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5a:	40d9      	lsrs	r1, r3
 8000c5c:	4330      	orrs	r0, r6
 8000c5e:	0c03      	lsrs	r3, r0, #16
 8000c60:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c64:	fa1f f887 	uxth.w	r8, r7
 8000c68:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c70:	fb06 f108 	mul.w	r1, r6, r8
 8000c74:	4299      	cmp	r1, r3
 8000c76:	fa04 f402 	lsl.w	r4, r4, r2
 8000c7a:	d909      	bls.n	8000c90 <__udivmoddi4+0x19c>
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c82:	f080 808d 	bcs.w	8000da0 <__udivmoddi4+0x2ac>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 808a 	bls.w	8000da0 <__udivmoddi4+0x2ac>
 8000c8c:	3e02      	subs	r6, #2
 8000c8e:	443b      	add	r3, r7
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b281      	uxth	r1, r0
 8000c94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca0:	fb00 f308 	mul.w	r3, r0, r8
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x1c4>
 8000ca8:	1879      	adds	r1, r7, r1
 8000caa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cae:	d273      	bcs.n	8000d98 <__udivmoddi4+0x2a4>
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d971      	bls.n	8000d98 <__udivmoddi4+0x2a4>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	4439      	add	r1, r7
 8000cb8:	1acb      	subs	r3, r1, r3
 8000cba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cbe:	e778      	b.n	8000bb2 <__udivmoddi4+0xbe>
 8000cc0:	f1c6 0c20 	rsb	ip, r6, #32
 8000cc4:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ccc:	431c      	orrs	r4, r3
 8000cce:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cd6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cda:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	0c3b      	lsrs	r3, r7, #16
 8000ce2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce6:	fa1f f884 	uxth.w	r8, r4
 8000cea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cf2:	fb09 fa08 	mul.w	sl, r9, r8
 8000cf6:	458a      	cmp	sl, r1
 8000cf8:	fa02 f206 	lsl.w	r2, r2, r6
 8000cfc:	fa00 f306 	lsl.w	r3, r0, r6
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x220>
 8000d02:	1861      	adds	r1, r4, r1
 8000d04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d08:	d248      	bcs.n	8000d9c <__udivmoddi4+0x2a8>
 8000d0a:	458a      	cmp	sl, r1
 8000d0c:	d946      	bls.n	8000d9c <__udivmoddi4+0x2a8>
 8000d0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d12:	4421      	add	r1, r4
 8000d14:	eba1 010a 	sub.w	r1, r1, sl
 8000d18:	b2bf      	uxth	r7, r7
 8000d1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d22:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d26:	fb00 f808 	mul.w	r8, r0, r8
 8000d2a:	45b8      	cmp	r8, r7
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0x24a>
 8000d2e:	19e7      	adds	r7, r4, r7
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d22e      	bcs.n	8000d94 <__udivmoddi4+0x2a0>
 8000d36:	45b8      	cmp	r8, r7
 8000d38:	d92c      	bls.n	8000d94 <__udivmoddi4+0x2a0>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	4427      	add	r7, r4
 8000d3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d42:	eba7 0708 	sub.w	r7, r7, r8
 8000d46:	fba0 8902 	umull	r8, r9, r0, r2
 8000d4a:	454f      	cmp	r7, r9
 8000d4c:	46c6      	mov	lr, r8
 8000d4e:	4649      	mov	r1, r9
 8000d50:	d31a      	bcc.n	8000d88 <__udivmoddi4+0x294>
 8000d52:	d017      	beq.n	8000d84 <__udivmoddi4+0x290>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x27a>
 8000d56:	ebb3 020e 	subs.w	r2, r3, lr
 8000d5a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d5e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d62:	40f2      	lsrs	r2, r6
 8000d64:	ea4c 0202 	orr.w	r2, ip, r2
 8000d68:	40f7      	lsrs	r7, r6
 8000d6a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d6e:	2600      	movs	r6, #0
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	462e      	mov	r6, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e70b      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d7c:	4606      	mov	r6, r0
 8000d7e:	e6e9      	b.n	8000b54 <__udivmoddi4+0x60>
 8000d80:	4618      	mov	r0, r3
 8000d82:	e6fd      	b.n	8000b80 <__udivmoddi4+0x8c>
 8000d84:	4543      	cmp	r3, r8
 8000d86:	d2e5      	bcs.n	8000d54 <__udivmoddi4+0x260>
 8000d88:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d8c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d90:	3801      	subs	r0, #1
 8000d92:	e7df      	b.n	8000d54 <__udivmoddi4+0x260>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e7d2      	b.n	8000d3e <__udivmoddi4+0x24a>
 8000d98:	4660      	mov	r0, ip
 8000d9a:	e78d      	b.n	8000cb8 <__udivmoddi4+0x1c4>
 8000d9c:	4681      	mov	r9, r0
 8000d9e:	e7b9      	b.n	8000d14 <__udivmoddi4+0x220>
 8000da0:	4666      	mov	r6, ip
 8000da2:	e775      	b.n	8000c90 <__udivmoddi4+0x19c>
 8000da4:	4630      	mov	r0, r6
 8000da6:	e74a      	b.n	8000c3e <__udivmoddi4+0x14a>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	4439      	add	r1, r7
 8000dae:	e713      	b.n	8000bd8 <__udivmoddi4+0xe4>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	e724      	b.n	8000c00 <__udivmoddi4+0x10c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <v_LoadIntModel>:
//	fwrite(WBPtr, sizeof(float), values, FPtr);
//	fclose(FPtr);
//}

void v_LoadIntModel(netparam_t *xNetParam, distribution_t *xDistribution, quantizedval_t *xQuantizedVal)
{
 8000dbc:	b5b0      	push	{r4, r5, r7, lr}
 8000dbe:	b09c      	sub	sp, #112	; 0x70
 8000dc0:	af14      	add	r7, sp, #80	; 0x50
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	uint16_t	i;
	uint32_t	values = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
	uint8_t*	DataPtr;

	DataPtr = (uint8_t*)BASEADDR_FLOATMODEL;
 8000dcc:	4ba2      	ldr	r3, [pc, #648]	; (8001058 <v_LoadIntModel+0x29c>)
 8000dce:	617b      	str	r3, [r7, #20]

	memcpy(xNetParam, DataPtr, sizeof(*xNetParam));
 8000dd0:	2254      	movs	r2, #84	; 0x54
 8000dd2:	6979      	ldr	r1, [r7, #20]
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f007 f8fd 	bl	8007fd4 <memcpy>

	v_DynamicAlloc_quant(xQuantizedVal, xDistribution, *xNetParam);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	2500      	movs	r5, #0
 8000de0:	4615      	mov	r5, r2
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	2400      	movs	r4, #0
 8000de6:	4614      	mov	r4, r2
 8000de8:	4668      	mov	r0, sp
 8000dea:	3308      	adds	r3, #8
 8000dec:	224c      	movs	r2, #76	; 0x4c
 8000dee:	4619      	mov	r1, r3
 8000df0:	f007 f8f0 	bl	8007fd4 <memcpy>
 8000df4:	462a      	mov	r2, r5
 8000df6:	4623      	mov	r3, r4
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f930 	bl	8001060 <v_DynamicAlloc_quant>

	for (i = 0; i < (xNetParam->Layers - 1); i++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	83fb      	strh	r3, [r7, #30]
 8000e04:	e014      	b.n	8000e30 <v_LoadIntModel+0x74>
	{
		values += ((1 + xNetParam->NonLayer[i]) * xNetParam->NonLayer[i + 1]);
 8000e06:	8bfb      	ldrh	r3, [r7, #30]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	889b      	ldrh	r3, [r3, #4]
 8000e10:	1c5a      	adds	r2, r3, #1
 8000e12:	8bfb      	ldrh	r3, [r7, #30]
 8000e14:	3301      	adds	r3, #1
 8000e16:	68f9      	ldr	r1, [r7, #12]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	440b      	add	r3, r1
 8000e1c:	889b      	ldrh	r3, [r3, #4]
 8000e1e:	fb03 f302 	mul.w	r3, r3, r2
 8000e22:	461a      	mov	r2, r3
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	4413      	add	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < (xNetParam->Layers - 1); i++)
 8000e2a:	8bfb      	ldrh	r3, [r7, #30]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	83fb      	strh	r3, [r7, #30]
 8000e30:	8bfa      	ldrh	r2, [r7, #30]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	885b      	ldrh	r3, [r3, #2]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbe4      	blt.n	8000e06 <v_LoadIntModel+0x4a>
	}

	memcpy(xDistribution->W_min,		&DataPtr[sizeof(*xNetParam)], (sizeof(float) * xNetParam->Layers));
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	885b      	ldrh	r3, [r3, #2]
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f007 f8c1 	bl	8007fd4 <memcpy>
	memcpy(xDistribution->W_max,		&DataPtr[sizeof(*xNetParam)	+ 1*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	6858      	ldr	r0, [r3, #4]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	885b      	ldrh	r3, [r3, #2]
 8000e5a:	3315      	adds	r3, #21
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	18d1      	adds	r1, r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	885b      	ldrh	r3, [r3, #2]
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f007 f8b3 	bl	8007fd4 <memcpy>
	memcpy(xDistribution->b_min,		&DataPtr[sizeof(*xNetParam)	+ 2*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	6898      	ldr	r0, [r3, #8]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	885b      	ldrh	r3, [r3, #2]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	3354      	adds	r3, #84	; 0x54
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	18d1      	adds	r1, r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	885b      	ldrh	r3, [r3, #2]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	461a      	mov	r2, r3
 8000e86:	f007 f8a5 	bl	8007fd4 <memcpy>
	memcpy(xDistribution->b_max,		&DataPtr[sizeof(*xNetParam)	+ 3*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	68d8      	ldr	r0, [r3, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	885b      	ldrh	r3, [r3, #2]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4613      	mov	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	3354      	adds	r3, #84	; 0x54
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	18d1      	adds	r1, r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	885b      	ldrh	r3, [r3, #2]
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	f007 f893 	bl	8007fd4 <memcpy>
	memcpy(xDistribution->func_min,		&DataPtr[sizeof(*xNetParam) + 4*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	6918      	ldr	r0, [r3, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	885b      	ldrh	r3, [r3, #2]
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	3354      	adds	r3, #84	; 0x54
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	18d1      	adds	r1, r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	885b      	ldrh	r3, [r3, #2]
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	f007 f885 	bl	8007fd4 <memcpy>
	memcpy(xDistribution->func_max,		&DataPtr[sizeof(*xNetParam) + 5*(sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	6958      	ldr	r0, [r3, #20]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	885b      	ldrh	r3, [r3, #2]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	3354      	adds	r3, #84	; 0x54
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	18d1      	adds	r1, r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	885b      	ldrh	r3, [r3, #2]
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	f007 f873 	bl	8007fd4 <memcpy>
	memcpy(xQuantizedVal->Sy,			&DataPtr[sizeof(*xNetParam)	+ 6 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	885b      	ldrh	r3, [r3, #2]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	3354      	adds	r3, #84	; 0x54
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	18d1      	adds	r1, r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	885b      	ldrh	r3, [r3, #2]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	f007 f861 	bl	8007fd4 <memcpy>
	memcpy(xQuantizedVal->Sz,			&DataPtr[sizeof(*xNetParam)	+ 7 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6858      	ldr	r0, [r3, #4]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	885b      	ldrh	r3, [r3, #2]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	1a9b      	subs	r3, r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	3354      	adds	r3, #84	; 0x54
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	18d1      	adds	r1, r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	885b      	ldrh	r3, [r3, #2]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	461a      	mov	r2, r3
 8000f32:	f007 f84f 	bl	8007fd4 <memcpy>
	memcpy(xQuantizedVal->Sw,			&DataPtr[sizeof(*xNetParam)	+ 8 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6898      	ldr	r0, [r3, #8]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	015b      	lsls	r3, r3, #5
 8000f40:	3354      	adds	r3, #84	; 0x54
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	18d1      	adds	r1, r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	885b      	ldrh	r3, [r3, #2]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	f007 f841 	bl	8007fd4 <memcpy>
	memcpy(xQuantizedVal->Sb,			&DataPtr[sizeof(*xNetParam)	+ 9 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68d8      	ldr	r0, [r3, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	885b      	ldrh	r3, [r3, #2]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	3354      	adds	r3, #84	; 0x54
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	18d1      	adds	r1, r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	885b      	ldrh	r3, [r3, #2]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	461a      	mov	r2, r3
 8000f72:	f007 f82f 	bl	8007fd4 <memcpy>
	memcpy(xQuantizedVal->Ssumcomp,		&DataPtr[sizeof(*xNetParam) + 10 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6918      	ldr	r0, [r3, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	885b      	ldrh	r3, [r3, #2]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	3354      	adds	r3, #84	; 0x54
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	18d1      	adds	r1, r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	885b      	ldrh	r3, [r3, #2]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	461a      	mov	r2, r3
 8000f96:	f007 f81d 	bl	8007fd4 <memcpy>
	memcpy(xQuantizedVal->Sbiascomp,	&DataPtr[sizeof(*xNetParam) + 11 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6958      	ldr	r0, [r3, #20]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	885b      	ldrh	r3, [r3, #2]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	232c      	movs	r3, #44	; 0x2c
 8000fa6:	fb03 f302 	mul.w	r3, r3, r2
 8000faa:	3354      	adds	r3, #84	; 0x54
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	18d1      	adds	r1, r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	885b      	ldrh	r3, [r3, #2]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f007 f80c 	bl	8007fd4 <memcpy>
	memcpy(xQuantizedVal->ZWsum,		&DataPtr[sizeof(*xNetParam) + 12 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6998      	ldr	r0, [r3, #24]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	885b      	ldrh	r3, [r3, #2]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	3354      	adds	r3, #84	; 0x54
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	18d1      	adds	r1, r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	885b      	ldrh	r3, [r3, #2]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	f006 fffa 	bl	8007fd4 <memcpy>
	memcpy(xQuantizedVal->Zy,			&DataPtr[sizeof(*xNetParam) + 13 * (sizeof(float) * xNetParam->Layers)], (sizeof(float) * xNetParam->Layers));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69d8      	ldr	r0, [r3, #28]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	885b      	ldrh	r3, [r3, #2]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2334      	movs	r3, #52	; 0x34
 8000fec:	fb03 f302 	mul.w	r3, r3, r2
 8000ff0:	3354      	adds	r3, #84	; 0x54
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	18d1      	adds	r1, r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	885b      	ldrh	r3, [r3, #2]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f006 ffe9 	bl	8007fd4 <memcpy>

	memcpy(((uint8_t*)xQuantizedVal->WBPtr), &DataPtr[sizeof(*xNetParam) + 14 * (sizeof(float) * xNetParam->Layers)], ((values * xNetParam->xVarPrecision.precision) / 8.0));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1c      	ldr	r4, [r3, #32]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	885b      	ldrh	r3, [r3, #2]
 800100a:	461a      	mov	r2, r3
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	3354      	adds	r3, #84	; 0x54
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	18d5      	adds	r5, r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	785b      	ldrb	r3, [r3, #1]
 800101e:	461a      	mov	r2, r3
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fb03 f302 	mul.w	r3, r3, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa18 	bl	800045c <__aeabi_ui2d>
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <v_LoadIntModel+0x2a0>)
 8001032:	f7ff fbb7 	bl	80007a4 <__aeabi_ddiv>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f7ff fd21 	bl	8000a84 <__aeabi_d2uiz>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4629      	mov	r1, r5
 8001048:	4620      	mov	r0, r4
 800104a:	f006 ffc3 	bl	8007fd4 <memcpy>
}
 800104e:	bf00      	nop
 8001050:	3720      	adds	r7, #32
 8001052:	46bd      	mov	sp, r7
 8001054:	bdb0      	pop	{r4, r5, r7, pc}
 8001056:	bf00      	nop
 8001058:	080c0000 	.word	0x080c0000
 800105c:	40200000 	.word	0x40200000

08001060 <v_DynamicAlloc_quant>:

//************************************************************************************************
//	MEMORY FUNCTIONS
//************************************************************************************************
void v_DynamicAlloc_quant(quantizedval_t* xQuantizedVal, distribution_t* xDistribution, netparam_t	xNetParam)
{
 8001060:	b082      	sub	sp, #8
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
 800106c:	f107 0120 	add.w	r1, r7, #32
 8001070:	e881 000c 	stmia.w	r1, {r2, r3}
	uint16_t	i;
	uint32_t	values = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
	uint16_t	neurons = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
 800107c:	2300      	movs	r3, #0
 800107e:	82fb      	strh	r3, [r7, #22]
 8001080:	e01f      	b.n	80010c2 <v_DynamicAlloc_quant+0x62>
	{
		neurons += xNetParam.NonLayer[i];
 8001082:	8afb      	ldrh	r3, [r7, #22]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	f107 0220 	add.w	r2, r7, #32
 800108a:	4413      	add	r3, r2
 800108c:	889a      	ldrh	r2, [r3, #4]
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	4413      	add	r3, r2
 8001092:	81fb      	strh	r3, [r7, #14]
		values += ((1 + xNetParam.NonLayer[i]) * xNetParam.NonLayer[i + 1]);
 8001094:	8afb      	ldrh	r3, [r7, #22]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	f107 0220 	add.w	r2, r7, #32
 800109c:	4413      	add	r3, r2
 800109e:	889b      	ldrh	r3, [r3, #4]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	8afb      	ldrh	r3, [r7, #22]
 80010a4:	3301      	adds	r3, #1
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	f107 0120 	add.w	r1, r7, #32
 80010ac:	440b      	add	r3, r1
 80010ae:	889b      	ldrh	r3, [r3, #4]
 80010b0:	fb03 f302 	mul.w	r3, r3, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4413      	add	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
	for (i = 0; i < (xNetParam.Layers - 1); i++)
 80010bc:	8afb      	ldrh	r3, [r7, #22]
 80010be:	3301      	adds	r3, #1
 80010c0:	82fb      	strh	r3, [r7, #22]
 80010c2:	8afa      	ldrh	r2, [r7, #22]
 80010c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010c6:	3b01      	subs	r3, #1
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbda      	blt.n	8001082 <v_DynamicAlloc_quant+0x22>
	}
	neurons += xNetParam.NonLayer[xNetParam.Layers - 1];
 80010cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010ce:	3b01      	subs	r3, #1
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	f107 0220 	add.w	r2, r7, #32
 80010d6:	4413      	add	r3, r2
 80010d8:	889a      	ldrh	r2, [r3, #4]
 80010da:	89fb      	ldrh	r3, [r7, #14]
 80010dc:	4413      	add	r3, r2
 80010de:	81fb      	strh	r3, [r7, #14]

	xQuantizedVal->WBPtr = (void*)malloc(ceil((float)(values * xNetParam.xVarPrecision.precision) / 8.0));
 80010e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010e4:	461a      	mov	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fb03 f302 	mul.w	r3, r3, r2
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f4:	ee17 0a90 	vmov	r0, s15
 80010f8:	f7ff f9d2 	bl	80004a0 <__aeabi_f2d>
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <v_DynamicAlloc_quant+0x1e0>)
 8001102:	f7ff fb4f 	bl	80007a4 <__aeabi_ddiv>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	ec43 2b17 	vmov	d7, r2, r3
 800110e:	eeb0 0a47 	vmov.f32	s0, s14
 8001112:	eef0 0a67 	vmov.f32	s1, s15
 8001116:	f007 f93f 	bl	8008398 <ceil>
 800111a:	ec53 2b10 	vmov	r2, r3, d0
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fcaf 	bl	8000a84 <__aeabi_d2uiz>
 8001126:	4603      	mov	r3, r0
 8001128:	4618      	mov	r0, r3
 800112a:	f006 ff43 	bl	8007fb4 <malloc>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	621a      	str	r2, [r3, #32]

	xQuantizedVal->Zy = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4618      	mov	r0, r3
 800113c:	f006 ff3a 	bl	8007fb4 <malloc>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	61da      	str	r2, [r3, #28]
	xQuantizedVal->Sy = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4618      	mov	r0, r3
 800114e:	f006 ff31 	bl	8007fb4 <malloc>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
	xQuantizedVal->Sz = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 800115a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4618      	mov	r0, r3
 8001160:	f006 ff28 	bl	8007fb4 <malloc>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	605a      	str	r2, [r3, #4]
	xQuantizedVal->Sw = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 800116c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4618      	mov	r0, r3
 8001172:	f006 ff1f 	bl	8007fb4 <malloc>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	609a      	str	r2, [r3, #8]
	xQuantizedVal->Sb = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 800117e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4618      	mov	r0, r3
 8001184:	f006 ff16 	bl	8007fb4 <malloc>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	60da      	str	r2, [r3, #12]
	xQuantizedVal->Ssumcomp = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001190:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4618      	mov	r0, r3
 8001196:	f006 ff0d 	bl	8007fb4 <malloc>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	611a      	str	r2, [r3, #16]
	xQuantizedVal->Sbiascomp = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 80011a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f006 ff04 	bl	8007fb4 <malloc>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	615a      	str	r2, [r3, #20]
	xQuantizedVal->ZWsum = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 80011b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f006 fefb 	bl	8007fb4 <malloc>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
	xDistribution->W_min = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 80011c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f006 fef2 	bl	8007fb4 <malloc>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	601a      	str	r2, [r3, #0]
	xDistribution->W_max = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 80011d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4618      	mov	r0, r3
 80011de:	f006 fee9 	bl	8007fb4 <malloc>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	605a      	str	r2, [r3, #4]
	xDistribution->b_min = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 80011ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f006 fee0 	bl	8007fb4 <malloc>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	609a      	str	r2, [r3, #8]
	xDistribution->b_max = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 80011fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4618      	mov	r0, r3
 8001202:	f006 fed7 	bl	8007fb4 <malloc>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	60da      	str	r2, [r3, #12]
	xDistribution->func_min = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 800120e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4618      	mov	r0, r3
 8001214:	f006 fece 	bl	8007fb4 <malloc>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	611a      	str	r2, [r3, #16]
	xDistribution->func_max = (float*)malloc(xNetParam.Layers * FP32_SIZE);
 8001220:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4618      	mov	r0, r3
 8001226:	f006 fec5 	bl	8007fb4 <malloc>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	615a      	str	r2, [r3, #20]
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800123c:	b002      	add	sp, #8
 800123e:	4770      	bx	lr
 8001240:	40200000 	.word	0x40200000

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0a6      	sub	sp, #152	; 0x98
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f000 f9db 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f813 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 f8bb 	bl	80013cc <MX_GPIO_Init>
  MX_RTC_Init();
 8001256:	f000 f893 	bl	8001380 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 800125a:	f005 ff63 	bl	8007124 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
  netparam_t xNetParam;
  float* xWBPtr = NULL;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while (1)
  {
	  //CDC_Transmit_FS(buffer, 10);
    /* USER CODE END WHILE */
	//v_LoadFloatModel(&xNetParam, &xWBPtr);
	v_LoadIntModel(&xNetParam, &xDistribution, &xQuantizedVal);
 8001264:	1d3a      	adds	r2, r7, #4
 8001266:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800126a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fda4 	bl	8000dbc <v_LoadIntModel>
 8001274:	e7f6      	b.n	8001264 <main+0x20>
	...

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b098      	sub	sp, #96	; 0x60
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f006 feb2 	bl	8007ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <SystemClock_Config+0x100>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <SystemClock_Config+0x100>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <SystemClock_Config+0x100>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <SystemClock_Config+0x104>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a2b      	ldr	r2, [pc, #172]	; (800137c <SystemClock_Config+0x104>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <SystemClock_Config+0x104>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80012e2:	2309      	movs	r3, #9
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f0:	2302      	movs	r3, #2
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012fa:	2304      	movs	r3, #4
 80012fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012fe:	23a8      	movs	r3, #168	; 0xa8
 8001300:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001302:	2302      	movs	r3, #2
 8001304:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001306:	2307      	movs	r3, #7
 8001308:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800130e:	4618      	mov	r0, r3
 8001310:	f002 f918 	bl	8003544 <HAL_RCC_OscConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800131a:	f000 f87f 	bl	800141c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131e:	230f      	movs	r3, #15
 8001320:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001322:	2302      	movs	r3, #2
 8001324:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800132a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	2105      	movs	r1, #5
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fb79 	bl	8003a34 <HAL_RCC_ClockConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001348:	f000 f868 	bl	800141c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800134c:	2302      	movs	r3, #2
 800134e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001354:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fd66 	bl	8003e2c <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001366:	f000 f859 	bl	800141c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800136a:	f002 fc49 	bl	8003c00 <HAL_RCC_EnableCSS>
}
 800136e:	bf00      	nop
 8001370:	3760      	adds	r7, #96	; 0x60
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000

08001380 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_RTC_Init+0x44>)
 8001386:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <MX_RTC_Init+0x48>)
 8001388:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_RTC_Init+0x44>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_RTC_Init+0x44>)
 8001392:	227f      	movs	r2, #127	; 0x7f
 8001394:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_RTC_Init+0x44>)
 8001398:	22ff      	movs	r2, #255	; 0xff
 800139a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_RTC_Init+0x44>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_RTC_Init+0x44>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_RTC_Init+0x44>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_RTC_Init+0x44>)
 80013b0:	f002 fe1e 	bl	8003ff0 <HAL_RTC_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80013ba:	f000 f82f 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000450 	.word	0x20000450
 80013c8:	40002800 	.word	0x40002800

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_GPIO_Init+0x4c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <MX_GPIO_Init+0x4c>)
 80013dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_GPIO_Init+0x4c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_GPIO_Init+0x4c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <MX_GPIO_Init+0x4c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_GPIO_Init+0x4c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_MspInit+0x4c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x4c>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <HAL_RTC_MspInit+0x24>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d102      	bne.n	8001494 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_RTC_MspInit+0x28>)
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40002800 	.word	0x40002800
 80014a4:	42470e3c 	.word	0x42470e3c

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80014ac:	f002 fca2 	bl	8003df4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <HardFault_Handler+0x4>

080014ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <BusFault_Handler+0x4>

080014c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <UsageFault_Handler+0x4>

080014cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fa:	f000 f8d5 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <OTG_FS_IRQHandler+0x10>)
 800150a:	f000 ffe7 	bl	80024dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20001964 	.word	0x20001964

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f006 fcf0 	bl	8007f2c <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20020000 	.word	0x20020000
 8001578:	00000400 	.word	0x00000400
 800157c:	20000200 	.word	0x20000200
 8001580:	20001d80 	.word	0x20001d80

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <SystemInit+0x28>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <SystemInit+0x28>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SystemInit+0x28>)
 800159a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159e:	609a      	str	r2, [r3, #8]
#endif
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015b6:	e003      	b.n	80015c0 <LoopCopyDataInit>

080015b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015be:	3104      	adds	r1, #4

080015c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015c8:	d3f6      	bcc.n	80015b8 <CopyDataInit>
  ldr  r2, =_sbss
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015cc:	e002      	b.n	80015d4 <LoopFillZerobss>

080015ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015d0:	f842 3b04 	str.w	r3, [r2], #4

080015d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015d8:	d3f9      	bcc.n	80015ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015da:	f7ff ffd3 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015de:	f006 fcab 	bl	8007f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e2:	f7ff fe2f 	bl	8001244 <main>
  bx  lr    
 80015e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015ec:	0800872c 	.word	0x0800872c
  ldr  r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015f4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80015f8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80015fc:	20001d7c 	.word	0x20001d7c

08001600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC_IRQHandler>
	...

08001604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <HAL_Init+0x40>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_Init+0x40>)
 800161a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_Init+0x40>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f94f 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	2000      	movs	r0, #0
 8001634:	f000 f808 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff fef8 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023c00 	.word	0x40023c00

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f967 	bl	800193a <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 f92f 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000008 	.word	0x20000008
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000470 	.word	0x20000470

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000470 	.word	0x20000470

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff ffee 	bl	80016d0 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffde 	bl	80016d0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff29 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff3e 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff8e 	bl	8001824 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff31 	bl	8001794 <__NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffa2 	bl	800188c <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_FLASH_Program+0xa0>)
 8001968:	7e1b      	ldrb	r3, [r3, #24]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_FLASH_Program+0x1e>
 800196e:	2302      	movs	r3, #2
 8001970:	e03b      	b.n	80019ea <HAL_FLASH_Program+0x96>
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_FLASH_Program+0xa0>)
 8001974:	2201      	movs	r2, #1
 8001976:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001978:	f24c 3050 	movw	r0, #50000	; 0xc350
 800197c:	f000 f870 	bl	8001a60 <FLASH_WaitForLastOperation>
 8001980:	4603      	mov	r3, r0
 8001982:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d12b      	bne.n	80019e2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001990:	783b      	ldrb	r3, [r7, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	68b8      	ldr	r0, [r7, #8]
 8001996:	f000 f91b 	bl	8001bd0 <FLASH_Program_Byte>
 800199a:	e016      	b.n	80019ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d105      	bne.n	80019ae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80019a2:	883b      	ldrh	r3, [r7, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	68b8      	ldr	r0, [r7, #8]
 80019a8:	f000 f8ee 	bl	8001b88 <FLASH_Program_HalfWord>
 80019ac:	e00d      	b.n	80019ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d105      	bne.n	80019c0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	4619      	mov	r1, r3
 80019b8:	68b8      	ldr	r0, [r7, #8]
 80019ba:	f000 f8c3 	bl	8001b44 <FLASH_Program_Word>
 80019be:	e004      	b.n	80019ca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80019c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019c4:	68b8      	ldr	r0, [r7, #8]
 80019c6:	f000 f88b 	bl	8001ae0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019ce:	f000 f847 	bl	8001a60 <FLASH_WaitForLastOperation>
 80019d2:	4603      	mov	r3, r0
 80019d4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_FLASH_Program+0xa4>)
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_FLASH_Program+0xa4>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_FLASH_Program+0xa0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000474 	.word	0x20000474
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_FLASH_Unlock+0x38>)
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da0b      	bge.n	8001a26 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_FLASH_Unlock+0x38>)
 8001a10:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <HAL_FLASH_Unlock+0x3c>)
 8001a12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <HAL_FLASH_Unlock+0x38>)
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_FLASH_Unlock+0x40>)
 8001a18:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_FLASH_Unlock+0x38>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da01      	bge.n	8001a26 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a26:	79fb      	ldrb	r3, [r7, #7]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40023c00 	.word	0x40023c00
 8001a38:	45670123 	.word	0x45670123
 8001a3c:	cdef89ab 	.word	0xcdef89ab

08001a40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_FLASH_Lock+0x1c>)
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_FLASH_Lock+0x1c>)
 8001a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a4e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40023c00 	.word	0x40023c00

08001a60 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <FLASH_WaitForLastOperation+0x78>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a72:	f7ff fe2d 	bl	80016d0 <HAL_GetTick>
 8001a76:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001a78:	e010      	b.n	8001a9c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d00c      	beq.n	8001a9c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <FLASH_WaitForLastOperation+0x38>
 8001a88:	f7ff fe22 	bl	80016d0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d201      	bcs.n	8001a9c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e019      	b.n	8001ad0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <FLASH_WaitForLastOperation+0x7c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e8      	bne.n	8001a7a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <FLASH_WaitForLastOperation+0x7c>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <FLASH_WaitForLastOperation+0x7c>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <FLASH_WaitForLastOperation+0x7c>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001ac6:	f000 f8a5 	bl	8001c14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
  
}  
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000474 	.word	0x20000474
 8001adc:	40023c00 	.word	0x40023c00

08001ae0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <FLASH_Program_DoubleWord+0x60>)
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <FLASH_Program_DoubleWord+0x60>)
 8001af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001af6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <FLASH_Program_DoubleWord+0x60>)
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <FLASH_Program_DoubleWord+0x60>)
 8001afe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <FLASH_Program_DoubleWord+0x60>)
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <FLASH_Program_DoubleWord+0x60>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001b16:	f3bf 8f6f 	isb	sy
}
 8001b1a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	000a      	movs	r2, r1
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	3104      	adds	r1, #4
 8001b30:	4613      	mov	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40023c00 	.word	0x40023c00

08001b44 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <FLASH_Program_Word+0x40>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <FLASH_Program_Word+0x40>)
 8001b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <FLASH_Program_Word+0x40>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <FLASH_Program_Word+0x40>)
 8001b60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <FLASH_Program_Word+0x40>)
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <FLASH_Program_Word+0x40>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	601a      	str	r2, [r3, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <FLASH_Program_HalfWord+0x44>)
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <FLASH_Program_HalfWord+0x44>)
 8001b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <FLASH_Program_HalfWord+0x44>)
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <FLASH_Program_HalfWord+0x44>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <FLASH_Program_HalfWord+0x44>)
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <FLASH_Program_HalfWord+0x44>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	801a      	strh	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023c00 	.word	0x40023c00

08001bd0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <FLASH_Program_Byte+0x40>)
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <FLASH_Program_Byte+0x40>)
 8001be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001be6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <FLASH_Program_Byte+0x40>)
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <FLASH_Program_Byte+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <FLASH_Program_Byte+0x40>)
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <FLASH_Program_Byte+0x40>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	701a      	strb	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023c00 	.word	0x40023c00

08001c14 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <FLASH_SetErrorCode+0xa4>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <FLASH_SetErrorCode+0xa8>)
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	f043 0310 	orr.w	r3, r3, #16
 8001c2c:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <FLASH_SetErrorCode+0xa8>)
 8001c2e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <FLASH_SetErrorCode+0xa4>)
 8001c32:	2210      	movs	r2, #16
 8001c34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <FLASH_SetErrorCode+0xa4>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c42:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <FLASH_SetErrorCode+0xa8>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <FLASH_SetErrorCode+0xa8>)
 8001c4c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <FLASH_SetErrorCode+0xa4>)
 8001c50:	2220      	movs	r2, #32
 8001c52:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <FLASH_SetErrorCode+0xa4>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <FLASH_SetErrorCode+0xa8>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <FLASH_SetErrorCode+0xa8>)
 8001c6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <FLASH_SetErrorCode+0xa4>)
 8001c6e:	2240      	movs	r2, #64	; 0x40
 8001c70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <FLASH_SetErrorCode+0xa4>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d008      	beq.n	8001c90 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <FLASH_SetErrorCode+0xa8>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <FLASH_SetErrorCode+0xa8>)
 8001c88:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <FLASH_SetErrorCode+0xa4>)
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <FLASH_SetErrorCode+0xa4>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <FLASH_SetErrorCode+0xa8>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f043 0320 	orr.w	r3, r3, #32
 8001ca4:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <FLASH_SetErrorCode+0xa8>)
 8001ca6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <FLASH_SetErrorCode+0xa4>)
 8001caa:	2202      	movs	r2, #2
 8001cac:	60da      	str	r2, [r3, #12]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40023c00 	.word	0x40023c00
 8001cbc:	20000474 	.word	0x20000474

08001cc0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cd2:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HAL_FLASHEx_Erase+0xd8>)
 8001cd4:	7e1b      	ldrb	r3, [r3, #24]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_FLASHEx_Erase+0x1e>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e058      	b.n	8001d90 <HAL_FLASHEx_Erase+0xd0>
 8001cde:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <HAL_FLASHEx_Erase+0xd8>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ce4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ce8:	f7ff feba 	bl	8001a60 <FLASH_WaitForLastOperation>
 8001cec:	4603      	mov	r3, r0
 8001cee:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d148      	bne.n	8001d88 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d115      	bne.n	8001d32 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f000 f844 	bl	8001da0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d1c:	f7ff fea0 	bl	8001a60 <FLASH_WaitForLastOperation>
 8001d20:	4603      	mov	r3, r0
 8001d22:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_FLASHEx_Erase+0xdc>)
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <HAL_FLASHEx_Erase+0xdc>)
 8001d2a:	f023 0304 	bic.w	r3, r3, #4
 8001d2e:	6113      	str	r3, [r2, #16]
 8001d30:	e028      	b.n	8001d84 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	e01c      	b.n	8001d74 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4619      	mov	r1, r3
 8001d42:	68b8      	ldr	r0, [r7, #8]
 8001d44:	f000 f850 	bl	8001de8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d4c:	f7ff fe88 	bl	8001a60 <FLASH_WaitForLastOperation>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_FLASHEx_Erase+0xdc>)
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <HAL_FLASHEx_Erase+0xdc>)
 8001d5a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001d5e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	601a      	str	r2, [r3, #0]
          break;
 8001d6c:	e00a      	b.n	8001d84 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	3301      	adds	r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d3da      	bcc.n	8001d3a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001d84:	f000 f878 	bl	8001e78 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_FLASHEx_Erase+0xd8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	761a      	strb	r2, [r3, #24]

  return status;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000474 	.word	0x20000474
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <FLASH_MassErase+0x44>)
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <FLASH_MassErase+0x44>)
 8001db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <FLASH_MassErase+0x44>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <FLASH_MassErase+0x44>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <FLASH_MassErase+0x44>)
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <FLASH_MassErase+0x44>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6113      	str	r3, [r2, #16]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023c00 	.word	0x40023c00

08001de8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e010      	b.n	8001e26 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d103      	bne.n	8001e12 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e009      	b.n	8001e26 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d103      	bne.n	8001e20 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e002      	b.n	8001e26 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <FLASH_Erase_Sector+0x8c>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <FLASH_Erase_Sector+0x8c>)
 8001e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <FLASH_Erase_Sector+0x8c>)
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	490f      	ldr	r1, [pc, #60]	; (8001e74 <FLASH_Erase_Sector+0x8c>)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <FLASH_Erase_Sector+0x8c>)
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <FLASH_Erase_Sector+0x8c>)
 8001e44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <FLASH_Erase_Sector+0x8c>)
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <FLASH_Erase_Sector+0x8c>)
 8001e56:	f043 0302 	orr.w	r3, r3, #2
 8001e5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <FLASH_Erase_Sector+0x8c>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <FLASH_Erase_Sector+0x8c>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	6113      	str	r3, [r2, #16]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40023c00 	.word	0x40023c00

08001e78 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d017      	beq.n	8001eb8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001e8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e92:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001e9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a16      	ldr	r2, [pc, #88]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001eaa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d017      	beq.n	8001ef4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ece:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001ed6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ee6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <FLASH_FlushCaches+0x88>)
 8001eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef2:	6013      	str	r3, [r2, #0]
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e16b      	b.n	80021f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f20:	2201      	movs	r2, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 815a 	bne.w	80021f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d005      	beq.n	8001f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d130      	bne.n	8001fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0201 	and.w	r2, r3, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d017      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d123      	bne.n	8002048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0203 	and.w	r2, r3, #3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80b4 	beq.w	80021f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b60      	ldr	r3, [pc, #384]	; (8002210 <HAL_GPIO_Init+0x30c>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a5f      	ldr	r2, [pc, #380]	; (8002210 <HAL_GPIO_Init+0x30c>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <HAL_GPIO_Init+0x30c>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a6:	4a5b      	ldr	r2, [pc, #364]	; (8002214 <HAL_GPIO_Init+0x310>)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a52      	ldr	r2, [pc, #328]	; (8002218 <HAL_GPIO_Init+0x314>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02b      	beq.n	800212a <HAL_GPIO_Init+0x226>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_GPIO_Init+0x318>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d025      	beq.n	8002126 <HAL_GPIO_Init+0x222>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a50      	ldr	r2, [pc, #320]	; (8002220 <HAL_GPIO_Init+0x31c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01f      	beq.n	8002122 <HAL_GPIO_Init+0x21e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4f      	ldr	r2, [pc, #316]	; (8002224 <HAL_GPIO_Init+0x320>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d019      	beq.n	800211e <HAL_GPIO_Init+0x21a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4e      	ldr	r2, [pc, #312]	; (8002228 <HAL_GPIO_Init+0x324>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_GPIO_Init+0x216>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4d      	ldr	r2, [pc, #308]	; (800222c <HAL_GPIO_Init+0x328>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00d      	beq.n	8002116 <HAL_GPIO_Init+0x212>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4c      	ldr	r2, [pc, #304]	; (8002230 <HAL_GPIO_Init+0x32c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <HAL_GPIO_Init+0x20e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4b      	ldr	r2, [pc, #300]	; (8002234 <HAL_GPIO_Init+0x330>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_GPIO_Init+0x20a>
 800210a:	2307      	movs	r3, #7
 800210c:	e00e      	b.n	800212c <HAL_GPIO_Init+0x228>
 800210e:	2308      	movs	r3, #8
 8002110:	e00c      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002112:	2306      	movs	r3, #6
 8002114:	e00a      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002116:	2305      	movs	r3, #5
 8002118:	e008      	b.n	800212c <HAL_GPIO_Init+0x228>
 800211a:	2304      	movs	r3, #4
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x228>
 800211e:	2303      	movs	r3, #3
 8002120:	e004      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002122:	2302      	movs	r3, #2
 8002124:	e002      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_GPIO_Init+0x228>
 800212a:	2300      	movs	r3, #0
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	f002 0203 	and.w	r2, r2, #3
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	4093      	lsls	r3, r2
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800213c:	4935      	ldr	r1, [pc, #212]	; (8002214 <HAL_GPIO_Init+0x310>)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <HAL_GPIO_Init+0x334>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800216e:	4a32      	ldr	r2, [pc, #200]	; (8002238 <HAL_GPIO_Init+0x334>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002174:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_GPIO_Init+0x334>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002198:	4a27      	ldr	r2, [pc, #156]	; (8002238 <HAL_GPIO_Init+0x334>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_GPIO_Init+0x334>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_GPIO_Init+0x334>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_GPIO_Init+0x334>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ec:	4a12      	ldr	r2, [pc, #72]	; (8002238 <HAL_GPIO_Init+0x334>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	f67f ae90 	bls.w	8001f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	40013800 	.word	0x40013800
 8002218:	40020000 	.word	0x40020000
 800221c:	40020400 	.word	0x40020400
 8002220:	40020800 	.word	0x40020800
 8002224:	40020c00 	.word	0x40020c00
 8002228:	40021000 	.word	0x40021000
 800222c:	40021400 	.word	0x40021400
 8002230:	40021800 	.word	0x40021800
 8002234:	40021c00 	.word	0x40021c00
 8002238:	40013c00 	.word	0x40013c00

0800223c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800223c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223e:	b08f      	sub	sp, #60	; 0x3c
 8002240:	af0a      	add	r7, sp, #40	; 0x28
 8002242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e10f      	b.n	800246e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f005 fb47 	bl	80078fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2203      	movs	r2, #3
 8002272:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f002 f8a8 	bl	80043e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	687e      	ldr	r6, [r7, #4]
 800229a:	466d      	mov	r5, sp
 800229c:	f106 0410 	add.w	r4, r6, #16
 80022a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80022b0:	1d33      	adds	r3, r6, #4
 80022b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	f001 ff80 	bl	80041ba <USB_CoreInit>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0d0      	b.n	800246e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 f896 	bl	8004404 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e04a      	b.n	8002374 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	333d      	adds	r3, #61	; 0x3d
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	333c      	adds	r3, #60	; 0x3c
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	b298      	uxth	r0, r3
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3342      	adds	r3, #66	; 0x42
 800231a:	4602      	mov	r2, r0
 800231c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	333f      	adds	r3, #63	; 0x3f
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3344      	adds	r3, #68	; 0x44
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	3348      	adds	r3, #72	; 0x48
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3350      	adds	r3, #80	; 0x50
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	3301      	adds	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	d3af      	bcc.n	80022de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	e044      	b.n	800240e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	3301      	adds	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d3b5      	bcc.n	8002384 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	687e      	ldr	r6, [r7, #4]
 8002420:	466d      	mov	r5, sp
 8002422:	f106 0410 	add.w	r4, r6, #16
 8002426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002432:	e885 0003 	stmia.w	r5, {r0, r1}
 8002436:	1d33      	adds	r3, r6, #4
 8002438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800243a:	6838      	ldr	r0, [r7, #0]
 800243c:	f002 f80c 	bl	8004458 <USB_DevInit>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00d      	b.n	800246e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 f854 	bl	8005514 <USB_DevDisconnect>

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002476 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_PCD_Start+0x1c>
 800248e:	2302      	movs	r3, #2
 8002490:	e020      	b.n	80024d4 <HAL_PCD_Start+0x5e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d109      	bne.n	80024b6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d005      	beq.n	80024b6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f001 ff80 	bl	80043c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f003 f804 	bl	80054d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b08d      	sub	sp, #52	; 0x34
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 f8c2 	bl	800567c <USB_GetMode>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 839d 	bne.w	8002c3a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f003 f826 	bl	8005556 <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8393 	beq.w	8002c38 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 f81d 	bl	8005556 <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b02      	cmp	r3, #2
 8002524:	d107      	bne.n	8002536 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f002 0202 	and.w	r2, r2, #2
 8002534:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 f80b 	bl	8005556 <USB_ReadInterrupts>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b10      	cmp	r3, #16
 8002548:	d161      	bne.n	800260e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0210 	bic.w	r2, r2, #16
 8002558:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f003 020f 	and.w	r2, r3, #15
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	3304      	adds	r3, #4
 8002578:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	0c5b      	lsrs	r3, r3, #17
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	2b02      	cmp	r3, #2
 8002584:	d124      	bne.n	80025d0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d035      	beq.n	80025fe <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800259c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	6a38      	ldr	r0, [r7, #32]
 80025a6:	f002 fe71 	bl	800528c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b6:	441a      	add	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	699a      	ldr	r2, [r3, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c8:	441a      	add	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	619a      	str	r2, [r3, #24]
 80025ce:	e016      	b.n	80025fe <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	0c5b      	lsrs	r3, r3, #17
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	2b06      	cmp	r3, #6
 80025da:	d110      	bne.n	80025fe <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025e2:	2208      	movs	r2, #8
 80025e4:	4619      	mov	r1, r3
 80025e6:	6a38      	ldr	r0, [r7, #32]
 80025e8:	f002 fe50 	bl	800528c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	699a      	ldr	r2, [r3, #24]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f8:	441a      	add	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699a      	ldr	r2, [r3, #24]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0210 	orr.w	r2, r2, #16
 800260c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f002 ff9f 	bl	8005556 <USB_ReadInterrupts>
 8002618:	4603      	mov	r3, r0
 800261a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800261e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002622:	d16e      	bne.n	8002702 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f002 ffa5 	bl	800557c <USB_ReadDevAllOutEpInterrupt>
 8002632:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002634:	e062      	b.n	80026fc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d057      	beq.n	80026f0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f002 ffca 	bl	80055e4 <USB_ReadDevOutEPInterrupt>
 8002650:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002668:	461a      	mov	r2, r3
 800266a:	2301      	movs	r3, #1
 800266c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800266e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fdb1 	bl	80031d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00c      	beq.n	800269a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268c:	461a      	mov	r2, r3
 800268e:	2308      	movs	r3, #8
 8002690:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 feab 	bl	80033f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b0:	461a      	mov	r2, r3
 80026b2:	2310      	movs	r3, #16
 80026b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026cc:	461a      	mov	r2, r3
 80026ce:	2320      	movs	r3, #32
 80026d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d009      	beq.n	80026f0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e8:	461a      	mov	r2, r3
 80026ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	3301      	adds	r3, #1
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d199      	bne.n	8002636 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f002 ff25 	bl	8005556 <USB_ReadInterrupts>
 800270c:	4603      	mov	r3, r0
 800270e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002712:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002716:	f040 80c0 	bne.w	800289a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f002 ff46 	bl	80055b0 <USB_ReadDevAllInEpInterrupt>
 8002724:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800272a:	e0b2      	b.n	8002892 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80a7 	beq.w	8002886 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f002 ff6c 	bl	8005620 <USB_ReadDevInEPInterrupt>
 8002748:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d057      	beq.n	8002804 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	2201      	movs	r2, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	43db      	mvns	r3, r3
 800276e:	69f9      	ldr	r1, [r7, #28]
 8002770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002774:	4013      	ands	r3, r2
 8002776:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002784:	461a      	mov	r2, r3
 8002786:	2301      	movs	r3, #1
 8002788:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d132      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3348      	adds	r3, #72	; 0x48
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4403      	add	r3, r0
 80027b2:	3344      	adds	r3, #68	; 0x44
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4419      	add	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4403      	add	r3, r0
 80027c6:	3348      	adds	r3, #72	; 0x48
 80027c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d113      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x31c>
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3350      	adds	r3, #80	; 0x50
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d108      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027f0:	461a      	mov	r2, r3
 80027f2:	2101      	movs	r1, #1
 80027f4:	f002 ff74 	bl	80056e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f005 f8fd 	bl	80079fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281a:	461a      	mov	r2, r3
 800281c:	2308      	movs	r3, #8
 800281e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002836:	461a      	mov	r2, r3
 8002838:	2310      	movs	r3, #16
 800283a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	4413      	add	r3, r2
 800284e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002852:	461a      	mov	r2, r3
 8002854:	2340      	movs	r3, #64	; 0x40
 8002856:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286e:	461a      	mov	r2, r3
 8002870:	2302      	movs	r3, #2
 8002872:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800287e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fc1b 	bl	80030bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	3301      	adds	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	f47f af49 	bne.w	800272c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 fe59 	bl	8005556 <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028ae:	d122      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d108      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028d6:	2100      	movs	r1, #0
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fe27 	bl	800352c <HAL_PCDEx_LPM_Callback>
 80028de:	e002      	b.n	80028e6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f005 f903 	bl	8007aec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 fe2b 	bl	8005556 <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800290a:	d112      	bne.n	8002932 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d102      	bne.n	8002922 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f005 f8bf 	bl	8007aa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002930:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fe0d 	bl	8005556 <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002946:	f040 80c7 	bne.w	8002ad8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2110      	movs	r1, #16
 8002964:	4618      	mov	r0, r3
 8002966:	f001 fedb 	bl	8004720 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296a:	2300      	movs	r3, #0
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296e:	e056      	b.n	8002a1e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800297c:	461a      	mov	r2, r3
 800297e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002982:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002994:	0151      	lsls	r1, r2, #5
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	440a      	add	r2, r1
 800299a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800299e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029a2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b4:	0151      	lsls	r1, r2, #5
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	440a      	add	r2, r1
 80029ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d0:	461a      	mov	r2, r3
 80029d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e8:	0151      	lsls	r1, r2, #5
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	440a      	add	r2, r1
 80029ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a08:	0151      	lsls	r1, r2, #5
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	440a      	add	r2, r1
 8002a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a16:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d3a3      	bcc.n	8002970 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a36:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a3a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d016      	beq.n	8002a72 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a54:	f043 030b 	orr.w	r3, r3, #11
 8002a58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a6a:	f043 030b 	orr.w	r3, r3, #11
 8002a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a70:	e015      	b.n	8002a9e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a84:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a88:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a98:	f043 030b 	orr.w	r3, r3, #11
 8002a9c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ab0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f002 fe0c 	bl	80056e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f002 fd3a 	bl	8005556 <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aec:	d124      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 fdd0 	bl	8005698 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 fe70 	bl	80047e2 <USB_GetDevSpeed>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461a      	mov	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681c      	ldr	r4, [r3, #0]
 8002b0e:	f001 f965 	bl	8003ddc <HAL_RCC_GetHCLKFreq>
 8002b12:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f001 fbad 	bl	800427c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f004 ff93 	bl	8007a4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 fd0a 	bl	8005556 <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d10a      	bne.n	8002b62 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f004 ff70 	bl	8007a32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f002 0208 	and.w	r2, r2, #8
 8002b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fcf5 	bl	8005556 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b76:	d10f      	bne.n	8002b98 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f004 ffd2 	bl	8007b2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 fcda 	bl	8005556 <USB_ReadInterrupts>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bac:	d10f      	bne.n	8002bce <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f004 ffa5 	bl	8007b08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fcbf 	bl	8005556 <USB_ReadInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d10a      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f004 ffb3 	bl	8007b50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 fca9 	bl	8005556 <USB_ReadInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d115      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f004 ffa3 	bl	8007b6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	e000      	b.n	8002c3a <HAL_PCD_IRQHandler+0x75e>
      return;
 8002c38:	bf00      	nop
    }
  }
}
 8002c3a:	3734      	adds	r7, #52	; 0x34
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd90      	pop	{r4, r7, pc}

08002c40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_PCD_SetAddress+0x1a>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e013      	b.n	8002c82 <HAL_PCD_SetAddress+0x42>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fc07 	bl	8005486 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	4608      	mov	r0, r1
 8002c94:	4611      	mov	r1, r2
 8002c96:	461a      	mov	r2, r3
 8002c98:	4603      	mov	r3, r0
 8002c9a:	70fb      	strb	r3, [r7, #3]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	803b      	strh	r3, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da0f      	bge.n	8002cd0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 020f 	and.w	r2, r3, #15
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	3338      	adds	r3, #56	; 0x38
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	705a      	strb	r2, [r3, #1]
 8002cce:	e00f      	b.n	8002cf0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	f003 020f 	and.w	r2, r3, #15
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cfc:	883a      	ldrh	r2, [r7, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	78ba      	ldrb	r2, [r7, #2]
 8002d06:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d004      	beq.n	8002d1a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d1a:	78bb      	ldrb	r3, [r7, #2]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d102      	bne.n	8002d26 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_PCD_EP_Open+0xaa>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e00e      	b.n	8002d52 <HAL_PCD_EP_Open+0xc8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68f9      	ldr	r1, [r7, #12]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fd72 	bl	800482c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d50:	7afb      	ldrb	r3, [r7, #11]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da0f      	bge.n	8002d8e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	f003 020f 	and.w	r2, r3, #15
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	3338      	adds	r3, #56	; 0x38
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	705a      	strb	r2, [r3, #1]
 8002d8c:	e00f      	b.n	8002dae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	f003 020f 	and.w	r2, r3, #15
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_PCD_EP_Close+0x6e>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e00e      	b.n	8002de6 <HAL_PCD_EP_Close+0x8c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68f9      	ldr	r1, [r7, #12]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 fdb0 	bl	800493c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
 8002e00:	f003 020f 	and.w	r2, r3, #15
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	3304      	adds	r3, #4
 8002e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2200      	movs	r2, #0
 8002e28:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d102      	bne.n	8002e4a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e4a:	7afb      	ldrb	r3, [r7, #11]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	6979      	ldr	r1, [r7, #20]
 8002e62:	f002 f88b 	bl	8004f7c <USB_EP0StartXfer>
 8002e66:	e008      	b.n	8002e7a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	6979      	ldr	r1, [r7, #20]
 8002e76:	f001 fe3d 	bl	8004af4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ec4:	7afb      	ldrb	r3, [r7, #11]
 8002ec6:	f003 020f 	and.w	r2, r3, #15
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	3338      	adds	r3, #56	; 0x38
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3304      	adds	r3, #4
 8002eda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2200      	movs	r2, #0
 8002eec:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef4:	7afb      	ldrb	r3, [r7, #11]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d102      	bne.n	8002f0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	6979      	ldr	r1, [r7, #20]
 8002f26:	f002 f829 	bl	8004f7c <USB_EP0StartXfer>
 8002f2a:	e008      	b.n	8002f3e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	6979      	ldr	r1, [r7, #20]
 8002f3a:	f001 fddb 	bl	8004af4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	f003 020f 	and.w	r2, r3, #15
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d901      	bls.n	8002f66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e050      	b.n	8003008 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	da0f      	bge.n	8002f8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	f003 020f 	and.w	r2, r3, #15
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	3338      	adds	r3, #56	; 0x38
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	3304      	adds	r3, #4
 8002f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	705a      	strb	r2, [r3, #1]
 8002f8c:	e00d      	b.n	8002faa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_PCD_EP_SetStall+0x82>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e01e      	b.n	8003008 <HAL_PCD_EP_SetStall+0xc0>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 f980 	bl	80052de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	b2d9      	uxtb	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f002 fb71 	bl	80056e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	f003 020f 	and.w	r2, r3, #15
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	d901      	bls.n	800302e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e042      	b.n	80030b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800302e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003032:	2b00      	cmp	r3, #0
 8003034:	da0f      	bge.n	8003056 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	3338      	adds	r3, #56	; 0x38
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	3304      	adds	r3, #4
 800304c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	705a      	strb	r2, [r3, #1]
 8003054:	e00f      	b.n	8003076 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	b2da      	uxtb	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_PCD_EP_ClrStall+0x86>
 8003092:	2302      	movs	r3, #2
 8003094:	e00e      	b.n	80030b4 <HAL_PCD_EP_ClrStall+0xa4>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68f9      	ldr	r1, [r7, #12]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 f988 	bl	80053ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	3338      	adds	r3, #56	; 0x38
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4413      	add	r3, r2
 80030e0:	3304      	adds	r3, #4
 80030e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	699a      	ldr	r2, [r3, #24]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d901      	bls.n	80030f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e06c      	b.n	80031ce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	429a      	cmp	r2, r3
 8003108:	d902      	bls.n	8003110 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	3303      	adds	r3, #3
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003118:	e02b      	b.n	8003172 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	429a      	cmp	r2, r3
 800312e:	d902      	bls.n	8003136 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3303      	adds	r3, #3
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	68d9      	ldr	r1, [r3, #12]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800314e:	b2db      	uxtb	r3, r3
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	4603      	mov	r3, r0
 8003154:	6978      	ldr	r0, [r7, #20]
 8003156:	f002 f864 	bl	8005222 <USB_WritePacket>

    ep->xfer_buff  += len;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	441a      	add	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	441a      	add	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	b29b      	uxth	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	429a      	cmp	r2, r3
 8003186:	d809      	bhi.n	800319c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003190:	429a      	cmp	r2, r3
 8003192:	d203      	bcs.n	800319c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1be      	bne.n	800311a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d811      	bhi.n	80031cc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	2201      	movs	r2, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	6939      	ldr	r1, [r7, #16]
 80031c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031c8:	4013      	ands	r3, r2
 80031ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	333c      	adds	r3, #60	; 0x3c
 80031f0:	3304      	adds	r3, #4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b01      	cmp	r3, #1
 800320c:	f040 80a0 	bne.w	8003350 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d015      	beq.n	8003246 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a72      	ldr	r2, [pc, #456]	; (80033e8 <PCD_EP_OutXfrComplete_int+0x210>)
 800321e:	4293      	cmp	r3, r2
 8003220:	f240 80dd 	bls.w	80033de <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80d7 	beq.w	80033de <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323c:	461a      	mov	r2, r3
 800323e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003242:	6093      	str	r3, [r2, #8]
 8003244:	e0cb      	b.n	80033de <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4413      	add	r3, r2
 8003258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325c:	461a      	mov	r2, r3
 800325e:	2320      	movs	r3, #32
 8003260:	6093      	str	r3, [r2, #8]
 8003262:	e0bc      	b.n	80033de <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 80b7 	bne.w	80033de <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4a5d      	ldr	r2, [pc, #372]	; (80033e8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d90f      	bls.n	8003298 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	461a      	mov	r2, r3
 8003290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003294:	6093      	str	r3, [r2, #8]
 8003296:	e0a2      	b.n	80033de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032aa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	0159      	lsls	r1, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80032be:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4403      	add	r3, r0
 80032ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80032d2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032e6:	6819      	ldr	r1, [r3, #0]
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4403      	add	r3, r0
 80032f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4419      	add	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4403      	add	r3, r0
 800330c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003310:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d114      	bne.n	8003342 <PCD_EP_OutXfrComplete_int+0x16a>
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d108      	bne.n	8003342 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800333a:	461a      	mov	r2, r3
 800333c:	2101      	movs	r1, #1
 800333e:	f002 f9cf 	bl	80056e0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f004 fb3d 	bl	80079c8 <HAL_PCD_DataOutStageCallback>
 800334e:	e046      	b.n	80033de <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a26      	ldr	r2, [pc, #152]	; (80033ec <PCD_EP_OutXfrComplete_int+0x214>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d124      	bne.n	80033a2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336e:	461a      	mov	r2, r3
 8003370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003374:	6093      	str	r3, [r2, #8]
 8003376:	e032      	b.n	80033de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338e:	461a      	mov	r2, r3
 8003390:	2320      	movs	r3, #32
 8003392:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f004 fb14 	bl	80079c8 <HAL_PCD_DataOutStageCallback>
 80033a0:	e01d      	b.n	80033de <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d114      	bne.n	80033d2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d108      	bne.n	80033d2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033ca:	461a      	mov	r2, r3
 80033cc:	2100      	movs	r1, #0
 80033ce:	f002 f987 	bl	80056e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	4619      	mov	r1, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f004 faf5 	bl	80079c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	4f54300a 	.word	0x4f54300a
 80033ec:	4f54310a 	.word	0x4f54310a

080033f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	333c      	adds	r3, #60	; 0x3c
 8003408:	3304      	adds	r3, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a15      	ldr	r2, [pc, #84]	; (8003478 <PCD_EP_OutSetupPacket_int+0x88>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d90e      	bls.n	8003444 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342c:	2b00      	cmp	r3, #0
 800342e:	d009      	beq.n	8003444 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343c:	461a      	mov	r2, r3
 800343e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003442:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f004 faad 	bl	80079a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <PCD_EP_OutSetupPacket_int+0x88>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d90c      	bls.n	800346c <PCD_EP_OutSetupPacket_int+0x7c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d108      	bne.n	800346c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003464:	461a      	mov	r2, r3
 8003466:	2101      	movs	r1, #1
 8003468:	f002 f93a 	bl	80056e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	4f54300a 	.word	0x4f54300a

0800347c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
 8003488:	4613      	mov	r3, r2
 800348a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d107      	bne.n	80034aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800349a:	883b      	ldrh	r3, [r7, #0]
 800349c:	0419      	lsls	r1, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
 80034a8:	e028      	b.n	80034fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4413      	add	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e00d      	b.n	80034da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	3340      	adds	r3, #64	; 0x40
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	4413      	add	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	3301      	adds	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	3b01      	subs	r3, #1
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3ec      	bcc.n	80034be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034e4:	883b      	ldrh	r3, [r7, #0]
 80034e6:	0418      	lsls	r0, r3, #16
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	4302      	orrs	r2, r0
 80034f4:	3340      	adds	r3, #64	; 0x40
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e264      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d075      	beq.n	800364e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003562:	4ba3      	ldr	r3, [pc, #652]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b04      	cmp	r3, #4
 800356c:	d00c      	beq.n	8003588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356e:	4ba0      	ldr	r3, [pc, #640]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003576:	2b08      	cmp	r3, #8
 8003578:	d112      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357a:	4b9d      	ldr	r3, [pc, #628]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003586:	d10b      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	4b99      	ldr	r3, [pc, #612]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d05b      	beq.n	800364c <HAL_RCC_OscConfig+0x108>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d157      	bne.n	800364c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e23f      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x74>
 80035aa:	4b91      	ldr	r3, [pc, #580]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a90      	ldr	r2, [pc, #576]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e01d      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x98>
 80035c2:	4b8b      	ldr	r3, [pc, #556]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a8a      	ldr	r2, [pc, #552]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b88      	ldr	r3, [pc, #544]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a87      	ldr	r2, [pc, #540]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035dc:	4b84      	ldr	r3, [pc, #528]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a83      	ldr	r2, [pc, #524]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b81      	ldr	r3, [pc, #516]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a80      	ldr	r2, [pc, #512]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fe f868 	bl	80016d0 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003604:	f7fe f864 	bl	80016d0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e204      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b76      	ldr	r3, [pc, #472]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0xc0>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7fe f854 	bl	80016d0 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800362c:	f7fe f850 	bl	80016d0 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1f0      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	4b6c      	ldr	r3, [pc, #432]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0xe8>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d063      	beq.n	8003722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365a:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003666:	4b62      	ldr	r3, [pc, #392]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800366e:	2b08      	cmp	r3, #8
 8003670:	d11c      	bne.n	80036ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003672:	4b5f      	ldr	r3, [pc, #380]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d116      	bne.n	80036ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	4b5c      	ldr	r3, [pc, #368]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_RCC_OscConfig+0x152>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e1c4      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003696:	4b56      	ldr	r3, [pc, #344]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4952      	ldr	r1, [pc, #328]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	e03a      	b.n	8003722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b4:	4b4f      	ldr	r3, [pc, #316]	; (80037f4 <HAL_RCC_OscConfig+0x2b0>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fe f809 	bl	80016d0 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c2:	f7fe f805 	bl	80016d0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e1a5      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	4b46      	ldr	r3, [pc, #280]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4940      	ldr	r1, [pc, #256]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]
 80036f4:	e015      	b.n	8003722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f6:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <HAL_RCC_OscConfig+0x2b0>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fd ffe8 	bl	80016d0 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003704:	f7fd ffe4 	bl	80016d0 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e184      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003716:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d030      	beq.n	8003790 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003736:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <HAL_RCC_OscConfig+0x2b4>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fd ffc8 	bl	80016d0 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003744:	f7fd ffc4 	bl	80016d0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e164      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x200>
 8003762:	e015      	b.n	8003790 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCC_OscConfig+0x2b4>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376a:	f7fd ffb1 	bl	80016d0 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003772:	f7fd ffad 	bl	80016d0 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e14d      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003784:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80a0 	beq.w	80038de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10f      	bne.n	80037ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_OscConfig+0x2b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d121      	bne.n	800381e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037da:	4b08      	ldr	r3, [pc, #32]	; (80037fc <HAL_RCC_OscConfig+0x2b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a07      	ldr	r2, [pc, #28]	; (80037fc <HAL_RCC_OscConfig+0x2b8>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e6:	f7fd ff73 	bl	80016d0 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	e011      	b.n	8003812 <HAL_RCC_OscConfig+0x2ce>
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	42470000 	.word	0x42470000
 80037f8:	42470e80 	.word	0x42470e80
 80037fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003800:	f7fd ff66 	bl	80016d0 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e106      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b85      	ldr	r3, [pc, #532]	; (8003a28 <HAL_RCC_OscConfig+0x4e4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d106      	bne.n	8003834 <HAL_RCC_OscConfig+0x2f0>
 8003826:	4b81      	ldr	r3, [pc, #516]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a80      	ldr	r2, [pc, #512]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
 8003832:	e01c      	b.n	800386e <HAL_RCC_OscConfig+0x32a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b05      	cmp	r3, #5
 800383a:	d10c      	bne.n	8003856 <HAL_RCC_OscConfig+0x312>
 800383c:	4b7b      	ldr	r3, [pc, #492]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	4a7a      	ldr	r2, [pc, #488]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 8003842:	f043 0304 	orr.w	r3, r3, #4
 8003846:	6713      	str	r3, [r2, #112]	; 0x70
 8003848:	4b78      	ldr	r3, [pc, #480]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	4a77      	ldr	r2, [pc, #476]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	6713      	str	r3, [r2, #112]	; 0x70
 8003854:	e00b      	b.n	800386e <HAL_RCC_OscConfig+0x32a>
 8003856:	4b75      	ldr	r3, [pc, #468]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a74      	ldr	r2, [pc, #464]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
 8003862:	4b72      	ldr	r3, [pc, #456]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	4a71      	ldr	r2, [pc, #452]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 8003868:	f023 0304 	bic.w	r3, r3, #4
 800386c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d015      	beq.n	80038a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fd ff2b 	bl	80016d0 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fd ff27 	bl	80016d0 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	; 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e0c5      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ee      	beq.n	800387e <HAL_RCC_OscConfig+0x33a>
 80038a0:	e014      	b.n	80038cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fd ff15 	bl	80016d0 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a8:	e00a      	b.n	80038c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fd ff11 	bl	80016d0 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e0af      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c0:	4b5a      	ldr	r3, [pc, #360]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ee      	bne.n	80038aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d2:	4b56      	ldr	r3, [pc, #344]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	4a55      	ldr	r2, [pc, #340]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 80038d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 809b 	beq.w	8003a1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d05c      	beq.n	80039ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d141      	bne.n	8003980 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fc:	4b4c      	ldr	r3, [pc, #304]	; (8003a30 <HAL_RCC_OscConfig+0x4ec>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7fd fee5 	bl	80016d0 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390a:	f7fd fee1 	bl	80016d0 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e081      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391c:	4b43      	ldr	r3, [pc, #268]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f0      	bne.n	800390a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	019b      	lsls	r3, r3, #6
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	3b01      	subs	r3, #1
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	4937      	ldr	r1, [pc, #220]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003952:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <HAL_RCC_OscConfig+0x4ec>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fd feba 	bl	80016d0 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd feb6 	bl	80016d0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e056      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x41c>
 800397e:	e04e      	b.n	8003a1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003980:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <HAL_RCC_OscConfig+0x4ec>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003986:	f7fd fea3 	bl	80016d0 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398e:	f7fd fe9f 	bl	80016d0 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e03f      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a0:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f0      	bne.n	800398e <HAL_RCC_OscConfig+0x44a>
 80039ac:	e037      	b.n	8003a1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e032      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ba:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <HAL_RCC_OscConfig+0x4e8>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d028      	beq.n	8003a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d121      	bne.n	8003a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d11a      	bne.n	8003a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039ea:	4013      	ands	r3, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d111      	bne.n	8003a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	3b01      	subs	r3, #1
 8003a04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d107      	bne.n	8003a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	42470060 	.word	0x42470060

08003a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0cc      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b68      	ldr	r3, [pc, #416]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d90c      	bls.n	8003a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b65      	ldr	r3, [pc, #404]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b63      	ldr	r3, [pc, #396]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0b8      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a88:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a58      	ldr	r2, [pc, #352]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a52      	ldr	r2, [pc, #328]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aac:	4b50      	ldr	r3, [pc, #320]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	494d      	ldr	r1, [pc, #308]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d044      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d119      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af2:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e06f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e067      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4934      	ldr	r1, [pc, #208]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b24:	f7fd fdd4 	bl	80016d0 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fd fdd0 	bl	80016d0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e04f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b25      	ldr	r3, [pc, #148]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d20c      	bcs.n	8003b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b22      	ldr	r3, [pc, #136]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e032      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4916      	ldr	r1, [pc, #88]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	490e      	ldr	r1, [pc, #56]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bba:	f000 f82d 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	490a      	ldr	r1, [pc, #40]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	5ccb      	ldrb	r3, [r1, r3]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd fd34 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40023c00 	.word	0x40023c00
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	080085e4 	.word	0x080085e4
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	20000004 	.word	0x20000004

08003c00 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <HAL_RCC_EnableCSS+0x14>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	4247004c 	.word	0x4247004c

08003c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c30:	4b67      	ldr	r3, [pc, #412]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d00d      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x40>
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	f200 80bd 	bhi.w	8003dbc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x34>
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c4a:	e0b7      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b61      	ldr	r3, [pc, #388]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c4e:	60bb      	str	r3, [r7, #8]
       break;
 8003c50:	e0b7      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c52:	4b61      	ldr	r3, [pc, #388]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c54:	60bb      	str	r3, [r7, #8]
      break;
 8003c56:	e0b4      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c58:	4b5d      	ldr	r3, [pc, #372]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c62:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d04d      	beq.n	8003d0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6e:	4b58      	ldr	r3, [pc, #352]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	461a      	mov	r2, r3
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	ea02 0800 	and.w	r8, r2, r0
 8003c86:	ea03 0901 	and.w	r9, r3, r1
 8003c8a:	4640      	mov	r0, r8
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	014b      	lsls	r3, r1, #5
 8003c98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c9c:	0142      	lsls	r2, r0, #5
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	ebb0 0008 	subs.w	r0, r0, r8
 8003ca6:	eb61 0109 	sbc.w	r1, r1, r9
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	018b      	lsls	r3, r1, #6
 8003cb4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cb8:	0182      	lsls	r2, r0, #6
 8003cba:	1a12      	subs	r2, r2, r0
 8003cbc:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc0:	f04f 0000 	mov.w	r0, #0
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	00d9      	lsls	r1, r3, #3
 8003cca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cce:	00d0      	lsls	r0, r2, #3
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	eb12 0208 	adds.w	r2, r2, r8
 8003cd8:	eb43 0309 	adc.w	r3, r3, r9
 8003cdc:	f04f 0000 	mov.w	r0, #0
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	0259      	lsls	r1, r3, #9
 8003ce6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003cea:	0250      	lsls	r0, r2, #9
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	f7fc fee2 	bl	8000ac4 <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4613      	mov	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e04a      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0a:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	099b      	lsrs	r3, r3, #6
 8003d10:	461a      	mov	r2, r3
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	ea02 0400 	and.w	r4, r2, r0
 8003d22:	ea03 0501 	and.w	r5, r3, r1
 8003d26:	4620      	mov	r0, r4
 8003d28:	4629      	mov	r1, r5
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	014b      	lsls	r3, r1, #5
 8003d34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d38:	0142      	lsls	r2, r0, #5
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	1b00      	subs	r0, r0, r4
 8003d40:	eb61 0105 	sbc.w	r1, r1, r5
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	018b      	lsls	r3, r1, #6
 8003d4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d52:	0182      	lsls	r2, r0, #6
 8003d54:	1a12      	subs	r2, r2, r0
 8003d56:	eb63 0301 	sbc.w	r3, r3, r1
 8003d5a:	f04f 0000 	mov.w	r0, #0
 8003d5e:	f04f 0100 	mov.w	r1, #0
 8003d62:	00d9      	lsls	r1, r3, #3
 8003d64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d68:	00d0      	lsls	r0, r2, #3
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	1912      	adds	r2, r2, r4
 8003d70:	eb45 0303 	adc.w	r3, r5, r3
 8003d74:	f04f 0000 	mov.w	r0, #0
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	0299      	lsls	r1, r3, #10
 8003d7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d82:	0290      	lsls	r0, r2, #10
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	f7fc fe96 	bl	8000ac4 <__aeabi_uldivmod>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	3301      	adds	r3, #1
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	60bb      	str	r3, [r7, #8]
      break;
 8003dba:	e002      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dbe:	60bb      	str	r3, [r7, #8]
      break;
 8003dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	00f42400 	.word	0x00f42400
 8003dd8:	007a1200 	.word	0x007a1200

08003ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de0:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000000 	.word	0x20000000

08003df4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e00:	2b80      	cmp	r3, #128	; 0x80
 8003e02:	d104      	bne.n	8003e0e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003e04:	f000 f80a 	bl	8003e1c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003e08:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003e0a:	2280      	movs	r2, #128	; 0x80
 8003e0c:	701a      	strb	r2, [r3, #0]
  }
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	4002380e 	.word	0x4002380e

08003e1c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d035      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e54:	4b62      	ldr	r3, [pc, #392]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e5a:	f7fd fc39 	bl	80016d0 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e62:	f7fd fc35 	bl	80016d0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e0b0      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e74:	4b5b      	ldr	r3, [pc, #364]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	019a      	lsls	r2, r3, #6
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	071b      	lsls	r3, r3, #28
 8003e8c:	4955      	ldr	r1, [pc, #340]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e94:	4b52      	ldr	r3, [pc, #328]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e9a:	f7fd fc19 	bl	80016d0 <HAL_GetTick>
 8003e9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ea2:	f7fd fc15 	bl	80016d0 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e090      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eb4:	4b4b      	ldr	r3, [pc, #300]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8083 	beq.w	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	4b44      	ldr	r3, [pc, #272]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	4a43      	ldr	r2, [pc, #268]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003edc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ede:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003eea:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3e      	ldr	r2, [pc, #248]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ef6:	f7fd fbeb 	bl	80016d0 <HAL_GetTick>
 8003efa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003efc:	e008      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fd fbe7 	bl	80016d0 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e062      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f10:	4b35      	ldr	r3, [pc, #212]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f1c:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02f      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d028      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f44:	4b29      	ldr	r3, [pc, #164]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f4a:	4b28      	ldr	r3, [pc, #160]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f50:	4a24      	ldr	r2, [pc, #144]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f56:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d114      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fd fbb5 	bl	80016d0 <HAL_GetTick>
 8003f66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	e00a      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fd fbb1 	bl	80016d0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e02a      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ee      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f98:	d10d      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fae:	490d      	ldr	r1, [pc, #52]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	608b      	str	r3, [r1, #8]
 8003fb4:	e005      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fbc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fc0:	6093      	str	r3, [r2, #8]
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fce:	4905      	ldr	r1, [pc, #20]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	42470068 	.word	0x42470068
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	42470e40 	.word	0x42470e40

08003ff0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e083      	b.n	800410a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7f5b      	ldrb	r3, [r3, #29]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d105      	bne.n	8004018 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fd fa32 	bl	800147c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	22ca      	movs	r2, #202	; 0xca
 8004024:	625a      	str	r2, [r3, #36]	; 0x24
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2253      	movs	r2, #83	; 0x53
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f897 	bl	8004162 <RTC_EnterInitMode>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	22ff      	movs	r2, #255	; 0xff
 8004040:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2204      	movs	r2, #4
 8004046:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e05e      	b.n	800410a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800405a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800405e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68d2      	ldr	r2, [r2, #12]
 8004086:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6919      	ldr	r1, [r3, #16]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	041a      	lsls	r2, r3, #16
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040aa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10e      	bne.n	80040d8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f829 	bl	8004112 <HAL_RTC_WaitForSynchro>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2204      	movs	r2, #4
 80040d2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e018      	b.n	800410a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	22ff      	movs	r2, #255	; 0xff
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800412c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800412e:	f7fd facf 	bl	80016d0 <HAL_GetTick>
 8004132:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004134:	e009      	b.n	800414a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004136:	f7fd facb 	bl	80016d0 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004144:	d901      	bls.n	800414a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e007      	b.n	800415a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ee      	beq.n	8004136 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d119      	bne.n	80041b0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f04f 32ff 	mov.w	r2, #4294967295
 8004184:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004186:	f7fd faa3 	bl	80016d0 <HAL_GetTick>
 800418a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800418c:	e009      	b.n	80041a2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800418e:	f7fd fa9f 	bl	80016d0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800419c:	d901      	bls.n	80041a2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e007      	b.n	80041b2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0ee      	beq.n	800418e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041ba:	b084      	sub	sp, #16
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	f107 001c 	add.w	r0, r7, #28
 80041c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d122      	bne.n	8004218 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d105      	bne.n	800420c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f001 fac5 	bl	800579c <USB_CoreReset>
 8004212:	4603      	mov	r3, r0
 8004214:	73fb      	strb	r3, [r7, #15]
 8004216:	e01a      	b.n	800424e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f001 fab9 	bl	800579c <USB_CoreReset>
 800422a:	4603      	mov	r3, r0
 800422c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800422e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
 8004240:	e005      	b.n	800424e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10b      	bne.n	800426c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f043 0206 	orr.w	r2, r3, #6
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004278:	b004      	add	sp, #16
 800427a:	4770      	bx	lr

0800427c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d165      	bne.n	800435c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4a41      	ldr	r2, [pc, #260]	; (8004398 <USB_SetTurnaroundTime+0x11c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d906      	bls.n	80042a6 <USB_SetTurnaroundTime+0x2a>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a40      	ldr	r2, [pc, #256]	; (800439c <USB_SetTurnaroundTime+0x120>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d202      	bcs.n	80042a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042a0:	230f      	movs	r3, #15
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e062      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a3c      	ldr	r2, [pc, #240]	; (800439c <USB_SetTurnaroundTime+0x120>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d306      	bcc.n	80042bc <USB_SetTurnaroundTime+0x40>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a3b      	ldr	r2, [pc, #236]	; (80043a0 <USB_SetTurnaroundTime+0x124>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d202      	bcs.n	80042bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042b6:	230e      	movs	r3, #14
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e057      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <USB_SetTurnaroundTime+0x124>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d306      	bcc.n	80042d2 <USB_SetTurnaroundTime+0x56>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a37      	ldr	r2, [pc, #220]	; (80043a4 <USB_SetTurnaroundTime+0x128>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d202      	bcs.n	80042d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042cc:	230d      	movs	r3, #13
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e04c      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4a33      	ldr	r2, [pc, #204]	; (80043a4 <USB_SetTurnaroundTime+0x128>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d306      	bcc.n	80042e8 <USB_SetTurnaroundTime+0x6c>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a32      	ldr	r2, [pc, #200]	; (80043a8 <USB_SetTurnaroundTime+0x12c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d802      	bhi.n	80042e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042e2:	230c      	movs	r3, #12
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e041      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4a2f      	ldr	r2, [pc, #188]	; (80043a8 <USB_SetTurnaroundTime+0x12c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d906      	bls.n	80042fe <USB_SetTurnaroundTime+0x82>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a2e      	ldr	r2, [pc, #184]	; (80043ac <USB_SetTurnaroundTime+0x130>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d802      	bhi.n	80042fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042f8:	230b      	movs	r3, #11
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e036      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4a2a      	ldr	r2, [pc, #168]	; (80043ac <USB_SetTurnaroundTime+0x130>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d906      	bls.n	8004314 <USB_SetTurnaroundTime+0x98>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <USB_SetTurnaroundTime+0x134>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d802      	bhi.n	8004314 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800430e:	230a      	movs	r3, #10
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e02b      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <USB_SetTurnaroundTime+0x134>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d906      	bls.n	800432a <USB_SetTurnaroundTime+0xae>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a25      	ldr	r2, [pc, #148]	; (80043b4 <USB_SetTurnaroundTime+0x138>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d202      	bcs.n	800432a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004324:	2309      	movs	r3, #9
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	e020      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <USB_SetTurnaroundTime+0x138>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d306      	bcc.n	8004340 <USB_SetTurnaroundTime+0xc4>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <USB_SetTurnaroundTime+0x13c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d802      	bhi.n	8004340 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800433a:	2308      	movs	r3, #8
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e015      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4a1d      	ldr	r2, [pc, #116]	; (80043b8 <USB_SetTurnaroundTime+0x13c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d906      	bls.n	8004356 <USB_SetTurnaroundTime+0xda>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <USB_SetTurnaroundTime+0x140>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d202      	bcs.n	8004356 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004350:	2307      	movs	r3, #7
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e00a      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004356:	2306      	movs	r3, #6
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e007      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004362:	2309      	movs	r3, #9
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e001      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004368:	2309      	movs	r3, #9
 800436a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	029b      	lsls	r3, r3, #10
 8004380:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004384:	431a      	orrs	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	00d8acbf 	.word	0x00d8acbf
 800439c:	00e4e1c0 	.word	0x00e4e1c0
 80043a0:	00f42400 	.word	0x00f42400
 80043a4:	01067380 	.word	0x01067380
 80043a8:	011a499f 	.word	0x011a499f
 80043ac:	01312cff 	.word	0x01312cff
 80043b0:	014ca43f 	.word	0x014ca43f
 80043b4:	016e3600 	.word	0x016e3600
 80043b8:	01a6ab1f 	.word	0x01a6ab1f
 80043bc:	01e84800 	.word	0x01e84800

080043c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f043 0201 	orr.w	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f023 0201 	bic.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d106      	bne.n	8004430 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	e00b      	b.n	8004448 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	e001      	b.n	8004448 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e003      	b.n	8004450 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004448:	2032      	movs	r0, #50	; 0x32
 800444a:	f7fd f94d 	bl	80016e8 <HAL_Delay>

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004458:	b084      	sub	sp, #16
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	e009      	b.n	800448c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	3340      	adds	r3, #64	; 0x40
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	2200      	movs	r2, #0
 8004484:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	3301      	adds	r3, #1
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b0e      	cmp	r3, #14
 8004490:	d9f2      	bls.n	8004478 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d11c      	bne.n	80044d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044a6:	f043 0302 	orr.w	r3, r3, #2
 80044aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
 80044d0:	e00b      	b.n	80044ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044f0:	461a      	mov	r2, r3
 80044f2:	2300      	movs	r3, #0
 80044f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fc:	4619      	mov	r1, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004504:	461a      	mov	r2, r3
 8004506:	680b      	ldr	r3, [r1, #0]
 8004508:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10c      	bne.n	800452a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004516:	2100      	movs	r1, #0
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f949 	bl	80047b0 <USB_SetDevSpeed>
 800451e:	e008      	b.n	8004532 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004520:	2101      	movs	r1, #1
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f944 	bl	80047b0 <USB_SetDevSpeed>
 8004528:	e003      	b.n	8004532 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800452a:	2103      	movs	r1, #3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f93f 	bl	80047b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004532:	2110      	movs	r1, #16
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f8f3 	bl	8004720 <USB_FlushTxFifo>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f911 	bl	800476c <USB_FlushRxFifo>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455a:	461a      	mov	r2, r3
 800455c:	2300      	movs	r3, #0
 800455e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	461a      	mov	r2, r3
 8004568:	2300      	movs	r3, #0
 800456a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	461a      	mov	r2, r3
 8004574:	2300      	movs	r3, #0
 8004576:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	e043      	b.n	8004606 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004594:	d118      	bne.n	80045c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	461a      	mov	r2, r3
 80045aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	e013      	b.n	80045da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	461a      	mov	r2, r3
 80045c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e008      	b.n	80045da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	2300      	movs	r3, #0
 80045d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	461a      	mov	r2, r3
 80045e8:	2300      	movs	r3, #0
 80045ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	461a      	mov	r2, r3
 80045fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	3301      	adds	r3, #1
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	429a      	cmp	r2, r3
 800460c:	d3b7      	bcc.n	800457e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	e043      	b.n	800469c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800462a:	d118      	bne.n	800465e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	461a      	mov	r2, r3
 8004640:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e013      	b.n	8004670 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004654:	461a      	mov	r2, r3
 8004656:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	e008      	b.n	8004670 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	2300      	movs	r3, #0
 800466e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	461a      	mov	r2, r3
 800467e:	2300      	movs	r3, #0
 8004680:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468e:	461a      	mov	r2, r3
 8004690:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004694:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3301      	adds	r3, #1
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d3b7      	bcc.n	8004614 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f043 0210 	orr.w	r2, r3, #16
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699a      	ldr	r2, [r3, #24]
 80046dc:	4b0f      	ldr	r3, [pc, #60]	; (800471c <USB_DevInit+0x2c4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f043 0208 	orr.w	r2, r3, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d107      	bne.n	800470c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004704:	f043 0304 	orr.w	r3, r3, #4
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800470c:	7dfb      	ldrb	r3, [r7, #23]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004718:	b004      	add	sp, #16
 800471a:	4770      	bx	lr
 800471c:	803c3800 	.word	0x803c3800

08004720 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	019b      	lsls	r3, r3, #6
 8004732:	f043 0220 	orr.w	r2, r3, #32
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3301      	adds	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a09      	ldr	r2, [pc, #36]	; (8004768 <USB_FlushTxFifo+0x48>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e006      	b.n	800475a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b20      	cmp	r3, #32
 8004756:	d0f0      	beq.n	800473a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	00030d40 	.word	0x00030d40

0800476c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2210      	movs	r2, #16
 800477c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3301      	adds	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4a09      	ldr	r2, [pc, #36]	; (80047ac <USB_FlushRxFifo+0x40>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e006      	b.n	800479e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b10      	cmp	r3, #16
 800479a:	d0f0      	beq.n	800477e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	00030d40 	.word	0x00030d40

080047b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	68f9      	ldr	r1, [r7, #12]
 80047cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0306 	and.w	r3, r3, #6
 80047fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004802:	2300      	movs	r3, #0
 8004804:	75fb      	strb	r3, [r7, #23]
 8004806:	e00a      	b.n	800481e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d002      	beq.n	8004814 <USB_GetDevSpeed+0x32>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b06      	cmp	r3, #6
 8004812:	d102      	bne.n	800481a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004814:	2302      	movs	r3, #2
 8004816:	75fb      	strb	r3, [r7, #23]
 8004818:	e001      	b.n	800481e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800481a:	230f      	movs	r3, #15
 800481c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800481e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004820:	4618      	mov	r0, r3
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d13a      	bne.n	80048be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	68f9      	ldr	r1, [r7, #12]
 8004862:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004866:	4313      	orrs	r3, r2
 8004868:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d155      	bne.n	800492c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	78db      	ldrb	r3, [r3, #3]
 800489a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800489c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	059b      	lsls	r3, r3, #22
 80048a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048a4:	4313      	orrs	r3, r2
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	e036      	b.n	800492c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	2101      	movs	r1, #1
 80048d0:	fa01 f303 	lsl.w	r3, r1, r3
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048dc:	4313      	orrs	r3, r2
 80048de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d11a      	bne.n	800492c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	78db      	ldrb	r3, [r3, #3]
 8004910:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004912:	430b      	orrs	r3, r1
 8004914:	4313      	orrs	r3, r2
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d161      	bne.n	8004a1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800496a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800496e:	d11f      	bne.n	80049b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	0151      	lsls	r1, r2, #5
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	440a      	add	r2, r1
 8004986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800498e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	2101      	movs	r1, #1
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d0:	4013      	ands	r3, r2
 80049d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	2101      	movs	r1, #1
 80049e6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f4:	4013      	ands	r3, r2
 80049f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	0159      	lsls	r1, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	440b      	add	r3, r1
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a12:	4619      	mov	r1, r3
 8004a14:	4b35      	ldr	r3, [pc, #212]	; (8004aec <USB_DeactivateEndpoint+0x1b0>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
 8004a1a:	e060      	b.n	8004ade <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a32:	d11f      	bne.n	8004a74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	2101      	movs	r1, #1
 8004a86:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a94:	4013      	ands	r3, r2
 8004a96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	0159      	lsls	r1, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <USB_DeactivateEndpoint+0x1b4>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	ec337800 	.word	0xec337800
 8004af0:	eff37800 	.word	0xeff37800

08004af4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	4613      	mov	r3, r2
 8004b00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	f040 815c 	bne.w	8004dce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d132      	bne.n	8004b84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	0151      	lsls	r1, r2, #5
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	440a      	add	r2, r1
 8004b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	0151      	lsls	r1, r2, #5
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	440a      	add	r2, r1
 8004b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7c:	0cdb      	lsrs	r3, r3, #19
 8004b7e:	04db      	lsls	r3, r3, #19
 8004b80:	6113      	str	r3, [r2, #16]
 8004b82:	e074      	b.n	8004c6e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	0151      	lsls	r1, r2, #5
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	440a      	add	r2, r1
 8004b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9e:	0cdb      	lsrs	r3, r3, #19
 8004ba0:	04db      	lsls	r3, r3, #19
 8004ba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6959      	ldr	r1, [r3, #20]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	440b      	add	r3, r1
 8004be0:	1e59      	subs	r1, r3, #1
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bea:	04d9      	lsls	r1, r3, #19
 8004bec:	4b9d      	ldr	r3, [pc, #628]	; (8004e64 <USB_EPStartXfer+0x370>)
 8004bee:	400b      	ands	r3, r1
 8004bf0:	69b9      	ldr	r1, [r7, #24]
 8004bf2:	0148      	lsls	r0, r1, #5
 8004bf4:	69f9      	ldr	r1, [r7, #28]
 8004bf6:	4401      	add	r1, r0
 8004bf8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c16:	69b9      	ldr	r1, [r7, #24]
 8004c18:	0148      	lsls	r0, r1, #5
 8004c1a:	69f9      	ldr	r1, [r7, #28]
 8004c1c:	4401      	add	r1, r0
 8004c1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c22:	4313      	orrs	r3, r2
 8004c24:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	78db      	ldrb	r3, [r3, #3]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d11f      	bne.n	8004c6e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	0151      	lsls	r1, r2, #5
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	440a      	add	r2, r1
 8004c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c48:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c4c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	0151      	lsls	r1, r2, #5
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	440a      	add	r2, r1
 8004c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c6c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d14b      	bne.n	8004d0c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	78db      	ldrb	r3, [r3, #3]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d128      	bne.n	8004cea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d110      	bne.n	8004cca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	e00f      	b.n	8004cea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e12f      	b.n	8004f6c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	78db      	ldrb	r3, [r3, #3]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d015      	beq.n	8004d60 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8117 	beq.w	8004f6c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	2101      	movs	r1, #1
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	69f9      	ldr	r1, [r7, #28]
 8004d56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	634b      	str	r3, [r1, #52]	; 0x34
 8004d5e:	e105      	b.n	8004f6c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d110      	bne.n	8004d92 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e00f      	b.n	8004db2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	68d9      	ldr	r1, [r3, #12]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	b298      	uxth	r0, r3
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fa2b 	bl	8005222 <USB_WritePacket>
 8004dcc:	e0ce      	b.n	8004f6c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de8:	0cdb      	lsrs	r3, r3, #19
 8004dea:	04db      	lsls	r3, r3, #19
 8004dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d126      	bne.n	8004e68 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	0148      	lsls	r0, r1, #5
 8004e34:	69f9      	ldr	r1, [r7, #28]
 8004e36:	4401      	add	r1, r0
 8004e38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e5e:	6113      	str	r3, [r2, #16]
 8004e60:	e036      	b.n	8004ed0 <USB_EPStartXfer+0x3dc>
 8004e62:	bf00      	nop
 8004e64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4413      	add	r3, r2
 8004e72:	1e5a      	subs	r2, r3, #1
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	8afb      	ldrh	r3, [r7, #22]
 8004e8e:	04d9      	lsls	r1, r3, #19
 8004e90:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <USB_EPStartXfer+0x484>)
 8004e92:	400b      	ands	r3, r1
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	0148      	lsls	r0, r1, #5
 8004e98:	69f9      	ldr	r1, [r7, #28]
 8004e9a:	4401      	add	r1, r0
 8004e9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	8af9      	ldrh	r1, [r7, #22]
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec0:	69b9      	ldr	r1, [r7, #24]
 8004ec2:	0148      	lsls	r0, r1, #5
 8004ec4:	69f9      	ldr	r1, [r7, #28]
 8004ec6:	4401      	add	r1, r0
 8004ec8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d10d      	bne.n	8004ef2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	68d9      	ldr	r1, [r3, #12]
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	460a      	mov	r2, r1
 8004ef0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	78db      	ldrb	r3, [r3, #3]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d128      	bne.n	8004f4c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d110      	bne.n	8004f2c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e00f      	b.n	8004f4c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	0151      	lsls	r1, r2, #5
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	440a      	add	r2, r1
 8004f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	1ff80000 	.word	0x1ff80000

08004f7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	4613      	mov	r3, r2
 8004f88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	785b      	ldrb	r3, [r3, #1]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	f040 80cd 	bne.w	8005138 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d132      	bne.n	800500c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	0151      	lsls	r1, r2, #5
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	440a      	add	r2, r1
 8004fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fe8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005004:	0cdb      	lsrs	r3, r3, #19
 8005006:	04db      	lsls	r3, r3, #19
 8005008:	6113      	str	r3, [r2, #16]
 800500a:	e04e      	b.n	80050aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	0151      	lsls	r1, r2, #5
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	440a      	add	r2, r1
 8005022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005026:	0cdb      	lsrs	r3, r3, #19
 8005028:	04db      	lsls	r3, r3, #19
 800502a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	440a      	add	r2, r1
 8005042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005046:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800504a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800504e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	429a      	cmp	r2, r3
 800505a:	d903      	bls.n	8005064 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005082:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800509a:	6939      	ldr	r1, [r7, #16]
 800509c:	0148      	lsls	r0, r1, #5
 800509e:	6979      	ldr	r1, [r7, #20]
 80050a0:	4401      	add	r1, r0
 80050a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050a6:	4313      	orrs	r3, r2
 80050a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d11e      	bne.n	80050ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d009      	beq.n	80050cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	461a      	mov	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	0151      	lsls	r1, r2, #5
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	440a      	add	r2, r1
 80050e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	e092      	b.n	8005214 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	440a      	add	r2, r1
 8005104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005108:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800510c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d07e      	beq.n	8005214 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	2101      	movs	r1, #1
 8005128:	fa01 f303 	lsl.w	r3, r1, r3
 800512c:	6979      	ldr	r1, [r7, #20]
 800512e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005132:	4313      	orrs	r3, r2
 8005134:	634b      	str	r3, [r1, #52]	; 0x34
 8005136:	e06d      	b.n	8005214 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005152:	0cdb      	lsrs	r3, r3, #19
 8005154:	04db      	lsls	r3, r3, #19
 8005156:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	0151      	lsls	r1, r2, #5
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	440a      	add	r2, r1
 800516e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005172:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005176:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800517a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c2:	6939      	ldr	r1, [r7, #16]
 80051c4:	0148      	lsls	r0, r1, #5
 80051c6:	6979      	ldr	r1, [r7, #20]
 80051c8:	4401      	add	r1, r0
 80051ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051ce:	4313      	orrs	r3, r2
 80051d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10d      	bne.n	80051f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	68d9      	ldr	r1, [r3, #12]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	460a      	mov	r2, r1
 80051f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005212:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005222:	b480      	push	{r7}
 8005224:	b089      	sub	sp, #36	; 0x24
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	4611      	mov	r1, r2
 800522e:	461a      	mov	r2, r3
 8005230:	460b      	mov	r3, r1
 8005232:	71fb      	strb	r3, [r7, #7]
 8005234:	4613      	mov	r3, r2
 8005236:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005240:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11a      	bne.n	800527e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005248:	88bb      	ldrh	r3, [r7, #4]
 800524a:	3303      	adds	r3, #3
 800524c:	089b      	lsrs	r3, r3, #2
 800524e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005250:	2300      	movs	r3, #0
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	e00f      	b.n	8005276 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	031a      	lsls	r2, r3, #12
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	4413      	add	r3, r2
 800525e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005262:	461a      	mov	r2, r3
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6013      	str	r3, [r2, #0]
      pSrc++;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	3304      	adds	r3, #4
 800526e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	3301      	adds	r3, #1
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	429a      	cmp	r2, r3
 800527c:	d3eb      	bcc.n	8005256 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3724      	adds	r7, #36	; 0x24
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	; 0x24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80052a2:	88fb      	ldrh	r3, [r7, #6]
 80052a4:	3303      	adds	r3, #3
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80052aa:	2300      	movs	r3, #0
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	e00b      	b.n	80052c8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	3304      	adds	r3, #4
 80052c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	3301      	adds	r3, #1
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d3ef      	bcc.n	80052b0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80052d0:	69fb      	ldr	r3, [r7, #28]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3724      	adds	r7, #36	; 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d12c      	bne.n	8005354 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	db12      	blt.n	8005332 <USB_EPSetStall+0x54>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00f      	beq.n	8005332 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	0151      	lsls	r1, r2, #5
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	440a      	add	r2, r1
 8005328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005330:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	e02b      	b.n	80053ac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	db12      	blt.n	800538c <USB_EPSetStall+0xae>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00f      	beq.n	800538c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800538a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	0151      	lsls	r1, r2, #5
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	440a      	add	r2, r1
 80053a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d128      	bne.n	8005428 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	78db      	ldrb	r3, [r3, #3]
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d003      	beq.n	8005406 <USB_EPClearStall+0x4c>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	78db      	ldrb	r3, [r3, #3]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d138      	bne.n	8005478 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	440a      	add	r2, r1
 800541c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e027      	b.n	8005478 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005446:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	78db      	ldrb	r3, [r3, #3]
 800544c:	2b03      	cmp	r3, #3
 800544e:	d003      	beq.n	8005458 <USB_EPClearStall+0x9e>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	78db      	ldrb	r3, [r3, #3]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d10f      	bne.n	8005478 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005476:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054a8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c0:	4313      	orrs	r3, r2
 80054c2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054ec:	f023 0303 	bic.w	r3, r3, #3
 80054f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005500:	f023 0302 	bic.w	r3, r3, #2
 8005504:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005542:	f043 0302 	orr.w	r3, r3, #2
 8005546:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4013      	ands	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800556e:	68fb      	ldr	r3, [r7, #12]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	4013      	ands	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	0c1b      	lsrs	r3, r3, #16
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	4013      	ands	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	b29b      	uxth	r3, r3
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	4013      	ands	r3, r2
 8005610:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005612:	68bb      	ldr	r3, [r7, #8]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005642:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
 8005650:	01db      	lsls	r3, r3, #7
 8005652:	b2db      	uxtb	r3, r3
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4013      	ands	r3, r2
 800566c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800566e:	68bb      	ldr	r3, [r7, #8]
}
 8005670:	4618      	mov	r0, r3
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f003 0301 	and.w	r3, r3, #1
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80056b6:	f023 0307 	bic.w	r3, r3, #7
 80056ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	460b      	mov	r3, r1
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	333c      	adds	r3, #60	; 0x3c
 80056f6:	3304      	adds	r3, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4a26      	ldr	r2, [pc, #152]	; (8005798 <USB_EP0_OutStart+0xb8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d90a      	bls.n	800571a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005710:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005714:	d101      	bne.n	800571a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e037      	b.n	800578a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005720:	461a      	mov	r2, r3
 8005722:	2300      	movs	r3, #0
 8005724:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005734:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005738:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005748:	f043 0318 	orr.w	r3, r3, #24
 800574c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005760:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005762:	7afb      	ldrb	r3, [r7, #11]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d10f      	bne.n	8005788 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576e:	461a      	mov	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005782:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005786:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	4f54300a 	.word	0x4f54300a

0800579c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a13      	ldr	r2, [pc, #76]	; (8005800 <USB_CoreReset+0x64>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e01b      	b.n	80057f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	daf2      	bge.n	80057a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3301      	adds	r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a09      	ldr	r2, [pc, #36]	; (8005800 <USB_CoreReset+0x64>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d901      	bls.n	80057e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e006      	b.n	80057f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d0f0      	beq.n	80057d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	00030d40 	.word	0x00030d40

08005804 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005810:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005814:	f002 fb42 	bl	8007e9c <USBD_static_malloc>
 8005818:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005828:	2302      	movs	r3, #2
 800582a:	e066      	b.n	80058fa <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	7c1b      	ldrb	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d119      	bne.n	8005870 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800583c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005840:	2202      	movs	r2, #2
 8005842:	2181      	movs	r1, #129	; 0x81
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f002 fa06 	bl	8007c56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005854:	2202      	movs	r2, #2
 8005856:	2101      	movs	r1, #1
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f002 f9fc 	bl	8007c56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2210      	movs	r2, #16
 800586a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800586e:	e016      	b.n	800589e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005870:	2340      	movs	r3, #64	; 0x40
 8005872:	2202      	movs	r2, #2
 8005874:	2181      	movs	r1, #129	; 0x81
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f002 f9ed 	bl	8007c56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005882:	2340      	movs	r3, #64	; 0x40
 8005884:	2202      	movs	r2, #2
 8005886:	2101      	movs	r1, #1
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f002 f9e4 	bl	8007c56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2210      	movs	r2, #16
 800589a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800589e:	2308      	movs	r3, #8
 80058a0:	2203      	movs	r2, #3
 80058a2:	2182      	movs	r1, #130	; 0x82
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f002 f9d6 	bl	8007c56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	7c1b      	ldrb	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058de:	2101      	movs	r1, #1
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f002 faa7 	bl	8007e34 <USBD_LL_PrepareReceive>
 80058e6:	e007      	b.n	80058f8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058ee:	2340      	movs	r3, #64	; 0x40
 80058f0:	2101      	movs	r1, #1
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f002 fa9e 	bl	8007e34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	460b      	mov	r3, r1
 800590c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800590e:	2181      	movs	r1, #129	; 0x81
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f002 f9c6 	bl	8007ca2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800591c:	2101      	movs	r1, #1
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f002 f9bf 	bl	8007ca2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800592c:	2182      	movs	r1, #130	; 0x82
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f002 f9b7 	bl	8007ca2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00e      	beq.n	800596c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800595e:	4618      	mov	r0, r3
 8005960:	f002 faaa 	bl	8007eb8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005988:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800599c:	2303      	movs	r3, #3
 800599e:	e0af      	b.n	8005b00 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d03f      	beq.n	8005a2c <USBD_CDC_Setup+0xb4>
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	f040 809f 	bne.w	8005af0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	88db      	ldrh	r3, [r3, #6]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d02e      	beq.n	8005a18 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	b25b      	sxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	da16      	bge.n	80059f2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80059d0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	88d2      	ldrh	r2, [r2, #6]
 80059d6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	88db      	ldrh	r3, [r3, #6]
 80059dc:	2b07      	cmp	r3, #7
 80059de:	bf28      	it	cs
 80059e0:	2307      	movcs	r3, #7
 80059e2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	89fa      	ldrh	r2, [r7, #14]
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 fb19 	bl	8007022 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80059f0:	e085      	b.n	8005afe <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	785a      	ldrb	r2, [r3, #1]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	88db      	ldrh	r3, [r3, #6]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005a08:	6939      	ldr	r1, [r7, #16]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	88db      	ldrh	r3, [r3, #6]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f001 fb32 	bl	800707a <USBD_CtlPrepareRx>
      break;
 8005a16:	e072      	b.n	8005afe <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	7850      	ldrb	r0, [r2, #1]
 8005a24:	2200      	movs	r2, #0
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	4798      	blx	r3
      break;
 8005a2a:	e068      	b.n	8005afe <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	2b0b      	cmp	r3, #11
 8005a32:	d852      	bhi.n	8005ada <USBD_CDC_Setup+0x162>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <USBD_CDC_Setup+0xc4>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a6d 	.word	0x08005a6d
 8005a40:	08005ae9 	.word	0x08005ae9
 8005a44:	08005adb 	.word	0x08005adb
 8005a48:	08005adb 	.word	0x08005adb
 8005a4c:	08005adb 	.word	0x08005adb
 8005a50:	08005adb 	.word	0x08005adb
 8005a54:	08005adb 	.word	0x08005adb
 8005a58:	08005adb 	.word	0x08005adb
 8005a5c:	08005adb 	.word	0x08005adb
 8005a60:	08005adb 	.word	0x08005adb
 8005a64:	08005a97 	.word	0x08005a97
 8005a68:	08005ac1 	.word	0x08005ac1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d107      	bne.n	8005a88 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a78:	f107 030a 	add.w	r3, r7, #10
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 face 	bl	8007022 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a86:	e032      	b.n	8005aee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 fa58 	bl	8006f40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a90:	2303      	movs	r3, #3
 8005a92:	75fb      	strb	r3, [r7, #23]
          break;
 8005a94:	e02b      	b.n	8005aee <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d107      	bne.n	8005ab2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005aa2:	f107 030d 	add.w	r3, r7, #13
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f001 fab9 	bl	8007022 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ab0:	e01d      	b.n	8005aee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f001 fa43 	bl	8006f40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005aba:	2303      	movs	r3, #3
 8005abc:	75fb      	strb	r3, [r7, #23]
          break;
 8005abe:	e016      	b.n	8005aee <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d00f      	beq.n	8005aec <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f001 fa36 	bl	8006f40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ad8:	e008      	b.n	8005aec <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ada:	6839      	ldr	r1, [r7, #0]
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f001 fa2f 	bl	8006f40 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ae6:	e002      	b.n	8005aee <USBD_CDC_Setup+0x176>
          break;
 8005ae8:	bf00      	nop
 8005aea:	e008      	b.n	8005afe <USBD_CDC_Setup+0x186>
          break;
 8005aec:	bf00      	nop
      }
      break;
 8005aee:	e006      	b.n	8005afe <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 fa24 	bl	8006f40 <USBD_CtlError>
      ret = USBD_FAIL;
 8005af8:	2303      	movs	r3, #3
 8005afa:	75fb      	strb	r3, [r7, #23]
      break;
 8005afc:	bf00      	nop
  }

  return (uint8_t)ret;
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005b1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e04f      	b.n	8005bca <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b32:	78fa      	ldrb	r2, [r7, #3]
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	3318      	adds	r3, #24
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d029      	beq.n	8005b9c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b48:	78fa      	ldrb	r2, [r7, #3]
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	3318      	adds	r3, #24
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	78f9      	ldrb	r1, [r7, #3]
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	1a5b      	subs	r3, r3, r1
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4403      	add	r3, r0
 8005b68:	3344      	adds	r3, #68	; 0x44
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b70:	fb03 f301 	mul.w	r3, r3, r1
 8005b74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d110      	bne.n	8005b9c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005b7a:	78fa      	ldrb	r2, [r7, #3]
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	3318      	adds	r3, #24
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b8e:	78f9      	ldrb	r1, [r7, #3]
 8005b90:	2300      	movs	r3, #0
 8005b92:	2200      	movs	r2, #0
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f002 f92c 	bl	8007df2 <USBD_LL_Transmit>
 8005b9a:	e015      	b.n	8005bc8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005be4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e015      	b.n	8005c20 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f002 f93c 	bl	8007e76 <USBD_LL_GetRxDataSize>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e01b      	b.n	8005c7a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d015      	beq.n	8005c78 <USBD_CDC_EP0_RxReady+0x50>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c52:	2bff      	cmp	r3, #255	; 0xff
 8005c54:	d010      	beq.n	8005c78 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005c64:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c6c:	b292      	uxth	r2, r2
 8005c6e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	22ff      	movs	r2, #255	; 0xff
 8005c74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2243      	movs	r2, #67	; 0x43
 8005c90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005c92:	4b03      	ldr	r3, [pc, #12]	; (8005ca0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	20000094 	.word	0x20000094

08005ca4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2243      	movs	r2, #67	; 0x43
 8005cb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005cb2:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20000050 	.word	0x20000050

08005cc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2243      	movs	r2, #67	; 0x43
 8005cd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005cd2:	4b03      	ldr	r3, [pc, #12]	; (8005ce0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	200000d8 	.word	0x200000d8

08005ce4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	220a      	movs	r2, #10
 8005cf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cf2:	4b03      	ldr	r3, [pc, #12]	; (8005d00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	2000000c 	.word	0x2000000c

08005d04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e004      	b.n	8005d22 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b087      	sub	sp, #28
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d40:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e008      	b.n	8005d5e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e004      	b.n	8005d90 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005daa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e01a      	b.n	8005df4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d114      	bne.n	8005df2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005de6:	2181      	movs	r1, #129	; 0x81
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f002 f802 	bl	8007df2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e016      	b.n	8005e48 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	7c1b      	ldrb	r3, [r3, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d109      	bne.n	8005e36 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f002 f800 	bl	8007e34 <USBD_LL_PrepareReceive>
 8005e34:	e007      	b.n	8005e46 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	2101      	movs	r1, #1
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 fff7 	bl	8007e34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e01f      	b.n	8005ea8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	79fa      	ldrb	r2, [r7, #7]
 8005e9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f001 fe73 	bl	8007b88 <USBD_LL_Init>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e016      	b.n	8005ef6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00b      	beq.n	8005ef4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	f107 020e 	add.w	r2, r7, #14
 8005ee8:	4610      	mov	r0, r2
 8005eea:	4798      	blx	r3
 8005eec:	4602      	mov	r2, r0
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 fe8a 	bl	8007c20 <USBD_LL_Start>
 8005f0c:	4603      	mov	r3, r0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	78fa      	ldrb	r2, [r7, #3]
 8005f50:	4611      	mov	r1, r2
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	4798      	blx	r3
 8005f56:	4603      	mov	r3, r0
 8005f58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	4611      	mov	r1, r2
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
  }

  return USBD_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 ff90 	bl	8006ecc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d01a      	beq.n	8006006 <USBD_LL_SetupStage+0x72>
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d822      	bhi.n	800601a <USBD_LL_SetupStage+0x86>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <USBD_LL_SetupStage+0x4a>
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d00a      	beq.n	8005ff2 <USBD_LL_SetupStage+0x5e>
 8005fdc:	e01d      	b.n	800601a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fa62 	bl	80064b0 <USBD_StdDevReq>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff0:	e020      	b.n	8006034 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fac6 	bl	800658c <USBD_StdItfReq>
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	e016      	b.n	8006034 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fb05 	bl	800661e <USBD_StdEPReq>
 8006014:	4603      	mov	r3, r0
 8006016:	73fb      	strb	r3, [r7, #15]
      break;
 8006018:	e00c      	b.n	8006034 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006020:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006024:	b2db      	uxtb	r3, r3
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 fe59 	bl	8007ce0 <USBD_LL_StallEP>
 800602e:	4603      	mov	r3, r0
 8006030:	73fb      	strb	r3, [r7, #15]
      break;
 8006032:	bf00      	nop
  }

  return ret;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b086      	sub	sp, #24
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	460b      	mov	r3, r1
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800604c:	7afb      	ldrb	r3, [r7, #11]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d138      	bne.n	80060c4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006058:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006060:	2b03      	cmp	r3, #3
 8006062:	d14a      	bne.n	80060fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	429a      	cmp	r2, r3
 800606e:	d913      	bls.n	8006098 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	1ad2      	subs	r2, r2, r3
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	4293      	cmp	r3, r2
 8006088:	bf28      	it	cs
 800608a:	4613      	movcs	r3, r2
 800608c:	461a      	mov	r2, r3
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f001 f80f 	bl	80070b4 <USBD_CtlContinueRx>
 8006096:	e030      	b.n	80060fa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d10b      	bne.n	80060bc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f001 f80a 	bl	80070d6 <USBD_CtlSendStatus>
 80060c2:	e01a      	b.n	80060fa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d114      	bne.n	80060fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00e      	beq.n	80060fa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	7afa      	ldrb	r2, [r7, #11]
 80060e6:	4611      	mov	r1, r2
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	4798      	blx	r3
 80060ec:	4603      	mov	r3, r0
 80060ee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	e000      	b.n	80060fc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	460b      	mov	r3, r1
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006112:	7afb      	ldrb	r3, [r7, #11]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d16b      	bne.n	80061f0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3314      	adds	r3, #20
 800611c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006124:	2b02      	cmp	r3, #2
 8006126:	d156      	bne.n	80061d6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	429a      	cmp	r2, r3
 8006132:	d914      	bls.n	800615e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	1ad2      	subs	r2, r2, r3
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	461a      	mov	r2, r3
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 ff84 	bl	8007058 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006150:	2300      	movs	r3, #0
 8006152:	2200      	movs	r2, #0
 8006154:	2100      	movs	r1, #0
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f001 fe6c 	bl	8007e34 <USBD_LL_PrepareReceive>
 800615c:	e03b      	b.n	80061d6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	429a      	cmp	r2, r3
 8006168:	d11c      	bne.n	80061a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006172:	429a      	cmp	r2, r3
 8006174:	d316      	bcc.n	80061a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006180:	429a      	cmp	r2, r3
 8006182:	d20f      	bcs.n	80061a4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006184:	2200      	movs	r2, #0
 8006186:	2100      	movs	r1, #0
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 ff65 	bl	8007058 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006196:	2300      	movs	r3, #0
 8006198:	2200      	movs	r2, #0
 800619a:	2100      	movs	r1, #0
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f001 fe49 	bl	8007e34 <USBD_LL_PrepareReceive>
 80061a2:	e018      	b.n	80061d6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d10b      	bne.n	80061c8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80061c8:	2180      	movs	r1, #128	; 0x80
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f001 fd88 	bl	8007ce0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 ff93 	bl	80070fc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d122      	bne.n	8006226 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff fe98 	bl	8005f16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80061ee:	e01a      	b.n	8006226 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d114      	bne.n	8006226 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00e      	beq.n	8006226 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	7afa      	ldrb	r2, [r7, #11]
 8006212:	4611      	mov	r1, r2
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	4798      	blx	r3
 8006218:	4603      	mov	r3, r0
 800621a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006222:	7dfb      	ldrb	r3, [r7, #23]
 8006224:	e000      	b.n	8006228 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006260:	2303      	movs	r3, #3
 8006262:	e02f      	b.n	80062c4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00f      	beq.n	800628e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6852      	ldr	r2, [r2, #4]
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	4611      	mov	r1, r2
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800628e:	2340      	movs	r3, #64	; 0x40
 8006290:	2200      	movs	r2, #0
 8006292:	2100      	movs	r1, #0
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 fcde 	bl	8007c56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2240      	movs	r2, #64	; 0x40
 80062a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062aa:	2340      	movs	r3, #64	; 0x40
 80062ac:	2200      	movs	r2, #0
 80062ae:	2180      	movs	r1, #128	; 0x80
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 fcd0 	bl	8007c56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2240      	movs	r2, #64	; 0x40
 80062c0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	78fa      	ldrb	r2, [r7, #3]
 80062dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2204      	movs	r2, #4
 8006306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b04      	cmp	r3, #4
 800632a:	d106      	bne.n	800633a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006332:	b2da      	uxtb	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800635a:	2303      	movs	r3, #3
 800635c:	e012      	b.n	8006384 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b03      	cmp	r3, #3
 8006368:	d10b      	bne.n	8006382 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e014      	b.n	80063d0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d10d      	bne.n	80063ce <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	4611      	mov	r1, r2
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	460b      	mov	r3, r1
 80063e2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e014      	b.n	800641c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d10d      	bne.n	800641a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	78fa      	ldrb	r2, [r7, #3]
 8006414:	4611      	mov	r1, r2
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006450:	2b00      	cmp	r3, #0
 8006452:	d009      	beq.n	8006468 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6852      	ldr	r2, [r2, #4]
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	4611      	mov	r1, r2
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	4798      	blx	r3
  }

  return USBD_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006472:	b480      	push	{r7}
 8006474:	b087      	sub	sp, #28
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	3301      	adds	r3, #1
 8006488:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006490:	8a3b      	ldrh	r3, [r7, #16]
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	b21a      	sxth	r2, r3
 8006496:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800649a:	4313      	orrs	r3, r2
 800649c:	b21b      	sxth	r3, r3
 800649e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064a0:	89fb      	ldrh	r3, [r7, #14]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
	...

080064b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064c6:	2b40      	cmp	r3, #64	; 0x40
 80064c8:	d005      	beq.n	80064d6 <USBD_StdDevReq+0x26>
 80064ca:	2b40      	cmp	r3, #64	; 0x40
 80064cc:	d853      	bhi.n	8006576 <USBD_StdDevReq+0xc6>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00b      	beq.n	80064ea <USBD_StdDevReq+0x3a>
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d14f      	bne.n	8006576 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	4798      	blx	r3
 80064e4:	4603      	mov	r3, r0
 80064e6:	73fb      	strb	r3, [r7, #15]
      break;
 80064e8:	e04a      	b.n	8006580 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d83b      	bhi.n	800656a <USBD_StdDevReq+0xba>
 80064f2:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <USBD_StdDevReq+0x48>)
 80064f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f8:	0800654d 	.word	0x0800654d
 80064fc:	08006561 	.word	0x08006561
 8006500:	0800656b 	.word	0x0800656b
 8006504:	08006557 	.word	0x08006557
 8006508:	0800656b 	.word	0x0800656b
 800650c:	0800652b 	.word	0x0800652b
 8006510:	08006521 	.word	0x08006521
 8006514:	0800656b 	.word	0x0800656b
 8006518:	08006543 	.word	0x08006543
 800651c:	08006535 	.word	0x08006535
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9de 	bl	80068e4 <USBD_GetDescriptor>
          break;
 8006528:	e024      	b.n	8006574 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fb43 	bl	8006bb8 <USBD_SetAddress>
          break;
 8006532:	e01f      	b.n	8006574 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fb82 	bl	8006c40 <USBD_SetConfig>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]
          break;
 8006540:	e018      	b.n	8006574 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fc21 	bl	8006d8c <USBD_GetConfig>
          break;
 800654a:	e013      	b.n	8006574 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fc52 	bl	8006df8 <USBD_GetStatus>
          break;
 8006554:	e00e      	b.n	8006574 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fc81 	bl	8006e60 <USBD_SetFeature>
          break;
 800655e:	e009      	b.n	8006574 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fc90 	bl	8006e88 <USBD_ClrFeature>
          break;
 8006568:	e004      	b.n	8006574 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800656a:	6839      	ldr	r1, [r7, #0]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fce7 	bl	8006f40 <USBD_CtlError>
          break;
 8006572:	bf00      	nop
      }
      break;
 8006574:	e004      	b.n	8006580 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fce1 	bl	8006f40 <USBD_CtlError>
      break;
 800657e:	bf00      	nop
  }

  return ret;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop

0800658c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	d005      	beq.n	80065b2 <USBD_StdItfReq+0x26>
 80065a6:	2b40      	cmp	r3, #64	; 0x40
 80065a8:	d82f      	bhi.n	800660a <USBD_StdItfReq+0x7e>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <USBD_StdItfReq+0x26>
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d12b      	bne.n	800660a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d81d      	bhi.n	80065fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	889b      	ldrh	r3, [r3, #4]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d813      	bhi.n	80065f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
 80065d8:	4603      	mov	r3, r0
 80065da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	88db      	ldrh	r3, [r3, #6]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d110      	bne.n	8006606 <USBD_StdItfReq+0x7a>
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10d      	bne.n	8006606 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fd73 	bl	80070d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065f0:	e009      	b.n	8006606 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fca3 	bl	8006f40 <USBD_CtlError>
          break;
 80065fa:	e004      	b.n	8006606 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fc9e 	bl	8006f40 <USBD_CtlError>
          break;
 8006604:	e000      	b.n	8006608 <USBD_StdItfReq+0x7c>
          break;
 8006606:	bf00      	nop
      }
      break;
 8006608:	e004      	b.n	8006614 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fc97 	bl	8006f40 <USBD_CtlError>
      break;
 8006612:	bf00      	nop
  }

  return ret;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	889b      	ldrh	r3, [r3, #4]
 8006630:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d007      	beq.n	800664e <USBD_StdEPReq+0x30>
 800663e:	2b40      	cmp	r3, #64	; 0x40
 8006640:	f200 8145 	bhi.w	80068ce <USBD_StdEPReq+0x2b0>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00c      	beq.n	8006662 <USBD_StdEPReq+0x44>
 8006648:	2b20      	cmp	r3, #32
 800664a:	f040 8140 	bne.w	80068ce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	4798      	blx	r3
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]
      break;
 8006660:	e13a      	b.n	80068d8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	785b      	ldrb	r3, [r3, #1]
 8006666:	2b03      	cmp	r3, #3
 8006668:	d007      	beq.n	800667a <USBD_StdEPReq+0x5c>
 800666a:	2b03      	cmp	r3, #3
 800666c:	f300 8129 	bgt.w	80068c2 <USBD_StdEPReq+0x2a4>
 8006670:	2b00      	cmp	r3, #0
 8006672:	d07f      	beq.n	8006774 <USBD_StdEPReq+0x156>
 8006674:	2b01      	cmp	r3, #1
 8006676:	d03c      	beq.n	80066f2 <USBD_StdEPReq+0xd4>
 8006678:	e123      	b.n	80068c2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d002      	beq.n	800668c <USBD_StdEPReq+0x6e>
 8006686:	2b03      	cmp	r3, #3
 8006688:	d016      	beq.n	80066b8 <USBD_StdEPReq+0x9a>
 800668a:	e02c      	b.n	80066e6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00d      	beq.n	80066ae <USBD_StdEPReq+0x90>
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	2b80      	cmp	r3, #128	; 0x80
 8006696:	d00a      	beq.n	80066ae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006698:	7bbb      	ldrb	r3, [r7, #14]
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 fb1f 	bl	8007ce0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066a2:	2180      	movs	r1, #128	; 0x80
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 fb1b 	bl	8007ce0 <USBD_LL_StallEP>
 80066aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066ac:	e020      	b.n	80066f0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fc45 	bl	8006f40 <USBD_CtlError>
              break;
 80066b6:	e01b      	b.n	80066f0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	885b      	ldrh	r3, [r3, #2]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10e      	bne.n	80066de <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00b      	beq.n	80066de <USBD_StdEPReq+0xc0>
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	d008      	beq.n	80066de <USBD_StdEPReq+0xc0>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	88db      	ldrh	r3, [r3, #6]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 fb01 	bl	8007ce0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fcf9 	bl	80070d6 <USBD_CtlSendStatus>

              break;
 80066e4:	e004      	b.n	80066f0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fc29 	bl	8006f40 <USBD_CtlError>
              break;
 80066ee:	bf00      	nop
          }
          break;
 80066f0:	e0ec      	b.n	80068cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d002      	beq.n	8006704 <USBD_StdEPReq+0xe6>
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d016      	beq.n	8006730 <USBD_StdEPReq+0x112>
 8006702:	e030      	b.n	8006766 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00d      	beq.n	8006726 <USBD_StdEPReq+0x108>
 800670a:	7bbb      	ldrb	r3, [r7, #14]
 800670c:	2b80      	cmp	r3, #128	; 0x80
 800670e:	d00a      	beq.n	8006726 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 fae3 	bl	8007ce0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800671a:	2180      	movs	r1, #128	; 0x80
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 fadf 	bl	8007ce0 <USBD_LL_StallEP>
 8006722:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006724:	e025      	b.n	8006772 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fc09 	bl	8006f40 <USBD_CtlError>
              break;
 800672e:	e020      	b.n	8006772 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	885b      	ldrh	r3, [r3, #2]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11b      	bne.n	8006770 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006738:	7bbb      	ldrb	r3, [r7, #14]
 800673a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 fae9 	bl	8007d1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fcc2 	bl	80070d6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	4798      	blx	r3
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006764:	e004      	b.n	8006770 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fbe9 	bl	8006f40 <USBD_CtlError>
              break;
 800676e:	e000      	b.n	8006772 <USBD_StdEPReq+0x154>
              break;
 8006770:	bf00      	nop
          }
          break;
 8006772:	e0ab      	b.n	80068cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d002      	beq.n	8006786 <USBD_StdEPReq+0x168>
 8006780:	2b03      	cmp	r3, #3
 8006782:	d032      	beq.n	80067ea <USBD_StdEPReq+0x1cc>
 8006784:	e097      	b.n	80068b6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006786:	7bbb      	ldrb	r3, [r7, #14]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <USBD_StdEPReq+0x17e>
 800678c:	7bbb      	ldrb	r3, [r7, #14]
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d004      	beq.n	800679c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fbd3 	bl	8006f40 <USBD_CtlError>
                break;
 800679a:	e091      	b.n	80068c0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800679c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	da0b      	bge.n	80067bc <USBD_StdEPReq+0x19e>
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	3310      	adds	r3, #16
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	4413      	add	r3, r2
 80067b8:	3304      	adds	r3, #4
 80067ba:	e00b      	b.n	80067d4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	3304      	adds	r3, #4
 80067d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2202      	movs	r2, #2
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fc1d 	bl	8007022 <USBD_CtlSendData>
              break;
 80067e8:	e06a      	b.n	80068c0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	da11      	bge.n	8006816 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	f003 020f 	and.w	r2, r3, #15
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	3324      	adds	r3, #36	; 0x24
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d117      	bne.n	800683c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fb96 	bl	8006f40 <USBD_CtlError>
                  break;
 8006814:	e054      	b.n	80068c0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	f003 020f 	and.w	r2, r3, #15
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	440b      	add	r3, r1
 8006828:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fb83 	bl	8006f40 <USBD_CtlError>
                  break;
 800683a:	e041      	b.n	80068c0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800683c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006840:	2b00      	cmp	r3, #0
 8006842:	da0b      	bge.n	800685c <USBD_StdEPReq+0x23e>
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	3310      	adds	r3, #16
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	4413      	add	r3, r2
 8006858:	3304      	adds	r3, #4
 800685a:	e00b      	b.n	8006874 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	4413      	add	r3, r2
 8006872:	3304      	adds	r3, #4
 8006874:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <USBD_StdEPReq+0x264>
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	2b80      	cmp	r3, #128	; 0x80
 8006880:	d103      	bne.n	800688a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	e00e      	b.n	80068a8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fa64 	bl	8007d5c <USBD_LL_IsStallEP>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2201      	movs	r2, #1
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	e002      	b.n	80068a8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2202      	movs	r2, #2
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fbb7 	bl	8007022 <USBD_CtlSendData>
              break;
 80068b4:	e004      	b.n	80068c0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fb41 	bl	8006f40 <USBD_CtlError>
              break;
 80068be:	bf00      	nop
          }
          break;
 80068c0:	e004      	b.n	80068cc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fb3b 	bl	8006f40 <USBD_CtlError>
          break;
 80068ca:	bf00      	nop
      }
      break;
 80068cc:	e004      	b.n	80068d8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fb35 	bl	8006f40 <USBD_CtlError>
      break;
 80068d6:	bf00      	nop
  }

  return ret;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	885b      	ldrh	r3, [r3, #2]
 80068fe:	0a1b      	lsrs	r3, r3, #8
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	2b06      	cmp	r3, #6
 8006906:	f200 8128 	bhi.w	8006b5a <USBD_GetDescriptor+0x276>
 800690a:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <USBD_GetDescriptor+0x2c>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	0800692d 	.word	0x0800692d
 8006914:	08006945 	.word	0x08006945
 8006918:	08006985 	.word	0x08006985
 800691c:	08006b5b 	.word	0x08006b5b
 8006920:	08006b5b 	.word	0x08006b5b
 8006924:	08006afb 	.word	0x08006afb
 8006928:	08006b27 	.word	0x08006b27
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	7c12      	ldrb	r2, [r2, #16]
 8006938:	f107 0108 	add.w	r1, r7, #8
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
 8006940:	60f8      	str	r0, [r7, #12]
      break;
 8006942:	e112      	b.n	8006b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	7c1b      	ldrb	r3, [r3, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10d      	bne.n	8006968 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	f107 0208 	add.w	r2, r7, #8
 8006958:	4610      	mov	r0, r2
 800695a:	4798      	blx	r3
 800695c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	2202      	movs	r2, #2
 8006964:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006966:	e100      	b.n	8006b6a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	f107 0208 	add.w	r2, r7, #8
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
 8006978:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3301      	adds	r3, #1
 800697e:	2202      	movs	r2, #2
 8006980:	701a      	strb	r2, [r3, #0]
      break;
 8006982:	e0f2      	b.n	8006b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	885b      	ldrh	r3, [r3, #2]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b05      	cmp	r3, #5
 800698c:	f200 80ac 	bhi.w	8006ae8 <USBD_GetDescriptor+0x204>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <USBD_GetDescriptor+0xb4>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069b1 	.word	0x080069b1
 800699c:	080069e5 	.word	0x080069e5
 80069a0:	08006a19 	.word	0x08006a19
 80069a4:	08006a4d 	.word	0x08006a4d
 80069a8:	08006a81 	.word	0x08006a81
 80069ac:	08006ab5 	.word	0x08006ab5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00b      	beq.n	80069d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	7c12      	ldrb	r2, [r2, #16]
 80069c8:	f107 0108 	add.w	r1, r7, #8
 80069cc:	4610      	mov	r0, r2
 80069ce:	4798      	blx	r3
 80069d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069d2:	e091      	b.n	8006af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fab2 	bl	8006f40 <USBD_CtlError>
            err++;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	3301      	adds	r3, #1
 80069e0:	72fb      	strb	r3, [r7, #11]
          break;
 80069e2:	e089      	b.n	8006af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00b      	beq.n	8006a08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	7c12      	ldrb	r2, [r2, #16]
 80069fc:	f107 0108 	add.w	r1, r7, #8
 8006a00:	4610      	mov	r0, r2
 8006a02:	4798      	blx	r3
 8006a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a06:	e077      	b.n	8006af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fa98 	bl	8006f40 <USBD_CtlError>
            err++;
 8006a10:	7afb      	ldrb	r3, [r7, #11]
 8006a12:	3301      	adds	r3, #1
 8006a14:	72fb      	strb	r3, [r7, #11]
          break;
 8006a16:	e06f      	b.n	8006af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00b      	beq.n	8006a3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	7c12      	ldrb	r2, [r2, #16]
 8006a30:	f107 0108 	add.w	r1, r7, #8
 8006a34:	4610      	mov	r0, r2
 8006a36:	4798      	blx	r3
 8006a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a3a:	e05d      	b.n	8006af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa7e 	bl	8006f40 <USBD_CtlError>
            err++;
 8006a44:	7afb      	ldrb	r3, [r7, #11]
 8006a46:	3301      	adds	r3, #1
 8006a48:	72fb      	strb	r3, [r7, #11]
          break;
 8006a4a:	e055      	b.n	8006af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	7c12      	ldrb	r2, [r2, #16]
 8006a64:	f107 0108 	add.w	r1, r7, #8
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
 8006a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a6e:	e043      	b.n	8006af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa64 	bl	8006f40 <USBD_CtlError>
            err++;
 8006a78:	7afb      	ldrb	r3, [r7, #11]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a7e:	e03b      	b.n	8006af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	7c12      	ldrb	r2, [r2, #16]
 8006a98:	f107 0108 	add.w	r1, r7, #8
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4798      	blx	r3
 8006aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aa2:	e029      	b.n	8006af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fa4a 	bl	8006f40 <USBD_CtlError>
            err++;
 8006aac:	7afb      	ldrb	r3, [r7, #11]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ab2:	e021      	b.n	8006af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	7c12      	ldrb	r2, [r2, #16]
 8006acc:	f107 0108 	add.w	r1, r7, #8
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4798      	blx	r3
 8006ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ad6:	e00f      	b.n	8006af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fa30 	bl	8006f40 <USBD_CtlError>
            err++;
 8006ae0:	7afb      	ldrb	r3, [r7, #11]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ae6:	e007      	b.n	8006af8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fa28 	bl	8006f40 <USBD_CtlError>
          err++;
 8006af0:	7afb      	ldrb	r3, [r7, #11]
 8006af2:	3301      	adds	r3, #1
 8006af4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006af6:	bf00      	nop
      }
      break;
 8006af8:	e037      	b.n	8006b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	7c1b      	ldrb	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d109      	bne.n	8006b16 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0a:	f107 0208 	add.w	r2, r7, #8
 8006b0e:	4610      	mov	r0, r2
 8006b10:	4798      	blx	r3
 8006b12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b14:	e029      	b.n	8006b6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fa11 	bl	8006f40 <USBD_CtlError>
        err++;
 8006b1e:	7afb      	ldrb	r3, [r7, #11]
 8006b20:	3301      	adds	r3, #1
 8006b22:	72fb      	strb	r3, [r7, #11]
      break;
 8006b24:	e021      	b.n	8006b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	7c1b      	ldrb	r3, [r3, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10d      	bne.n	8006b4a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	f107 0208 	add.w	r2, r7, #8
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	4798      	blx	r3
 8006b3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3301      	adds	r3, #1
 8006b44:	2207      	movs	r2, #7
 8006b46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b48:	e00f      	b.n	8006b6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f9f7 	bl	8006f40 <USBD_CtlError>
        err++;
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	3301      	adds	r3, #1
 8006b56:	72fb      	strb	r3, [r7, #11]
      break;
 8006b58:	e007      	b.n	8006b6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f9ef 	bl	8006f40 <USBD_CtlError>
      err++;
 8006b62:	7afb      	ldrb	r3, [r7, #11]
 8006b64:	3301      	adds	r3, #1
 8006b66:	72fb      	strb	r3, [r7, #11]
      break;
 8006b68:	bf00      	nop
  }

  if (err != 0U)
 8006b6a:	7afb      	ldrb	r3, [r7, #11]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d11e      	bne.n	8006bae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	88db      	ldrh	r3, [r3, #6]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d016      	beq.n	8006ba6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b78:	893b      	ldrh	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00e      	beq.n	8006b9c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	88da      	ldrh	r2, [r3, #6]
 8006b82:	893b      	ldrh	r3, [r7, #8]
 8006b84:	4293      	cmp	r3, r2
 8006b86:	bf28      	it	cs
 8006b88:	4613      	movcs	r3, r2
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b8e:	893b      	ldrh	r3, [r7, #8]
 8006b90:	461a      	mov	r2, r3
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fa44 	bl	8007022 <USBD_CtlSendData>
 8006b9a:	e009      	b.n	8006bb0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f9ce 	bl	8006f40 <USBD_CtlError>
 8006ba4:	e004      	b.n	8006bb0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa95 	bl	80070d6 <USBD_CtlSendStatus>
 8006bac:	e000      	b.n	8006bb0 <USBD_GetDescriptor+0x2cc>
    return;
 8006bae:	bf00      	nop
  }
}
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop

08006bb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	889b      	ldrh	r3, [r3, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d131      	bne.n	8006c2e <USBD_SetAddress+0x76>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	88db      	ldrh	r3, [r3, #6]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d12d      	bne.n	8006c2e <USBD_SetAddress+0x76>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	885b      	ldrh	r3, [r3, #2]
 8006bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd8:	d829      	bhi.n	8006c2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	885b      	ldrh	r3, [r3, #2]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d104      	bne.n	8006bfc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f9a3 	bl	8006f40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfa:	e01d      	b.n	8006c38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	7bfa      	ldrb	r2, [r7, #15]
 8006c00:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 f8d3 	bl	8007db4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fa61 	bl	80070d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d004      	beq.n	8006c24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c22:	e009      	b.n	8006c38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2c:	e004      	b.n	8006c38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f985 	bl	8006f40 <USBD_CtlError>
  }
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	885b      	ldrh	r3, [r3, #2]
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	4b4c      	ldr	r3, [pc, #304]	; (8006d88 <USBD_SetConfig+0x148>)
 8006c56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c58:	4b4b      	ldr	r3, [pc, #300]	; (8006d88 <USBD_SetConfig+0x148>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d905      	bls.n	8006c6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f96c 	bl	8006f40 <USBD_CtlError>
    return USBD_FAIL;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e088      	b.n	8006d7e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d002      	beq.n	8006c7e <USBD_SetConfig+0x3e>
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d025      	beq.n	8006cc8 <USBD_SetConfig+0x88>
 8006c7c:	e071      	b.n	8006d62 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c7e:	4b42      	ldr	r3, [pc, #264]	; (8006d88 <USBD_SetConfig+0x148>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d01c      	beq.n	8006cc0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006c86:	4b40      	ldr	r3, [pc, #256]	; (8006d88 <USBD_SetConfig+0x148>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c90:	4b3d      	ldr	r3, [pc, #244]	; (8006d88 <USBD_SetConfig+0x148>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff f948 	bl	8005f2c <USBD_SetClassConfig>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d004      	beq.n	8006cb0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f949 	bl	8006f40 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cae:	e065      	b.n	8006d7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fa10 	bl	80070d6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2203      	movs	r2, #3
 8006cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006cbe:	e05d      	b.n	8006d7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fa08 	bl	80070d6 <USBD_CtlSendStatus>
      break;
 8006cc6:	e059      	b.n	8006d7c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cc8:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <USBD_SetConfig+0x148>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d112      	bne.n	8006cf6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006cd8:	4b2b      	ldr	r3, [pc, #172]	; (8006d88 <USBD_SetConfig+0x148>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ce2:	4b29      	ldr	r3, [pc, #164]	; (8006d88 <USBD_SetConfig+0x148>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff f93b 	bl	8005f64 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f9f1 	bl	80070d6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cf4:	e042      	b.n	8006d7c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006cf6:	4b24      	ldr	r3, [pc, #144]	; (8006d88 <USBD_SetConfig+0x148>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d02a      	beq.n	8006d5a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff f929 	bl	8005f64 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d12:	4b1d      	ldr	r3, [pc, #116]	; (8006d88 <USBD_SetConfig+0x148>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <USBD_SetConfig+0x148>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff f902 	bl	8005f2c <USBD_SetClassConfig>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00f      	beq.n	8006d52 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f903 	bl	8006f40 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff f90e 	bl	8005f64 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d50:	e014      	b.n	8006d7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f9bf 	bl	80070d6 <USBD_CtlSendStatus>
      break;
 8006d58:	e010      	b.n	8006d7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f9bb 	bl	80070d6 <USBD_CtlSendStatus>
      break;
 8006d60:	e00c      	b.n	8006d7c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f8eb 	bl	8006f40 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <USBD_SetConfig+0x148>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff f8f7 	bl	8005f64 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d76:	2303      	movs	r3, #3
 8006d78:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7a:	bf00      	nop
  }

  return ret;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000204 	.word	0x20000204

08006d8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	88db      	ldrh	r3, [r3, #6]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d004      	beq.n	8006da8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f8cd 	bl	8006f40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006da6:	e023      	b.n	8006df0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	dc02      	bgt.n	8006dba <USBD_GetConfig+0x2e>
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	dc03      	bgt.n	8006dc0 <USBD_GetConfig+0x34>
 8006db8:	e015      	b.n	8006de6 <USBD_GetConfig+0x5a>
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d00b      	beq.n	8006dd6 <USBD_GetConfig+0x4a>
 8006dbe:	e012      	b.n	8006de6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	2201      	movs	r2, #1
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f927 	bl	8007022 <USBD_CtlSendData>
        break;
 8006dd4:	e00c      	b.n	8006df0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f91f 	bl	8007022 <USBD_CtlSendData>
        break;
 8006de4:	e004      	b.n	8006df0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8a9 	bl	8006f40 <USBD_CtlError>
        break;
 8006dee:	bf00      	nop
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d81e      	bhi.n	8006e4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	88db      	ldrh	r3, [r3, #6]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d004      	beq.n	8006e22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f890 	bl	8006f40 <USBD_CtlError>
        break;
 8006e20:	e01a      	b.n	8006e58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f043 0202 	orr.w	r2, r3, #2
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	330c      	adds	r3, #12
 8006e42:	2202      	movs	r2, #2
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f8eb 	bl	8007022 <USBD_CtlSendData>
      break;
 8006e4c:	e004      	b.n	8006e58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f875 	bl	8006f40 <USBD_CtlError>
      break;
 8006e56:	bf00      	nop
  }
}
 8006e58:	bf00      	nop
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	885b      	ldrh	r3, [r3, #2]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d106      	bne.n	8006e80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f92b 	bl	80070d6 <USBD_CtlSendStatus>
  }
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d80b      	bhi.n	8006eb8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	885b      	ldrh	r3, [r3, #2]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d10c      	bne.n	8006ec2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f910 	bl	80070d6 <USBD_CtlSendStatus>
      }
      break;
 8006eb6:	e004      	b.n	8006ec2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f840 	bl	8006f40 <USBD_CtlError>
      break;
 8006ec0:	e000      	b.n	8006ec4 <USBD_ClrFeature+0x3c>
      break;
 8006ec2:	bf00      	nop
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	781a      	ldrb	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	781a      	ldrb	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff fabb 	bl	8006472 <SWAPBYTE>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7ff faae 	bl	8006472 <SWAPBYTE>
 8006f16:	4603      	mov	r3, r0
 8006f18:	461a      	mov	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3301      	adds	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff faa1 	bl	8006472 <SWAPBYTE>
 8006f30:	4603      	mov	r3, r0
 8006f32:	461a      	mov	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	80da      	strh	r2, [r3, #6]
}
 8006f38:	bf00      	nop
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f4a:	2180      	movs	r1, #128	; 0x80
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fec7 	bl	8007ce0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f52:	2100      	movs	r1, #0
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fec3 	bl	8007ce0 <USBD_LL_StallEP>
}
 8006f5a:	bf00      	nop
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d036      	beq.n	8006fe6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f7c:	6938      	ldr	r0, [r7, #16]
 8006f7e:	f000 f836 	bl	8006fee <USBD_GetLen>
 8006f82:	4603      	mov	r3, r0
 8006f84:	3301      	adds	r3, #1
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	4413      	add	r3, r2
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	7812      	ldrb	r2, [r2, #0]
 8006f9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	2203      	movs	r2, #3
 8006faa:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fb2:	e013      	b.n	8006fdc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	4413      	add	r3, r2
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	7812      	ldrb	r2, [r2, #0]
 8006fbe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	613b      	str	r3, [r7, #16]
    idx++;
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
    idx++;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e7      	bne.n	8006fb4 <USBD_GetString+0x52>
 8006fe4:	e000      	b.n	8006fe8 <USBD_GetString+0x86>
    return;
 8006fe6:	bf00      	nop
  }
}
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b085      	sub	sp, #20
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ffe:	e005      	b.n	800700c <USBD_GetLen+0x1e>
  {
    len++;
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	3301      	adds	r3, #1
 8007004:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	3301      	adds	r3, #1
 800700a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1f5      	bne.n	8007000 <USBD_GetLen+0x12>
  }

  return len;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2202      	movs	r2, #2
 8007032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	2100      	movs	r1, #0
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 fed2 	bl	8007df2 <USBD_LL_Transmit>

  return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	2100      	movs	r1, #0
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 fec1 	bl	8007df2 <USBD_LL_Transmit>

  return USBD_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2203      	movs	r2, #3
 800708a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	2100      	movs	r1, #0
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 fec5 	bl	8007e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	2100      	movs	r1, #0
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 feb4 	bl	8007e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2204      	movs	r2, #4
 80070e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070e6:	2300      	movs	r3, #0
 80070e8:	2200      	movs	r2, #0
 80070ea:	2100      	movs	r1, #0
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fe80 	bl	8007df2 <USBD_LL_Transmit>

  return USBD_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2205      	movs	r2, #5
 8007108:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800710c:	2300      	movs	r3, #0
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fe8e 	bl	8007e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007128:	2200      	movs	r2, #0
 800712a:	4912      	ldr	r1, [pc, #72]	; (8007174 <MX_USB_DEVICE_Init+0x50>)
 800712c:	4812      	ldr	r0, [pc, #72]	; (8007178 <MX_USB_DEVICE_Init+0x54>)
 800712e:	f7fe fe8f 	bl	8005e50 <USBD_Init>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007138:	f7fa f970 	bl	800141c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800713c:	490f      	ldr	r1, [pc, #60]	; (800717c <MX_USB_DEVICE_Init+0x58>)
 800713e:	480e      	ldr	r0, [pc, #56]	; (8007178 <MX_USB_DEVICE_Init+0x54>)
 8007140:	f7fe feb6 	bl	8005eb0 <USBD_RegisterClass>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800714a:	f7fa f967 	bl	800141c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800714e:	490c      	ldr	r1, [pc, #48]	; (8007180 <MX_USB_DEVICE_Init+0x5c>)
 8007150:	4809      	ldr	r0, [pc, #36]	; (8007178 <MX_USB_DEVICE_Init+0x54>)
 8007152:	f7fe fdd7 	bl	8005d04 <USBD_CDC_RegisterInterface>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800715c:	f7fa f95e 	bl	800141c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007160:	4805      	ldr	r0, [pc, #20]	; (8007178 <MX_USB_DEVICE_Init+0x54>)
 8007162:	f7fe fecc 	bl	8005efe <USBD_Start>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800716c:	f7fa f956 	bl	800141c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007170:	bf00      	nop
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000130 	.word	0x20000130
 8007178:	20000494 	.word	0x20000494
 800717c:	20000018 	.word	0x20000018
 8007180:	2000011c 	.word	0x2000011c

08007184 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007188:	2200      	movs	r2, #0
 800718a:	4905      	ldr	r1, [pc, #20]	; (80071a0 <CDC_Init_FS+0x1c>)
 800718c:	4805      	ldr	r0, [pc, #20]	; (80071a4 <CDC_Init_FS+0x20>)
 800718e:	f7fe fdce 	bl	8005d2e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007192:	4905      	ldr	r1, [pc, #20]	; (80071a8 <CDC_Init_FS+0x24>)
 8007194:	4803      	ldr	r0, [pc, #12]	; (80071a4 <CDC_Init_FS+0x20>)
 8007196:	f7fe fde8 	bl	8005d6a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800719a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800719c:	4618      	mov	r0, r3
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000f64 	.word	0x20000f64
 80071a4:	20000494 	.word	0x20000494
 80071a8:	20000764 	.word	0x20000764

080071ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	6039      	str	r1, [r7, #0]
 80071c6:	71fb      	strb	r3, [r7, #7]
 80071c8:	4613      	mov	r3, r2
 80071ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	2b23      	cmp	r3, #35	; 0x23
 80071d0:	d84a      	bhi.n	8007268 <CDC_Control_FS+0xac>
 80071d2:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <CDC_Control_FS+0x1c>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	08007269 	.word	0x08007269
 80071dc:	08007269 	.word	0x08007269
 80071e0:	08007269 	.word	0x08007269
 80071e4:	08007269 	.word	0x08007269
 80071e8:	08007269 	.word	0x08007269
 80071ec:	08007269 	.word	0x08007269
 80071f0:	08007269 	.word	0x08007269
 80071f4:	08007269 	.word	0x08007269
 80071f8:	08007269 	.word	0x08007269
 80071fc:	08007269 	.word	0x08007269
 8007200:	08007269 	.word	0x08007269
 8007204:	08007269 	.word	0x08007269
 8007208:	08007269 	.word	0x08007269
 800720c:	08007269 	.word	0x08007269
 8007210:	08007269 	.word	0x08007269
 8007214:	08007269 	.word	0x08007269
 8007218:	08007269 	.word	0x08007269
 800721c:	08007269 	.word	0x08007269
 8007220:	08007269 	.word	0x08007269
 8007224:	08007269 	.word	0x08007269
 8007228:	08007269 	.word	0x08007269
 800722c:	08007269 	.word	0x08007269
 8007230:	08007269 	.word	0x08007269
 8007234:	08007269 	.word	0x08007269
 8007238:	08007269 	.word	0x08007269
 800723c:	08007269 	.word	0x08007269
 8007240:	08007269 	.word	0x08007269
 8007244:	08007269 	.word	0x08007269
 8007248:	08007269 	.word	0x08007269
 800724c:	08007269 	.word	0x08007269
 8007250:	08007269 	.word	0x08007269
 8007254:	08007269 	.word	0x08007269
 8007258:	08007269 	.word	0x08007269
 800725c:	08007269 	.word	0x08007269
 8007260:	08007269 	.word	0x08007269
 8007264:	08007269 	.word	0x08007269
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007268:	bf00      	nop
  }

  return (USBD_OK);
 800726a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007278:	b590      	push	{r4, r7, lr}
 800727a:	b09f      	sub	sp, #124	; 0x7c
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
	uint8_t	Tx_Buffer[64];
	uint8_t	Aux_Buffer[16];
	static	uint16_t	PacketCount = 0;
	static	uint8_t		DataType;
	static uint32_t		Flash_BaseAddr;
	int i = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	677b      	str	r3, [r7, #116]	; 0x74
	static uint32_t		flash_cont = 0;

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	48be      	ldr	r0, [pc, #760]	; (8007584 <CDC_Receive_FS+0x30c>)
 800728a:	f7fe fd6e 	bl	8005d6a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800728e:	48bd      	ldr	r0, [pc, #756]	; (8007584 <CDC_Receive_FS+0x30c>)
 8007290:	f7fe fdb4 	bl	8005dfc <USBD_CDC_ReceivePacket>

	if(xUSBDownloadVar.RxMode == true)
 8007294:	4bbc      	ldr	r3, [pc, #752]	; (8007588 <CDC_Receive_FS+0x310>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d05b      	beq.n	8007356 <CDC_Receive_FS+0xde>
	{
		USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	48b8      	ldr	r0, [pc, #736]	; (8007584 <CDC_Receive_FS+0x30c>)
 80072a2:	f7fe fd62 	bl	8005d6a <USBD_CDC_SetRxBuffer>
		USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80072a6:	48b7      	ldr	r0, [pc, #732]	; (8007584 <CDC_Receive_FS+0x30c>)
 80072a8:	f7fe fda8 	bl	8005dfc <USBD_CDC_ReceivePacket>
		for(i = 0; i<(*Len); i++)
 80072ac:	2300      	movs	r3, #0
 80072ae:	677b      	str	r3, [r7, #116]	; 0x74
 80072b0:	e019      	b.n	80072e6 <CDC_Receive_FS+0x6e>
		{
			HAL_FLASH_Unlock();
 80072b2:	f7fa fba3 	bl	80019fc <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (flash_cont + i), Buf[i]);
 80072b6:	4bb5      	ldr	r3, [pc, #724]	; (800758c <CDC_Receive_FS+0x314>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072bc:	18d1      	adds	r1, r2, r3
 80072be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	4413      	add	r3, r2
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	2000      	movs	r0, #0
 80072ce:	f7fa fb41 	bl	8001954 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 80072d2:	f7fa fbb5 	bl	8001a40 <HAL_FLASH_Lock>
			Buf[i]=0;
 80072d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4413      	add	r3, r2
 80072dc:	2200      	movs	r2, #0
 80072de:	701a      	strb	r2, [r3, #0]
		for(i = 0; i<(*Len); i++)
 80072e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e2:	3301      	adds	r3, #1
 80072e4:	677b      	str	r3, [r7, #116]	; 0x74
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d8e0      	bhi.n	80072b2 <CDC_Receive_FS+0x3a>
		}
		flash_cont += *Len;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	4ba5      	ldr	r3, [pc, #660]	; (800758c <CDC_Receive_FS+0x314>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4413      	add	r3, r2
 80072fa:	4aa4      	ldr	r2, [pc, #656]	; (800758c <CDC_Receive_FS+0x314>)
 80072fc:	6013      	str	r3, [r2, #0]

		PacketCount++;
 80072fe:	4ba4      	ldr	r3, [pc, #656]	; (8007590 <CDC_Receive_FS+0x318>)
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	3301      	adds	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	4ba2      	ldr	r3, [pc, #648]	; (8007590 <CDC_Receive_FS+0x318>)
 8007308:	801a      	strh	r2, [r3, #0]
		//if(PacketCount >= ((xUSBDownloadVar.Size+(PACKET_SIZE-1))/PACKET_SIZE))
		if((flash_cont - Flash_BaseAddr) >= xUSBDownloadVar.Size)
 800730a:	4ba0      	ldr	r3, [pc, #640]	; (800758c <CDC_Receive_FS+0x314>)
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	4ba1      	ldr	r3, [pc, #644]	; (8007594 <CDC_Receive_FS+0x31c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	1ad2      	subs	r2, r2, r3
 8007314:	4b9c      	ldr	r3, [pc, #624]	; (8007588 <CDC_Receive_FS+0x310>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	429a      	cmp	r2, r3
 800731a:	f0c0 8194 	bcc.w	8007646 <CDC_Receive_FS+0x3ce>
		{
			xUSBDownloadVar.RxMode	=	false;
 800731e:	4b9a      	ldr	r3, [pc, #616]	; (8007588 <CDC_Receive_FS+0x310>)
 8007320:	2200      	movs	r2, #0
 8007322:	701a      	strb	r2, [r3, #0]
			strncpy((char*)Tx_Buffer, "File Received\n", 15);
 8007324:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007328:	4a9b      	ldr	r2, [pc, #620]	; (8007598 <CDC_Receive_FS+0x320>)
 800732a:	461c      	mov	r4, r3
 800732c:	4613      	mov	r3, r2
 800732e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007330:	c407      	stmia	r4!, {r0, r1, r2}
 8007332:	8023      	strh	r3, [r4, #0]
 8007334:	3402      	adds	r4, #2
 8007336:	0c1b      	lsrs	r3, r3, #16
 8007338:	7023      	strb	r3, [r4, #0]
			CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 800733a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800733e:	4618      	mov	r0, r3
 8007340:	f7f8 ff42 	bl	80001c8 <strlen>
 8007344:	4603      	mov	r3, r0
 8007346:	b29a      	uxth	r2, r3
 8007348:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800734c:	4611      	mov	r1, r2
 800734e:	4618      	mov	r0, r3
 8007350:	f000 f98c 	bl	800766c <CDC_Transmit_FS>
 8007354:	e177      	b.n	8007646 <CDC_Receive_FS+0x3ce>
		}
	}
	else
	{
		switch(Buf[0])
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b53      	cmp	r3, #83	; 0x53
 800735c:	d008      	beq.n	8007370 <CDC_Receive_FS+0xf8>
 800735e:	2b53      	cmp	r3, #83	; 0x53
 8007360:	f300 8170 	bgt.w	8007644 <CDC_Receive_FS+0x3cc>
 8007364:	2b44      	cmp	r3, #68	; 0x44
 8007366:	d04d      	beq.n	8007404 <CDC_Receive_FS+0x18c>
 8007368:	2b49      	cmp	r3, #73	; 0x49
 800736a:	f000 80a9 	beq.w	80074c0 <CDC_Receive_FS+0x248>
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
				flash_cont = Flash_BaseAddr;
			break;

			default:
			break;
 800736e:	e169      	b.n	8007644 <CDC_Receive_FS+0x3cc>
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	4884      	ldr	r0, [pc, #528]	; (8007584 <CDC_Receive_FS+0x30c>)
 8007374:	f7fe fcf9 	bl	8005d6a <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007378:	4882      	ldr	r0, [pc, #520]	; (8007584 <CDC_Receive_FS+0x30c>)
 800737a:	f7fe fd3f 	bl	8005dfc <USBD_CDC_ReceivePacket>
				free(xUSBDownloadVar.DataBuffer);
 800737e:	4b82      	ldr	r3, [pc, #520]	; (8007588 <CDC_Receive_FS+0x310>)
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fe1e 	bl	8007fc4 <free>
				xUSBDownloadVar.Size = atoi((char*)&Buf[POS_TRANSFER_SIZE]);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3302      	adds	r3, #2
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fdc9 	bl	8007f24 <atoi>
 8007392:	4603      	mov	r3, r0
 8007394:	461a      	mov	r2, r3
 8007396:	4b7c      	ldr	r3, [pc, #496]	; (8007588 <CDC_Receive_FS+0x310>)
 8007398:	605a      	str	r2, [r3, #4]
				strncpy((char*)Tx_Buffer, "Size Received for Data Transfer: ", 36);
 800739a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800739e:	2224      	movs	r2, #36	; 0x24
 80073a0:	497e      	ldr	r1, [pc, #504]	; (800759c <CDC_Receive_FS+0x324>)
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 ff07 	bl	80081b6 <strncpy>
				itoa(xUSBDownloadVar.Size, (char*)Aux_Buffer,10);
 80073a8:	4b77      	ldr	r3, [pc, #476]	; (8007588 <CDC_Receive_FS+0x310>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073b2:	220a      	movs	r2, #10
 80073b4:	4619      	mov	r1, r3
 80073b6:	f000 fdfb 	bl	8007fb0 <itoa>
				strcat((char*)Tx_Buffer, (char*)Aux_Buffer);
 80073ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80073be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80073c2:	4611      	mov	r1, r2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 fed5 	bl	8008174 <strcat>
				strcat((char*)Tx_Buffer, "\n\0");
 80073ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7f8 fefa 	bl	80001c8 <strlen>
 80073d4:	4603      	mov	r3, r0
 80073d6:	461a      	mov	r2, r3
 80073d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80073dc:	4413      	add	r3, r2
 80073de:	4970      	ldr	r1, [pc, #448]	; (80075a0 <CDC_Receive_FS+0x328>)
 80073e0:	461a      	mov	r2, r3
 80073e2:	460b      	mov	r3, r1
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	8013      	strh	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 80073e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7f8 feeb 	bl	80001c8 <strlen>
 80073f2:	4603      	mov	r3, r0
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 f935 	bl	800766c <CDC_Transmit_FS>
			break;
 8007402:	e120      	b.n	8007646 <CDC_Receive_FS+0x3ce>
				if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "dataset", 7) == 0)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	3302      	adds	r3, #2
 8007408:	2207      	movs	r2, #7
 800740a:	4966      	ldr	r1, [pc, #408]	; (80075a4 <CDC_Receive_FS+0x32c>)
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fec0 	bl	8008192 <strncmp>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <CDC_Receive_FS+0x1b6>
					DataType = DATATYPE_DATASET;
 8007418:	4b63      	ldr	r3, [pc, #396]	; (80075a8 <CDC_Receive_FS+0x330>)
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]
					strncpy((char*)Tx_Buffer, "Data Type: dataset\n", 33);
 800741e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007422:	2221      	movs	r2, #33	; 0x21
 8007424:	4961      	ldr	r1, [pc, #388]	; (80075ac <CDC_Receive_FS+0x334>)
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fec5 	bl	80081b6 <strncpy>
 800742c:	e033      	b.n	8007496 <CDC_Receive_FS+0x21e>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "float model", 11) == 0)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3302      	adds	r3, #2
 8007432:	220b      	movs	r2, #11
 8007434:	495e      	ldr	r1, [pc, #376]	; (80075b0 <CDC_Receive_FS+0x338>)
 8007436:	4618      	mov	r0, r3
 8007438:	f000 feab 	bl	8008192 <strncmp>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <CDC_Receive_FS+0x1e0>
					DataType = DATATYPE_FLOATMODEL;
 8007442:	4b59      	ldr	r3, [pc, #356]	; (80075a8 <CDC_Receive_FS+0x330>)
 8007444:	2201      	movs	r2, #1
 8007446:	701a      	strb	r2, [r3, #0]
					strncpy((char*)Tx_Buffer, "Data Type: float model\n", 33);
 8007448:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800744c:	2221      	movs	r2, #33	; 0x21
 800744e:	4959      	ldr	r1, [pc, #356]	; (80075b4 <CDC_Receive_FS+0x33c>)
 8007450:	4618      	mov	r0, r3
 8007452:	f000 feb0 	bl	80081b6 <strncpy>
 8007456:	e01e      	b.n	8007496 <CDC_Receive_FS+0x21e>
				else if(strncmp((char*)&Buf[POS_TRANSFER_DATATYPE], "int model", 9) == 0)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3302      	adds	r3, #2
 800745c:	2209      	movs	r2, #9
 800745e:	4956      	ldr	r1, [pc, #344]	; (80075b8 <CDC_Receive_FS+0x340>)
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fe96 	bl	8008192 <strncmp>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10a      	bne.n	8007482 <CDC_Receive_FS+0x20a>
					DataType = DATATYPE_INTMODEL;
 800746c:	4b4e      	ldr	r3, [pc, #312]	; (80075a8 <CDC_Receive_FS+0x330>)
 800746e:	2202      	movs	r2, #2
 8007470:	701a      	strb	r2, [r3, #0]
					strncpy((char*)Tx_Buffer, "Data Type: int model\n", 33);
 8007472:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007476:	2221      	movs	r2, #33	; 0x21
 8007478:	4950      	ldr	r1, [pc, #320]	; (80075bc <CDC_Receive_FS+0x344>)
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fe9b 	bl	80081b6 <strncpy>
 8007480:	e009      	b.n	8007496 <CDC_Receive_FS+0x21e>
					DataType = 0xff;
 8007482:	4b49      	ldr	r3, [pc, #292]	; (80075a8 <CDC_Receive_FS+0x330>)
 8007484:	22ff      	movs	r2, #255	; 0xff
 8007486:	701a      	strb	r2, [r3, #0]
					strncpy((char*)Tx_Buffer, "Data Type: Error\n", 33);
 8007488:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800748c:	2221      	movs	r2, #33	; 0x21
 800748e:	494c      	ldr	r1, [pc, #304]	; (80075c0 <CDC_Receive_FS+0x348>)
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fe90 	bl	80081b6 <strncpy>
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	483a      	ldr	r0, [pc, #232]	; (8007584 <CDC_Receive_FS+0x30c>)
 800749a:	f7fe fc66 	bl	8005d6a <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800749e:	4839      	ldr	r0, [pc, #228]	; (8007584 <CDC_Receive_FS+0x30c>)
 80074a0:	f7fe fcac 	bl	8005dfc <USBD_CDC_ReceivePacket>
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 80074a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7f8 fe8d 	bl	80001c8 <strlen>
 80074ae:	4603      	mov	r3, r0
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80074b6:	4611      	mov	r1, r2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 f8d7 	bl	800766c <CDC_Transmit_FS>
			break;
 80074be:	e0c2      	b.n	8007646 <CDC_Receive_FS+0x3ce>
				xFlash_Erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]
				xFlash_Erase.NbSectors = 1;
 80074c4:	2301      	movs	r3, #1
 80074c6:	61bb      	str	r3, [r7, #24]
				xFlash_Erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80074c8:	2302      	movs	r3, #2
 80074ca:	61fb      	str	r3, [r7, #28]
				strncpy((char*)Tx_Buffer, "Erasing FLASH Sections...\n", 64);
 80074cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80074d0:	2240      	movs	r2, #64	; 0x40
 80074d2:	493c      	ldr	r1, [pc, #240]	; (80075c4 <CDC_Receive_FS+0x34c>)
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fe6e 	bl	80081b6 <strncpy>
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 80074da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80074de:	4618      	mov	r0, r3
 80074e0:	f7f8 fe72 	bl	80001c8 <strlen>
 80074e4:	4603      	mov	r3, r0
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80074ec:	4611      	mov	r1, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 f8bc 	bl	800766c <CDC_Transmit_FS>
				HAL_FLASH_Unlock();
 80074f4:	f7fa fa82 	bl	80019fc <HAL_FLASH_Unlock>
				switch(DataType)
 80074f8:	4b2b      	ldr	r3, [pc, #172]	; (80075a8 <CDC_Receive_FS+0x330>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d067      	beq.n	80075d0 <CDC_Receive_FS+0x358>
 8007500:	2b02      	cmp	r3, #2
 8007502:	dc73      	bgt.n	80075ec <CDC_Receive_FS+0x374>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <CDC_Receive_FS+0x296>
 8007508:	2b01      	cmp	r3, #1
 800750a:	d02c      	beq.n	8007566 <CDC_Receive_FS+0x2ee>
 800750c:	e06e      	b.n	80075ec <CDC_Receive_FS+0x374>
					xFlash_Erase.Sector = FLASH_SECTOR_6;
 800750e:	2306      	movs	r3, #6
 8007510:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 8007512:	f107 0220 	add.w	r2, r7, #32
 8007516:	f107 030c 	add.w	r3, r7, #12
 800751a:	4611      	mov	r1, r2
 800751c:	4618      	mov	r0, r3
 800751e:	f7fa fbcf 	bl	8001cc0 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_7;
 8007522:	2307      	movs	r3, #7
 8007524:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 8007526:	f107 0220 	add.w	r2, r7, #32
 800752a:	f107 030c 	add.w	r3, r7, #12
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f7fa fbc5 	bl	8001cc0 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_8;
 8007536:	2308      	movs	r3, #8
 8007538:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 800753a:	f107 0220 	add.w	r2, r7, #32
 800753e:	f107 030c 	add.w	r3, r7, #12
 8007542:	4611      	mov	r1, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f7fa fbbb 	bl	8001cc0 <HAL_FLASHEx_Erase>
					xFlash_Erase.Sector = FLASH_SECTOR_9;
 800754a:	2309      	movs	r3, #9
 800754c:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 800754e:	f107 0220 	add.w	r2, r7, #32
 8007552:	f107 030c 	add.w	r3, r7, #12
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f7fa fbb1 	bl	8001cc0 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_DATASET;
 800755e:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <CDC_Receive_FS+0x31c>)
 8007560:	4a19      	ldr	r2, [pc, #100]	; (80075c8 <CDC_Receive_FS+0x350>)
 8007562:	601a      	str	r2, [r3, #0]
					break;
 8007564:	e042      	b.n	80075ec <CDC_Receive_FS+0x374>
					xFlash_Erase.Sector = FLASH_SECTOR_10;
 8007566:	230a      	movs	r3, #10
 8007568:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 800756a:	f107 0220 	add.w	r2, r7, #32
 800756e:	f107 030c 	add.w	r3, r7, #12
 8007572:	4611      	mov	r1, r2
 8007574:	4618      	mov	r0, r3
 8007576:	f7fa fba3 	bl	8001cc0 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_FLOATMODEL;
 800757a:	4b06      	ldr	r3, [pc, #24]	; (8007594 <CDC_Receive_FS+0x31c>)
 800757c:	4a13      	ldr	r2, [pc, #76]	; (80075cc <CDC_Receive_FS+0x354>)
 800757e:	601a      	str	r2, [r3, #0]
					break;
 8007580:	e034      	b.n	80075ec <CDC_Receive_FS+0x374>
 8007582:	bf00      	nop
 8007584:	20000494 	.word	0x20000494
 8007588:	20000208 	.word	0x20000208
 800758c:	20000218 	.word	0x20000218
 8007590:	2000021c 	.word	0x2000021c
 8007594:	20000220 	.word	0x20000220
 8007598:	080084b8 	.word	0x080084b8
 800759c:	080084c8 	.word	0x080084c8
 80075a0:	080084ec 	.word	0x080084ec
 80075a4:	080084f0 	.word	0x080084f0
 80075a8:	20000224 	.word	0x20000224
 80075ac:	080084f8 	.word	0x080084f8
 80075b0:	0800850c 	.word	0x0800850c
 80075b4:	08008518 	.word	0x08008518
 80075b8:	08008530 	.word	0x08008530
 80075bc:	0800853c 	.word	0x0800853c
 80075c0:	08008554 	.word	0x08008554
 80075c4:	08008568 	.word	0x08008568
 80075c8:	08040000 	.word	0x08040000
 80075cc:	080c0000 	.word	0x080c0000
					xFlash_Erase.Sector = FLASH_SECTOR_11;
 80075d0:	230b      	movs	r3, #11
 80075d2:	617b      	str	r3, [r7, #20]
					HAL_FLASHEx_Erase(&xFlash_Erase, &SectorError);
 80075d4:	f107 0220 	add.w	r2, r7, #32
 80075d8:	f107 030c 	add.w	r3, r7, #12
 80075dc:	4611      	mov	r1, r2
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fa fb6e 	bl	8001cc0 <HAL_FLASHEx_Erase>
					Flash_BaseAddr = BASEADDR_INTMODEL;
 80075e4:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <CDC_Receive_FS+0x3d8>)
 80075e6:	4a1b      	ldr	r2, [pc, #108]	; (8007654 <CDC_Receive_FS+0x3dc>)
 80075e8:	601a      	str	r2, [r3, #0]
					break;
 80075ea:	bf00      	nop
				HAL_FLASH_Lock();
 80075ec:	f7fa fa28 	bl	8001a40 <HAL_FLASH_Lock>
				USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	4819      	ldr	r0, [pc, #100]	; (8007658 <CDC_Receive_FS+0x3e0>)
 80075f4:	f7fe fbb9 	bl	8005d6a <USBD_CDC_SetRxBuffer>
				USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075f8:	4817      	ldr	r0, [pc, #92]	; (8007658 <CDC_Receive_FS+0x3e0>)
 80075fa:	f7fe fbff 	bl	8005dfc <USBD_CDC_ReceivePacket>
				PacketCount					=	0;
 80075fe:	4b17      	ldr	r3, [pc, #92]	; (800765c <CDC_Receive_FS+0x3e4>)
 8007600:	2200      	movs	r2, #0
 8007602:	801a      	strh	r2, [r3, #0]
				xUSBDownloadVar.RxMode		=	true;
 8007604:	4b16      	ldr	r3, [pc, #88]	; (8007660 <CDC_Receive_FS+0x3e8>)
 8007606:	2201      	movs	r2, #1
 8007608:	701a      	strb	r2, [r3, #0]
				xUSBDownloadVar.DataType   	= Buf[POS_TRANSFER_DATATYPE];
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	789a      	ldrb	r2, [r3, #2]
 800760e:	4b14      	ldr	r3, [pc, #80]	; (8007660 <CDC_Receive_FS+0x3e8>)
 8007610:	721a      	strb	r2, [r3, #8]
				strncpy((char*)Tx_Buffer, "FLASH Sections Erased\n", 64);
 8007612:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007616:	2240      	movs	r2, #64	; 0x40
 8007618:	4912      	ldr	r1, [pc, #72]	; (8007664 <CDC_Receive_FS+0x3ec>)
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fdcb 	bl	80081b6 <strncpy>
				CDC_Transmit_FS((uint8_t*)Tx_Buffer, strlen((char*)Tx_Buffer));
 8007620:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007624:	4618      	mov	r0, r3
 8007626:	f7f8 fdcf 	bl	80001c8 <strlen>
 800762a:	4603      	mov	r3, r0
 800762c:	b29a      	uxth	r2, r3
 800762e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007632:	4611      	mov	r1, r2
 8007634:	4618      	mov	r0, r3
 8007636:	f000 f819 	bl	800766c <CDC_Transmit_FS>
				flash_cont = Flash_BaseAddr;
 800763a:	4b05      	ldr	r3, [pc, #20]	; (8007650 <CDC_Receive_FS+0x3d8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a0a      	ldr	r2, [pc, #40]	; (8007668 <CDC_Receive_FS+0x3f0>)
 8007640:	6013      	str	r3, [r2, #0]
			break;
 8007642:	e000      	b.n	8007646 <CDC_Receive_FS+0x3ce>
			break;
 8007644:	bf00      	nop
		}
	}
	return (USBD_OK);
 8007646:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007648:	4618      	mov	r0, r3
 800764a:	377c      	adds	r7, #124	; 0x7c
 800764c:	46bd      	mov	sp, r7
 800764e:	bd90      	pop	{r4, r7, pc}
 8007650:	20000220 	.word	0x20000220
 8007654:	080e0000 	.word	0x080e0000
 8007658:	20000494 	.word	0x20000494
 800765c:	2000021c 	.word	0x2000021c
 8007660:	20000208 	.word	0x20000208
 8007664:	08008584 	.word	0x08008584
 8007668:	20000218 	.word	0x20000218

0800766c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800767c:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <CDC_Transmit_FS+0x48>)
 800767e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007682:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800768e:	2301      	movs	r3, #1
 8007690:	e00b      	b.n	80076aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007692:	887b      	ldrh	r3, [r7, #2]
 8007694:	461a      	mov	r2, r3
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	4806      	ldr	r0, [pc, #24]	; (80076b4 <CDC_Transmit_FS+0x48>)
 800769a:	f7fe fb48 	bl	8005d2e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800769e:	4805      	ldr	r0, [pc, #20]	; (80076b4 <CDC_Transmit_FS+0x48>)
 80076a0:	f7fe fb7c 	bl	8005d9c <USBD_CDC_TransmitPacket>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000494 	.word	0x20000494

080076b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	4613      	mov	r3, r2
 80076c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80076ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
	...

080076dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2212      	movs	r2, #18
 80076ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076ee:	4b03      	ldr	r3, [pc, #12]	; (80076fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	2000014c 	.word	0x2000014c

08007700 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	6039      	str	r1, [r7, #0]
 800770a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2204      	movs	r2, #4
 8007710:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007712:	4b03      	ldr	r3, [pc, #12]	; (8007720 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	20000160 	.word	0x20000160

08007724 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	6039      	str	r1, [r7, #0]
 800772e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d105      	bne.n	8007742 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	4907      	ldr	r1, [pc, #28]	; (8007758 <USBD_FS_ProductStrDescriptor+0x34>)
 800773a:	4808      	ldr	r0, [pc, #32]	; (800775c <USBD_FS_ProductStrDescriptor+0x38>)
 800773c:	f7ff fc11 	bl	8006f62 <USBD_GetString>
 8007740:	e004      	b.n	800774c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	4904      	ldr	r1, [pc, #16]	; (8007758 <USBD_FS_ProductStrDescriptor+0x34>)
 8007746:	4805      	ldr	r0, [pc, #20]	; (800775c <USBD_FS_ProductStrDescriptor+0x38>)
 8007748:	f7ff fc0b 	bl	8006f62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800774c:	4b02      	ldr	r3, [pc, #8]	; (8007758 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20001764 	.word	0x20001764
 800775c:	0800859c 	.word	0x0800859c

08007760 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	6039      	str	r1, [r7, #0]
 800776a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	4904      	ldr	r1, [pc, #16]	; (8007780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007770:	4804      	ldr	r0, [pc, #16]	; (8007784 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007772:	f7ff fbf6 	bl	8006f62 <USBD_GetString>
  return USBD_StrDesc;
 8007776:	4b02      	ldr	r3, [pc, #8]	; (8007780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	20001764 	.word	0x20001764
 8007784:	080085b4 	.word	0x080085b4

08007788 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	4603      	mov	r3, r0
 8007790:	6039      	str	r1, [r7, #0]
 8007792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	221a      	movs	r2, #26
 8007798:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800779a:	f000 f843 	bl	8007824 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800779e:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000164 	.word	0x20000164

080077ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	6039      	str	r1, [r7, #0]
 80077b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d105      	bne.n	80077ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4907      	ldr	r1, [pc, #28]	; (80077e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077c2:	4808      	ldr	r0, [pc, #32]	; (80077e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077c4:	f7ff fbcd 	bl	8006f62 <USBD_GetString>
 80077c8:	e004      	b.n	80077d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	4904      	ldr	r1, [pc, #16]	; (80077e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077ce:	4805      	ldr	r0, [pc, #20]	; (80077e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077d0:	f7ff fbc7 	bl	8006f62 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077d4:	4b02      	ldr	r3, [pc, #8]	; (80077e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20001764 	.word	0x20001764
 80077e4:	080085c8 	.word	0x080085c8

080077e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	4603      	mov	r3, r0
 80077f0:	6039      	str	r1, [r7, #0]
 80077f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d105      	bne.n	8007806 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	4907      	ldr	r1, [pc, #28]	; (800781c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077fe:	4808      	ldr	r0, [pc, #32]	; (8007820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007800:	f7ff fbaf 	bl	8006f62 <USBD_GetString>
 8007804:	e004      	b.n	8007810 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	4904      	ldr	r1, [pc, #16]	; (800781c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800780a:	4805      	ldr	r0, [pc, #20]	; (8007820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800780c:	f7ff fba9 	bl	8006f62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007810:	4b02      	ldr	r3, [pc, #8]	; (800781c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20001764 	.word	0x20001764
 8007820:	080085d4 	.word	0x080085d4

08007824 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800782a:	4b0f      	ldr	r3, [pc, #60]	; (8007868 <Get_SerialNum+0x44>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007830:	4b0e      	ldr	r3, [pc, #56]	; (800786c <Get_SerialNum+0x48>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007836:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <Get_SerialNum+0x4c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d009      	beq.n	800785e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800784a:	2208      	movs	r2, #8
 800784c:	4909      	ldr	r1, [pc, #36]	; (8007874 <Get_SerialNum+0x50>)
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 f814 	bl	800787c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007854:	2204      	movs	r2, #4
 8007856:	4908      	ldr	r1, [pc, #32]	; (8007878 <Get_SerialNum+0x54>)
 8007858:	68b8      	ldr	r0, [r7, #8]
 800785a:	f000 f80f 	bl	800787c <IntToUnicode>
  }
}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	1fff7a10 	.word	0x1fff7a10
 800786c:	1fff7a14 	.word	0x1fff7a14
 8007870:	1fff7a18 	.word	0x1fff7a18
 8007874:	20000166 	.word	0x20000166
 8007878:	20000176 	.word	0x20000176

0800787c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	4613      	mov	r3, r2
 8007888:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800788e:	2300      	movs	r3, #0
 8007890:	75fb      	strb	r3, [r7, #23]
 8007892:	e027      	b.n	80078e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	0f1b      	lsrs	r3, r3, #28
 8007898:	2b09      	cmp	r3, #9
 800789a:	d80b      	bhi.n	80078b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	0f1b      	lsrs	r3, r3, #28
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	4619      	mov	r1, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	440b      	add	r3, r1
 80078ac:	3230      	adds	r2, #48	; 0x30
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	701a      	strb	r2, [r3, #0]
 80078b2:	e00a      	b.n	80078ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	0f1b      	lsrs	r3, r3, #28
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	7dfb      	ldrb	r3, [r7, #23]
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	4619      	mov	r1, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	440b      	add	r3, r1
 80078c4:	3237      	adds	r2, #55	; 0x37
 80078c6:	b2d2      	uxtb	r2, r2
 80078c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	3301      	adds	r3, #1
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	4413      	add	r3, r2
 80078da:	2200      	movs	r2, #0
 80078dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078de:	7dfb      	ldrb	r3, [r7, #23]
 80078e0:	3301      	adds	r3, #1
 80078e2:	75fb      	strb	r3, [r7, #23]
 80078e4:	7dfa      	ldrb	r2, [r7, #23]
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d3d3      	bcc.n	8007894 <IntToUnicode+0x18>
  }
}
 80078ec:	bf00      	nop
 80078ee:	bf00      	nop
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	; 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007904:	f107 0314 	add.w	r3, r7, #20
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	605a      	str	r2, [r3, #4]
 800790e:	609a      	str	r2, [r3, #8]
 8007910:	60da      	str	r2, [r3, #12]
 8007912:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800791c:	d13a      	bne.n	8007994 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	4b1e      	ldr	r3, [pc, #120]	; (800799c <HAL_PCD_MspInit+0xa0>)
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	4a1d      	ldr	r2, [pc, #116]	; (800799c <HAL_PCD_MspInit+0xa0>)
 8007928:	f043 0301 	orr.w	r3, r3, #1
 800792c:	6313      	str	r3, [r2, #48]	; 0x30
 800792e:	4b1b      	ldr	r3, [pc, #108]	; (800799c <HAL_PCD_MspInit+0xa0>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800793a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800793e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007940:	2302      	movs	r3, #2
 8007942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007944:	2300      	movs	r3, #0
 8007946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007948:	2303      	movs	r3, #3
 800794a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800794c:	230a      	movs	r3, #10
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007950:	f107 0314 	add.w	r3, r7, #20
 8007954:	4619      	mov	r1, r3
 8007956:	4812      	ldr	r0, [pc, #72]	; (80079a0 <HAL_PCD_MspInit+0xa4>)
 8007958:	f7fa fad4 	bl	8001f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800795c:	4b0f      	ldr	r3, [pc, #60]	; (800799c <HAL_PCD_MspInit+0xa0>)
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	4a0e      	ldr	r2, [pc, #56]	; (800799c <HAL_PCD_MspInit+0xa0>)
 8007962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007966:	6353      	str	r3, [r2, #52]	; 0x34
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	4b0b      	ldr	r3, [pc, #44]	; (800799c <HAL_PCD_MspInit+0xa0>)
 800796e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007970:	4a0a      	ldr	r2, [pc, #40]	; (800799c <HAL_PCD_MspInit+0xa0>)
 8007972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007976:	6453      	str	r3, [r2, #68]	; 0x44
 8007978:	4b08      	ldr	r3, [pc, #32]	; (800799c <HAL_PCD_MspInit+0xa0>)
 800797a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007984:	2200      	movs	r2, #0
 8007986:	2100      	movs	r1, #0
 8007988:	2043      	movs	r0, #67	; 0x43
 800798a:	f7f9 ffac 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800798e:	2043      	movs	r0, #67	; 0x43
 8007990:	f7f9 ffc5 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007994:	bf00      	nop
 8007996:	3728      	adds	r7, #40	; 0x28
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	40023800 	.word	0x40023800
 80079a0:	40020000 	.word	0x40020000

080079a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f7fe faea 	bl	8005f94 <USBD_LL_SetupStage>
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079da:	78fa      	ldrb	r2, [r7, #3]
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	4619      	mov	r1, r3
 80079f2:	f7fe fb24 	bl	800603e <USBD_LL_DataOutStage>
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a10:	78fa      	ldrb	r2, [r7, #3]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	3348      	adds	r3, #72	; 0x48
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	4619      	mov	r1, r3
 8007a26:	f7fe fb6d 	bl	8006104 <USBD_LL_DataInStage>
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe fc81 	bl	8006348 <USBD_LL_SOF>
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a56:	2301      	movs	r3, #1
 8007a58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d102      	bne.n	8007a68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
 8007a66:	e008      	b.n	8007a7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d102      	bne.n	8007a76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a70:	2301      	movs	r3, #1
 8007a72:	73fb      	strb	r3, [r7, #15]
 8007a74:	e001      	b.n	8007a7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a76:	f7f9 fcd1 	bl	800141c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a80:	7bfa      	ldrb	r2, [r7, #15]
 8007a82:	4611      	mov	r1, r2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fe fc21 	bl	80062cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe fbcd 	bl	8006230 <USBD_LL_Reset>
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fc1c 	bl	80062ec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ac6:	f043 0301 	orr.w	r3, r3, #1
 8007aca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ad4:	4b04      	ldr	r3, [pc, #16]	; (8007ae8 <HAL_PCD_SuspendCallback+0x48>)
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	4a03      	ldr	r2, [pc, #12]	; (8007ae8 <HAL_PCD_SuspendCallback+0x48>)
 8007ada:	f043 0306 	orr.w	r3, r3, #6
 8007ade:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	e000ed00 	.word	0xe000ed00

08007aec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe fc0c 	bl	8006318 <USBD_LL_Resume>
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fc5a 	bl	80063d8 <USBD_LL_IsoOUTIncomplete>
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fc22 	bl	800638c <USBD_LL_IsoINIncomplete>
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fc60 	bl	8006424 <USBD_LL_DevConnected>
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe fc5d 	bl	800643a <USBD_LL_DevDisconnected>
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d13c      	bne.n	8007c12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b98:	4a20      	ldr	r2, [pc, #128]	; (8007c1c <USBD_LL_Init+0x94>)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a1e      	ldr	r2, [pc, #120]	; (8007c1c <USBD_LL_Init+0x94>)
 8007ba4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ba8:	4b1c      	ldr	r3, [pc, #112]	; (8007c1c <USBD_LL_Init+0x94>)
 8007baa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007bb0:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bb2:	2204      	movs	r2, #4
 8007bb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bb6:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bb8:	2202      	movs	r2, #2
 8007bba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bbc:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bc2:	4b16      	ldr	r3, [pc, #88]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bc8:	4b14      	ldr	r3, [pc, #80]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bce:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bd4:	4b11      	ldr	r3, [pc, #68]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007bda:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007be0:	4b0e      	ldr	r3, [pc, #56]	; (8007c1c <USBD_LL_Init+0x94>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007be6:	480d      	ldr	r0, [pc, #52]	; (8007c1c <USBD_LL_Init+0x94>)
 8007be8:	f7fa fb28 	bl	800223c <HAL_PCD_Init>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bf2:	f7f9 fc13 	bl	800141c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bf6:	2180      	movs	r1, #128	; 0x80
 8007bf8:	4808      	ldr	r0, [pc, #32]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bfa:	f7fb fc86 	bl	800350a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bfe:	2240      	movs	r2, #64	; 0x40
 8007c00:	2100      	movs	r1, #0
 8007c02:	4806      	ldr	r0, [pc, #24]	; (8007c1c <USBD_LL_Init+0x94>)
 8007c04:	f7fb fc3a 	bl	800347c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c08:	2280      	movs	r2, #128	; 0x80
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	4803      	ldr	r0, [pc, #12]	; (8007c1c <USBD_LL_Init+0x94>)
 8007c0e:	f7fb fc35 	bl	800347c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20001964 	.word	0x20001964

08007c20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fa fc1d 	bl	8002476 <HAL_PCD_Start>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 f942 	bl	8007ecc <USBD_Get_USB_Status>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	4608      	mov	r0, r1
 8007c60:	4611      	mov	r1, r2
 8007c62:	461a      	mov	r2, r3
 8007c64:	4603      	mov	r3, r0
 8007c66:	70fb      	strb	r3, [r7, #3]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70bb      	strb	r3, [r7, #2]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c7e:	78bb      	ldrb	r3, [r7, #2]
 8007c80:	883a      	ldrh	r2, [r7, #0]
 8007c82:	78f9      	ldrb	r1, [r7, #3]
 8007c84:	f7fb f801 	bl	8002c8a <HAL_PCD_EP_Open>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 f91c 	bl	8007ecc <USBD_Get_USB_Status>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cbc:	78fa      	ldrb	r2, [r7, #3]
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fb f84a 	bl	8002d5a <HAL_PCD_EP_Close>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f8fd 	bl	8007ecc <USBD_Get_USB_Status>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cfa:	78fa      	ldrb	r2, [r7, #3]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fb f922 	bl	8002f48 <HAL_PCD_EP_SetStall>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 f8de 	bl	8007ecc <USBD_Get_USB_Status>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d38:	78fa      	ldrb	r2, [r7, #3]
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fb f967 	bl	8003010 <HAL_PCD_EP_ClrStall>
 8007d42:	4603      	mov	r3, r0
 8007d44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 f8bf 	bl	8007ecc <USBD_Get_USB_Status>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	da0b      	bge.n	8007d90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	4613      	mov	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	333e      	adds	r3, #62	; 0x3e
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	e00b      	b.n	8007da8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	1a9b      	subs	r3, r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007da6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dce:	78fa      	ldrb	r2, [r7, #3]
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fa ff34 	bl	8002c40 <HAL_PCD_SetAddress>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 f874 	bl	8007ecc <USBD_Get_USB_Status>
 8007de4:	4603      	mov	r3, r0
 8007de6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b086      	sub	sp, #24
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e10:	7af9      	ldrb	r1, [r7, #11]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	f7fb f84d 	bl	8002eb4 <HAL_PCD_EP_Transmit>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 f853 	bl	8007ecc <USBD_Get_USB_Status>
 8007e26:	4603      	mov	r3, r0
 8007e28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	607a      	str	r2, [r7, #4]
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	460b      	mov	r3, r1
 8007e42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e52:	7af9      	ldrb	r1, [r7, #11]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	f7fa ffc9 	bl	8002dee <HAL_PCD_EP_Receive>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 f832 	bl	8007ecc <USBD_Get_USB_Status>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e88:	78fa      	ldrb	r2, [r7, #3]
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fa fff9 	bl	8002e84 <HAL_PCD_EP_GetRxCount>
 8007e92:	4603      	mov	r3, r0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ea4:	4b03      	ldr	r3, [pc, #12]	; (8007eb4 <USBD_static_malloc+0x18>)
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	20000228 	.word	0x20000228

08007eb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]

}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007eda:	79fb      	ldrb	r3, [r7, #7]
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d817      	bhi.n	8007f10 <USBD_Get_USB_Status+0x44>
 8007ee0:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <USBD_Get_USB_Status+0x1c>)
 8007ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee6:	bf00      	nop
 8007ee8:	08007ef9 	.word	0x08007ef9
 8007eec:	08007eff 	.word	0x08007eff
 8007ef0:	08007f05 	.word	0x08007f05
 8007ef4:	08007f0b 	.word	0x08007f0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
    break;
 8007efc:	e00b      	b.n	8007f16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007efe:	2303      	movs	r3, #3
 8007f00:	73fb      	strb	r3, [r7, #15]
    break;
 8007f02:	e008      	b.n	8007f16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f04:	2301      	movs	r3, #1
 8007f06:	73fb      	strb	r3, [r7, #15]
    break;
 8007f08:	e005      	b.n	8007f16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f0e:	e002      	b.n	8007f16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f10:	2303      	movs	r3, #3
 8007f12:	73fb      	strb	r3, [r7, #15]
    break;
 8007f14:	bf00      	nop
  }
  return usb_status;
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <atoi>:
 8007f24:	220a      	movs	r2, #10
 8007f26:	2100      	movs	r1, #0
 8007f28:	f000 b9dc 	b.w	80082e4 <strtol>

08007f2c <__errno>:
 8007f2c:	4b01      	ldr	r3, [pc, #4]	; (8007f34 <__errno+0x8>)
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	20000180 	.word	0x20000180

08007f38 <__libc_init_array>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	4d0d      	ldr	r5, [pc, #52]	; (8007f70 <__libc_init_array+0x38>)
 8007f3c:	4c0d      	ldr	r4, [pc, #52]	; (8007f74 <__libc_init_array+0x3c>)
 8007f3e:	1b64      	subs	r4, r4, r5
 8007f40:	10a4      	asrs	r4, r4, #2
 8007f42:	2600      	movs	r6, #0
 8007f44:	42a6      	cmp	r6, r4
 8007f46:	d109      	bne.n	8007f5c <__libc_init_array+0x24>
 8007f48:	4d0b      	ldr	r5, [pc, #44]	; (8007f78 <__libc_init_array+0x40>)
 8007f4a:	4c0c      	ldr	r4, [pc, #48]	; (8007f7c <__libc_init_array+0x44>)
 8007f4c:	f000 faa8 	bl	80084a0 <_init>
 8007f50:	1b64      	subs	r4, r4, r5
 8007f52:	10a4      	asrs	r4, r4, #2
 8007f54:	2600      	movs	r6, #0
 8007f56:	42a6      	cmp	r6, r4
 8007f58:	d105      	bne.n	8007f66 <__libc_init_array+0x2e>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f60:	4798      	blx	r3
 8007f62:	3601      	adds	r6, #1
 8007f64:	e7ee      	b.n	8007f44 <__libc_init_array+0xc>
 8007f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6a:	4798      	blx	r3
 8007f6c:	3601      	adds	r6, #1
 8007f6e:	e7f2      	b.n	8007f56 <__libc_init_array+0x1e>
 8007f70:	08008724 	.word	0x08008724
 8007f74:	08008724 	.word	0x08008724
 8007f78:	08008724 	.word	0x08008724
 8007f7c:	08008728 	.word	0x08008728

08007f80 <__itoa>:
 8007f80:	1e93      	subs	r3, r2, #2
 8007f82:	2b22      	cmp	r3, #34	; 0x22
 8007f84:	b510      	push	{r4, lr}
 8007f86:	460c      	mov	r4, r1
 8007f88:	d904      	bls.n	8007f94 <__itoa+0x14>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	700b      	strb	r3, [r1, #0]
 8007f8e:	461c      	mov	r4, r3
 8007f90:	4620      	mov	r0, r4
 8007f92:	bd10      	pop	{r4, pc}
 8007f94:	2a0a      	cmp	r2, #10
 8007f96:	d109      	bne.n	8007fac <__itoa+0x2c>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	da07      	bge.n	8007fac <__itoa+0x2c>
 8007f9c:	232d      	movs	r3, #45	; 0x2d
 8007f9e:	700b      	strb	r3, [r1, #0]
 8007fa0:	4240      	negs	r0, r0
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4421      	add	r1, r4
 8007fa6:	f000 f9a7 	bl	80082f8 <__utoa>
 8007faa:	e7f1      	b.n	8007f90 <__itoa+0x10>
 8007fac:	2100      	movs	r1, #0
 8007fae:	e7f9      	b.n	8007fa4 <__itoa+0x24>

08007fb0 <itoa>:
 8007fb0:	f7ff bfe6 	b.w	8007f80 <__itoa>

08007fb4 <malloc>:
 8007fb4:	4b02      	ldr	r3, [pc, #8]	; (8007fc0 <malloc+0xc>)
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	f000 b871 	b.w	80080a0 <_malloc_r>
 8007fbe:	bf00      	nop
 8007fc0:	20000180 	.word	0x20000180

08007fc4 <free>:
 8007fc4:	4b02      	ldr	r3, [pc, #8]	; (8007fd0 <free+0xc>)
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	f000 b819 	b.w	8008000 <_free_r>
 8007fce:	bf00      	nop
 8007fd0:	20000180 	.word	0x20000180

08007fd4 <memcpy>:
 8007fd4:	440a      	add	r2, r1
 8007fd6:	4291      	cmp	r1, r2
 8007fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fdc:	d100      	bne.n	8007fe0 <memcpy+0xc>
 8007fde:	4770      	bx	lr
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fea:	4291      	cmp	r1, r2
 8007fec:	d1f9      	bne.n	8007fe2 <memcpy+0xe>
 8007fee:	bd10      	pop	{r4, pc}

08007ff0 <memset>:
 8007ff0:	4402      	add	r2, r0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d100      	bne.n	8007ffa <memset+0xa>
 8007ff8:	4770      	bx	lr
 8007ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8007ffe:	e7f9      	b.n	8007ff4 <memset+0x4>

08008000 <_free_r>:
 8008000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008002:	2900      	cmp	r1, #0
 8008004:	d048      	beq.n	8008098 <_free_r+0x98>
 8008006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800800a:	9001      	str	r0, [sp, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	f1a1 0404 	sub.w	r4, r1, #4
 8008012:	bfb8      	it	lt
 8008014:	18e4      	addlt	r4, r4, r3
 8008016:	f000 f9b1 	bl	800837c <__malloc_lock>
 800801a:	4a20      	ldr	r2, [pc, #128]	; (800809c <_free_r+0x9c>)
 800801c:	9801      	ldr	r0, [sp, #4]
 800801e:	6813      	ldr	r3, [r2, #0]
 8008020:	4615      	mov	r5, r2
 8008022:	b933      	cbnz	r3, 8008032 <_free_r+0x32>
 8008024:	6063      	str	r3, [r4, #4]
 8008026:	6014      	str	r4, [r2, #0]
 8008028:	b003      	add	sp, #12
 800802a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800802e:	f000 b9ab 	b.w	8008388 <__malloc_unlock>
 8008032:	42a3      	cmp	r3, r4
 8008034:	d90b      	bls.n	800804e <_free_r+0x4e>
 8008036:	6821      	ldr	r1, [r4, #0]
 8008038:	1862      	adds	r2, r4, r1
 800803a:	4293      	cmp	r3, r2
 800803c:	bf04      	itt	eq
 800803e:	681a      	ldreq	r2, [r3, #0]
 8008040:	685b      	ldreq	r3, [r3, #4]
 8008042:	6063      	str	r3, [r4, #4]
 8008044:	bf04      	itt	eq
 8008046:	1852      	addeq	r2, r2, r1
 8008048:	6022      	streq	r2, [r4, #0]
 800804a:	602c      	str	r4, [r5, #0]
 800804c:	e7ec      	b.n	8008028 <_free_r+0x28>
 800804e:	461a      	mov	r2, r3
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	b10b      	cbz	r3, 8008058 <_free_r+0x58>
 8008054:	42a3      	cmp	r3, r4
 8008056:	d9fa      	bls.n	800804e <_free_r+0x4e>
 8008058:	6811      	ldr	r1, [r2, #0]
 800805a:	1855      	adds	r5, r2, r1
 800805c:	42a5      	cmp	r5, r4
 800805e:	d10b      	bne.n	8008078 <_free_r+0x78>
 8008060:	6824      	ldr	r4, [r4, #0]
 8008062:	4421      	add	r1, r4
 8008064:	1854      	adds	r4, r2, r1
 8008066:	42a3      	cmp	r3, r4
 8008068:	6011      	str	r1, [r2, #0]
 800806a:	d1dd      	bne.n	8008028 <_free_r+0x28>
 800806c:	681c      	ldr	r4, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	6053      	str	r3, [r2, #4]
 8008072:	4421      	add	r1, r4
 8008074:	6011      	str	r1, [r2, #0]
 8008076:	e7d7      	b.n	8008028 <_free_r+0x28>
 8008078:	d902      	bls.n	8008080 <_free_r+0x80>
 800807a:	230c      	movs	r3, #12
 800807c:	6003      	str	r3, [r0, #0]
 800807e:	e7d3      	b.n	8008028 <_free_r+0x28>
 8008080:	6825      	ldr	r5, [r4, #0]
 8008082:	1961      	adds	r1, r4, r5
 8008084:	428b      	cmp	r3, r1
 8008086:	bf04      	itt	eq
 8008088:	6819      	ldreq	r1, [r3, #0]
 800808a:	685b      	ldreq	r3, [r3, #4]
 800808c:	6063      	str	r3, [r4, #4]
 800808e:	bf04      	itt	eq
 8008090:	1949      	addeq	r1, r1, r5
 8008092:	6021      	streq	r1, [r4, #0]
 8008094:	6054      	str	r4, [r2, #4]
 8008096:	e7c7      	b.n	8008028 <_free_r+0x28>
 8008098:	b003      	add	sp, #12
 800809a:	bd30      	pop	{r4, r5, pc}
 800809c:	20000448 	.word	0x20000448

080080a0 <_malloc_r>:
 80080a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a2:	1ccd      	adds	r5, r1, #3
 80080a4:	f025 0503 	bic.w	r5, r5, #3
 80080a8:	3508      	adds	r5, #8
 80080aa:	2d0c      	cmp	r5, #12
 80080ac:	bf38      	it	cc
 80080ae:	250c      	movcc	r5, #12
 80080b0:	2d00      	cmp	r5, #0
 80080b2:	4606      	mov	r6, r0
 80080b4:	db01      	blt.n	80080ba <_malloc_r+0x1a>
 80080b6:	42a9      	cmp	r1, r5
 80080b8:	d903      	bls.n	80080c2 <_malloc_r+0x22>
 80080ba:	230c      	movs	r3, #12
 80080bc:	6033      	str	r3, [r6, #0]
 80080be:	2000      	movs	r0, #0
 80080c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080c2:	f000 f95b 	bl	800837c <__malloc_lock>
 80080c6:	4921      	ldr	r1, [pc, #132]	; (800814c <_malloc_r+0xac>)
 80080c8:	680a      	ldr	r2, [r1, #0]
 80080ca:	4614      	mov	r4, r2
 80080cc:	b99c      	cbnz	r4, 80080f6 <_malloc_r+0x56>
 80080ce:	4f20      	ldr	r7, [pc, #128]	; (8008150 <_malloc_r+0xb0>)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	b923      	cbnz	r3, 80080de <_malloc_r+0x3e>
 80080d4:	4621      	mov	r1, r4
 80080d6:	4630      	mov	r0, r6
 80080d8:	f000 f83c 	bl	8008154 <_sbrk_r>
 80080dc:	6038      	str	r0, [r7, #0]
 80080de:	4629      	mov	r1, r5
 80080e0:	4630      	mov	r0, r6
 80080e2:	f000 f837 	bl	8008154 <_sbrk_r>
 80080e6:	1c43      	adds	r3, r0, #1
 80080e8:	d123      	bne.n	8008132 <_malloc_r+0x92>
 80080ea:	230c      	movs	r3, #12
 80080ec:	6033      	str	r3, [r6, #0]
 80080ee:	4630      	mov	r0, r6
 80080f0:	f000 f94a 	bl	8008388 <__malloc_unlock>
 80080f4:	e7e3      	b.n	80080be <_malloc_r+0x1e>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	1b5b      	subs	r3, r3, r5
 80080fa:	d417      	bmi.n	800812c <_malloc_r+0x8c>
 80080fc:	2b0b      	cmp	r3, #11
 80080fe:	d903      	bls.n	8008108 <_malloc_r+0x68>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	441c      	add	r4, r3
 8008104:	6025      	str	r5, [r4, #0]
 8008106:	e004      	b.n	8008112 <_malloc_r+0x72>
 8008108:	6863      	ldr	r3, [r4, #4]
 800810a:	42a2      	cmp	r2, r4
 800810c:	bf0c      	ite	eq
 800810e:	600b      	streq	r3, [r1, #0]
 8008110:	6053      	strne	r3, [r2, #4]
 8008112:	4630      	mov	r0, r6
 8008114:	f000 f938 	bl	8008388 <__malloc_unlock>
 8008118:	f104 000b 	add.w	r0, r4, #11
 800811c:	1d23      	adds	r3, r4, #4
 800811e:	f020 0007 	bic.w	r0, r0, #7
 8008122:	1ac2      	subs	r2, r0, r3
 8008124:	d0cc      	beq.n	80080c0 <_malloc_r+0x20>
 8008126:	1a1b      	subs	r3, r3, r0
 8008128:	50a3      	str	r3, [r4, r2]
 800812a:	e7c9      	b.n	80080c0 <_malloc_r+0x20>
 800812c:	4622      	mov	r2, r4
 800812e:	6864      	ldr	r4, [r4, #4]
 8008130:	e7cc      	b.n	80080cc <_malloc_r+0x2c>
 8008132:	1cc4      	adds	r4, r0, #3
 8008134:	f024 0403 	bic.w	r4, r4, #3
 8008138:	42a0      	cmp	r0, r4
 800813a:	d0e3      	beq.n	8008104 <_malloc_r+0x64>
 800813c:	1a21      	subs	r1, r4, r0
 800813e:	4630      	mov	r0, r6
 8008140:	f000 f808 	bl	8008154 <_sbrk_r>
 8008144:	3001      	adds	r0, #1
 8008146:	d1dd      	bne.n	8008104 <_malloc_r+0x64>
 8008148:	e7cf      	b.n	80080ea <_malloc_r+0x4a>
 800814a:	bf00      	nop
 800814c:	20000448 	.word	0x20000448
 8008150:	2000044c 	.word	0x2000044c

08008154 <_sbrk_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d06      	ldr	r5, [pc, #24]	; (8008170 <_sbrk_r+0x1c>)
 8008158:	2300      	movs	r3, #0
 800815a:	4604      	mov	r4, r0
 800815c:	4608      	mov	r0, r1
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	f7f9 f9da 	bl	8001518 <_sbrk>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_sbrk_r+0x1a>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_sbrk_r+0x1a>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	20001d6c 	.word	0x20001d6c

08008174 <strcat>:
 8008174:	b510      	push	{r4, lr}
 8008176:	4602      	mov	r2, r0
 8008178:	7814      	ldrb	r4, [r2, #0]
 800817a:	4613      	mov	r3, r2
 800817c:	3201      	adds	r2, #1
 800817e:	2c00      	cmp	r4, #0
 8008180:	d1fa      	bne.n	8008178 <strcat+0x4>
 8008182:	3b01      	subs	r3, #1
 8008184:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008188:	f803 2f01 	strb.w	r2, [r3, #1]!
 800818c:	2a00      	cmp	r2, #0
 800818e:	d1f9      	bne.n	8008184 <strcat+0x10>
 8008190:	bd10      	pop	{r4, pc}

08008192 <strncmp>:
 8008192:	b510      	push	{r4, lr}
 8008194:	b16a      	cbz	r2, 80081b2 <strncmp+0x20>
 8008196:	3901      	subs	r1, #1
 8008198:	1884      	adds	r4, r0, r2
 800819a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800819e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d103      	bne.n	80081ae <strncmp+0x1c>
 80081a6:	42a0      	cmp	r0, r4
 80081a8:	d001      	beq.n	80081ae <strncmp+0x1c>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1f5      	bne.n	800819a <strncmp+0x8>
 80081ae:	1a98      	subs	r0, r3, r2
 80081b0:	bd10      	pop	{r4, pc}
 80081b2:	4610      	mov	r0, r2
 80081b4:	e7fc      	b.n	80081b0 <strncmp+0x1e>

080081b6 <strncpy>:
 80081b6:	b510      	push	{r4, lr}
 80081b8:	3901      	subs	r1, #1
 80081ba:	4603      	mov	r3, r0
 80081bc:	b132      	cbz	r2, 80081cc <strncpy+0x16>
 80081be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80081c2:	f803 4b01 	strb.w	r4, [r3], #1
 80081c6:	3a01      	subs	r2, #1
 80081c8:	2c00      	cmp	r4, #0
 80081ca:	d1f7      	bne.n	80081bc <strncpy+0x6>
 80081cc:	441a      	add	r2, r3
 80081ce:	2100      	movs	r1, #0
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d100      	bne.n	80081d6 <strncpy+0x20>
 80081d4:	bd10      	pop	{r4, pc}
 80081d6:	f803 1b01 	strb.w	r1, [r3], #1
 80081da:	e7f9      	b.n	80081d0 <strncpy+0x1a>

080081dc <_strtol_l.isra.0>:
 80081dc:	2b01      	cmp	r3, #1
 80081de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e2:	d001      	beq.n	80081e8 <_strtol_l.isra.0+0xc>
 80081e4:	2b24      	cmp	r3, #36	; 0x24
 80081e6:	d906      	bls.n	80081f6 <_strtol_l.isra.0+0x1a>
 80081e8:	f7ff fea0 	bl	8007f2c <__errno>
 80081ec:	2316      	movs	r3, #22
 80081ee:	6003      	str	r3, [r0, #0]
 80081f0:	2000      	movs	r0, #0
 80081f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f6:	4f3a      	ldr	r7, [pc, #232]	; (80082e0 <_strtol_l.isra.0+0x104>)
 80081f8:	468e      	mov	lr, r1
 80081fa:	4676      	mov	r6, lr
 80081fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008200:	5de5      	ldrb	r5, [r4, r7]
 8008202:	f015 0508 	ands.w	r5, r5, #8
 8008206:	d1f8      	bne.n	80081fa <_strtol_l.isra.0+0x1e>
 8008208:	2c2d      	cmp	r4, #45	; 0x2d
 800820a:	d134      	bne.n	8008276 <_strtol_l.isra.0+0x9a>
 800820c:	f89e 4000 	ldrb.w	r4, [lr]
 8008210:	f04f 0801 	mov.w	r8, #1
 8008214:	f106 0e02 	add.w	lr, r6, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d05c      	beq.n	80082d6 <_strtol_l.isra.0+0xfa>
 800821c:	2b10      	cmp	r3, #16
 800821e:	d10c      	bne.n	800823a <_strtol_l.isra.0+0x5e>
 8008220:	2c30      	cmp	r4, #48	; 0x30
 8008222:	d10a      	bne.n	800823a <_strtol_l.isra.0+0x5e>
 8008224:	f89e 4000 	ldrb.w	r4, [lr]
 8008228:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800822c:	2c58      	cmp	r4, #88	; 0x58
 800822e:	d14d      	bne.n	80082cc <_strtol_l.isra.0+0xf0>
 8008230:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008234:	2310      	movs	r3, #16
 8008236:	f10e 0e02 	add.w	lr, lr, #2
 800823a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800823e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008242:	2600      	movs	r6, #0
 8008244:	fbbc f9f3 	udiv	r9, ip, r3
 8008248:	4635      	mov	r5, r6
 800824a:	fb03 ca19 	mls	sl, r3, r9, ip
 800824e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008252:	2f09      	cmp	r7, #9
 8008254:	d818      	bhi.n	8008288 <_strtol_l.isra.0+0xac>
 8008256:	463c      	mov	r4, r7
 8008258:	42a3      	cmp	r3, r4
 800825a:	dd24      	ble.n	80082a6 <_strtol_l.isra.0+0xca>
 800825c:	2e00      	cmp	r6, #0
 800825e:	db1f      	blt.n	80082a0 <_strtol_l.isra.0+0xc4>
 8008260:	45a9      	cmp	r9, r5
 8008262:	d31d      	bcc.n	80082a0 <_strtol_l.isra.0+0xc4>
 8008264:	d101      	bne.n	800826a <_strtol_l.isra.0+0x8e>
 8008266:	45a2      	cmp	sl, r4
 8008268:	db1a      	blt.n	80082a0 <_strtol_l.isra.0+0xc4>
 800826a:	fb05 4503 	mla	r5, r5, r3, r4
 800826e:	2601      	movs	r6, #1
 8008270:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008274:	e7eb      	b.n	800824e <_strtol_l.isra.0+0x72>
 8008276:	2c2b      	cmp	r4, #43	; 0x2b
 8008278:	bf08      	it	eq
 800827a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800827e:	46a8      	mov	r8, r5
 8008280:	bf08      	it	eq
 8008282:	f106 0e02 	addeq.w	lr, r6, #2
 8008286:	e7c7      	b.n	8008218 <_strtol_l.isra.0+0x3c>
 8008288:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800828c:	2f19      	cmp	r7, #25
 800828e:	d801      	bhi.n	8008294 <_strtol_l.isra.0+0xb8>
 8008290:	3c37      	subs	r4, #55	; 0x37
 8008292:	e7e1      	b.n	8008258 <_strtol_l.isra.0+0x7c>
 8008294:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008298:	2f19      	cmp	r7, #25
 800829a:	d804      	bhi.n	80082a6 <_strtol_l.isra.0+0xca>
 800829c:	3c57      	subs	r4, #87	; 0x57
 800829e:	e7db      	b.n	8008258 <_strtol_l.isra.0+0x7c>
 80082a0:	f04f 36ff 	mov.w	r6, #4294967295
 80082a4:	e7e4      	b.n	8008270 <_strtol_l.isra.0+0x94>
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	da05      	bge.n	80082b6 <_strtol_l.isra.0+0xda>
 80082aa:	2322      	movs	r3, #34	; 0x22
 80082ac:	6003      	str	r3, [r0, #0]
 80082ae:	4665      	mov	r5, ip
 80082b0:	b942      	cbnz	r2, 80082c4 <_strtol_l.isra.0+0xe8>
 80082b2:	4628      	mov	r0, r5
 80082b4:	e79d      	b.n	80081f2 <_strtol_l.isra.0+0x16>
 80082b6:	f1b8 0f00 	cmp.w	r8, #0
 80082ba:	d000      	beq.n	80082be <_strtol_l.isra.0+0xe2>
 80082bc:	426d      	negs	r5, r5
 80082be:	2a00      	cmp	r2, #0
 80082c0:	d0f7      	beq.n	80082b2 <_strtol_l.isra.0+0xd6>
 80082c2:	b10e      	cbz	r6, 80082c8 <_strtol_l.isra.0+0xec>
 80082c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80082c8:	6011      	str	r1, [r2, #0]
 80082ca:	e7f2      	b.n	80082b2 <_strtol_l.isra.0+0xd6>
 80082cc:	2430      	movs	r4, #48	; 0x30
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1b3      	bne.n	800823a <_strtol_l.isra.0+0x5e>
 80082d2:	2308      	movs	r3, #8
 80082d4:	e7b1      	b.n	800823a <_strtol_l.isra.0+0x5e>
 80082d6:	2c30      	cmp	r4, #48	; 0x30
 80082d8:	d0a4      	beq.n	8008224 <_strtol_l.isra.0+0x48>
 80082da:	230a      	movs	r3, #10
 80082dc:	e7ad      	b.n	800823a <_strtol_l.isra.0+0x5e>
 80082de:	bf00      	nop
 80082e0:	0800861a 	.word	0x0800861a

080082e4 <strtol>:
 80082e4:	4613      	mov	r3, r2
 80082e6:	460a      	mov	r2, r1
 80082e8:	4601      	mov	r1, r0
 80082ea:	4802      	ldr	r0, [pc, #8]	; (80082f4 <strtol+0x10>)
 80082ec:	6800      	ldr	r0, [r0, #0]
 80082ee:	f7ff bf75 	b.w	80081dc <_strtol_l.isra.0>
 80082f2:	bf00      	nop
 80082f4:	20000180 	.word	0x20000180

080082f8 <__utoa>:
 80082f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082fa:	4c1f      	ldr	r4, [pc, #124]	; (8008378 <__utoa+0x80>)
 80082fc:	b08b      	sub	sp, #44	; 0x2c
 80082fe:	4605      	mov	r5, r0
 8008300:	460b      	mov	r3, r1
 8008302:	466e      	mov	r6, sp
 8008304:	f104 0c20 	add.w	ip, r4, #32
 8008308:	6820      	ldr	r0, [r4, #0]
 800830a:	6861      	ldr	r1, [r4, #4]
 800830c:	4637      	mov	r7, r6
 800830e:	c703      	stmia	r7!, {r0, r1}
 8008310:	3408      	adds	r4, #8
 8008312:	4564      	cmp	r4, ip
 8008314:	463e      	mov	r6, r7
 8008316:	d1f7      	bne.n	8008308 <__utoa+0x10>
 8008318:	7921      	ldrb	r1, [r4, #4]
 800831a:	7139      	strb	r1, [r7, #4]
 800831c:	1e91      	subs	r1, r2, #2
 800831e:	6820      	ldr	r0, [r4, #0]
 8008320:	6038      	str	r0, [r7, #0]
 8008322:	2922      	cmp	r1, #34	; 0x22
 8008324:	f04f 0100 	mov.w	r1, #0
 8008328:	d904      	bls.n	8008334 <__utoa+0x3c>
 800832a:	7019      	strb	r1, [r3, #0]
 800832c:	460b      	mov	r3, r1
 800832e:	4618      	mov	r0, r3
 8008330:	b00b      	add	sp, #44	; 0x2c
 8008332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008334:	1e58      	subs	r0, r3, #1
 8008336:	4684      	mov	ip, r0
 8008338:	fbb5 f7f2 	udiv	r7, r5, r2
 800833c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8008340:	fb02 5617 	mls	r6, r2, r7, r5
 8008344:	4476      	add	r6, lr
 8008346:	460c      	mov	r4, r1
 8008348:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800834c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008350:	462e      	mov	r6, r5
 8008352:	42b2      	cmp	r2, r6
 8008354:	f101 0101 	add.w	r1, r1, #1
 8008358:	463d      	mov	r5, r7
 800835a:	d9ed      	bls.n	8008338 <__utoa+0x40>
 800835c:	2200      	movs	r2, #0
 800835e:	545a      	strb	r2, [r3, r1]
 8008360:	1919      	adds	r1, r3, r4
 8008362:	1aa5      	subs	r5, r4, r2
 8008364:	42aa      	cmp	r2, r5
 8008366:	dae2      	bge.n	800832e <__utoa+0x36>
 8008368:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800836c:	780e      	ldrb	r6, [r1, #0]
 800836e:	7006      	strb	r6, [r0, #0]
 8008370:	3201      	adds	r2, #1
 8008372:	f801 5901 	strb.w	r5, [r1], #-1
 8008376:	e7f4      	b.n	8008362 <__utoa+0x6a>
 8008378:	080085f4 	.word	0x080085f4

0800837c <__malloc_lock>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__malloc_lock+0x8>)
 800837e:	f000 b809 	b.w	8008394 <__retarget_lock_acquire_recursive>
 8008382:	bf00      	nop
 8008384:	20001d74 	.word	0x20001d74

08008388 <__malloc_unlock>:
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <__malloc_unlock+0x8>)
 800838a:	f000 b804 	b.w	8008396 <__retarget_lock_release_recursive>
 800838e:	bf00      	nop
 8008390:	20001d74 	.word	0x20001d74

08008394 <__retarget_lock_acquire_recursive>:
 8008394:	4770      	bx	lr

08008396 <__retarget_lock_release_recursive>:
 8008396:	4770      	bx	lr

08008398 <ceil>:
 8008398:	ec51 0b10 	vmov	r0, r1, d0
 800839c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80083a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80083a8:	2e13      	cmp	r6, #19
 80083aa:	ee10 5a10 	vmov	r5, s0
 80083ae:	ee10 8a10 	vmov	r8, s0
 80083b2:	460c      	mov	r4, r1
 80083b4:	dc30      	bgt.n	8008418 <ceil+0x80>
 80083b6:	2e00      	cmp	r6, #0
 80083b8:	da12      	bge.n	80083e0 <ceil+0x48>
 80083ba:	a335      	add	r3, pc, #212	; (adr r3, 8008490 <ceil+0xf8>)
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f7f7 ff10 	bl	80001e4 <__adddf3>
 80083c4:	2200      	movs	r2, #0
 80083c6:	2300      	movs	r3, #0
 80083c8:	f7f8 fb52 	bl	8000a70 <__aeabi_dcmpgt>
 80083cc:	b128      	cbz	r0, 80083da <ceil+0x42>
 80083ce:	2c00      	cmp	r4, #0
 80083d0:	db55      	blt.n	800847e <ceil+0xe6>
 80083d2:	432c      	orrs	r4, r5
 80083d4:	d057      	beq.n	8008486 <ceil+0xee>
 80083d6:	4c30      	ldr	r4, [pc, #192]	; (8008498 <ceil+0x100>)
 80083d8:	2500      	movs	r5, #0
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	e025      	b.n	800842c <ceil+0x94>
 80083e0:	4f2e      	ldr	r7, [pc, #184]	; (800849c <ceil+0x104>)
 80083e2:	4137      	asrs	r7, r6
 80083e4:	ea01 0307 	and.w	r3, r1, r7
 80083e8:	4303      	orrs	r3, r0
 80083ea:	d01f      	beq.n	800842c <ceil+0x94>
 80083ec:	a328      	add	r3, pc, #160	; (adr r3, 8008490 <ceil+0xf8>)
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f7 fef7 	bl	80001e4 <__adddf3>
 80083f6:	2200      	movs	r2, #0
 80083f8:	2300      	movs	r3, #0
 80083fa:	f7f8 fb39 	bl	8000a70 <__aeabi_dcmpgt>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d0eb      	beq.n	80083da <ceil+0x42>
 8008402:	2c00      	cmp	r4, #0
 8008404:	bfc2      	ittt	gt
 8008406:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800840a:	fa43 f606 	asrgt.w	r6, r3, r6
 800840e:	19a4      	addgt	r4, r4, r6
 8008410:	ea24 0407 	bic.w	r4, r4, r7
 8008414:	2500      	movs	r5, #0
 8008416:	e7e0      	b.n	80083da <ceil+0x42>
 8008418:	2e33      	cmp	r6, #51	; 0x33
 800841a:	dd0b      	ble.n	8008434 <ceil+0x9c>
 800841c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008420:	d104      	bne.n	800842c <ceil+0x94>
 8008422:	ee10 2a10 	vmov	r2, s0
 8008426:	460b      	mov	r3, r1
 8008428:	f7f7 fedc 	bl	80001e4 <__adddf3>
 800842c:	ec41 0b10 	vmov	d0, r0, r1
 8008430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008434:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008438:	f04f 33ff 	mov.w	r3, #4294967295
 800843c:	fa23 f707 	lsr.w	r7, r3, r7
 8008440:	4207      	tst	r7, r0
 8008442:	d0f3      	beq.n	800842c <ceil+0x94>
 8008444:	a312      	add	r3, pc, #72	; (adr r3, 8008490 <ceil+0xf8>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f7f7 fecb 	bl	80001e4 <__adddf3>
 800844e:	2200      	movs	r2, #0
 8008450:	2300      	movs	r3, #0
 8008452:	f7f8 fb0d 	bl	8000a70 <__aeabi_dcmpgt>
 8008456:	2800      	cmp	r0, #0
 8008458:	d0bf      	beq.n	80083da <ceil+0x42>
 800845a:	2c00      	cmp	r4, #0
 800845c:	dd02      	ble.n	8008464 <ceil+0xcc>
 800845e:	2e14      	cmp	r6, #20
 8008460:	d103      	bne.n	800846a <ceil+0xd2>
 8008462:	3401      	adds	r4, #1
 8008464:	ea25 0507 	bic.w	r5, r5, r7
 8008468:	e7b7      	b.n	80083da <ceil+0x42>
 800846a:	2301      	movs	r3, #1
 800846c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008470:	fa03 f606 	lsl.w	r6, r3, r6
 8008474:	4435      	add	r5, r6
 8008476:	4545      	cmp	r5, r8
 8008478:	bf38      	it	cc
 800847a:	18e4      	addcc	r4, r4, r3
 800847c:	e7f2      	b.n	8008464 <ceil+0xcc>
 800847e:	2500      	movs	r5, #0
 8008480:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008484:	e7a9      	b.n	80083da <ceil+0x42>
 8008486:	4625      	mov	r5, r4
 8008488:	e7a7      	b.n	80083da <ceil+0x42>
 800848a:	bf00      	nop
 800848c:	f3af 8000 	nop.w
 8008490:	8800759c 	.word	0x8800759c
 8008494:	7e37e43c 	.word	0x7e37e43c
 8008498:	3ff00000 	.word	0x3ff00000
 800849c:	000fffff 	.word	0x000fffff

080084a0 <_init>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	bf00      	nop
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr

080084ac <_fini>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr
